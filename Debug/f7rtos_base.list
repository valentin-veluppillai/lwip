
f7rtos_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db84  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001da0  0800dd84  0800dd84  0001dd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fb24  0800fb24  0001fb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fb2c  0800fb2c  0001fb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fb30  0800fb30  0001fb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  0800fb34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a88c  2000007c  0800fbb0  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000a908  0800fbb0  0002a908  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004eda5  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000877f  00000000  00000000  0006ee4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00019787  00000000  00000000  000775ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001e68  00000000  00000000  00090d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002288  00000000  00000000  00092bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000147c4  00000000  00000000  00094e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00118392  00000000  00000000  000a960c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000f7  00000000  00000000  001c199e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006020  00000000  00000000  001c1a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0002a0df  00000000  00000000  001c7ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000009c  00000000  00000000  001f1b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014d  00000000  00000000  001f1c34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800dd6c 	.word	0x0800dd6c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	0800dd6c 	.word	0x0800dd6c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000612:	2003      	movs	r0, #3
 8000614:	f000 f82e 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000618:	2000      	movs	r0, #0
 800061a:	f00b ffc3 	bl	800c5a4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800061e:	f00b ff63 	bl	800c4e8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000622:	2000      	movs	r0, #0
 8000624:	bd08      	pop	{r3, pc}
	...

08000628 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <HAL_IncTick+0x10>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <HAL_IncTick+0x14>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	440b      	add	r3, r1
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20003f98 	.word	0x20003f98
 800063c:	20000000 	.word	0x20000000

08000640 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <HAL_GetTick+0x8>)
 8000642:	6818      	ldr	r0, [r3, #0]
}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20003f98 	.word	0x20003f98

0800064c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800064c:	b538      	push	{r3, r4, r5, lr}
 800064e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000650:	f7ff fff6 	bl	8000640 <HAL_GetTick>
 8000654:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000656:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800065a:	d002      	beq.n	8000662 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <HAL_Delay+0x24>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000662:	f7ff ffed 	bl	8000640 <HAL_GetTick>
 8000666:	1b40      	subs	r0, r0, r5
 8000668:	4284      	cmp	r4, r0
 800066a:	d8fa      	bhi.n	8000662 <HAL_Delay+0x16>
  {
  }
}
 800066c:	bd38      	pop	{r3, r4, r5, pc}
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000

08000674 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4906      	ldr	r1, [pc, #24]	; (8000690 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000676:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000678:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800067c:	041b      	lsls	r3, r3, #16
 800067e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000680:	0200      	lsls	r0, r0, #8
 8000682:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000686:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000688:	4a02      	ldr	r2, [pc, #8]	; (8000694 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800068a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800068c:	60ca      	str	r2, [r1, #12]
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00
 8000694:	05fa0000 	.word	0x05fa0000

08000698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000698:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_NVIC_SetPriority+0x54>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a2:	f1c3 0407 	rsb	r4, r3, #7
 80006a6:	2c04      	cmp	r4, #4
 80006a8:	bf28      	it	cs
 80006aa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ac:	1d1d      	adds	r5, r3, #4
 80006ae:	2d06      	cmp	r5, #6
 80006b0:	d913      	bls.n	80006da <HAL_NVIC_SetPriority+0x42>
 80006b2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	2501      	movs	r5, #1
 80006b6:	fa05 f404 	lsl.w	r4, r5, r4
 80006ba:	3c01      	subs	r4, #1
 80006bc:	4021      	ands	r1, r4
 80006be:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	fa05 f303 	lsl.w	r3, r5, r3
 80006c4:	3b01      	subs	r3, #1
 80006c6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80006ca:	2800      	cmp	r0, #0
 80006cc:	db07      	blt.n	80006de <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	0109      	lsls	r1, r1, #4
 80006d0:	b2c9      	uxtb	r1, r1
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <HAL_NVIC_SetPriority+0x58>)
 80006d4:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006d6:	bc30      	pop	{r4, r5}
 80006d8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	2300      	movs	r3, #0
 80006dc:	e7ea      	b.n	80006b4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	f000 000f 	and.w	r0, r0, #15
 80006e2:	0109      	lsls	r1, r1, #4
 80006e4:	b2c9      	uxtb	r1, r1
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_NVIC_SetPriority+0x5c>)
 80006e8:	5419      	strb	r1, [r3, r0]
 80006ea:	e7f4      	b.n	80006d6 <HAL_NVIC_SetPriority+0x3e>
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000e400 	.word	0xe000e400
 80006f4:	e000ed14 	.word	0xe000ed14

080006f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006f8:	0942      	lsrs	r2, r0, #5
 80006fa:	f000 001f 	and.w	r0, r0, #31
 80006fe:	2301      	movs	r3, #1
 8000700:	fa03 f000 	lsl.w	r0, r3, r0
 8000704:	4b01      	ldr	r3, [pc, #4]	; (800070c <HAL_NVIC_EnableIRQ+0x14>)
 8000706:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100

08000710 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000710:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b02      	cmp	r3, #2
 8000718:	d003      	beq.n	8000722 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800071e:	2001      	movs	r0, #1
 8000720:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000722:	2305      	movs	r3, #5
 8000724:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000728:	6802      	ldr	r2, [r0, #0]
 800072a:	6813      	ldr	r3, [r2, #0]
 800072c:	f023 0301 	bic.w	r3, r3, #1
 8000730:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000732:	2000      	movs	r0, #0
}
 8000734:	4770      	bx	lr
	...

08000738 <ETH_MACAddressConfig>:
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000738:	7950      	ldrb	r0, [r2, #5]
 800073a:	7913      	ldrb	r3, [r2, #4]
 800073c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <ETH_MACAddressConfig+0x28>)
 8000742:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000744:	78d0      	ldrb	r0, [r2, #3]
 8000746:	7893      	ldrb	r3, [r2, #2]
 8000748:	041b      	lsls	r3, r3, #16
 800074a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800074e:	7850      	ldrb	r0, [r2, #1]
 8000750:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8000758:	4a02      	ldr	r2, [pc, #8]	; (8000764 <ETH_MACAddressConfig+0x2c>)
 800075a:	508b      	str	r3, [r1, r2]
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40028040 	.word	0x40028040
 8000764:	40028044 	.word	0x40028044

08000768 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000768:	6801      	ldr	r1, [r0, #0]
 800076a:	f241 0218 	movw	r2, #4120	; 0x1018
 800076e:	588b      	ldr	r3, [r1, r2]
 8000770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000774:	508b      	str	r3, [r1, r2]
 8000776:	4770      	bx	lr

08000778 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000778:	6801      	ldr	r1, [r0, #0]
 800077a:	f241 0218 	movw	r2, #4120	; 0x1018
 800077e:	588b      	ldr	r3, [r1, r2]
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	508b      	str	r3, [r1, r2]
 8000786:	4770      	bx	lr

08000788 <ETH_MACDMAConfig>:
{
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	b09e      	sub	sp, #120	; 0x78
 800078c:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800078e:	b129      	cbz	r1, 800079c <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000790:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000794:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000796:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800079a:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800079c:	69e3      	ldr	r3, [r4, #28]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d168      	bne.n	8000874 <ETH_MACDMAConfig+0xec>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80007a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a6:	9307      	str	r3, [sp, #28]
  tmpreg = (heth->Instance)->MACCR;
 80007a8:	6821      	ldr	r1, [r4, #0]
 80007aa:	680b      	ldr	r3, [r1, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80007ac:	4a37      	ldr	r2, [pc, #220]	; (800088c <ETH_MACDMAConfig+0x104>)
 80007ae:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 80007b0:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 80007b2:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 80007b4:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 80007b6:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 80007b8:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 80007ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80007be:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80007c0:	600b      	str	r3, [r1, #0]
  tmpreg = (heth->Instance)->MACCR;
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff ff40 	bl	800064c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	2240      	movs	r2, #64	; 0x40
 80007d4:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff ff36 	bl	800064c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	2500      	movs	r5, #0
 80007e8:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007ea:	6823      	ldr	r3, [r4, #0]
 80007ec:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 80007ee:	6822      	ldr	r2, [r4, #0]
 80007f0:	6993      	ldr	r3, [r2, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80007f2:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80007f6:	041b      	lsls	r3, r3, #16
 80007f8:	0c1b      	lsrs	r3, r3, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80007fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80007fe:	6193      	str	r3, [r2, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff ff21 	bl	800064c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800080a:	6823      	ldr	r3, [r4, #0]
 800080c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8000812:	6823      	ldr	r3, [r4, #0]
 8000814:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ff18 	bl	800064c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8000820:	6821      	ldr	r1, [r4, #0]
 8000822:	f241 0518 	movw	r5, #4120	; 0x1018
 8000826:	594b      	ldr	r3, [r1, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000828:	4a19      	ldr	r2, [pc, #100]	; (8000890 <ETH_MACDMAConfig+0x108>)
 800082a:	401a      	ands	r2, r3
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <ETH_MACDMAConfig+0x10c>)
 800082e:	4313      	orrs	r3, r2
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8000830:	514b      	str	r3, [r1, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff ff08 	bl	800064c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <ETH_MACDMAConfig+0x110>)
 8000848:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000850:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff fefa 	bl	800064c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000860:	69a3      	ldr	r3, [r4, #24]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d009      	beq.n	800087a <ETH_MACDMAConfig+0xf2>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000866:	6962      	ldr	r2, [r4, #20]
 8000868:	2100      	movs	r1, #0
 800086a:	4620      	mov	r0, r4
 800086c:	f7ff ff64 	bl	8000738 <ETH_MACAddressConfig>
}
 8000870:	b01e      	add	sp, #120	; 0x78
 8000872:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	9307      	str	r3, [sp, #28]
 8000878:	e796      	b.n	80007a8 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800087a:	6821      	ldr	r1, [r4, #0]
 800087c:	f241 021c 	movw	r2, #4124	; 0x101c
 8000880:	5888      	ldr	r0, [r1, r2]
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <ETH_MACDMAConfig+0x114>)
 8000884:	4303      	orrs	r3, r0
 8000886:	508b      	str	r3, [r1, r2]
 8000888:	e7ed      	b.n	8000866 <ETH_MACDMAConfig+0xde>
 800088a:	bf00      	nop
 800088c:	ff20810f 	.word	0xff20810f
 8000890:	f8de3f23 	.word	0xf8de3f23
 8000894:	02200004 	.word	0x02200004
 8000898:	02c12080 	.word	0x02c12080
 800089c:	00010040 	.word	0x00010040

080008a0 <ETH_MACTransmissionEnable>:
{ 
 80008a0:	b510      	push	{r4, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80008aa:	6802      	ldr	r2, [r0, #0]
 80008ac:	6813      	ldr	r3, [r2, #0]
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80008b4:	6803      	ldr	r3, [r0, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fec6 	bl	800064c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	9a01      	ldr	r2, [sp, #4]
 80008c4:	601a      	str	r2, [r3, #0]
}
 80008c6:	b002      	add	sp, #8
 80008c8:	bd10      	pop	{r4, pc}

080008ca <ETH_MACReceptionEnable>:
{ 
 80008ca:	b510      	push	{r4, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80008d4:	6802      	ldr	r2, [r0, #0]
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80008de:	6803      	ldr	r3, [r0, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff feb1 	bl	800064c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	9a01      	ldr	r2, [sp, #4]
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	b002      	add	sp, #8
 80008f2:	bd10      	pop	{r4, pc}

080008f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80008f4:	b530      	push	{r4, r5, lr}
 80008f6:	b083      	sub	sp, #12
 80008f8:	4605      	mov	r5, r0
  __IO uint32_t tmpreg = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	9301      	str	r3, [sp, #4]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80008fe:	6802      	ldr	r2, [r0, #0]
 8000900:	f241 0418 	movw	r4, #4120	; 0x1018
 8000904:	5913      	ldr	r3, [r2, r4]
 8000906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800090a:	5113      	str	r3, [r2, r4]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800090c:	6803      	ldr	r3, [r0, #0]
 800090e:	591b      	ldr	r3, [r3, r4]
 8000910:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000912:	2001      	movs	r0, #1
 8000914:	f7ff fe9a 	bl	800064c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8000918:	682b      	ldr	r3, [r5, #0]
 800091a:	9a01      	ldr	r2, [sp, #4]
 800091c:	511a      	str	r2, [r3, r4]
}
 800091e:	b003      	add	sp, #12
 8000920:	bd30      	pop	{r4, r5, pc}

08000922 <HAL_ETH_DMATxDescListInit>:
{
 8000922:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8000924:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000928:	2c01      	cmp	r4, #1
 800092a:	d031      	beq.n	8000990 <HAL_ETH_DMATxDescListInit+0x6e>
 800092c:	2401      	movs	r4, #1
 800092e:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000932:	2402      	movs	r4, #2
 8000934:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000938:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 800093a:	2400      	movs	r4, #0
 800093c:	e001      	b.n	8000942 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800093e:	60f9      	str	r1, [r7, #12]
  for(i=0; i < TxBuffCount; i++)
 8000940:	3401      	adds	r4, #1
 8000942:	429c      	cmp	r4, r3
 8000944:	d217      	bcs.n	8000976 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8000946:	0165      	lsls	r5, r4, #5
 8000948:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800094a:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 800094e:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000950:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8000954:	fb06 2604 	mla	r6, r6, r4, r2
 8000958:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800095a:	69c6      	ldr	r6, [r0, #28]
 800095c:	b91e      	cbnz	r6, 8000966 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800095e:	594e      	ldr	r6, [r1, r5]
 8000960:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000964:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1))
 8000966:	1e5d      	subs	r5, r3, #1
 8000968:	42ac      	cmp	r4, r5
 800096a:	d2e8      	bcs.n	800093e <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800096c:	1c65      	adds	r5, r4, #1
 800096e:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8000972:	60fd      	str	r5, [r7, #12]
 8000974:	e7e4      	b.n	8000940 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000976:	6802      	ldr	r2, [r0, #0]
 8000978:	f241 0310 	movw	r3, #4112	; 0x1010
 800097c:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800097e:	2301      	movs	r3, #1
 8000980:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000984:	2300      	movs	r3, #0
 8000986:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800098a:	4618      	mov	r0, r3
}
 800098c:	bcf0      	pop	{r4, r5, r6, r7}
 800098e:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000990:	2002      	movs	r0, #2
 8000992:	e7fb      	b.n	800098c <HAL_ETH_DMATxDescListInit+0x6a>

08000994 <HAL_ETH_DMARxDescListInit>:
{
 8000994:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8000996:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800099a:	2c01      	cmp	r4, #1
 800099c:	d02e      	beq.n	80009fc <HAL_ETH_DMARxDescListInit+0x68>
 800099e:	2401      	movs	r4, #1
 80009a0:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80009a4:	2402      	movs	r4, #2
 80009a6:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80009aa:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80009ac:	2400      	movs	r4, #0
 80009ae:	e001      	b.n	80009b4 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80009b0:	60e9      	str	r1, [r5, #12]
  for(i=0; i < RxBuffCount; i++)
 80009b2:	3401      	adds	r4, #1
 80009b4:	429c      	cmp	r4, r3
 80009b6:	d214      	bcs.n	80009e2 <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 80009b8:	0166      	lsls	r6, r4, #5
 80009ba:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80009bc:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80009c0:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80009c2:	f244 56f4 	movw	r6, #17908	; 0x45f4
 80009c6:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80009c8:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80009cc:	fb06 2604 	mla	r6, r6, r4, r2
 80009d0:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1))
 80009d2:	1e5e      	subs	r6, r3, #1
 80009d4:	42b4      	cmp	r4, r6
 80009d6:	d2eb      	bcs.n	80009b0 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80009d8:	1c66      	adds	r6, r4, #1
 80009da:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 80009de:	60ee      	str	r6, [r5, #12]
 80009e0:	e7e7      	b.n	80009b2 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80009e2:	6802      	ldr	r2, [r0, #0]
 80009e4:	f241 030c 	movw	r3, #4108	; 0x100c
 80009e8:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009f0:	2300      	movs	r3, #0
 80009f2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80009f6:	4618      	mov	r0, r3
}
 80009f8:	bcf0      	pop	{r4, r5, r6, r7}
 80009fa:	4770      	bx	lr
  __HAL_LOCK(heth);
 80009fc:	2002      	movs	r0, #2
 80009fe:	e7fb      	b.n	80009f8 <HAL_ETH_DMARxDescListInit+0x64>

08000a00 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000a00:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	f000 8087 	beq.w	8000b18 <HAL_ETH_TransmitFrame+0x118>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a10:	2302      	movs	r3, #2
 8000a12:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 8000a16:	b199      	cbz	r1, 8000a40 <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000a18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	db17      	blt.n	8000a50 <HAL_ETH_TransmitFrame+0x50>
{
 8000a20:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000a22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a26:	4291      	cmp	r1, r2
 8000a28:	d91a      	bls.n	8000a60 <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000a2a:	4c3c      	ldr	r4, [pc, #240]	; (8000b1c <HAL_ETH_TransmitFrame+0x11c>)
 8000a2c:	fba4 2401 	umull	r2, r4, r4, r1
 8000a30:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000a32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a36:	fb02 1214 	mls	r2, r2, r4, r1
 8000a3a:	b192      	cbz	r2, 8000a62 <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8000a3c:	3401      	adds	r4, #1
 8000a3e:	e010      	b.n	8000a62 <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 8000a40:	2301      	movs	r3, #1
 8000a42:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000a50:	2312      	movs	r3, #18
 8000a52:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a56:	2300      	movs	r3, #0
 8000a58:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	4770      	bx	lr
    bufcount = 1;
 8000a60:	2401      	movs	r4, #1
  if (bufcount == 1)
 8000a62:	2c01      	cmp	r4, #1
 8000a64:	d001      	beq.n	8000a6a <HAL_ETH_TransmitFrame+0x6a>
 8000a66:	2300      	movs	r3, #0
 8000a68:	e037      	b.n	8000ada <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000a70:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a74:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8000a78:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a7a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a7c:	6813      	ldr	r3, [r2, #0]
 8000a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a82:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a8a:	6803      	ldr	r3, [r0, #0]
 8000a8c:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a90:	589a      	ldr	r2, [r3, r2]
 8000a92:	f012 0f04 	tst.w	r2, #4
 8000a96:	d008      	beq.n	8000aaa <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000a98:	2104      	movs	r1, #4
 8000a9a:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a9e:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8000aa0:	6802      	ldr	r2, [r0, #0]
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f241 0304 	movw	r3, #4100	; 0x1004
 8000aa8:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000ab6:	4618      	mov	r0, r3
}
 8000ab8:	bc30      	pop	{r4, r5}
 8000aba:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000abc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000abe:	682a      	ldr	r2, [r5, #0]
 8000ac0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ac4:	602a      	str	r2, [r5, #0]
 8000ac6:	e011      	b.n	8000aec <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000ac8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000aca:	682a      	ldr	r2, [r5, #0]
 8000acc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ad0:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000ad2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000ad4:	68d2      	ldr	r2, [r2, #12]
 8000ad6:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8000ad8:	3301      	adds	r3, #1
 8000ada:	429c      	cmp	r4, r3
 8000adc:	d9d5      	bls.n	8000a8a <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000ade:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000ae0:	682a      	ldr	r2, [r5, #0]
 8000ae2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ae6:	602a      	str	r2, [r5, #0]
      if (i == 0) 
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0e7      	beq.n	8000abc <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000aec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000aee:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8000af2:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1))
 8000af4:	1e62      	subs	r2, r4, #1
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d1e6      	bne.n	8000ac8 <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000afa:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000afc:	682a      	ldr	r2, [r5, #0]
 8000afe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000b02:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_ETH_TransmitFrame+0x120>)
 8000b06:	fb02 1204 	mla	r2, r2, r4, r1
 8000b0a:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000b0e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000b10:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000b14:	606a      	str	r2, [r5, #4]
 8000b16:	e7d7      	b.n	8000ac8 <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	4770      	bx	lr
 8000b1c:	ac02b00b 	.word	0xac02b00b
 8000b20:	fffffa0c 	.word	0xfffffa0c

08000b24 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000b24:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d045      	beq.n	8000bb8 <HAL_ETH_GetReceivedFrame_IT+0x94>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000b32:	2302      	movs	r3, #2
 8000b34:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0;
 8000b38:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000b3a:	e00a      	b.n	8000b52 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000b3c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8000b3e:	2201      	movs	r2, #1
 8000b40:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	6283      	str	r3, [r0, #40]	; 0x28
 8000b46:	e004      	b.n	8000b52 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8000b48:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b4a:	3201      	adds	r2, #1
 8000b4c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000b52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	db26      	blt.n	8000ba8 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8000b5a:	2903      	cmp	r1, #3
 8000b5c:	d824      	bhi.n	8000ba8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8000b5e:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000b66:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000b6a:	d0e7      	beq.n	8000b3c <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000b72:	d0e9      	beq.n	8000b48 <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000b74:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8000b76:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b78:	3201      	adds	r2, #1
 8000b7a:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 8000b7c:	2a01      	cmp	r2, #1
 8000b7e:	d011      	beq.n	8000ba4 <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8000b86:	3a04      	subs	r2, #4
 8000b88:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000b8a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000b8c:	6892      	ldr	r2, [r2, #8]
 8000b8e:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000ba4:	6303      	str	r3, [r0, #48]	; 0x30
 8000ba6:	e7eb      	b.n	8000b80 <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000bb8:	2002      	movs	r0, #2
}
 8000bba:	4770      	bx	lr

08000bbc <HAL_ETH_TxCpltCallback>:
{
 8000bbc:	4770      	bx	lr

08000bbe <HAL_ETH_ErrorCallback>:
{
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_ETH_IRQHandler>:
{
 8000bc0:	b510      	push	{r4, lr}
 8000bc2:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000bc4:	6803      	ldr	r3, [r0, #0]
 8000bc6:	f241 0214 	movw	r2, #4116	; 0x1014
 8000bca:	589a      	ldr	r2, [r3, r2]
 8000bcc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000bd0:	d111      	bne.n	8000bf6 <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000bd2:	f241 0214 	movw	r2, #4116	; 0x1014
 8000bd6:	589b      	ldr	r3, [r3, r2]
 8000bd8:	f013 0f01 	tst.w	r3, #1
 8000bdc:	d119      	bne.n	8000c12 <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000bde:	6822      	ldr	r2, [r4, #0]
 8000be0:	f241 0314 	movw	r3, #4116	; 0x1014
 8000be4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000be8:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	58d3      	ldr	r3, [r2, r3]
 8000bee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000bf2:	d11b      	bne.n	8000c2c <HAL_ETH_IRQHandler+0x6c>
 8000bf4:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8000bf6:	f00b fa51 	bl	800c09c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000bfa:	6822      	ldr	r2, [r4, #0]
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	f241 0314 	movw	r3, #4116	; 0x1014
 8000c02:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c10:	e7e5      	b.n	8000bde <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8000c12:	f7ff ffd3 	bl	8000bbc <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000c16:	6821      	ldr	r1, [r4, #0]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f241 0214 	movw	r2, #4116	; 0x1014
 8000c1e:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8000c20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000c24:	2300      	movs	r3, #0
 8000c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c2a:	e7d8      	b.n	8000bde <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f7ff ffc6 	bl	8000bbe <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000c32:	6822      	ldr	r2, [r4, #0]
 8000c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c38:	f241 0314 	movw	r3, #4116	; 0x1014
 8000c3c:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000c44:	2300      	movs	r3, #0
 8000c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c4a:	e7d3      	b.n	8000bf4 <HAL_ETH_IRQHandler+0x34>

08000c4c <HAL_ETH_ReadPHYRegister>:
{
 8000c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000c4e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b82      	cmp	r3, #130	; 0x82
 8000c56:	d101      	bne.n	8000c5c <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000c58:	2002      	movs	r0, #2
}
 8000c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c5c:	4616      	mov	r6, r2
 8000c5e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000c60:	2382      	movs	r3, #130	; 0x82
 8000c62:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000c66:	6802      	ldr	r2, [r0, #0]
 8000c68:	6914      	ldr	r4, [r2, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000c6a:	f004 041c 	and.w	r4, r4, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000c6e:	8a03      	ldrh	r3, [r0, #16]
 8000c70:	02db      	lsls	r3, r3, #11
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	431c      	orrs	r4, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000c76:	0189      	lsls	r1, r1, #6
 8000c78:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000c7c:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000c7e:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000c82:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000c84:	f7ff fcdc 	bl	8000640 <HAL_GetTick>
 8000c88:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c8a:	f014 0f01 	tst.w	r4, #1
 8000c8e:	d010      	beq.n	8000cb2 <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000c90:	f7ff fcd6 	bl	8000640 <HAL_GetTick>
 8000c94:	1bc0      	subs	r0, r0, r7
 8000c96:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c9a:	d202      	bcs.n	8000ca2 <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg = heth->Instance->MACMIIAR;
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	691c      	ldr	r4, [r3, #16]
 8000ca0:	e7f3      	b.n	8000c8a <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000cae:	2003      	movs	r0, #3
 8000cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000cb2:	682b      	ldr	r3, [r5, #0]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000cc4 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000cc4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b42      	cmp	r3, #66	; 0x42
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8000cce:	2002      	movs	r0, #2
 8000cd0:	4770      	bx	lr
{
 8000cd2:	b570      	push	{r4, r5, r6, lr}
 8000cd4:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000cd6:	2342      	movs	r3, #66	; 0x42
 8000cd8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000cdc:	6800      	ldr	r0, [r0, #0]
 8000cde:	6904      	ldr	r4, [r0, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000ce0:	f004 041c 	and.w	r4, r4, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000ce4:	8a2b      	ldrh	r3, [r5, #16]
 8000ce6:	02db      	lsls	r3, r3, #11
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	431c      	orrs	r4, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000cec:	0189      	lsls	r1, r1, #6
 8000cee:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000cf2:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000cf4:	f044 0403 	orr.w	r4, r4, #3
 8000cf8:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000cfa:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg;
 8000cfc:	682b      	ldr	r3, [r5, #0]
 8000cfe:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000d00:	f7ff fc9e 	bl	8000640 <HAL_GetTick>
 8000d04:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d06:	f014 0f01 	tst.w	r4, #1
 8000d0a:	d010      	beq.n	8000d2e <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000d0c:	f7ff fc98 	bl	8000640 <HAL_GetTick>
 8000d10:	1b80      	subs	r0, r0, r6
 8000d12:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000d16:	d202      	bcs.n	8000d1e <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg = heth->Instance->MACMIIAR;
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	691c      	ldr	r4, [r3, #16]
 8000d1c:	e7f3      	b.n	8000d06 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000d24:	2300      	movs	r3, #0
 8000d26:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000d34:	2000      	movs	r0, #0
 8000d36:	bd70      	pop	{r4, r5, r6, pc}

08000d38 <HAL_ETH_Init>:
{
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	b082      	sub	sp, #8
  uint32_t tempreg = 0, phyreg = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000d40:	2800      	cmp	r0, #0
 8000d42:	f000 810c 	beq.w	8000f5e <HAL_ETH_Init+0x226>
 8000d46:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000d48:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d032      	beq.n	8000db6 <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d50:	4b84      	ldr	r3, [pc, #528]	; (8000f64 <HAL_ETH_Init+0x22c>)
 8000d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d58:	645a      	str	r2, [r3, #68]	; 0x44
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000d64:	4b80      	ldr	r3, [pc, #512]	; (8000f68 <HAL_ETH_Init+0x230>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000d6c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	6a21      	ldr	r1, [r4, #32]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000d84:	f7ff fc5c 	bl	8000640 <HAL_GetTick>
 8000d88:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000d90:	6812      	ldr	r2, [r2, #0]
 8000d92:	f012 0f01 	tst.w	r2, #1
 8000d96:	d013      	beq.n	8000dc0 <HAL_ETH_Init+0x88>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000d98:	f7ff fc52 	bl	8000640 <HAL_GetTick>
 8000d9c:	1b40      	subs	r0, r0, r5
 8000d9e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000da2:	d9f2      	bls.n	8000d8a <HAL_ETH_Init+0x52>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000da4:	2503      	movs	r5, #3
 8000da6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000daa:	2300      	movs	r3, #0
 8000dac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000db0:	4628      	mov	r0, r5
 8000db2:	b002      	add	sp, #8
 8000db4:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8000db6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000dba:	f00b f909 	bl	800bfd0 <HAL_ETH_MspInit>
 8000dbe:	e7c7      	b.n	8000d50 <HAL_ETH_Init+0x18>
  tempreg = (heth->Instance)->MACMIIAR;
 8000dc0:	691d      	ldr	r5, [r3, #16]
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000dc2:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8000dc6:	f000 fd5d 	bl	8001884 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000dca:	4b68      	ldr	r3, [pc, #416]	; (8000f6c <HAL_ETH_Init+0x234>)
 8000dcc:	4403      	add	r3, r0
 8000dce:	4a68      	ldr	r2, [pc, #416]	; (8000f70 <HAL_ETH_Init+0x238>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d855      	bhi.n	8000e80 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000dd4:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000ddc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de0:	2100      	movs	r1, #0
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff ff6e 	bl	8000cc4 <HAL_ETH_WritePHYRegister>
 8000de8:	4605      	mov	r5, r0
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d160      	bne.n	8000eb0 <HAL_ETH_Init+0x178>
  HAL_Delay(PHY_RESET_DELAY);
 8000dee:	20ff      	movs	r0, #255	; 0xff
 8000df0:	f7ff fc2c 	bl	800064c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000df4:	6863      	ldr	r3, [r4, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8091 	beq.w	8000f1e <HAL_ETH_Init+0x1e6>
    tickstart = HAL_GetTick();
 8000dfc:	f7ff fc20 	bl	8000640 <HAL_GetTick>
 8000e00:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e02:	aa01      	add	r2, sp, #4
 8000e04:	2101      	movs	r1, #1
 8000e06:	4620      	mov	r0, r4
 8000e08:	f7ff ff20 	bl	8000c4c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000e0c:	f7ff fc18 	bl	8000640 <HAL_GetTick>
 8000e10:	1b80      	subs	r0, r0, r6
 8000e12:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e16:	4298      	cmp	r0, r3
 8000e18:	d852      	bhi.n	8000ec0 <HAL_ETH_Init+0x188>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000e1a:	9b01      	ldr	r3, [sp, #4]
 8000e1c:	f013 0f04 	tst.w	r3, #4
 8000e20:	d0ef      	beq.n	8000e02 <HAL_ETH_Init+0xca>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e26:	2100      	movs	r1, #0
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f7ff ff4b 	bl	8000cc4 <HAL_ETH_WritePHYRegister>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d152      	bne.n	8000ed8 <HAL_ETH_Init+0x1a0>
    tickstart = HAL_GetTick();
 8000e32:	f7ff fc05 	bl	8000640 <HAL_GetTick>
 8000e36:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e38:	aa01      	add	r2, sp, #4
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff ff05 	bl	8000c4c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000e42:	f7ff fbfd 	bl	8000640 <HAL_GetTick>
 8000e46:	1b80      	subs	r0, r0, r6
 8000e48:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	d84b      	bhi.n	8000ee8 <HAL_ETH_Init+0x1b0>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000e50:	9b01      	ldr	r3, [sp, #4]
 8000e52:	f013 0f20 	tst.w	r3, #32
 8000e56:	d0ef      	beq.n	8000e38 <HAL_ETH_Init+0x100>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000e58:	aa01      	add	r2, sp, #4
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f7ff fef5 	bl	8000c4c <HAL_ETH_ReadPHYRegister>
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d14c      	bne.n	8000f00 <HAL_ETH_Init+0x1c8>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000e66:	9b01      	ldr	r3, [sp, #4]
 8000e68:	f013 0f04 	tst.w	r3, #4
 8000e6c:	d050      	beq.n	8000f10 <HAL_ETH_Init+0x1d8>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e72:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000e74:	f013 0f02 	tst.w	r3, #2
 8000e78:	d04d      	beq.n	8000f16 <HAL_ETH_Init+0x1de>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60a3      	str	r3, [r4, #8]
 8000e7e:	e05e      	b.n	8000f3e <HAL_ETH_Init+0x206>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000e80:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <HAL_ETH_Init+0x23c>)
 8000e82:	4403      	add	r3, r0
 8000e84:	4a3c      	ldr	r2, [pc, #240]	; (8000f78 <HAL_ETH_Init+0x240>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d802      	bhi.n	8000e90 <HAL_ETH_Init+0x158>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000e8a:	f045 050c 	orr.w	r5, r5, #12
 8000e8e:	e7a3      	b.n	8000dd8 <HAL_ETH_Init+0xa0>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000e90:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <HAL_ETH_Init+0x244>)
 8000e92:	4403      	add	r3, r0
 8000e94:	4a3a      	ldr	r2, [pc, #232]	; (8000f80 <HAL_ETH_Init+0x248>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d99e      	bls.n	8000dd8 <HAL_ETH_Init+0xa0>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000e9a:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <HAL_ETH_Init+0x24c>)
 8000e9c:	4403      	add	r3, r0
 8000e9e:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <HAL_ETH_Init+0x250>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d802      	bhi.n	8000eaa <HAL_ETH_Init+0x172>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000ea4:	f045 0504 	orr.w	r5, r5, #4
 8000ea8:	e796      	b.n	8000dd8 <HAL_ETH_Init+0xa0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000eaa:	f045 0510 	orr.w	r5, r5, #16
 8000eae:	e793      	b.n	8000dd8 <HAL_ETH_Init+0xa0>
    ETH_MACDMAConfig(heth, err);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff fc68 	bl	8000788 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8000eb8:	2501      	movs	r5, #1
 8000eba:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000ebe:	e777      	b.n	8000db0 <HAL_ETH_Init+0x78>
        ETH_MACDMAConfig(heth, err);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff fc60 	bl	8000788 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000ed4:	2503      	movs	r5, #3
 8000ed6:	e76b      	b.n	8000db0 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4620      	mov	r0, r4
 8000edc:	f7ff fc54 	bl	8000788 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000ee0:	2501      	movs	r5, #1
 8000ee2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000ee6:	e763      	b.n	8000db0 <HAL_ETH_Init+0x78>
        ETH_MACDMAConfig(heth, err);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff fc4c 	bl	8000788 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000efc:	2503      	movs	r5, #3
 8000efe:	e757      	b.n	8000db0 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 8000f00:	2101      	movs	r1, #1
 8000f02:	4620      	mov	r0, r4
 8000f04:	f7ff fc40 	bl	8000788 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000f08:	2501      	movs	r5, #1
 8000f0a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000f0e:	e74f      	b.n	8000db0 <HAL_ETH_Init+0x78>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000f10:	2200      	movs	r2, #0
 8000f12:	60e2      	str	r2, [r4, #12]
 8000f14:	e7ae      	b.n	8000e74 <HAL_ETH_Init+0x13c>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f1a:	60a3      	str	r3, [r4, #8]
 8000f1c:	e00f      	b.n	8000f3e <HAL_ETH_Init+0x206>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000f1e:	68e3      	ldr	r3, [r4, #12]
 8000f20:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000f24:	68a3      	ldr	r3, [r4, #8]
 8000f26:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f7ff fec8 	bl	8000cc4 <HAL_ETH_WritePHYRegister>
 8000f34:	b958      	cbnz	r0, 8000f4e <HAL_ETH_Init+0x216>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000f36:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f3a:	f7ff fb87 	bl	800064c <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4620      	mov	r0, r4
 8000f42:	f7ff fc21 	bl	8000788 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000f4c:	e730      	b.n	8000db0 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4620      	mov	r0, r4
 8000f52:	f7ff fc19 	bl	8000788 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000f56:	2501      	movs	r5, #1
 8000f58:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000f5c:	e728      	b.n	8000db0 <HAL_ETH_Init+0x78>
    return HAL_ERROR;
 8000f5e:	2501      	movs	r5, #1
 8000f60:	e726      	b.n	8000db0 <HAL_ETH_Init+0x78>
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	feced300 	.word	0xfeced300
 8000f70:	00e4e1bf 	.word	0x00e4e1bf
 8000f74:	fde9f140 	.word	0xfde9f140
 8000f78:	017d783f 	.word	0x017d783f
 8000f7c:	fc6c7900 	.word	0xfc6c7900
 8000f80:	026259ff 	.word	0x026259ff
 8000f84:	fa0a1f00 	.word	0xfa0a1f00
 8000f88:	02faf07f 	.word	0x02faf07f

08000f8c <HAL_ETH_Start>:
{  
 8000f8c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8000f8e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <HAL_ETH_Start+0xe>
 8000f96:	2002      	movs	r0, #2
}
 8000f98:	bd38      	pop	{r3, r4, r5, pc}
 8000f9a:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8000f9c:	2501      	movs	r5, #1
 8000f9e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8000fa8:	f7ff fc7a 	bl	80008a0 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff fc8c 	bl	80008ca <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f7ff fc9e 	bl	80008f4 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f7ff fbd5 	bl	8000768 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f7ff fbda 	bl	8000778 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8000fc4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8000fce:	bd38      	pop	{r3, r4, r5, pc}

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fd4:	2400      	movs	r4, #0
 8000fd6:	e037      	b.n	8001048 <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fd8:	2609      	movs	r6, #9
 8000fda:	e000      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8000fdc:	2600      	movs	r6, #0
 8000fde:	fa06 f60e 	lsl.w	r6, r6, lr
 8000fe2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	4e6c      	ldr	r6, [pc, #432]	; (8001198 <HAL_GPIO_Init+0x1c8>)
 8000fe8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fec:	4b6b      	ldr	r3, [pc, #428]	; (800119c <HAL_GPIO_Init+0x1cc>)
 8000fee:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	43eb      	mvns	r3, r5
 8000ff2:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff6:	684f      	ldr	r7, [r1, #4]
 8000ff8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000ffc:	d001      	beq.n	8001002 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8000ffe:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8001002:	4a66      	ldr	r2, [pc, #408]	; (800119c <HAL_GPIO_Init+0x1cc>)
 8001004:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001006:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001008:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100c:	684f      	ldr	r7, [r1, #4]
 800100e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001012:	d001      	beq.n	8001018 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8001014:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8001018:	4a60      	ldr	r2, [pc, #384]	; (800119c <HAL_GPIO_Init+0x1cc>)
 800101a:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101c:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800101e:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001022:	684f      	ldr	r7, [r1, #4]
 8001024:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001028:	d001      	beq.n	800102e <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 800102a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 800102e:	4a5b      	ldr	r2, [pc, #364]	; (800119c <HAL_GPIO_Init+0x1cc>)
 8001030:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001032:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001034:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001036:	684e      	ldr	r6, [r1, #4]
 8001038:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800103c:	d001      	beq.n	8001042 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 800103e:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001042:	4a56      	ldr	r2, [pc, #344]	; (800119c <HAL_GPIO_Init+0x1cc>)
 8001044:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001046:	3401      	adds	r4, #1
 8001048:	2c0f      	cmp	r4, #15
 800104a:	f200 80a3 	bhi.w	8001194 <HAL_GPIO_Init+0x1c4>
    ioposition = ((uint32_t)0x01) << position;
 800104e:	2301      	movs	r3, #1
 8001050:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	680a      	ldr	r2, [r1, #0]
 8001054:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8001058:	42ab      	cmp	r3, r5
 800105a:	d1f4      	bne.n	8001046 <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105c:	684a      	ldr	r2, [r1, #4]
 800105e:	2a12      	cmp	r2, #18
 8001060:	bf18      	it	ne
 8001062:	2a02      	cmpne	r2, #2
 8001064:	d112      	bne.n	800108c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8001066:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800106a:	f10e 0e08 	add.w	lr, lr, #8
 800106e:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001072:	f004 0607 	and.w	r6, r4, #7
 8001076:	00b6      	lsls	r6, r6, #2
 8001078:	270f      	movs	r7, #15
 800107a:	40b7      	lsls	r7, r6
 800107c:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001080:	690f      	ldr	r7, [r1, #16]
 8001082:	fa07 f606 	lsl.w	r6, r7, r6
 8001086:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 8001088:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 800108c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800108e:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f20e 	lsl.w	r2, r2, lr
 8001098:	43d2      	mvns	r2, r2
 800109a:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800109c:	684f      	ldr	r7, [r1, #4]
 800109e:	f007 0703 	and.w	r7, r7, #3
 80010a2:	fa07 f70e 	lsl.w	r7, r7, lr
 80010a6:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80010a8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010aa:	684e      	ldr	r6, [r1, #4]
 80010ac:	1e77      	subs	r7, r6, #1
 80010ae:	2e11      	cmp	r6, #17
 80010b0:	bf18      	it	ne
 80010b2:	2f01      	cmpne	r7, #1
 80010b4:	d901      	bls.n	80010ba <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b6:	2e12      	cmp	r6, #18
 80010b8:	d10f      	bne.n	80010da <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 80010ba:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010bc:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 80010be:	68cf      	ldr	r7, [r1, #12]
 80010c0:	fa07 f70e 	lsl.w	r7, r7, lr
 80010c4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80010c6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80010c8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ca:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010ce:	684e      	ldr	r6, [r1, #4]
 80010d0:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80010d4:	40a6      	lsls	r6, r4
 80010d6:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80010d8:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80010da:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010dc:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010de:	688b      	ldr	r3, [r1, #8]
 80010e0:	fa03 f30e 	lsl.w	r3, r3, lr
 80010e4:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80010e6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e8:	684b      	ldr	r3, [r1, #4]
 80010ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010ee:	d0aa      	beq.n	8001046 <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_GPIO_Init+0x1d0>)
 80010f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
 80010fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001104:	08a3      	lsrs	r3, r4, #2
 8001106:	1c9e      	adds	r6, r3, #2
 8001108:	4a23      	ldr	r2, [pc, #140]	; (8001198 <HAL_GPIO_Init+0x1c8>)
 800110a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800110e:	f004 0603 	and.w	r6, r4, #3
 8001112:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001116:	260f      	movs	r6, #15
 8001118:	fa06 f60e 	lsl.w	r6, r6, lr
 800111c:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001120:	4f20      	ldr	r7, [pc, #128]	; (80011a4 <HAL_GPIO_Init+0x1d4>)
 8001122:	42b8      	cmp	r0, r7
 8001124:	f43f af5a 	beq.w	8000fdc <HAL_GPIO_Init+0xc>
 8001128:	4e1f      	ldr	r6, [pc, #124]	; (80011a8 <HAL_GPIO_Init+0x1d8>)
 800112a:	42b0      	cmp	r0, r6
 800112c:	d022      	beq.n	8001174 <HAL_GPIO_Init+0x1a4>
 800112e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001132:	42b0      	cmp	r0, r6
 8001134:	d020      	beq.n	8001178 <HAL_GPIO_Init+0x1a8>
 8001136:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800113a:	42b0      	cmp	r0, r6
 800113c:	d01e      	beq.n	800117c <HAL_GPIO_Init+0x1ac>
 800113e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001142:	42b0      	cmp	r0, r6
 8001144:	d01c      	beq.n	8001180 <HAL_GPIO_Init+0x1b0>
 8001146:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800114a:	42b0      	cmp	r0, r6
 800114c:	d01a      	beq.n	8001184 <HAL_GPIO_Init+0x1b4>
 800114e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001152:	42b0      	cmp	r0, r6
 8001154:	d018      	beq.n	8001188 <HAL_GPIO_Init+0x1b8>
 8001156:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800115a:	42b0      	cmp	r0, r6
 800115c:	d016      	beq.n	800118c <HAL_GPIO_Init+0x1bc>
 800115e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001162:	42b0      	cmp	r0, r6
 8001164:	d014      	beq.n	8001190 <HAL_GPIO_Init+0x1c0>
 8001166:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800116a:	42b0      	cmp	r0, r6
 800116c:	f43f af34 	beq.w	8000fd8 <HAL_GPIO_Init+0x8>
 8001170:	260a      	movs	r6, #10
 8001172:	e734      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001174:	2601      	movs	r6, #1
 8001176:	e732      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001178:	2602      	movs	r6, #2
 800117a:	e730      	b.n	8000fde <HAL_GPIO_Init+0xe>
 800117c:	2603      	movs	r6, #3
 800117e:	e72e      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001180:	2604      	movs	r6, #4
 8001182:	e72c      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001184:	2605      	movs	r6, #5
 8001186:	e72a      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001188:	2606      	movs	r6, #6
 800118a:	e728      	b.n	8000fde <HAL_GPIO_Init+0xe>
 800118c:	2607      	movs	r6, #7
 800118e:	e726      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001190:	2608      	movs	r6, #8
 8001192:	e724      	b.n	8000fde <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 8001194:	b003      	add	sp, #12
 8001196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001198:	40013800 	.word	0x40013800
 800119c:	40013c00 	.word	0x40013c00
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400

080011ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011ac:	6903      	ldr	r3, [r0, #16]
 80011ae:	4219      	tst	r1, r3
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011b2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80011b4:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80011b6:	2001      	movs	r0, #1
 80011b8:	4770      	bx	lr

080011ba <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ba:	b912      	cbnz	r2, 80011c2 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011bc:	0409      	lsls	r1, r1, #16
 80011be:	6181      	str	r1, [r0, #24]
 80011c0:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	6181      	str	r1, [r0, #24]
 80011c4:	4770      	bx	lr

080011c6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80011c6:	6943      	ldr	r3, [r0, #20]
 80011c8:	4059      	eors	r1, r3
 80011ca:	6141      	str	r1, [r0, #20]
 80011cc:	4770      	bx	lr

080011ce <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80011d0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	4203      	tst	r3, r0
 80011d8:	d100      	bne.n	80011dc <HAL_GPIO_EXTI_IRQHandler+0xc>
 80011da:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80011de:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011e0:	f7ff fff5 	bl	80011ce <HAL_GPIO_EXTI_Callback>
}
 80011e4:	e7f9      	b.n	80011da <HAL_GPIO_EXTI_IRQHandler+0xa>
 80011e6:	bf00      	nop
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ec:	4a02      	ldr	r2, [pc, #8]	; (80011f8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80011ee:	6813      	ldr	r3, [r2, #0]
 80011f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4770      	bx	lr
 80011f8:	40007000 	.word	0x40007000

080011fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011fc:	b510      	push	{r4, lr}
 80011fe:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_PWREx_EnableOverDrive+0x74>)
 8001202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001204:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_PWREx_EnableOverDrive+0x78>)
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800121e:	f7ff fa0f 	bl	8000640 <HAL_GetTick>
 8001222:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_PWREx_EnableOverDrive+0x78>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800122c:	d108      	bne.n	8001240 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800122e:	f7ff fa07 	bl	8000640 <HAL_GetTick>
 8001232:	1b00      	subs	r0, r0, r4
 8001234:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001238:	d9f4      	bls.n	8001224 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800123a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800123c:	b002      	add	sp, #8
 800123e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001240:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <HAL_PWREx_EnableOverDrive+0x78>)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800124a:	f7ff f9f9 	bl	8000640 <HAL_GetTick>
 800124e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_PWREx_EnableOverDrive+0x78>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001258:	d107      	bne.n	800126a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800125a:	f7ff f9f1 	bl	8000640 <HAL_GetTick>
 800125e:	1b00      	subs	r0, r0, r4
 8001260:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001264:	d9f4      	bls.n	8001250 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001266:	2003      	movs	r0, #3
 8001268:	e7e8      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800126a:	2000      	movs	r0, #0
 800126c:	e7e6      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x40>
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001278:	2800      	cmp	r0, #0
 800127a:	f000 81dc 	beq.w	8001636 <HAL_RCC_OscConfig+0x3be>
{
 800127e:	b570      	push	{r4, r5, r6, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001284:	6803      	ldr	r3, [r0, #0]
 8001286:	f013 0f01 	tst.w	r3, #1
 800128a:	d03a      	beq.n	8001302 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800128c:	4ba2      	ldr	r3, [pc, #648]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b04      	cmp	r3, #4
 8001296:	d02b      	beq.n	80012f0 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001298:	4b9f      	ldr	r3, [pc, #636]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_OscConfig+0x6e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	6863      	ldr	r3, [r4, #4]
 80012a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012aa:	d050      	beq.n	800134e <HAL_RCC_OscConfig+0xd6>
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d154      	bne.n	800135a <HAL_RCC_OscConfig+0xe2>
 80012b0:	4b99      	ldr	r3, [pc, #612]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c2:	6863      	ldr	r3, [r4, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d05f      	beq.n	8001388 <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff f9ba 	bl	8000640 <HAL_GetTick>
 80012cc:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b92      	ldr	r3, [pc, #584]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012d6:	d114      	bne.n	8001302 <HAL_RCC_OscConfig+0x8a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff f9b2 	bl	8000640 <HAL_GetTick>
 80012dc:	1b40      	subs	r0, r0, r5
 80012de:	2864      	cmp	r0, #100	; 0x64
 80012e0:	d9f5      	bls.n	80012ce <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 80012e2:	2003      	movs	r0, #3
 80012e4:	e1ac      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4b8c      	ldr	r3, [pc, #560]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012ee:	d0d9      	beq.n	80012a4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	4b89      	ldr	r3, [pc, #548]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012f8:	d003      	beq.n	8001302 <HAL_RCC_OscConfig+0x8a>
 80012fa:	6863      	ldr	r3, [r4, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 819c 	beq.w	800163a <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	f013 0f02 	tst.w	r3, #2
 8001308:	d064      	beq.n	80013d4 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800130a:	4b83      	ldr	r3, [pc, #524]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f013 0f0c 	tst.w	r3, #12
 8001312:	d04d      	beq.n	80013b0 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001314:	4b80      	ldr	r3, [pc, #512]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b08      	cmp	r3, #8
 800131e:	d042      	beq.n	80013a6 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001320:	68e3      	ldr	r3, [r4, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d079      	beq.n	800141a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001326:	4a7c      	ldr	r2, [pc, #496]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001328:	6813      	ldr	r3, [r2, #0]
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff f986 	bl	8000640 <HAL_GetTick>
 8001334:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	4b78      	ldr	r3, [pc, #480]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f013 0f02 	tst.w	r3, #2
 800133e:	d163      	bne.n	8001408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff f97e 	bl	8000640 <HAL_GetTick>
 8001344:	1b40      	subs	r0, r0, r5
 8001346:	2802      	cmp	r0, #2
 8001348:	d9f5      	bls.n	8001336 <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 800134a:	2003      	movs	r0, #3
 800134c:	e178      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134e:	4a72      	ldr	r2, [pc, #456]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	e7b3      	b.n	80012c2 <HAL_RCC_OscConfig+0x4a>
 800135a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800135e:	d009      	beq.n	8001374 <HAL_RCC_OscConfig+0xfc>
 8001360:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e7a6      	b.n	80012c2 <HAL_RCC_OscConfig+0x4a>
 8001374:	4b68      	ldr	r3, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e79c      	b.n	80012c2 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8001388:	f7ff f95a 	bl	8000640 <HAL_GetTick>
 800138c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001396:	d0b4      	beq.n	8001302 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff f952 	bl	8000640 <HAL_GetTick>
 800139c:	1b40      	subs	r0, r0, r5
 800139e:	2864      	cmp	r0, #100	; 0x64
 80013a0:	d9f5      	bls.n	800138e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80013a2:	2003      	movs	r0, #3
 80013a4:	e14c      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80013ae:	d1b7      	bne.n	8001320 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b0:	4b59      	ldr	r3, [pc, #356]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f013 0f02 	tst.w	r3, #2
 80013b8:	d004      	beq.n	80013c4 <HAL_RCC_OscConfig+0x14c>
 80013ba:	68e3      	ldr	r3, [r4, #12]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80013c0:	2001      	movs	r0, #1
 80013c2:	e13d      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4a54      	ldr	r2, [pc, #336]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013cc:	6921      	ldr	r1, [r4, #16]
 80013ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013d2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	f013 0f08 	tst.w	r3, #8
 80013da:	d046      	beq.n	800146a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013dc:	6963      	ldr	r3, [r4, #20]
 80013de:	b383      	cbz	r3, 8001442 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e0:	4a4d      	ldr	r2, [pc, #308]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80013e2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ea:	f7ff f929 	bl	8000640 <HAL_GetTick>
 80013ee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f0:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80013f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f4:	f013 0f02 	tst.w	r3, #2
 80013f8:	d137      	bne.n	800146a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fa:	f7ff f921 	bl	8000640 <HAL_GetTick>
 80013fe:	1b40      	subs	r0, r0, r5
 8001400:	2802      	cmp	r0, #2
 8001402:	d9f5      	bls.n	80013f0 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8001404:	2003      	movs	r0, #3
 8001406:	e11b      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4a43      	ldr	r2, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001410:	6921      	ldr	r1, [r4, #16]
 8001412:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e7dc      	b.n	80013d4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800141a:	4a3f      	ldr	r2, [pc, #252]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800141c:	6813      	ldr	r3, [r2, #0]
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001424:	f7ff f90c 	bl	8000640 <HAL_GetTick>
 8001428:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f013 0f02 	tst.w	r3, #2
 8001432:	d0cf      	beq.n	80013d4 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff f904 	bl	8000640 <HAL_GetTick>
 8001438:	1b40      	subs	r0, r0, r5
 800143a:	2802      	cmp	r0, #2
 800143c:	d9f5      	bls.n	800142a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800143e:	2003      	movs	r0, #3
 8001440:	e0fe      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4a35      	ldr	r2, [pc, #212]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001444:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff f8f8 	bl	8000640 <HAL_GetTick>
 8001450:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001456:	f013 0f02 	tst.w	r3, #2
 800145a:	d006      	beq.n	800146a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff f8f0 	bl	8000640 <HAL_GetTick>
 8001460:	1b40      	subs	r0, r0, r5
 8001462:	2802      	cmp	r0, #2
 8001464:	d9f5      	bls.n	8001452 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8001466:	2003      	movs	r0, #3
 8001468:	e0ea      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	f013 0f04 	tst.w	r3, #4
 8001470:	d07e      	beq.n	8001570 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800147a:	d131      	bne.n	80014e0 <HAL_RCC_OscConfig+0x268>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800147e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001480:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001490:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_RCC_OscConfig+0x2a4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f413 7f80 	tst.w	r3, #256	; 0x100
 800149a:	d023      	beq.n	80014e4 <HAL_RCC_OscConfig+0x26c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149c:	68a3      	ldr	r3, [r4, #8]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d034      	beq.n	800150c <HAL_RCC_OscConfig+0x294>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d13c      	bne.n	8001520 <HAL_RCC_OscConfig+0x2a8>
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80014a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	671a      	str	r2, [r3, #112]	; 0x70
 80014b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014b2:	f022 0204 	bic.w	r2, r2, #4
 80014b6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b8:	68a3      	ldr	r3, [r4, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d046      	beq.n	800154c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014be:	f7ff f8bf 	bl	8000640 <HAL_GetTick>
 80014c2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	f013 0f02 	tst.w	r3, #2
 80014cc:	d14f      	bne.n	800156e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff f8b7 	bl	8000640 <HAL_GetTick>
 80014d2:	1b80      	subs	r0, r0, r6
 80014d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80014d8:	4298      	cmp	r0, r3
 80014da:	d9f3      	bls.n	80014c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014dc:	2003      	movs	r0, #3
 80014de:	e0af      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
  FlagStatus pwrclkchanged = RESET;
 80014e0:	2500      	movs	r5, #0
 80014e2:	e7d6      	b.n	8001492 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <HAL_RCC_OscConfig+0x2a4>)
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80014ee:	f7ff f8a7 	bl	8000640 <HAL_GetTick>
 80014f2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_OscConfig+0x2a4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014fc:	d1ce      	bne.n	800149c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014fe:	f7ff f89f 	bl	8000640 <HAL_GetTick>
 8001502:	1b80      	subs	r0, r0, r6
 8001504:	2864      	cmp	r0, #100	; 0x64
 8001506:	d9f5      	bls.n	80014f4 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8001508:	2003      	movs	r0, #3
 800150a:	e099      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	4a02      	ldr	r2, [pc, #8]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800150e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6713      	str	r3, [r2, #112]	; 0x70
 8001516:	e7cf      	b.n	80014b8 <HAL_RCC_OscConfig+0x240>
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000
 8001520:	2b05      	cmp	r3, #5
 8001522:	d009      	beq.n	8001538 <HAL_RCC_OscConfig+0x2c0>
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	671a      	str	r2, [r3, #112]	; 0x70
 800152e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001530:	f022 0204 	bic.w	r2, r2, #4
 8001534:	671a      	str	r2, [r3, #112]	; 0x70
 8001536:	e7bf      	b.n	80014b8 <HAL_RCC_OscConfig+0x240>
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 800153a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800153c:	f042 0204 	orr.w	r2, r2, #4
 8001540:	671a      	str	r2, [r3, #112]	; 0x70
 8001542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	671a      	str	r2, [r3, #112]	; 0x70
 800154a:	e7b5      	b.n	80014b8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff f878 	bl	8000640 <HAL_GetTick>
 8001550:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	f013 0f02 	tst.w	r3, #2
 800155a:	d008      	beq.n	800156e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff f870 	bl	8000640 <HAL_GetTick>
 8001560:	1b80      	subs	r0, r0, r6
 8001562:	f241 3388 	movw	r3, #5000	; 0x1388
 8001566:	4298      	cmp	r0, r3
 8001568:	d9f3      	bls.n	8001552 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800156a:	2003      	movs	r0, #3
 800156c:	e068      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156e:	b9f5      	cbnz	r5, 80015ae <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001570:	69a3      	ldr	r3, [r4, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001576:	4a34      	ldr	r2, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001578:	6892      	ldr	r2, [r2, #8]
 800157a:	f002 020c 	and.w	r2, r2, #12
 800157e:	2a08      	cmp	r2, #8
 8001580:	d060      	beq.n	8001644 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001582:	2b02      	cmp	r3, #2
 8001584:	d019      	beq.n	80015ba <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4a30      	ldr	r2, [pc, #192]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800158e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff f856 	bl	8000640 <HAL_GetTick>
 8001594:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800159e:	d048      	beq.n	8001632 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff f84e 	bl	8000640 <HAL_GetTick>
 80015a4:	1b00      	subs	r0, r0, r4
 80015a6:	2802      	cmp	r0, #2
 80015a8:	d9f5      	bls.n	8001596 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80015aa:	2003      	movs	r0, #3
 80015ac:	e048      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ae:	4a26      	ldr	r2, [pc, #152]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 80015b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	e7da      	b.n	8001570 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 80015bc:	6813      	ldr	r3, [r2, #0]
 80015be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015c2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015c4:	f7ff f83c 	bl	8000640 <HAL_GetTick>
 80015c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015d2:	d006      	beq.n	80015e2 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff f834 	bl	8000640 <HAL_GetTick>
 80015d8:	1b40      	subs	r0, r0, r5
 80015da:	2802      	cmp	r0, #2
 80015dc:	d9f5      	bls.n	80015ca <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 80015de:	2003      	movs	r0, #3
 80015e0:	e02e      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e2:	69e3      	ldr	r3, [r4, #28]
 80015e4:	6a22      	ldr	r2, [r4, #32]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015f0:	0852      	lsrs	r2, r2, #1
 80015f2:	3a01      	subs	r2, #1
 80015f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001600:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001606:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001608:	6813      	ldr	r3, [r2, #0]
 800160a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001610:	f7ff f816 	bl	8000640 <HAL_GetTick>
 8001614:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff f80e 	bl	8000640 <HAL_GetTick>
 8001624:	1b00      	subs	r0, r0, r4
 8001626:	2802      	cmp	r0, #2
 8001628:	d9f5      	bls.n	8001616 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 800162a:	2003      	movs	r0, #3
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800162e:	2000      	movs	r0, #0
 8001630:	e006      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
 8001632:	2000      	movs	r0, #0
 8001634:	e004      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8001636:	2001      	movs	r0, #1
 8001638:	4770      	bx	lr
        return HAL_ERROR;
 800163a:	2001      	movs	r0, #1
 800163c:	e000      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 800163e:	2000      	movs	r0, #0
}
 8001640:	b002      	add	sp, #8
 8001642:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001644:	2001      	movs	r0, #1
 8001646:	e7fb      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b04      	cmp	r3, #4
 8001658:	d059      	beq.n	800170e <HAL_RCC_GetSysClockFreq+0xc2>
 800165a:	2b08      	cmp	r3, #8
 800165c:	d001      	beq.n	8001662 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800165e:	482e      	ldr	r0, [pc, #184]	; (8001718 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001670:	d02a      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800167a:	461e      	mov	r6, r3
 800167c:	2700      	movs	r7, #0
 800167e:	015c      	lsls	r4, r3, #5
 8001680:	2500      	movs	r5, #0
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	eb65 0507 	sbc.w	r5, r5, r7
 8001688:	01a9      	lsls	r1, r5, #6
 800168a:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800168e:	01a0      	lsls	r0, r4, #6
 8001690:	1b00      	subs	r0, r0, r4
 8001692:	eb61 0105 	sbc.w	r1, r1, r5
 8001696:	00cb      	lsls	r3, r1, #3
 8001698:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800169c:	00c4      	lsls	r4, r0, #3
 800169e:	19a0      	adds	r0, r4, r6
 80016a0:	eb43 0107 	adc.w	r1, r3, r7
 80016a4:	024b      	lsls	r3, r1, #9
 80016a6:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80016aa:	0244      	lsls	r4, r0, #9
 80016ac:	4620      	mov	r0, r4
 80016ae:	4619      	mov	r1, r3
 80016b0:	2300      	movs	r3, #0
 80016b2:	f7fe fe2d 	bl	8000310 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_RCC_GetSysClockFreq+0xc8>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80016be:	3301      	adds	r3, #1
 80016c0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80016c2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80016c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCC_GetSysClockFreq+0xc8>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80016d0:	461e      	mov	r6, r3
 80016d2:	2700      	movs	r7, #0
 80016d4:	015c      	lsls	r4, r3, #5
 80016d6:	2500      	movs	r5, #0
 80016d8:	1ae4      	subs	r4, r4, r3
 80016da:	eb65 0507 	sbc.w	r5, r5, r7
 80016de:	01a9      	lsls	r1, r5, #6
 80016e0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80016e4:	01a0      	lsls	r0, r4, #6
 80016e6:	1b00      	subs	r0, r0, r4
 80016e8:	eb61 0105 	sbc.w	r1, r1, r5
 80016ec:	00cb      	lsls	r3, r1, #3
 80016ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016f2:	00c4      	lsls	r4, r0, #3
 80016f4:	19a0      	adds	r0, r4, r6
 80016f6:	eb43 0107 	adc.w	r1, r3, r7
 80016fa:	028b      	lsls	r3, r1, #10
 80016fc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001700:	0284      	lsls	r4, r0, #10
 8001702:	4620      	mov	r0, r4
 8001704:	4619      	mov	r1, r3
 8001706:	2300      	movs	r3, #0
 8001708:	f7fe fe02 	bl	8000310 <__aeabi_uldivmod>
 800170c:	e7d3      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	00f42400 	.word	0x00f42400
 800171c:	007a1200 	.word	0x007a1200

08001720 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001720:	2800      	cmp	r0, #0
 8001722:	f000 80a2 	beq.w	800186a <HAL_RCC_ClockConfig+0x14a>
{
 8001726:	b570      	push	{r4, r5, r6, lr}
 8001728:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172a:	4b52      	ldr	r3, [pc, #328]	; (8001874 <HAL_RCC_ClockConfig+0x154>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	428b      	cmp	r3, r1
 8001734:	d20c      	bcs.n	8001750 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4a4f      	ldr	r2, [pc, #316]	; (8001874 <HAL_RCC_ClockConfig+0x154>)
 8001738:	6813      	ldr	r3, [r2, #0]
 800173a:	f023 030f 	bic.w	r3, r3, #15
 800173e:	430b      	orrs	r3, r1
 8001740:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	6813      	ldr	r3, [r2, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	4299      	cmp	r1, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800174c:	2001      	movs	r0, #1
 800174e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	f013 0f02 	tst.w	r3, #2
 8001756:	d017      	beq.n	8001788 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	f013 0f04 	tst.w	r3, #4
 800175c:	d004      	beq.n	8001768 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800175e:	4a46      	ldr	r2, [pc, #280]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 8001760:	6893      	ldr	r3, [r2, #8]
 8001762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001766:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	f013 0f08 	tst.w	r3, #8
 800176e:	d004      	beq.n	800177a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001770:	4a41      	ldr	r2, [pc, #260]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 8001772:	6893      	ldr	r3, [r2, #8]
 8001774:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001778:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177a:	4a3f      	ldr	r2, [pc, #252]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 800177c:	6893      	ldr	r3, [r2, #8]
 800177e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001782:	68a0      	ldr	r0, [r4, #8]
 8001784:	4303      	orrs	r3, r0
 8001786:	6093      	str	r3, [r2, #8]
 8001788:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	f013 0f01 	tst.w	r3, #1
 8001790:	d031      	beq.n	80017f6 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001792:	6863      	ldr	r3, [r4, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001798:	2b02      	cmp	r3, #2
 800179a:	d025      	beq.n	80017e8 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	4a36      	ldr	r2, [pc, #216]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	f012 0f02 	tst.w	r2, #2
 80017a4:	d063      	beq.n	800186e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a6:	4934      	ldr	r1, [pc, #208]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 80017a8:	688a      	ldr	r2, [r1, #8]
 80017aa:	f022 0203 	bic.w	r2, r2, #3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80017b2:	f7fe ff45 	bl	8000640 <HAL_GetTick>
 80017b6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	6862      	ldr	r2, [r4, #4]
 80017c2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017c6:	d016      	beq.n	80017f6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7fe ff3a 	bl	8000640 <HAL_GetTick>
 80017cc:	1b80      	subs	r0, r0, r6
 80017ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80017d2:	4298      	cmp	r0, r3
 80017d4:	d9f0      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80017d6:	2003      	movs	r0, #3
 80017d8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80017e2:	d1e0      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e8:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017f0:	d1d9      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80017f2:	2001      	movs	r0, #1
 80017f4:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_RCC_ClockConfig+0x154>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	429d      	cmp	r5, r3
 8001800:	d20c      	bcs.n	800181c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <HAL_RCC_ClockConfig+0x154>)
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	f023 030f 	bic.w	r3, r3, #15
 800180a:	432b      	orrs	r3, r5
 800180c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	6813      	ldr	r3, [r2, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	429d      	cmp	r5, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
}
 800181a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	f013 0f04 	tst.w	r3, #4
 8001822:	d006      	beq.n	8001832 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 8001826:	6893      	ldr	r3, [r2, #8]
 8001828:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800182c:	68e1      	ldr	r1, [r4, #12]
 800182e:	430b      	orrs	r3, r1
 8001830:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	f013 0f08 	tst.w	r3, #8
 8001838:	d007      	beq.n	800184a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 800183c:	6893      	ldr	r3, [r2, #8]
 800183e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001842:	6921      	ldr	r1, [r4, #16]
 8001844:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001848:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184a:	f7ff feff 	bl	800164c <HAL_RCC_GetSysClockFreq>
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_RCC_ClockConfig+0x15c>)
 8001858:	5cd3      	ldrb	r3, [r2, r3]
 800185a:	40d8      	lsrs	r0, r3
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_RCC_ClockConfig+0x160>)
 800185e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001860:	2000      	movs	r0, #0
 8001862:	f00a fe9f 	bl	800c5a4 <HAL_InitTick>
  return HAL_OK;
 8001866:	2000      	movs	r0, #0
 8001868:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
 800186c:	4770      	bx	lr
        return HAL_ERROR;
 800186e:	2001      	movs	r0, #1
 8001870:	bd70      	pop	{r4, r5, r6, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00
 8001878:	40023800 	.word	0x40023800
 800187c:	0800fa38 	.word	0x0800fa38
 8001880:	20000010 	.word	0x20000010

08001884 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001884:	4b01      	ldr	r3, [pc, #4]	; (800188c <HAL_RCC_GetHCLKFreq+0x8>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000010 	.word	0x20000010

08001890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001890:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001892:	f7ff fff7 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800189e:	4a03      	ldr	r2, [pc, #12]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80018a2:	40d8      	lsrs	r0, r3
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	0800fa48 	.word	0x0800fa48

080018b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018b2:	f7ff ffe7 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018be:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80018c2:	40d8      	lsrs	r0, r3
 80018c4:	bd08      	pop	{r3, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	0800fa48 	.word	0x0800fa48

080018d0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018d0:	230f      	movs	r3, #15
 80018d2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_GetClockConfig+0x34>)
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80018e4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80018ec:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80018f6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_RCC_GetClockConfig+0x38>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	600b      	str	r3, [r1, #0]
 8001902:	4770      	bx	lr
 8001904:	40023800 	.word	0x40023800
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190e:	b083      	sub	sp, #12
 8001910:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001912:	6803      	ldr	r3, [r0, #0]
 8001914:	f013 0f01 	tst.w	r3, #1
 8001918:	d00c      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800191a:	4bb5      	ldr	r3, [pc, #724]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001928:	430a      	orrs	r2, r1
 800192a:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800192c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800192e:	b1c3      	cbz	r3, 8001962 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8001930:	2700      	movs	r7, #0
 8001932:	e000      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8001934:	2700      	movs	r7, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800193c:	d015      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800193e:	4aac      	ldr	r2, [pc, #688]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001940:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001944:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001948:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800194a:	430b      	orrs	r3, r1
 800194c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001950:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001956:	d006      	beq.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 8145 	beq.w	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  uint32_t pllsaiused = 0;
 800195e:	2500      	movs	r5, #0
 8001960:	e004      	b.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001962:	2701      	movs	r7, #1
 8001964:	e7e7      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8001966:	2701      	movs	r7, #1
 8001968:	e7f6      	b.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 800196a:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001972:	d00f      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001974:	4a9e      	ldr	r2, [pc, #632]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001976:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800197a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800197e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001980:	430b      	orrs	r3, r1
 8001982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800198c:	f000 812e 	beq.w	8001bec <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001990:	b903      	cbnz	r3, 8001994 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8001992:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800199a:	d000      	beq.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 800199c:	2701      	movs	r7, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800199e:	f013 0f20 	tst.w	r3, #32
 80019a2:	f040 8127 	bne.w	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	f013 0f10 	tst.w	r3, #16
 80019ac:	d00c      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80019ae:	4b90      	ldr	r3, [pc, #576]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80019b4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80019b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80019bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80019c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80019c2:	430a      	orrs	r2, r1
 80019c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80019ce:	d008      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019d0:	4a87      	ldr	r2, [pc, #540]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019da:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80019dc:	430b      	orrs	r3, r1
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80019e8:	d008      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80019ea:	4a81      	ldr	r2, [pc, #516]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019f0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80019f4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80019f6:	430b      	orrs	r3, r1
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a02:	d008      	beq.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a04:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a0a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001a0e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001a10:	430b      	orrs	r3, r1
 8001a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a1c:	d008      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001a1e:	4a74      	ldr	r2, [pc, #464]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a20:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a24:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a28:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a36:	d008      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a38:	4a6d      	ldr	r2, [pc, #436]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001a44:	430b      	orrs	r3, r1
 8001a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a50:	d008      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a52:	4a67      	ldr	r2, [pc, #412]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a54:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a58:	f023 030c 	bic.w	r3, r3, #12
 8001a5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a6c:	4a60      	ldr	r2, [pc, #384]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a76:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001a84:	d008      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a86:	4a5a      	ldr	r2, [pc, #360]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a88:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a90:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001a92:	430b      	orrs	r3, r1
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001aa0:	4a53      	ldr	r2, [pc, #332]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001aa2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aaa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001aac:	430b      	orrs	r3, r1
 8001aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001ab8:	d008      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001aba:	4a4d      	ldr	r2, [pc, #308]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001abc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ac0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ac4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001ad2:	d008      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ad4:	4a46      	ldr	r2, [pc, #280]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ad6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ada:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ade:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001aec:	d008      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001aee:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001af0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001af4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001af8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001afa:	430b      	orrs	r3, r1
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b06:	d008      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b08:	4a39      	ldr	r2, [pc, #228]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b12:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001b14:	430b      	orrs	r3, r1
 8001b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001b20:	d00d      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b22:	4a33      	ldr	r2, [pc, #204]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b28:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001b2c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001b34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b3a:	f000 80c1 	beq.w	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	f013 0f08 	tst.w	r3, #8
 8001b44:	d000      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8001b46:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001b48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001b4c:	d008      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b4e:	4a28      	ldr	r2, [pc, #160]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b50:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b54:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001b58:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001b66:	d009      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001b68:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b72:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001b76:	430b      	orrs	r3, r1
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001b82:	d009      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001b84:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001b8e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8001b92:	430b      	orrs	r3, r1
 8001b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001b9e:	d009      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ba2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ba6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001baa:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001bba:	d009      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001bbe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001bc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001bc6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001bd0:	2f00      	cmp	r7, #0
 8001bd2:	d177      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bda:	d073      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001bdc:	2d00      	cmp	r5, #0
 8001bde:	f040 8105 	bne.w	8001dec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001be2:	2000      	movs	r0, #0
}
 8001be4:	b003      	add	sp, #12
 8001be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8001be8:	2501      	movs	r5, #1
 8001bea:	e6bf      	b.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001bec:	2701      	movs	r7, #1
 8001bee:	e6cf      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8001bf0:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4bb8      	ldr	r3, [pc, #736]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001c08:	4ab4      	ldr	r2, [pc, #720]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001c0a:	6813      	ldr	r3, [r2, #0]
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c12:	f7fe fd15 	bl	8000640 <HAL_GetTick>
 8001c16:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c18:	4bb0      	ldr	r3, [pc, #704]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c20:	d106      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7fe fd0d 	bl	8000640 <HAL_GetTick>
 8001c26:	1b80      	subs	r0, r0, r6
 8001c28:	2864      	cmp	r0, #100	; 0x64
 8001c2a:	d9f5      	bls.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	e7d9      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c30:	4ba9      	ldr	r3, [pc, #676]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c34:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c38:	d015      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8001c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c3c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d010      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c44:	4ba4      	ldr	r3, [pc, #656]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c4c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001c4e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001c52:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c54:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001c56:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001c5a:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001c5c:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	f013 0f01 	tst.w	r3, #1
 8001c64:	d112      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c68:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c6c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c70:	d01d      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001c72:	4a99      	ldr	r2, [pc, #612]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c74:	6893      	ldr	r3, [r2, #8]
 8001c76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c7a:	6093      	str	r3, [r2, #8]
 8001c7c:	4996      	ldr	r1, [pc, #600]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c7e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001c80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c82:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001c86:	4313      	orrs	r3, r2
 8001c88:	670b      	str	r3, [r1, #112]	; 0x70
 8001c8a:	e68c      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fcd8 	bl	8000640 <HAL_GetTick>
 8001c90:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c92:	4b91      	ldr	r3, [pc, #580]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	f013 0f02 	tst.w	r3, #2
 8001c9a:	d1e4      	bne.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7fe fcd0 	bl	8000640 <HAL_GetTick>
 8001ca0:	1b80      	subs	r0, r0, r6
 8001ca2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ca6:	4298      	cmp	r0, r3
 8001ca8:	d9f3      	bls.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
 8001cac:	e79a      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cae:	488a      	ldr	r0, [pc, #552]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001cb0:	6882      	ldr	r2, [r0, #8]
 8001cb2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001cb6:	498a      	ldr	r1, [pc, #552]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8001cb8:	4019      	ands	r1, r3
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	6082      	str	r2, [r0, #8]
 8001cbe:	e7dd      	b.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1;
 8001cc0:	2501      	movs	r5, #1
 8001cc2:	e73c      	b.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8001cc4:	4a84      	ldr	r2, [pc, #528]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ccc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001cce:	f7fe fcb7 	bl	8000640 <HAL_GetTick>
 8001cd2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cd4:	4b80      	ldr	r3, [pc, #512]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001cdc:	d006      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cde:	f7fe fcaf 	bl	8000640 <HAL_GetTick>
 8001ce2:	1b80      	subs	r0, r0, r6
 8001ce4:	2864      	cmp	r0, #100	; 0x64
 8001ce6:	d9f5      	bls.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8001ce8:	2003      	movs	r0, #3
 8001cea:	e77b      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	f013 0f01 	tst.w	r3, #1
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8001cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cf6:	b98b      	cbnz	r3, 8001d1c <HAL_RCCEx_PeriphCLKConfig+0x410>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001cf8:	4a77      	ldr	r2, [pc, #476]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001cfa:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cfe:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d02:	6860      	ldr	r0, [r4, #4]
 8001d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d08:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d0c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001d10:	430b      	orrs	r3, r1
 8001d12:	68a1      	ldr	r1, [r4, #8]
 8001d14:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001d18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001d22:	d003      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8001d24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d26:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001d2a:	d043      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001d2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001d30:	d003      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d38:	d03c      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001d40:	d011      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d42:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d44:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d48:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d4c:	6866      	ldr	r6, [r4, #4]
 8001d4e:	6923      	ldr	r3, [r4, #16]
 8001d50:	041b      	lsls	r3, r3, #16
 8001d52:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001d56:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001d5a:	4303      	orrs	r3, r0
 8001d5c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001d60:	430b      	orrs	r3, r1
 8001d62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d6c:	d00d      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x47e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d6e:	6862      	ldr	r2, [r4, #4]
 8001d70:	6923      	ldr	r3, [r4, #16]
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d78:	68e2      	ldr	r2, [r4, #12]
 8001d7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d7e:	68a2      	ldr	r2, [r4, #8]
 8001d80:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d84:	4a54      	ldr	r2, [pc, #336]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001d8a:	4a53      	ldr	r2, [pc, #332]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d8c:	6813      	ldr	r3, [r2, #0]
 8001d8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d92:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d94:	f7fe fc54 	bl	8000640 <HAL_GetTick>
 8001d98:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d9a:	4b4f      	ldr	r3, [pc, #316]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001da2:	f47f af1b 	bne.w	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001da6:	f7fe fc4b 	bl	8000640 <HAL_GetTick>
 8001daa:	1b80      	subs	r0, r0, r6
 8001dac:	2864      	cmp	r0, #100	; 0x64
 8001dae:	d9f4      	bls.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x48e>
        return HAL_TIMEOUT;
 8001db0:	2003      	movs	r0, #3
 8001db2:	e717      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001db4:	4a48      	ldr	r2, [pc, #288]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001db6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dba:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001dbe:	6860      	ldr	r0, [r4, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001dc8:	68e0      	ldr	r0, [r4, #12]
 8001dca:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001dce:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001dd8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ddc:	f023 031f 	bic.w	r3, r3, #31
 8001de0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001de2:	3901      	subs	r1, #1
 8001de4:	430b      	orrs	r3, r1
 8001de6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dea:	e7a6      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    __HAL_RCC_PLLSAI_DISABLE();
 8001dec:	4a3a      	ldr	r2, [pc, #232]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001dee:	6813      	ldr	r3, [r2, #0]
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001df6:	f7fe fc23 	bl	8000640 <HAL_GetTick>
 8001dfa:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001e04:	d006      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x508>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e06:	f7fe fc1b 	bl	8000640 <HAL_GetTick>
 8001e0a:	1b40      	subs	r0, r0, r5
 8001e0c:	2864      	cmp	r0, #100	; 0x64
 8001e0e:	d9f5      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        return HAL_TIMEOUT;
 8001e10:	2003      	movs	r0, #3
 8001e12:	e6e7      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001e1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e1e:	b122      	cbz	r2, 8001e2a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8001e20:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001e24:	d01d      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x556>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e28:	b9db      	cbnz	r3, 8001e62 <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e2a:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001e2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e30:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e34:	6960      	ldr	r0, [r4, #20]
 8001e36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e3a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e3e:	69a0      	ldr	r0, [r4, #24]
 8001e40:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001e44:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e4e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e52:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001e56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e58:	3901      	subs	r1, #1
 8001e5a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001e68:	d003      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001e6a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e70:	d038      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	f013 0f08 	tst.w	r3, #8
 8001e78:	d019      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e7a:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001e7c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e84:	6960      	ldr	r0, [r4, #20]
 8001e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e8e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001e92:	430b      	orrs	r3, r1
 8001e94:	69e1      	ldr	r1, [r4, #28]
 8001e96:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001e9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001e9e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ea2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ea6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fbc2 	bl	8000640 <HAL_GetTick>
 8001ebc:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001ec6:	d120      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001ec8:	f7fe fbba 	bl	8000640 <HAL_GetTick>
 8001ecc:	1b00      	subs	r0, r0, r4
 8001ece:	2864      	cmp	r0, #100	; 0x64
 8001ed0:	d9f5      	bls.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
        return HAL_TIMEOUT;
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	e686      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	0ffffcff 	.word	0x0ffffcff
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8001ee6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001eea:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001eee:	6965      	ldr	r5, [r4, #20]
 8001ef0:	6a23      	ldr	r3, [r4, #32]
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001ef8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001efc:	4303      	orrs	r3, r0
 8001efe:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001f02:	430b      	orrs	r3, r1
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001f08:	e7b3      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x566>
  return HAL_OK;
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	e66a      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800

08001f14 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f14:	4770      	bx	lr

08001f16 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f16:	6802      	ldr	r2, [r0, #0]
 8001f18:	68d3      	ldr	r3, [r2, #12]
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f20:	6802      	ldr	r2, [r0, #0]
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	4770      	bx	lr

08001f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	4770      	bx	lr

08001f32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	4770      	bx	lr

08001f36 <HAL_TIM_IRQHandler>:
{
 8001f36:	b510      	push	{r4, lr}
 8001f38:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f3a:	6803      	ldr	r3, [r0, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	f012 0f02 	tst.w	r2, #2
 8001f42:	d011      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	f012 0f02 	tst.w	r2, #2
 8001f4a:	d00d      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f4c:	f06f 0202 	mvn.w	r2, #2
 8001f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001f56:	6803      	ldr	r3, [r0, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f013 0f03 	tst.w	r3, #3
 8001f5e:	d079      	beq.n	8002054 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f60:	f7ff ffe6 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f64:	2300      	movs	r3, #0
 8001f66:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	f012 0f04 	tst.w	r2, #4
 8001f70:	d012      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	f012 0f04 	tst.w	r2, #4
 8001f78:	d00e      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f7a:	f06f 0204 	mvn.w	r2, #4
 8001f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f80:	2302      	movs	r3, #2
 8001f82:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f8c:	d068      	beq.n	8002060 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f7ff ffce 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f94:	2300      	movs	r3, #0
 8001f96:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	f012 0f08 	tst.w	r2, #8
 8001fa0:	d012      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	f012 0f08 	tst.w	r2, #8
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001faa:	f06f 0208 	mvn.w	r2, #8
 8001fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f013 0f03 	tst.w	r3, #3
 8001fbc:	d057      	beq.n	800206e <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f7ff ffb6 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	f012 0f10 	tst.w	r2, #16
 8001fd0:	d012      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	f012 0f10 	tst.w	r2, #16
 8001fd8:	d00e      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fda:	f06f 0210 	mvn.w	r2, #16
 8001fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001fec:	d046      	beq.n	800207c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff ff9e 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	f012 0f01 	tst.w	r2, #1
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	f012 0f01 	tst.w	r2, #1
 8002008:	d13f      	bne.n	800208a <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002012:	d003      	beq.n	800201c <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	f012 0f80 	tst.w	r2, #128	; 0x80
 800201a:	d13d      	bne.n	8002098 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	f012 0f80 	tst.w	r2, #128	; 0x80
 800202c:	d13b      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002036:	d003      	beq.n	8002040 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800203e:	d139      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	f012 0f20 	tst.w	r2, #32
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	f012 0f20 	tst.w	r2, #32
 8002050:	d137      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x18c>
 8002052:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002054:	f7ff ff6b 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	4620      	mov	r0, r4
 800205a:	f7ff ff6a 	bl	8001f32 <HAL_TIM_PWM_PulseFinishedCallback>
 800205e:	e781      	b.n	8001f64 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002060:	4620      	mov	r0, r4
 8002062:	f7ff ff64 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002066:	4620      	mov	r0, r4
 8002068:	f7ff ff63 	bl	8001f32 <HAL_TIM_PWM_PulseFinishedCallback>
 800206c:	e792      	b.n	8001f94 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	4620      	mov	r0, r4
 8002070:	f7ff ff5d 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff5c 	bl	8001f32 <HAL_TIM_PWM_PulseFinishedCallback>
 800207a:	e7a3      	b.n	8001fc4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff ff56 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff ff55 	bl	8001f32 <HAL_TIM_PWM_PulseFinishedCallback>
 8002088:	e7b4      	b.n	8001ff4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800208a:	f06f 0201 	mvn.w	r2, #1
 800208e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002090:	4620      	mov	r0, r4
 8002092:	f00a fa1d 	bl	800c4d0 <HAL_TIM_PeriodElapsedCallback>
 8002096:	e7b8      	b.n	800200a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800209c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800209e:	4620      	mov	r0, r4
 80020a0:	f000 f8d0 	bl	8002244 <HAL_TIMEx_BreakCallback>
 80020a4:	e7ba      	b.n	800201c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80020ac:	4620      	mov	r0, r4
 80020ae:	f000 f8c9 	bl	8002244 <HAL_TIMEx_BreakCallback>
 80020b2:	e7bc      	b.n	800202e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff ff3a 	bl	8001f34 <HAL_TIM_TriggerCallback>
 80020c0:	e7be      	b.n	8002040 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c2:	f06f 0220 	mvn.w	r2, #32
 80020c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80020c8:	4620      	mov	r0, r4
 80020ca:	f000 f8ba 	bl	8002242 <HAL_TIMEx_CommutationCallback>
}
 80020ce:	e7c0      	b.n	8002052 <HAL_TIM_IRQHandler+0x11c>

080020d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020d0:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80020d2:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80020d4:	4a47      	ldr	r2, [pc, #284]	; (80021f4 <TIM_Base_SetConfig+0x124>)
 80020d6:	4290      	cmp	r0, r2
 80020d8:	bf14      	ite	ne
 80020da:	2200      	movne	r2, #0
 80020dc:	2201      	moveq	r2, #1
 80020de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020e2:	bf14      	ite	ne
 80020e4:	4614      	movne	r4, r2
 80020e6:	f042 0401 	orreq.w	r4, r2, #1
 80020ea:	b9d4      	cbnz	r4, 8002122 <TIM_Base_SetConfig+0x52>
 80020ec:	4d42      	ldr	r5, [pc, #264]	; (80021f8 <TIM_Base_SetConfig+0x128>)
 80020ee:	42a8      	cmp	r0, r5
 80020f0:	bf14      	ite	ne
 80020f2:	2500      	movne	r5, #0
 80020f4:	2501      	moveq	r5, #1
 80020f6:	4e41      	ldr	r6, [pc, #260]	; (80021fc <TIM_Base_SetConfig+0x12c>)
 80020f8:	42b0      	cmp	r0, r6
 80020fa:	d054      	beq.n	80021a6 <TIM_Base_SetConfig+0xd6>
 80020fc:	2d00      	cmp	r5, #0
 80020fe:	d152      	bne.n	80021a6 <TIM_Base_SetConfig+0xd6>
 8002100:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002104:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8002108:	42a8      	cmp	r0, r5
 800210a:	bf14      	ite	ne
 800210c:	2500      	movne	r5, #0
 800210e:	2501      	moveq	r5, #1
 8002110:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002114:	42b0      	cmp	r0, r6
 8002116:	d002      	beq.n	800211e <TIM_Base_SetConfig+0x4e>
 8002118:	b90d      	cbnz	r5, 800211e <TIM_Base_SetConfig+0x4e>
 800211a:	2500      	movs	r5, #0
 800211c:	e002      	b.n	8002124 <TIM_Base_SetConfig+0x54>
 800211e:	2501      	movs	r5, #1
 8002120:	e000      	b.n	8002124 <TIM_Base_SetConfig+0x54>
 8002122:	2501      	movs	r5, #1
 8002124:	b11d      	cbz	r5, 800212e <TIM_Base_SetConfig+0x5e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800212a:	684d      	ldr	r5, [r1, #4]
 800212c:	432b      	orrs	r3, r5
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800212e:	2c00      	cmp	r4, #0
 8002130:	d13d      	bne.n	80021ae <TIM_Base_SetConfig+0xde>
 8002132:	4c31      	ldr	r4, [pc, #196]	; (80021f8 <TIM_Base_SetConfig+0x128>)
 8002134:	42a0      	cmp	r0, r4
 8002136:	bf14      	ite	ne
 8002138:	2400      	movne	r4, #0
 800213a:	2401      	moveq	r4, #1
 800213c:	4d2f      	ldr	r5, [pc, #188]	; (80021fc <TIM_Base_SetConfig+0x12c>)
 800213e:	42a8      	cmp	r0, r5
 8002140:	d050      	beq.n	80021e4 <TIM_Base_SetConfig+0x114>
 8002142:	2c00      	cmp	r4, #0
 8002144:	d14e      	bne.n	80021e4 <TIM_Base_SetConfig+0x114>
 8002146:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800214a:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800214e:	42a0      	cmp	r0, r4
 8002150:	bf14      	ite	ne
 8002152:	2400      	movne	r4, #0
 8002154:	2401      	moveq	r4, #1
 8002156:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800215a:	42a8      	cmp	r0, r5
 800215c:	d044      	beq.n	80021e8 <TIM_Base_SetConfig+0x118>
 800215e:	2c00      	cmp	r4, #0
 8002160:	d142      	bne.n	80021e8 <TIM_Base_SetConfig+0x118>
 8002162:	4c27      	ldr	r4, [pc, #156]	; (8002200 <TIM_Base_SetConfig+0x130>)
 8002164:	42a0      	cmp	r0, r4
 8002166:	bf14      	ite	ne
 8002168:	2400      	movne	r4, #0
 800216a:	2401      	moveq	r4, #1
 800216c:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8002170:	42a8      	cmp	r0, r5
 8002172:	d03b      	beq.n	80021ec <TIM_Base_SetConfig+0x11c>
 8002174:	2c00      	cmp	r4, #0
 8002176:	d139      	bne.n	80021ec <TIM_Base_SetConfig+0x11c>
 8002178:	4c22      	ldr	r4, [pc, #136]	; (8002204 <TIM_Base_SetConfig+0x134>)
 800217a:	42a0      	cmp	r0, r4
 800217c:	bf14      	ite	ne
 800217e:	2400      	movne	r4, #0
 8002180:	2401      	moveq	r4, #1
 8002182:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002186:	42a8      	cmp	r0, r5
 8002188:	d032      	beq.n	80021f0 <TIM_Base_SetConfig+0x120>
 800218a:	2c00      	cmp	r4, #0
 800218c:	d130      	bne.n	80021f0 <TIM_Base_SetConfig+0x120>
 800218e:	4c1e      	ldr	r4, [pc, #120]	; (8002208 <TIM_Base_SetConfig+0x138>)
 8002190:	42a0      	cmp	r0, r4
 8002192:	bf14      	ite	ne
 8002194:	2400      	movne	r4, #0
 8002196:	2401      	moveq	r4, #1
 8002198:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 800219c:	42a8      	cmp	r0, r5
 800219e:	d004      	beq.n	80021aa <TIM_Base_SetConfig+0xda>
 80021a0:	b91c      	cbnz	r4, 80021aa <TIM_Base_SetConfig+0xda>
 80021a2:	2400      	movs	r4, #0
 80021a4:	e004      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021a6:	2501      	movs	r5, #1
 80021a8:	e7bc      	b.n	8002124 <TIM_Base_SetConfig+0x54>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021aa:	2401      	movs	r4, #1
 80021ac:	e000      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
 80021ae:	2401      	movs	r4, #1
 80021b0:	b11c      	cbz	r4, 80021ba <TIM_Base_SetConfig+0xea>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b6:	68cc      	ldr	r4, [r1, #12]
 80021b8:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021be:	694c      	ldr	r4, [r1, #20]
 80021c0:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80021c2:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c4:	688b      	ldr	r3, [r1, #8]
 80021c6:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021c8:	680b      	ldr	r3, [r1, #0]
 80021ca:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <TIM_Base_SetConfig+0x13c>)
 80021ce:	4298      	cmp	r0, r3
 80021d0:	bf08      	it	eq
 80021d2:	f042 0201 	orreq.w	r2, r2, #1
 80021d6:	b10a      	cbz	r2, 80021dc <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d8:	690b      	ldr	r3, [r1, #16]
 80021da:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021dc:	2301      	movs	r3, #1
 80021de:	6143      	str	r3, [r0, #20]
}
 80021e0:	bc70      	pop	{r4, r5, r6}
 80021e2:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021e4:	2401      	movs	r4, #1
 80021e6:	e7e3      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
 80021e8:	2401      	movs	r4, #1
 80021ea:	e7e1      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
 80021ec:	2401      	movs	r4, #1
 80021ee:	e7df      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
 80021f0:	2401      	movs	r4, #1
 80021f2:	e7dd      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
 80021f4:	40010000 	.word	0x40010000
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40000400 	.word	0x40000400
 8002200:	40014400 	.word	0x40014400
 8002204:	40001800 	.word	0x40001800
 8002208:	40002000 	.word	0x40002000
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002210:	b1a8      	cbz	r0, 800223e <HAL_TIM_Base_Init+0x2e>
{ 
 8002212:	b510      	push	{r4, lr}
 8002214:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002216:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800221a:	b15b      	cbz	r3, 8002234 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800221c:	2302      	movs	r3, #2
 800221e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002222:	1d21      	adds	r1, r4, #4
 8002224:	6820      	ldr	r0, [r4, #0]
 8002226:	f7ff ff53 	bl	80020d0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800222a:	2301      	movs	r3, #1
 800222c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002230:	2000      	movs	r0, #0
 8002232:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002234:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002238:	f7ff fe6c 	bl	8001f14 <HAL_TIM_Base_MspInit>
 800223c:	e7ee      	b.n	800221c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800223e:	2001      	movs	r0, #1
 8002240:	4770      	bx	lr

08002242 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002242:	4770      	bx	lr

08002244 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002244:	4770      	bx	lr

08002246 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002246:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b21      	cmp	r3, #33	; 0x21
 800224e:	d001      	beq.n	8002254 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002250:	2002      	movs	r0, #2
  }
}
 8002252:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002254:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002258:	b29b      	uxth	r3, r3
 800225a:	b193      	cbz	r3, 8002282 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800225c:	6883      	ldr	r3, [r0, #8]
 800225e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002262:	d01a      	beq.n	800229a <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002264:	6802      	ldr	r2, [r0, #0]
 8002266:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002268:	1c59      	adds	r1, r3, #1
 800226a:	64c1      	str	r1, [r0, #76]	; 0x4c
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002270:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29b      	uxth	r3, r3
 800227a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 800227e:	2000      	movs	r0, #0
 8002280:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002282:	6802      	ldr	r2, [r0, #0]
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800228a:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800228c:	6802      	ldr	r2, [r0, #0]
 800228e:	6813      	ldr	r3, [r2, #0]
 8002290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002294:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8002296:	2000      	movs	r0, #0
 8002298:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800229a:	6903      	ldr	r3, [r0, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e1      	bne.n	8002264 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80022a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80022a2:	6802      	ldr	r2, [r0, #0]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022aa:	6293      	str	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80022ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80022ae:	3302      	adds	r3, #2
 80022b0:	64c3      	str	r3, [r0, #76]	; 0x4c
 80022b2:	e7dd      	b.n	8002270 <UART_Transmit_IT+0x2a>

080022b4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022b4:	6802      	ldr	r2, [r0, #0]
 80022b6:	6813      	ldr	r3, [r2, #0]
 80022b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022bc:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022be:	6802      	ldr	r2, [r0, #0]
 80022c0:	6893      	ldr	r3, [r2, #8]
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022c8:	2320      	movs	r3, #32
 80022ca:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80022ce:	4770      	bx	lr

080022d0 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 80022d0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d001      	beq.n	80022de <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 80022da:	2002      	movs	r0, #2
 80022dc:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 80022de:	2a00      	cmp	r2, #0
 80022e0:	bf18      	it	ne
 80022e2:	2900      	cmpne	r1, #0
 80022e4:	d016      	beq.n	8002314 <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 80022e6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d014      	beq.n	8002318 <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 80022ee:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80022f0:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80022f4:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022fc:	2221      	movs	r2, #33	; 0x21
 80022fe:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002302:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002306:	6801      	ldr	r1, [r0, #0]
 8002308:	680a      	ldr	r2, [r1, #0]
 800230a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800230e:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002310:	4618      	mov	r0, r3
 8002312:	4770      	bx	lr
      return HAL_ERROR;
 8002314:	2001      	movs	r0, #1
 8002316:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002318:	2002      	movs	r0, #2
}
 800231a:	4770      	bx	lr

0800231c <UART_WaitOnFlagUntilTimeout>:
{
 800231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002320:	4605      	mov	r5, r0
 8002322:	460f      	mov	r7, r1
 8002324:	4616      	mov	r6, r2
 8002326:	4698      	mov	r8, r3
 8002328:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	ea37 0303 	bics.w	r3, r7, r3
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	42b3      	cmp	r3, r6
 800233a:	d11e      	bne.n	800237a <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 800233c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002340:	d0f3      	beq.n	800232a <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002342:	b12c      	cbz	r4, 8002350 <UART_WaitOnFlagUntilTimeout+0x34>
 8002344:	f7fe f97c 	bl	8000640 <HAL_GetTick>
 8002348:	eba0 0008 	sub.w	r0, r0, r8
 800234c:	4284      	cmp	r4, r0
 800234e:	d8ec      	bhi.n	800232a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002350:	682a      	ldr	r2, [r5, #0]
 8002352:	6813      	ldr	r3, [r2, #0]
 8002354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002358:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235a:	682a      	ldr	r2, [r5, #0]
 800235c:	6893      	ldr	r3, [r2, #8]
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002364:	2320      	movs	r3, #32
 8002366:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800236a:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800236e:	2300      	movs	r3, #0
 8002370:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8002374:	2003      	movs	r0, #3
 8002376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800237a:	2000      	movs	r0, #0
}
 800237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002380 <UART_EndTransmit_IT>:
{
 8002380:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002382:	6801      	ldr	r1, [r0, #0]
 8002384:	680b      	ldr	r3, [r1, #0]
 8002386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800238a:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800238c:	2320      	movs	r3, #32
 800238e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8002392:	f00a fb37 	bl	800ca04 <HAL_UART_TxCpltCallback>
}
 8002396:	2000      	movs	r0, #0
 8002398:	bd08      	pop	{r3, pc}

0800239a <HAL_UART_RxCpltCallback>:
{
 800239a:	4770      	bx	lr

0800239c <UART_Receive_IT>:
{
 800239c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800239e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023a2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b22      	cmp	r3, #34	; 0x22
 80023aa:	d006      	beq.n	80023ba <UART_Receive_IT+0x1e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	6993      	ldr	r3, [r2, #24]
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 80023b6:	2002      	movs	r0, #2
 80023b8:	bd08      	pop	{r3, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ba:	6883      	ldr	r3, [r0, #8]
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d011      	beq.n	80023e6 <UART_Receive_IT+0x4a>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80023c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023c4:	1c59      	adds	r1, r3, #1
 80023c6:	6541      	str	r1, [r0, #84]	; 0x54
 80023c8:	6801      	ldr	r1, [r0, #0]
 80023ca:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	400a      	ands	r2, r1
 80023d0:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 80023d2:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80023e0:	b16b      	cbz	r3, 80023fe <UART_Receive_IT+0x62>
    return HAL_OK;
 80023e2:	2000      	movs	r0, #0
}
 80023e4:	bd08      	pop	{r3, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e6:	6903      	ldr	r3, [r0, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ea      	bne.n	80023c2 <UART_Receive_IT+0x26>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80023ec:	6d43      	ldr	r3, [r0, #84]	; 0x54
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80023f2:	400a      	ands	r2, r1
 80023f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 80023f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023f8:	3302      	adds	r3, #2
 80023fa:	6543      	str	r3, [r0, #84]	; 0x54
 80023fc:	e7e9      	b.n	80023d2 <UART_Receive_IT+0x36>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023fe:	6802      	ldr	r2, [r0, #0]
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002406:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002408:	6802      	ldr	r2, [r0, #0]
 800240a:	6893      	ldr	r3, [r2, #8]
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002412:	2320      	movs	r3, #32
 8002414:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002418:	f7ff ffbf 	bl	800239a <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800241c:	2000      	movs	r0, #0
 800241e:	bd08      	pop	{r3, pc}

08002420 <HAL_UART_ErrorCallback>:
{
 8002420:	4770      	bx	lr
	...

08002424 <HAL_UART_IRQHandler>:
{
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002428:	6802      	ldr	r2, [r0, #0]
 800242a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800242c:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800242e:	6891      	ldr	r1, [r2, #8]
  if (errorflags == RESET)
 8002430:	f013 050f 	ands.w	r5, r3, #15
 8002434:	d105      	bne.n	8002442 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002436:	f013 0f20 	tst.w	r3, #32
 800243a:	d002      	beq.n	8002442 <HAL_UART_IRQHandler+0x1e>
 800243c:	f010 0f20 	tst.w	r0, #32
 8002440:	d15f      	bne.n	8002502 <HAL_UART_IRQHandler+0xde>
  if(   (errorflags != RESET)
 8002442:	2d00      	cmp	r5, #0
 8002444:	d073      	beq.n	800252e <HAL_UART_IRQHandler+0x10a>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002446:	f011 0101 	ands.w	r1, r1, #1
 800244a:	d102      	bne.n	8002452 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800244c:	f410 7f90 	tst.w	r0, #288	; 0x120
 8002450:	d06d      	beq.n	800252e <HAL_UART_IRQHandler+0x10a>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002452:	f013 0f01 	tst.w	r3, #1
 8002456:	d007      	beq.n	8002468 <HAL_UART_IRQHandler+0x44>
 8002458:	f410 7f80 	tst.w	r0, #256	; 0x100
 800245c:	d004      	beq.n	8002468 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800245e:	2501      	movs	r5, #1
 8002460:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002462:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002464:	432a      	orrs	r2, r5
 8002466:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002468:	f013 0f02 	tst.w	r3, #2
 800246c:	d007      	beq.n	800247e <HAL_UART_IRQHandler+0x5a>
 800246e:	b131      	cbz	r1, 800247e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002470:	6822      	ldr	r2, [r4, #0]
 8002472:	2502      	movs	r5, #2
 8002474:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002476:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002478:	f042 0204 	orr.w	r2, r2, #4
 800247c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800247e:	f013 0f04 	tst.w	r3, #4
 8002482:	d007      	beq.n	8002494 <HAL_UART_IRQHandler+0x70>
 8002484:	b131      	cbz	r1, 8002494 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002486:	6822      	ldr	r2, [r4, #0]
 8002488:	2504      	movs	r5, #4
 800248a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800248c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800248e:	f042 0202 	orr.w	r2, r2, #2
 8002492:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002494:	f013 0f08 	tst.w	r3, #8
 8002498:	d009      	beq.n	80024ae <HAL_UART_IRQHandler+0x8a>
 800249a:	f010 0f20 	tst.w	r0, #32
 800249e:	d100      	bne.n	80024a2 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024a0:	b129      	cbz	r1, 80024ae <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80024a2:	6822      	ldr	r2, [r4, #0]
 80024a4:	2108      	movs	r1, #8
 80024a6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024a8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80024aa:	430a      	orrs	r2, r1
 80024ac:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ae:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	d048      	beq.n	8002546 <HAL_UART_IRQHandler+0x122>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024b4:	f013 0f20 	tst.w	r3, #32
 80024b8:	d002      	beq.n	80024c0 <HAL_UART_IRQHandler+0x9c>
 80024ba:	f010 0f20 	tst.w	r0, #32
 80024be:	d124      	bne.n	800250a <HAL_UART_IRQHandler+0xe6>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80024c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80024c2:	f013 0f08 	tst.w	r3, #8
 80024c6:	d104      	bne.n	80024d2 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80024cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024d0:	d027      	beq.n	8002522 <HAL_UART_IRQHandler+0xfe>
        UART_EndRxTransfer(huart);
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7ff feee 	bl	80022b4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80024e0:	d01b      	beq.n	800251a <HAL_UART_IRQHandler+0xf6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e8:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80024ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024ec:	b18b      	cbz	r3, 8002512 <HAL_UART_IRQHandler+0xee>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024ee:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_UART_IRQHandler+0x134>)
 80024f0:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024f2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80024f4:	f7fe f90c 	bl	8000710 <HAL_DMA_Abort_IT>
 80024f8:	b328      	cbz	r0, 8002546 <HAL_UART_IRQHandler+0x122>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80024fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80024fe:	4798      	blx	r3
 8002500:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002502:	4620      	mov	r0, r4
 8002504:	f7ff ff4a 	bl	800239c <UART_Receive_IT>
      return;
 8002508:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff ff46 	bl	800239c <UART_Receive_IT>
 8002510:	e7d6      	b.n	80024c0 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002512:	4620      	mov	r0, r4
 8002514:	f7ff ff84 	bl	8002420 <HAL_UART_ErrorCallback>
 8002518:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 800251a:	4620      	mov	r0, r4
 800251c:	f7ff ff80 	bl	8002420 <HAL_UART_ErrorCallback>
 8002520:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002522:	4620      	mov	r0, r4
 8002524:	f7ff ff7c 	bl	8002420 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002528:	2300      	movs	r3, #0
 800252a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800252c:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800252e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002532:	d002      	beq.n	800253a <HAL_UART_IRQHandler+0x116>
 8002534:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002538:	d106      	bne.n	8002548 <HAL_UART_IRQHandler+0x124>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800253a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800253e:	d002      	beq.n	8002546 <HAL_UART_IRQHandler+0x122>
 8002540:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002544:	d104      	bne.n	8002550 <HAL_UART_IRQHandler+0x12c>
 8002546:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fe7c 	bl	8002246 <UART_Transmit_IT>
    return;
 800254e:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff ff15 	bl	8002380 <UART_EndTransmit_IT>
    return;
 8002556:	e7f6      	b.n	8002546 <HAL_UART_IRQHandler+0x122>
 8002558:	0800255d 	.word	0x0800255d

0800255c <UART_DMAAbortOnError>:
{
 800255c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800255e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002566:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800256a:	f7ff ff59 	bl	8002420 <HAL_UART_ErrorCallback>
 800256e:	bd08      	pop	{r3, pc}

08002570 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002570:	b538      	push	{r3, r4, r5, lr}
 8002572:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002574:	6883      	ldr	r3, [r0, #8]
 8002576:	6902      	ldr	r2, [r0, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	6942      	ldr	r2, [r0, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	69c2      	ldr	r2, [r0, #28]
 8002580:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002582:	6801      	ldr	r1, [r0, #0]
 8002584:	6808      	ldr	r0, [r1, #0]
 8002586:	4aa0      	ldr	r2, [pc, #640]	; (8002808 <UART_SetConfig+0x298>)
 8002588:	4002      	ands	r2, r0
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	6853      	ldr	r3, [r2, #4]
 8002592:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002596:	68e1      	ldr	r1, [r4, #12]
 8002598:	430b      	orrs	r3, r1
 800259a:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800259c:	69a3      	ldr	r3, [r4, #24]
 800259e:	6a22      	ldr	r2, [r4, #32]
 80025a0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80025a2:	6821      	ldr	r1, [r4, #0]
 80025a4:	688a      	ldr	r2, [r1, #8]
 80025a6:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025ae:	6825      	ldr	r5, [r4, #0]
 80025b0:	4b96      	ldr	r3, [pc, #600]	; (800280c <UART_SetConfig+0x29c>)
 80025b2:	429d      	cmp	r5, r3
 80025b4:	d02b      	beq.n	800260e <UART_SetConfig+0x9e>
 80025b6:	4b96      	ldr	r3, [pc, #600]	; (8002810 <UART_SetConfig+0x2a0>)
 80025b8:	429d      	cmp	r5, r3
 80025ba:	d03c      	beq.n	8002636 <UART_SetConfig+0xc6>
 80025bc:	4b95      	ldr	r3, [pc, #596]	; (8002814 <UART_SetConfig+0x2a4>)
 80025be:	429d      	cmp	r5, r3
 80025c0:	d052      	beq.n	8002668 <UART_SetConfig+0xf8>
 80025c2:	4b95      	ldr	r3, [pc, #596]	; (8002818 <UART_SetConfig+0x2a8>)
 80025c4:	429d      	cmp	r5, r3
 80025c6:	d067      	beq.n	8002698 <UART_SetConfig+0x128>
 80025c8:	4b94      	ldr	r3, [pc, #592]	; (800281c <UART_SetConfig+0x2ac>)
 80025ca:	429d      	cmp	r5, r3
 80025cc:	d07c      	beq.n	80026c8 <UART_SetConfig+0x158>
 80025ce:	4b94      	ldr	r3, [pc, #592]	; (8002820 <UART_SetConfig+0x2b0>)
 80025d0:	429d      	cmp	r5, r3
 80025d2:	f000 8094 	beq.w	80026fe <UART_SetConfig+0x18e>
 80025d6:	4b93      	ldr	r3, [pc, #588]	; (8002824 <UART_SetConfig+0x2b4>)
 80025d8:	429d      	cmp	r5, r3
 80025da:	f000 80ab 	beq.w	8002734 <UART_SetConfig+0x1c4>
 80025de:	4b92      	ldr	r3, [pc, #584]	; (8002828 <UART_SetConfig+0x2b8>)
 80025e0:	429d      	cmp	r5, r3
 80025e2:	f000 80c2 	beq.w	800276a <UART_SetConfig+0x1fa>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80025e6:	2310      	movs	r3, #16

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e8:	69e2      	ldr	r2, [r4, #28]
 80025ea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80025ee:	f000 80db 	beq.w	80027a8 <UART_SetConfig+0x238>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	f200 8168 	bhi.w	80028c8 <UART_SetConfig+0x358>
 80025f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80025fc:	013c0131 	.word	0x013c0131
 8002600:	01660147 	.word	0x01660147
 8002604:	01660151 	.word	0x01660151
 8002608:	01660166 	.word	0x01660166
 800260c:	015c      	.short	0x015c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800260e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b03      	cmp	r3, #3
 800261c:	d803      	bhi.n	8002626 <UART_SetConfig+0xb6>
 800261e:	e8df f003 	tbb	[pc, r3]
 8002622:	06bf      	.short	0x06bf
 8002624:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002626:	2310      	movs	r3, #16
 8002628:	e7de      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800262a:	2302      	movs	r3, #2
 800262c:	e7dc      	b.n	80025e8 <UART_SetConfig+0x78>
 800262e:	2304      	movs	r3, #4
 8002630:	e7da      	b.n	80025e8 <UART_SetConfig+0x78>
 8002632:	2308      	movs	r3, #8
 8002634:	e7d8      	b.n	80025e8 <UART_SetConfig+0x78>
 8002636:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d808      	bhi.n	8002658 <UART_SetConfig+0xe8>
 8002646:	e8df f003 	tbb	[pc, r3]
 800264a:	07ad      	.short	0x07ad
 800264c:	070b0707 	.word	0x070b0707
 8002650:	07090707 	.word	0x07090707
 8002654:	0707      	.short	0x0707
 8002656:	0d          	.byte	0x0d
 8002657:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002658:	2310      	movs	r3, #16
 800265a:	e7c5      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800265c:	2302      	movs	r3, #2
 800265e:	e7c3      	b.n	80025e8 <UART_SetConfig+0x78>
 8002660:	2304      	movs	r3, #4
 8002662:	e7c1      	b.n	80025e8 <UART_SetConfig+0x78>
 8002664:	2308      	movs	r3, #8
 8002666:	e7bf      	b.n	80025e8 <UART_SetConfig+0x78>
 8002668:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002674:	2b10      	cmp	r3, #16
 8002676:	d00d      	beq.n	8002694 <UART_SetConfig+0x124>
 8002678:	d905      	bls.n	8002686 <UART_SetConfig+0x116>
 800267a:	2b20      	cmp	r3, #32
 800267c:	d008      	beq.n	8002690 <UART_SetConfig+0x120>
 800267e:	2b30      	cmp	r3, #48	; 0x30
 8002680:	d104      	bne.n	800268c <UART_SetConfig+0x11c>
 8002682:	2308      	movs	r3, #8
 8002684:	e7b0      	b.n	80025e8 <UART_SetConfig+0x78>
 8002686:	b90b      	cbnz	r3, 800268c <UART_SetConfig+0x11c>
 8002688:	2300      	movs	r3, #0
 800268a:	e7ad      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800268c:	2310      	movs	r3, #16
 800268e:	e7ab      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002690:	2302      	movs	r3, #2
 8002692:	e7a9      	b.n	80025e8 <UART_SetConfig+0x78>
 8002694:	2304      	movs	r3, #4
 8002696:	e7a7      	b.n	80025e8 <UART_SetConfig+0x78>
 8002698:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d00d      	beq.n	80026c4 <UART_SetConfig+0x154>
 80026a8:	d905      	bls.n	80026b6 <UART_SetConfig+0x146>
 80026aa:	2b80      	cmp	r3, #128	; 0x80
 80026ac:	d008      	beq.n	80026c0 <UART_SetConfig+0x150>
 80026ae:	2bc0      	cmp	r3, #192	; 0xc0
 80026b0:	d104      	bne.n	80026bc <UART_SetConfig+0x14c>
 80026b2:	2308      	movs	r3, #8
 80026b4:	e798      	b.n	80025e8 <UART_SetConfig+0x78>
 80026b6:	b90b      	cbnz	r3, 80026bc <UART_SetConfig+0x14c>
 80026b8:	2300      	movs	r3, #0
 80026ba:	e795      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80026bc:	2310      	movs	r3, #16
 80026be:	e793      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026c0:	2302      	movs	r3, #2
 80026c2:	e791      	b.n	80025e8 <UART_SetConfig+0x78>
 80026c4:	2304      	movs	r3, #4
 80026c6:	e78f      	b.n	80025e8 <UART_SetConfig+0x78>
 80026c8:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d8:	d00f      	beq.n	80026fa <UART_SetConfig+0x18a>
 80026da:	d907      	bls.n	80026ec <UART_SetConfig+0x17c>
 80026dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e0:	d009      	beq.n	80026f6 <UART_SetConfig+0x186>
 80026e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026e6:	d104      	bne.n	80026f2 <UART_SetConfig+0x182>
 80026e8:	2308      	movs	r3, #8
 80026ea:	e77d      	b.n	80025e8 <UART_SetConfig+0x78>
 80026ec:	b90b      	cbnz	r3, 80026f2 <UART_SetConfig+0x182>
 80026ee:	2300      	movs	r3, #0
 80026f0:	e77a      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80026f2:	2310      	movs	r3, #16
 80026f4:	e778      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026f6:	2302      	movs	r3, #2
 80026f8:	e776      	b.n	80025e8 <UART_SetConfig+0x78>
 80026fa:	2304      	movs	r3, #4
 80026fc:	e774      	b.n	80025e8 <UART_SetConfig+0x78>
 80026fe:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d00f      	beq.n	8002730 <UART_SetConfig+0x1c0>
 8002710:	d907      	bls.n	8002722 <UART_SetConfig+0x1b2>
 8002712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002716:	d009      	beq.n	800272c <UART_SetConfig+0x1bc>
 8002718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800271c:	d104      	bne.n	8002728 <UART_SetConfig+0x1b8>
 800271e:	2308      	movs	r3, #8
 8002720:	e762      	b.n	80025e8 <UART_SetConfig+0x78>
 8002722:	b90b      	cbnz	r3, 8002728 <UART_SetConfig+0x1b8>
 8002724:	2301      	movs	r3, #1
 8002726:	e75f      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002728:	2310      	movs	r3, #16
 800272a:	e75d      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800272c:	2302      	movs	r3, #2
 800272e:	e75b      	b.n	80025e8 <UART_SetConfig+0x78>
 8002730:	2304      	movs	r3, #4
 8002732:	e759      	b.n	80025e8 <UART_SetConfig+0x78>
 8002734:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002744:	d00f      	beq.n	8002766 <UART_SetConfig+0x1f6>
 8002746:	d907      	bls.n	8002758 <UART_SetConfig+0x1e8>
 8002748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800274c:	d009      	beq.n	8002762 <UART_SetConfig+0x1f2>
 800274e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002752:	d104      	bne.n	800275e <UART_SetConfig+0x1ee>
 8002754:	2308      	movs	r3, #8
 8002756:	e747      	b.n	80025e8 <UART_SetConfig+0x78>
 8002758:	b90b      	cbnz	r3, 800275e <UART_SetConfig+0x1ee>
 800275a:	2300      	movs	r3, #0
 800275c:	e744      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800275e:	2310      	movs	r3, #16
 8002760:	e742      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002762:	2302      	movs	r3, #2
 8002764:	e740      	b.n	80025e8 <UART_SetConfig+0x78>
 8002766:	2304      	movs	r3, #4
 8002768:	e73e      	b.n	80025e8 <UART_SetConfig+0x78>
 800276a:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800277a:	d00f      	beq.n	800279c <UART_SetConfig+0x22c>
 800277c:	d907      	bls.n	800278e <UART_SetConfig+0x21e>
 800277e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002782:	d009      	beq.n	8002798 <UART_SetConfig+0x228>
 8002784:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002788:	d104      	bne.n	8002794 <UART_SetConfig+0x224>
 800278a:	2308      	movs	r3, #8
 800278c:	e72c      	b.n	80025e8 <UART_SetConfig+0x78>
 800278e:	b90b      	cbnz	r3, 8002794 <UART_SetConfig+0x224>
 8002790:	2300      	movs	r3, #0
 8002792:	e729      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002794:	2310      	movs	r3, #16
 8002796:	e727      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002798:	2302      	movs	r3, #2
 800279a:	e725      	b.n	80025e8 <UART_SetConfig+0x78>
 800279c:	2304      	movs	r3, #4
 800279e:	e723      	b.n	80025e8 <UART_SetConfig+0x78>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e721      	b.n	80025e8 <UART_SetConfig+0x78>
 80027a4:	2300      	movs	r3, #0
 80027a6:	e71f      	b.n	80025e8 <UART_SetConfig+0x78>
    switch (clocksource)
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d855      	bhi.n	8002858 <UART_SetConfig+0x2e8>
 80027ac:	e8df f003 	tbb	[pc, r3]
 80027b0:	54221705 	.word	0x54221705
 80027b4:	54545440 	.word	0x54545440
 80027b8:	4b          	.byte	0x4b
 80027b9:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027ba:	f7ff f869 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 80027be:	6862      	ldr	r2, [r4, #4]
 80027c0:	0853      	lsrs	r3, r2, #1
 80027c2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80027c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80027ca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80027cc:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80027ce:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027d2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80027d6:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80027d8:	6822      	ldr	r2, [r4, #0]
 80027da:	60d3      	str	r3, [r2, #12]
 80027dc:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027de:	f7ff f867 	bl	80018b0 <HAL_RCC_GetPCLK2Freq>
 80027e2:	6862      	ldr	r2, [r4, #4]
 80027e4:	0853      	lsrs	r3, r2, #1
 80027e6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80027ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80027ee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f0:	2000      	movs	r0, #0
      break;
 80027f2:	e7ec      	b.n	80027ce <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027f4:	6862      	ldr	r2, [r4, #4]
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <UART_SetConfig+0x2bc>)
 80027f8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80027fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002800:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002802:	2000      	movs	r0, #0
      break;
 8002804:	e7e3      	b.n	80027ce <UART_SetConfig+0x25e>
 8002806:	bf00      	nop
 8002808:	efff69f3 	.word	0xefff69f3
 800280c:	40011000 	.word	0x40011000
 8002810:	40004400 	.word	0x40004400
 8002814:	40004800 	.word	0x40004800
 8002818:	40004c00 	.word	0x40004c00
 800281c:	40005000 	.word	0x40005000
 8002820:	40011400 	.word	0x40011400
 8002824:	40007800 	.word	0x40007800
 8002828:	40007c00 	.word	0x40007c00
 800282c:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002830:	f7fe ff0c 	bl	800164c <HAL_RCC_GetSysClockFreq>
 8002834:	6862      	ldr	r2, [r4, #4]
 8002836:	0853      	lsrs	r3, r2, #1
 8002838:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800283c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002840:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002842:	2000      	movs	r0, #0
      break;
 8002844:	e7c3      	b.n	80027ce <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002846:	6862      	ldr	r2, [r4, #4]
 8002848:	0853      	lsrs	r3, r2, #1
 800284a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800284e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002852:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002854:	2000      	movs	r0, #0
      break;
 8002856:	e7ba      	b.n	80027ce <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8002858:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800285a:	2300      	movs	r3, #0
 800285c:	e7b7      	b.n	80027ce <UART_SetConfig+0x25e>
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800285e:	f7ff f817 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 8002862:	6863      	ldr	r3, [r4, #4]
 8002864:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002868:	fbb0 f0f3 	udiv	r0, r0, r3
 800286c:	b280      	uxth	r0, r0
 800286e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002870:	2000      	movs	r0, #0
      break;
 8002872:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002874:	f7ff f81c 	bl	80018b0 <HAL_RCC_GetPCLK2Freq>
 8002878:	6863      	ldr	r3, [r4, #4]
 800287a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800287e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002882:	b280      	uxth	r0, r0
 8002884:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002886:	2000      	movs	r0, #0
      break;
 8002888:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800288a:	6862      	ldr	r2, [r4, #4]
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <UART_SetConfig+0x35c>)
 800288e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002892:	fbb3 f3f2 	udiv	r3, r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800289a:	2000      	movs	r0, #0
      break;
 800289c:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800289e:	f7fe fed5 	bl	800164c <HAL_RCC_GetSysClockFreq>
 80028a2:	6863      	ldr	r3, [r4, #4]
 80028a4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80028a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80028ac:	b280      	uxth	r0, r0
 80028ae:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80028b0:	2000      	movs	r0, #0
      break;
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028b4:	6862      	ldr	r2, [r4, #4]
 80028b6:	0853      	lsrs	r3, r2, #1
 80028b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80028c4:	2000      	movs	r0, #0
      break;
 80028c6:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80028c8:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80028ca:	bd38      	pop	{r3, r4, r5, pc}
 80028cc:	00f42400 	.word	0x00f42400

080028d0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028d2:	f013 0f01 	tst.w	r3, #1
 80028d6:	d006      	beq.n	80028e6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028d8:	6802      	ldr	r2, [r0, #0]
 80028da:	6853      	ldr	r3, [r2, #4]
 80028dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80028e0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80028e2:	430b      	orrs	r3, r1
 80028e4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028e8:	f013 0f02 	tst.w	r3, #2
 80028ec:	d006      	beq.n	80028fc <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028ee:	6802      	ldr	r2, [r0, #0]
 80028f0:	6853      	ldr	r3, [r2, #4]
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028fe:	f013 0f04 	tst.w	r3, #4
 8002902:	d006      	beq.n	8002912 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002904:	6802      	ldr	r2, [r0, #0]
 8002906:	6853      	ldr	r3, [r2, #4]
 8002908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800290e:	430b      	orrs	r3, r1
 8002910:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002912:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002914:	f013 0f08 	tst.w	r3, #8
 8002918:	d006      	beq.n	8002928 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800291a:	6802      	ldr	r2, [r0, #0]
 800291c:	6853      	ldr	r3, [r2, #4]
 800291e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002922:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002924:	430b      	orrs	r3, r1
 8002926:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002928:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800292a:	f013 0f10 	tst.w	r3, #16
 800292e:	d006      	beq.n	800293e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002930:	6802      	ldr	r2, [r0, #0]
 8002932:	6893      	ldr	r3, [r2, #8]
 8002934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002938:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800293a:	430b      	orrs	r3, r1
 800293c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800293e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002940:	f013 0f20 	tst.w	r3, #32
 8002944:	d006      	beq.n	8002954 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002946:	6802      	ldr	r2, [r0, #0]
 8002948:	6893      	ldr	r3, [r2, #8]
 800294a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800294e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002950:	430b      	orrs	r3, r1
 8002952:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002954:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002956:	f013 0f40 	tst.w	r3, #64	; 0x40
 800295a:	d00a      	beq.n	8002972 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800295c:	6802      	ldr	r2, [r0, #0]
 800295e:	6853      	ldr	r3, [r2, #4]
 8002960:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002964:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002966:	430b      	orrs	r3, r1
 8002968:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800296a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800296c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002970:	d00b      	beq.n	800298a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002972:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002974:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002978:	d006      	beq.n	8002988 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800297a:	6802      	ldr	r2, [r0, #0]
 800297c:	6853      	ldr	r3, [r2, #4]
 800297e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002982:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002984:	430b      	orrs	r3, r1
 8002986:	6053      	str	r3, [r2, #4]
 8002988:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800298a:	6802      	ldr	r2, [r0, #0]
 800298c:	6853      	ldr	r3, [r2, #4]
 800298e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002992:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002994:	430b      	orrs	r3, r1
 8002996:	6053      	str	r3, [r2, #4]
 8002998:	e7eb      	b.n	8002972 <UART_AdvFeatureConfig+0xa2>

0800299a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800299a:	b510      	push	{r4, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80029a4:	f7fd fe4c 	bl	8000640 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	f012 0f08 	tst.w	r2, #8
 80029b0:	d109      	bne.n	80029c6 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80029b2:	2320      	movs	r3, #32
 80029b4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 80029b8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029bc:	2000      	movs	r0, #0
 80029be:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 80029c2:	b002      	add	sp, #8
 80029c4:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4603      	mov	r3, r0
 80029ce:	2200      	movs	r2, #0
 80029d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff fca1 	bl	800231c <UART_WaitOnFlagUntilTimeout>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d0e9      	beq.n	80029b2 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80029de:	2003      	movs	r0, #3
 80029e0:	e7ef      	b.n	80029c2 <UART_CheckIdleState+0x28>

080029e2 <HAL_UART_Init>:
  if(huart == NULL)
 80029e2:	b378      	cbz	r0, 8002a44 <HAL_UART_Init+0x62>
{
 80029e4:	b510      	push	{r4, lr}
 80029e6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80029e8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80029ec:	b30b      	cbz	r3, 8002a32 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80029ee:	2324      	movs	r3, #36	; 0x24
 80029f0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80029f4:	6822      	ldr	r2, [r4, #0]
 80029f6:	6813      	ldr	r3, [r2, #0]
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7ff fdb6 	bl	8002570 <UART_SetConfig>
 8002a04:	2801      	cmp	r0, #1
 8002a06:	d01f      	beq.n	8002a48 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a0a:	b9bb      	cbnz	r3, 8002a3c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	6853      	ldr	r3, [r2, #4]
 8002a10:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a14:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	6893      	ldr	r3, [r2, #8]
 8002a1a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002a1e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	6813      	ldr	r3, [r2, #0]
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7ff ffb5 	bl	800299a <UART_CheckIdleState>
 8002a30:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002a32:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002a36:	f009 fd77 	bl	800c528 <HAL_UART_MspInit>
 8002a3a:	e7d8      	b.n	80029ee <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff ff47 	bl	80028d0 <UART_AdvFeatureConfig>
 8002a42:	e7e3      	b.n	8002a0c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
 8002a46:	4770      	bx	lr
}
 8002a48:	bd10      	pop	{r4, pc}

08002a4a <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002a4a:	2884      	cmp	r0, #132	; 0x84
 8002a4c:	d001      	beq.n	8002a52 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8002a4e:	3003      	adds	r0, #3
 8002a50:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a52:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8002a54:	4770      	bx	lr

08002a56 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a56:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8002a5a:	3000      	adds	r0, #0
 8002a5c:	bf18      	it	ne
 8002a5e:	2001      	movne	r0, #1
 8002a60:	4770      	bx	lr

08002a62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a62:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002a64:	f000 fff6 	bl	8003a54 <vTaskStartScheduler>
  
  return osOK;
}
 8002a68:	2000      	movs	r0, #0
 8002a6a:	bd08      	pop	{r3, pc}

08002a6c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002a6c:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8002a6e:	f7ff fff2 	bl	8002a56 <inHandlerMode>
 8002a72:	b910      	cbnz	r0, 8002a7a <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8002a74:	f001 f838 	bl	8003ae8 <xTaskGetTickCount>
  }
}
 8002a78:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 8002a7a:	f001 f83b 	bl	8003af4 <xTaskGetTickCountFromISR>
 8002a7e:	bd08      	pop	{r3, pc}

08002a80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a82:	b085      	sub	sp, #20
 8002a84:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a86:	6844      	ldr	r4, [r0, #4]
 8002a88:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a8a:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a8c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002a90:	f7ff ffdb 	bl	8002a4a <makeFreeRtosPriority>
 8002a94:	ab03      	add	r3, sp, #12
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	9000      	str	r0, [sp, #0]
 8002a9a:	463b      	mov	r3, r7
 8002a9c:	b2b2      	uxth	r2, r6
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f000 ff33 	bl	800390c <xTaskCreate>
 8002aa6:	2801      	cmp	r0, #1
 8002aa8:	d102      	bne.n	8002ab0 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002aaa:	9803      	ldr	r0, [sp, #12]
}
 8002aac:	b005      	add	sp, #20
 8002aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	e7fb      	b.n	8002aac <osThreadCreate+0x2c>

08002ab4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ab4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b900      	cbnz	r0, 8002abc <osDelay+0x8>
 8002aba:	2301      	movs	r3, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 f933 	bl	8003d28 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	bd08      	pop	{r3, pc}

08002ac6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002ac6:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f000 fba7 	bl	800321c <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8002ace:	bd08      	pop	{r3, pc}

08002ad0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002ad0:	b530      	push	{r4, r5, lr}
 8002ad2:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8002ad8:	b360      	cbz	r0, 8002b34 <osMutexWait+0x64>
 8002ada:	460c      	mov	r4, r1
 8002adc:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002ade:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002ae2:	d00d      	beq.n	8002b00 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002ae4:	b901      	cbnz	r1, 8002ae8 <osMutexWait+0x18>
  ticks = 0;
 8002ae6:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002ae8:	f7ff ffb5 	bl	8002a56 <inHandlerMode>
 8002aec:	b1b8      	cbz	r0, 8002b1e <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002aee:	aa01      	add	r2, sp, #4
 8002af0:	2100      	movs	r1, #0
 8002af2:	4628      	mov	r0, r5
 8002af4:	f000 fd58 	bl	80035a8 <xQueueReceiveFromISR>
 8002af8:	2801      	cmp	r0, #1
 8002afa:	d004      	beq.n	8002b06 <osMutexWait+0x36>
      return osErrorOS;
 8002afc:	20ff      	movs	r0, #255	; 0xff
 8002afe:	e017      	b.n	8002b30 <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 8002b00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b04:	e7f0      	b.n	8002ae8 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002b06:	9b01      	ldr	r3, [sp, #4]
 8002b08:	b1b3      	cbz	r3, 8002b38 <osMutexWait+0x68>
 8002b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <osMutexWait+0x70>)
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	e008      	b.n	8002b30 <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	4622      	mov	r2, r4
 8002b22:	4619      	mov	r1, r3
 8002b24:	4628      	mov	r0, r5
 8002b26:	f000 fc61 	bl	80033ec <xQueueGenericReceive>
 8002b2a:	2801      	cmp	r0, #1
 8002b2c:	d006      	beq.n	8002b3c <osMutexWait+0x6c>
    return osErrorOS;
 8002b2e:	20ff      	movs	r0, #255	; 0xff
}
 8002b30:	b003      	add	sp, #12
 8002b32:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8002b34:	2080      	movs	r0, #128	; 0x80
 8002b36:	e7fb      	b.n	8002b30 <osMutexWait+0x60>
  return osOK;
 8002b38:	2000      	movs	r0, #0
 8002b3a:	e7f9      	b.n	8002b30 <osMutexWait+0x60>
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e7f7      	b.n	8002b30 <osMutexWait+0x60>
 8002b40:	e000ed04 	.word	0xe000ed04

08002b44 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002b44:	b510      	push	{r4, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8002b4e:	f7ff ff82 	bl	8002a56 <inHandlerMode>
 8002b52:	b1a0      	cbz	r0, 8002b7e <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002b54:	a901      	add	r1, sp, #4
 8002b56:	4620      	mov	r0, r4
 8002b58:	f000 fbe2 	bl	8003320 <xQueueGiveFromISR>
 8002b5c:	2801      	cmp	r0, #1
 8002b5e:	d002      	beq.n	8002b66 <osMutexRelease+0x22>
      return osErrorOS;
 8002b60:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8002b62:	b002      	add	sp, #8
 8002b64:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002b66:	9b01      	ldr	r3, [sp, #4]
 8002b68:	b1ab      	cbz	r3, 8002b96 <osMutexRelease+0x52>
 8002b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <osMutexRelease+0x58>)
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	e7f1      	b.n	8002b62 <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002b7e:	2300      	movs	r3, #0
 8002b80:	461a      	mov	r2, r3
 8002b82:	4619      	mov	r1, r3
 8002b84:	4620      	mov	r0, r4
 8002b86:	f000 fa71 	bl	800306c <xQueueGenericSend>
 8002b8a:	2801      	cmp	r0, #1
 8002b8c:	d001      	beq.n	8002b92 <osMutexRelease+0x4e>
    result = osErrorOS;
 8002b8e:	20ff      	movs	r0, #255	; 0xff
 8002b90:	e7e7      	b.n	8002b62 <osMutexRelease+0x1e>
  osStatus result = osOK;
 8002b92:	2000      	movs	r0, #0
 8002b94:	e7e5      	b.n	8002b62 <osMutexRelease+0x1e>
 8002b96:	2000      	movs	r0, #0
 8002b98:	e7e3      	b.n	8002b62 <osMutexRelease+0x1e>
 8002b9a:	bf00      	nop
 8002b9c:	e000ed04 	.word	0xe000ed04

08002ba0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002ba0:	b510      	push	{r4, lr}
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002ba2:	2901      	cmp	r1, #1
 8002ba4:	d10d      	bne.n	8002bc2 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2001      	movs	r0, #1
 8002bac:	f000 fa38 	bl	8003020 <xQueueGenericCreate>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	b120      	cbz	r0, 8002bbe <osSemaphoreCreate+0x1e>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f000 fa57 	bl	800306c <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	bd10      	pop	{r4, pc}
    return NULL;
 8002bc2:	2400      	movs	r4, #0
 8002bc4:	e7fb      	b.n	8002bbe <osSemaphoreCreate+0x1e>
	...

08002bc8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002bc8:	b530      	push	{r4, r5, lr}
 8002bca:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8002bd0:	b360      	cbz	r0, 8002c2c <osSemaphoreWait+0x64>
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002bd6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002bda:	d00d      	beq.n	8002bf8 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002bdc:	b901      	cbnz	r1, 8002be0 <osSemaphoreWait+0x18>
  ticks = 0;
 8002bde:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002be0:	f7ff ff39 	bl	8002a56 <inHandlerMode>
 8002be4:	b1b8      	cbz	r0, 8002c16 <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002be6:	aa01      	add	r2, sp, #4
 8002be8:	2100      	movs	r1, #0
 8002bea:	4628      	mov	r0, r5
 8002bec:	f000 fcdc 	bl	80035a8 <xQueueReceiveFromISR>
 8002bf0:	2801      	cmp	r0, #1
 8002bf2:	d004      	beq.n	8002bfe <osSemaphoreWait+0x36>
      return osErrorOS;
 8002bf4:	20ff      	movs	r0, #255	; 0xff
 8002bf6:	e017      	b.n	8002c28 <osSemaphoreWait+0x60>
    ticks = portMAX_DELAY;
 8002bf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002bfc:	e7f0      	b.n	8002be0 <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002bfe:	9b01      	ldr	r3, [sp, #4]
 8002c00:	b1b3      	cbz	r3, 8002c30 <osSemaphoreWait+0x68>
 8002c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <osSemaphoreWait+0x70>)
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8002c12:	2000      	movs	r0, #0
 8002c14:	e008      	b.n	8002c28 <osSemaphoreWait+0x60>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002c16:	2300      	movs	r3, #0
 8002c18:	4622      	mov	r2, r4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f000 fbe5 	bl	80033ec <xQueueGenericReceive>
 8002c22:	2801      	cmp	r0, #1
 8002c24:	d006      	beq.n	8002c34 <osSemaphoreWait+0x6c>
    return osErrorOS;
 8002c26:	20ff      	movs	r0, #255	; 0xff
}
 8002c28:	b003      	add	sp, #12
 8002c2a:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8002c2c:	2080      	movs	r0, #128	; 0x80
 8002c2e:	e7fb      	b.n	8002c28 <osSemaphoreWait+0x60>
  return osOK;
 8002c30:	2000      	movs	r0, #0
 8002c32:	e7f9      	b.n	8002c28 <osSemaphoreWait+0x60>
 8002c34:	2000      	movs	r0, #0
 8002c36:	e7f7      	b.n	8002c28 <osSemaphoreWait+0x60>
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8002c46:	f7ff ff06 	bl	8002a56 <inHandlerMode>
 8002c4a:	b1a0      	cbz	r0, 8002c76 <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002c4c:	a901      	add	r1, sp, #4
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f000 fb66 	bl	8003320 <xQueueGiveFromISR>
 8002c54:	2801      	cmp	r0, #1
 8002c56:	d002      	beq.n	8002c5e <osSemaphoreRelease+0x22>
      return osErrorOS;
 8002c58:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002c5a:	b002      	add	sp, #8
 8002c5c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002c5e:	9b01      	ldr	r3, [sp, #4]
 8002c60:	b1ab      	cbz	r3, 8002c8e <osSemaphoreRelease+0x52>
 8002c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <osSemaphoreRelease+0x58>)
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002c72:	2000      	movs	r0, #0
 8002c74:	e7f1      	b.n	8002c5a <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002c76:	2300      	movs	r3, #0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f000 f9f5 	bl	800306c <xQueueGenericSend>
 8002c82:	2801      	cmp	r0, #1
 8002c84:	d001      	beq.n	8002c8a <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8002c86:	20ff      	movs	r0, #255	; 0xff
 8002c88:	e7e7      	b.n	8002c5a <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	e7e5      	b.n	8002c5a <osSemaphoreRelease+0x1e>
 8002c8e:	2000      	movs	r0, #0
 8002c90:	e7e3      	b.n	8002c5a <osSemaphoreRelease+0x1e>
 8002c92:	bf00      	nop
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002c98:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	6841      	ldr	r1, [r0, #4]
 8002c9e:	6800      	ldr	r0, [r0, #0]
 8002ca0:	f000 f9be 	bl	8003020 <xQueueGenericCreate>
#endif
}
 8002ca4:	bd08      	pop	{r3, pc}
	...

08002ca8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002ca8:	b530      	push	{r4, r5, lr}
 8002caa:	b085      	sub	sp, #20
 8002cac:	4604      	mov	r4, r0
 8002cae:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8002cb4:	4615      	mov	r5, r2
 8002cb6:	b902      	cbnz	r2, 8002cba <osMessagePut+0x12>
    ticks = 1;
 8002cb8:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8002cba:	f7ff fecc 	bl	8002a56 <inHandlerMode>
 8002cbe:	b1a8      	cbz	r0, 8002cec <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	aa03      	add	r2, sp, #12
 8002cc4:	a901      	add	r1, sp, #4
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f000 fab3 	bl	8003232 <xQueueGenericSendFromISR>
 8002ccc:	2801      	cmp	r0, #1
 8002cce:	d001      	beq.n	8002cd4 <osMessagePut+0x2c>
      return osErrorOS;
 8002cd0:	20ff      	movs	r0, #255	; 0xff
 8002cd2:	e014      	b.n	8002cfe <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002cd4:	9b03      	ldr	r3, [sp, #12]
 8002cd6:	b1a3      	cbz	r3, 8002d02 <osMessagePut+0x5a>
 8002cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <osMessagePut+0x64>)
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8002ce8:	2000      	movs	r0, #0
 8002cea:	e008      	b.n	8002cfe <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002cec:	2300      	movs	r3, #0
 8002cee:	462a      	mov	r2, r5
 8002cf0:	a901      	add	r1, sp, #4
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f000 f9ba 	bl	800306c <xQueueGenericSend>
 8002cf8:	2801      	cmp	r0, #1
 8002cfa:	d004      	beq.n	8002d06 <osMessagePut+0x5e>
      return osErrorOS;
 8002cfc:	20ff      	movs	r0, #255	; 0xff
}
 8002cfe:	b005      	add	sp, #20
 8002d00:	bd30      	pop	{r4, r5, pc}
  return osOK;
 8002d02:	2000      	movs	r0, #0
 8002d04:	e7fb      	b.n	8002cfe <osMessagePut+0x56>
 8002d06:	2000      	movs	r0, #0
 8002d08:	e7f9      	b.n	8002cfe <osMessagePut+0x56>
 8002d0a:	bf00      	nop
 8002d0c:	e000ed04 	.word	0xe000ed04

08002d10 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002d16:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8002d1c:	b1f9      	cbz	r1, 8002d5e <osMessageGet+0x4e>
 8002d1e:	460d      	mov	r5, r1
 8002d20:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002d26:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8002d2a:	d021      	beq.n	8002d70 <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002d2c:	b902      	cbnz	r2, 8002d30 <osMessageGet+0x20>
  ticks = 0;
 8002d2e:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002d30:	f7ff fe91 	bl	8002a56 <inHandlerMode>
 8002d34:	b310      	cbz	r0, 8002d7c <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002d36:	aa03      	add	r2, sp, #12
 8002d38:	a901      	add	r1, sp, #4
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	f000 fc34 	bl	80035a8 <xQueueReceiveFromISR>
 8002d40:	2801      	cmp	r0, #1
 8002d42:	d018      	beq.n	8002d76 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002d48:	9b03      	ldr	r3, [sp, #12]
 8002d4a:	b313      	cbz	r3, 8002d92 <osMessageGet+0x82>
 8002d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d50:	4b16      	ldr	r3, [pc, #88]	; (8002dac <osMessageGet+0x9c>)
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	e019      	b.n	8002d92 <osMessageGet+0x82>
    event.status = osErrorParameter;
 8002d5e:	ab04      	add	r3, sp, #16
 8002d60:	2280      	movs	r2, #128	; 0x80
 8002d62:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8002d66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d6e:	e014      	b.n	8002d9a <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 8002d70:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002d74:	e7dc      	b.n	8002d30 <osMessageGet+0x20>
      event.status = osEventMessage;
 8002d76:	2310      	movs	r3, #16
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	e7e5      	b.n	8002d48 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	4632      	mov	r2, r6
 8002d80:	a901      	add	r1, sp, #4
 8002d82:	4628      	mov	r0, r5
 8002d84:	f000 fb32 	bl	80033ec <xQueueGenericReceive>
 8002d88:	2801      	cmp	r0, #1
 8002d8a:	d009      	beq.n	8002da0 <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002d8c:	b95e      	cbnz	r6, 8002da6 <osMessageGet+0x96>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8002d92:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 8002d96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	b004      	add	sp, #16
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8002da0:	2310      	movs	r3, #16
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	e7f5      	b.n	8002d92 <osMessageGet+0x82>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002da6:	2340      	movs	r3, #64	; 0x40
 8002da8:	e7f2      	b.n	8002d90 <osMessageGet+0x80>
 8002daa:	bf00      	nop
 8002dac:	e000ed04 	.word	0xe000ed04

08002db0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002db0:	f100 0308 	add.w	r3, r0, #8
 8002db4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dbc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dbe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	6003      	str	r3, [r0, #0]
 8002dc4:	4770      	bx	lr

08002dc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6103      	str	r3, [r0, #16]
 8002dca:	4770      	bx	lr

08002dcc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002dcc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002dce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002dd8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002dda:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002ddc:	6803      	ldr	r3, [r0, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	6003      	str	r3, [r0, #0]
 8002de2:	4770      	bx	lr

08002de4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002de4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002de6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002de8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002dec:	d002      	beq.n	8002df4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dee:	f100 0208 	add.w	r2, r0, #8
 8002df2:	e002      	b.n	8002dfa <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8002df4:	6902      	ldr	r2, [r0, #16]
 8002df6:	e004      	b.n	8002e02 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6853      	ldr	r3, [r2, #4]
 8002dfc:	681c      	ldr	r4, [r3, #0]
 8002dfe:	42a5      	cmp	r5, r4
 8002e00:	d2fa      	bcs.n	8002df8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e02:	6853      	ldr	r3, [r2, #4]
 8002e04:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e06:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e08:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e0a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e0c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002e0e:	6803      	ldr	r3, [r0, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	6003      	str	r3, [r0, #0]
}
 8002e14:	bc30      	pop	{r4, r5}
 8002e16:	4770      	bx	lr

08002e18 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002e18:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e1a:	6842      	ldr	r2, [r0, #4]
 8002e1c:	6881      	ldr	r1, [r0, #8]
 8002e1e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e20:	6882      	ldr	r2, [r0, #8]
 8002e22:	6841      	ldr	r1, [r0, #4]
 8002e24:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4290      	cmp	r0, r2
 8002e2a:	d005      	beq.n	8002e38 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	3801      	subs	r0, #1
 8002e34:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002e36:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e38:	6882      	ldr	r2, [r0, #8]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	e7f6      	b.n	8002e2c <uxListRemove+0x14>

08002e3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e3e:	b510      	push	{r4, lr}
 8002e40:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e42:	f001 fa1f 	bl	8004284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d004      	beq.n	8002e58 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8002e4e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8002e50:	f001 fa3e 	bl	80042d0 <vPortExitCritical>

	return xReturn;
}
 8002e54:	4620      	mov	r0, r4
 8002e56:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002e58:	2401      	movs	r4, #1
 8002e5a:	e7f9      	b.n	8002e50 <prvIsQueueFull+0x12>

08002e5c <prvIsQueueEmpty>:
{
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002e60:	f001 fa10 	bl	8004284 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e66:	b123      	cbz	r3, 8002e72 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8002e68:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002e6a:	f001 fa31 	bl	80042d0 <vPortExitCritical>
}
 8002e6e:	4620      	mov	r0, r4
 8002e70:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002e72:	2401      	movs	r4, #1
 8002e74:	e7f9      	b.n	8002e6a <prvIsQueueEmpty+0xe>

08002e76 <prvCopyDataToQueue>:
{
 8002e76:	b570      	push	{r4, r5, r6, lr}
 8002e78:	4604      	mov	r4, r0
 8002e7a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e7c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e7e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002e80:	b94a      	cbnz	r2, 8002e96 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e82:	6803      	ldr	r3, [r0, #0]
 8002e84:	bb53      	cbnz	r3, 8002edc <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e86:	6840      	ldr	r0, [r0, #4]
 8002e88:	f001 f930 	bl	80040ec <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002e90:	3501      	adds	r5, #1
 8002e92:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8002e94:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002e96:	b96e      	cbnz	r6, 8002eb4 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e98:	6880      	ldr	r0, [r0, #8]
 8002e9a:	f009 fe3c 	bl	800cb16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ea0:	68a3      	ldr	r3, [r4, #8]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ea6:	6862      	ldr	r2, [r4, #4]
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d319      	bcc.n	8002ee0 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e7ed      	b.n	8002e90 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eb4:	68c0      	ldr	r0, [r0, #12]
 8002eb6:	f009 fe2e 	bl	800cb16 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ebc:	425b      	negs	r3, r3
 8002ebe:	68e2      	ldr	r2, [r4, #12]
 8002ec0:	441a      	add	r2, r3
 8002ec2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ec4:	6821      	ldr	r1, [r4, #0]
 8002ec6:	428a      	cmp	r2, r1
 8002ec8:	d202      	bcs.n	8002ed0 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002eca:	6862      	ldr	r2, [r4, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002ed0:	2e02      	cmp	r6, #2
 8002ed2:	d107      	bne.n	8002ee4 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ed4:	b145      	cbz	r5, 8002ee8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8002ed6:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8002ed8:	2000      	movs	r0, #0
 8002eda:	e7d9      	b.n	8002e90 <prvCopyDataToQueue+0x1a>
 8002edc:	2000      	movs	r0, #0
 8002ede:	e7d7      	b.n	8002e90 <prvCopyDataToQueue+0x1a>
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	e7d5      	b.n	8002e90 <prvCopyDataToQueue+0x1a>
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	e7d3      	b.n	8002e90 <prvCopyDataToQueue+0x1a>
 8002ee8:	2000      	movs	r0, #0
 8002eea:	e7d1      	b.n	8002e90 <prvCopyDataToQueue+0x1a>

08002eec <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002eec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002eee:	b172      	cbz	r2, 8002f0e <prvCopyDataFromQueue+0x22>
{
 8002ef0:	b510      	push	{r4, lr}
 8002ef2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ef4:	68c4      	ldr	r4, [r0, #12]
 8002ef6:	4414      	add	r4, r2
 8002ef8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002efa:	6840      	ldr	r0, [r0, #4]
 8002efc:	4284      	cmp	r4, r0
 8002efe:	d301      	bcc.n	8002f04 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	60d8      	str	r0, [r3, #12]
 8002f04:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002f06:	68d9      	ldr	r1, [r3, #12]
 8002f08:	f009 fe05 	bl	800cb16 <memcpy>
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	4770      	bx	lr

08002f10 <prvUnlockQueue>:
{
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002f14:	f001 f9b6 	bl	8004284 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002f18:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8002f1c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f1e:	e001      	b.n	8002f24 <prvUnlockQueue+0x14>
			--cTxLock;
 8002f20:	3c01      	subs	r4, #1
 8002f22:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f24:	2c00      	cmp	r4, #0
 8002f26:	dd0a      	ble.n	8002f3e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002f2a:	b143      	cbz	r3, 8002f3e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f2c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002f30:	f000 ffd0 	bl	8003ed4 <xTaskRemoveFromEventList>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d0f3      	beq.n	8002f20 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8002f38:	f001 f870 	bl	800401c <vTaskMissedYield>
 8002f3c:	e7f0      	b.n	8002f20 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8002f3e:	23ff      	movs	r3, #255	; 0xff
 8002f40:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002f44:	f001 f9c4 	bl	80042d0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002f48:	f001 f99c 	bl	8004284 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002f4c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8002f50:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f52:	e001      	b.n	8002f58 <prvUnlockQueue+0x48>
				--cRxLock;
 8002f54:	3c01      	subs	r4, #1
 8002f56:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f58:	2c00      	cmp	r4, #0
 8002f5a:	dd0a      	ble.n	8002f72 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f5c:	692b      	ldr	r3, [r5, #16]
 8002f5e:	b143      	cbz	r3, 8002f72 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f60:	f105 0010 	add.w	r0, r5, #16
 8002f64:	f000 ffb6 	bl	8003ed4 <xTaskRemoveFromEventList>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d0f3      	beq.n	8002f54 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8002f6c:	f001 f856 	bl	800401c <vTaskMissedYield>
 8002f70:	e7f0      	b.n	8002f54 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002f72:	23ff      	movs	r3, #255	; 0xff
 8002f74:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002f78:	f001 f9aa 	bl	80042d0 <vPortExitCritical>
 8002f7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002f80 <xQueueGenericReset>:
{
 8002f80:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002f82:	b330      	cbz	r0, 8002fd2 <xQueueGenericReset+0x52>
 8002f84:	4604      	mov	r4, r0
 8002f86:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8002f88:	f001 f97c 	bl	8004284 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002f8c:	6821      	ldr	r1, [r4, #0]
 8002f8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f92:	fb03 1002 	mla	r0, r3, r2, r1
 8002f96:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f98:	2000      	movs	r0, #0
 8002f9a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f9c:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f9e:	3a01      	subs	r2, #1
 8002fa0:	fb02 1303 	mla	r3, r2, r3, r1
 8002fa4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fa6:	23ff      	movs	r3, #255	; 0xff
 8002fa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002fb0:	b9d5      	cbnz	r5, 8002fe8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fb2:	6923      	ldr	r3, [r4, #16]
 8002fb4:	b303      	cbz	r3, 8002ff8 <xQueueGenericReset+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb6:	f104 0010 	add.w	r0, r4, #16
 8002fba:	f000 ff8b 	bl	8003ed4 <xTaskRemoveFromEventList>
 8002fbe:	b1d8      	cbz	r0, 8002ff8 <xQueueGenericReset+0x78>
					queueYIELD_IF_USING_PREEMPTION();
 8002fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <xQueueGenericReset+0x80>)
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	e012      	b.n	8002ff8 <xQueueGenericReset+0x78>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	b672      	cpsid	i
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	b662      	cpsie	i
 8002fe6:	e7fe      	b.n	8002fe6 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fe8:	f104 0010 	add.w	r0, r4, #16
 8002fec:	f7ff fee0 	bl	8002db0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ff0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ff4:	f7ff fedc 	bl	8002db0 <vListInitialise>
	taskEXIT_CRITICAL();
 8002ff8:	f001 f96a 	bl	80042d0 <vPortExitCritical>
}
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	e000ed04 	.word	0xe000ed04

08003004 <prvInitialiseNewQueue>:
{
 8003004:	b510      	push	{r4, lr}
 8003006:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003008:	460c      	mov	r4, r1
 800300a:	b139      	cbz	r1, 800301c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800300c:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800300e:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003010:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003012:	2101      	movs	r1, #1
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ffb3 	bl	8002f80 <xQueueGenericReset>
 800301a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800301c:	601b      	str	r3, [r3, #0]
 800301e:	e7f6      	b.n	800300e <prvInitialiseNewQueue+0xa>

08003020 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003020:	b950      	cbnz	r0, 8003038 <xQueueGenericCreate+0x18>
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	b672      	cpsid	i
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	b662      	cpsie	i
 8003036:	e7fe      	b.n	8003036 <xQueueGenericCreate+0x16>
	{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b083      	sub	sp, #12
 800303c:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800303e:	b111      	cbz	r1, 8003046 <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003040:	fb01 f000 	mul.w	r0, r1, r0
 8003044:	e000      	b.n	8003048 <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 8003046:	2000      	movs	r0, #0
 8003048:	4617      	mov	r7, r2
 800304a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800304c:	3048      	adds	r0, #72	; 0x48
 800304e:	f001 fa9b 	bl	8004588 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003052:	4606      	mov	r6, r0
 8003054:	b138      	cbz	r0, 8003066 <xQueueGenericCreate+0x46>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003056:	9000      	str	r0, [sp, #0]
 8003058:	463b      	mov	r3, r7
 800305a:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800305e:	4621      	mov	r1, r4
 8003060:	4628      	mov	r0, r5
 8003062:	f7ff ffcf 	bl	8003004 <prvInitialiseNewQueue>
	}
 8003066:	4630      	mov	r0, r6
 8003068:	b003      	add	sp, #12
 800306a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800306c <xQueueGenericSend>:
{
 800306c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306e:	b085      	sub	sp, #20
 8003070:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003072:	b170      	cbz	r0, 8003092 <xQueueGenericSend+0x26>
 8003074:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003076:	b1b9      	cbz	r1, 80030a8 <xQueueGenericSend+0x3c>
 8003078:	2501      	movs	r5, #1
 800307a:	b9dd      	cbnz	r5, 80030b4 <xQueueGenericSend+0x48>
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	b672      	cpsid	i
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	b662      	cpsie	i
 8003090:	e7fe      	b.n	8003090 <xQueueGenericSend+0x24>
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	b672      	cpsid	i
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	b662      	cpsie	i
 80030a6:	e7fe      	b.n	80030a6 <xQueueGenericSend+0x3a>
 80030a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80030aa:	b90a      	cbnz	r2, 80030b0 <xQueueGenericSend+0x44>
 80030ac:	2501      	movs	r5, #1
 80030ae:	e7e4      	b.n	800307a <xQueueGenericSend+0xe>
 80030b0:	2500      	movs	r5, #0
 80030b2:	e7e2      	b.n	800307a <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d00b      	beq.n	80030d0 <xQueueGenericSend+0x64>
 80030b8:	b97d      	cbnz	r5, 80030da <xQueueGenericSend+0x6e>
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	b672      	cpsid	i
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	b662      	cpsie	i
 80030ce:	e7fe      	b.n	80030ce <xQueueGenericSend+0x62>
 80030d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030d2:	2a01      	cmp	r2, #1
 80030d4:	d0f0      	beq.n	80030b8 <xQueueGenericSend+0x4c>
 80030d6:	2500      	movs	r5, #0
 80030d8:	e7ee      	b.n	80030b8 <xQueueGenericSend+0x4c>
 80030da:	461e      	mov	r6, r3
 80030dc:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030de:	f000 ffa3 	bl	8004028 <xTaskGetSchedulerState>
 80030e2:	b910      	cbnz	r0, 80030ea <xQueueGenericSend+0x7e>
 80030e4:	9b01      	ldr	r3, [sp, #4]
 80030e6:	b103      	cbz	r3, 80030ea <xQueueGenericSend+0x7e>
 80030e8:	2500      	movs	r5, #0
 80030ea:	b955      	cbnz	r5, 8003102 <xQueueGenericSend+0x96>
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	b672      	cpsid	i
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	b662      	cpsie	i
 8003100:	e7fe      	b.n	8003100 <xQueueGenericSend+0x94>
 8003102:	2500      	movs	r5, #0
 8003104:	e02c      	b.n	8003160 <xQueueGenericSend+0xf4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003106:	4632      	mov	r2, r6
 8003108:	4639      	mov	r1, r7
 800310a:	4620      	mov	r0, r4
 800310c:	f7ff feb3 	bl	8002e76 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003112:	b18b      	cbz	r3, 8003138 <xQueueGenericSend+0xcc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003114:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003118:	f000 fedc 	bl	8003ed4 <xTaskRemoveFromEventList>
 800311c:	b138      	cbz	r0, 800312e <xQueueGenericSend+0xc2>
							queueYIELD_IF_USING_PREEMPTION();
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	4b37      	ldr	r3, [pc, #220]	; (8003200 <xQueueGenericSend+0x194>)
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800312e:	f001 f8cf 	bl	80042d0 <vPortExitCritical>
				return pdPASS;
 8003132:	2001      	movs	r0, #1
}
 8003134:	b005      	add	sp, #20
 8003136:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 8003138:	2800      	cmp	r0, #0
 800313a:	d0f8      	beq.n	800312e <xQueueGenericSend+0xc2>
						queueYIELD_IF_USING_PREEMPTION();
 800313c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <xQueueGenericSend+0x194>)
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	e7ef      	b.n	800312e <xQueueGenericSend+0xc2>
					taskEXIT_CRITICAL();
 800314e:	f001 f8bf 	bl	80042d0 <vPortExitCritical>
					return errQUEUE_FULL;
 8003152:	2000      	movs	r0, #0
 8003154:	e7ee      	b.n	8003134 <xQueueGenericSend+0xc8>
				prvUnlockQueue( pxQueue );
 8003156:	4620      	mov	r0, r4
 8003158:	f7ff feda 	bl	8002f10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800315c:	f000 fd64 	bl	8003c28 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8003160:	f001 f890 	bl	8004284 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003164:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003168:	429a      	cmp	r2, r3
 800316a:	d3cc      	bcc.n	8003106 <xQueueGenericSend+0x9a>
 800316c:	2e02      	cmp	r6, #2
 800316e:	d0ca      	beq.n	8003106 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003170:	9b01      	ldr	r3, [sp, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0eb      	beq.n	800314e <xQueueGenericSend+0xe2>
				else if( xEntryTimeSet == pdFALSE )
 8003176:	b91d      	cbnz	r5, 8003180 <xQueueGenericSend+0x114>
					vTaskSetTimeOutState( &xTimeOut );
 8003178:	a802      	add	r0, sp, #8
 800317a:	f000 fef3 	bl	8003f64 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800317e:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8003180:	f001 f8a6 	bl	80042d0 <vPortExitCritical>
		vTaskSuspendAll();
 8003184:	f000 fca8 	bl	8003ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003188:	f001 f87c 	bl	8004284 <vPortEnterCritical>
 800318c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003190:	b25b      	sxtb	r3, r3
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003196:	d102      	bne.n	800319e <xQueueGenericSend+0x132>
 8003198:	2300      	movs	r3, #0
 800319a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800319e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a8:	d102      	bne.n	80031b0 <xQueueGenericSend+0x144>
 80031aa:	2300      	movs	r3, #0
 80031ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031b0:	f001 f88e 	bl	80042d0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031b4:	a901      	add	r1, sp, #4
 80031b6:	a802      	add	r0, sp, #8
 80031b8:	f000 feec 	bl	8003f94 <xTaskCheckForTimeOut>
 80031bc:	b9c8      	cbnz	r0, 80031f2 <xQueueGenericSend+0x186>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031be:	4620      	mov	r0, r4
 80031c0:	f7ff fe3d 	bl	8002e3e <prvIsQueueFull>
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d0c6      	beq.n	8003156 <xQueueGenericSend+0xea>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031c8:	9901      	ldr	r1, [sp, #4]
 80031ca:	f104 0010 	add.w	r0, r4, #16
 80031ce:	f000 fe67 	bl	8003ea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7ff fe9c 	bl	8002f10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031d8:	f000 fd26 	bl	8003c28 <xTaskResumeAll>
 80031dc:	2800      	cmp	r0, #0
 80031de:	d1bf      	bne.n	8003160 <xQueueGenericSend+0xf4>
					portYIELD_WITHIN_API();
 80031e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <xQueueGenericSend+0x194>)
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	e7b6      	b.n	8003160 <xQueueGenericSend+0xf4>
			prvUnlockQueue( pxQueue );
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff fe8c 	bl	8002f10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031f8:	f000 fd16 	bl	8003c28 <xTaskResumeAll>
			return errQUEUE_FULL;
 80031fc:	2000      	movs	r0, #0
 80031fe:	e799      	b.n	8003134 <xQueueGenericSend+0xc8>
 8003200:	e000ed04 	.word	0xe000ed04

08003204 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8003204:	b148      	cbz	r0, 800321a <prvInitialiseMutex+0x16>
	{
 8003206:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8003208:	2100      	movs	r1, #0
 800320a:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800320c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800320e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003210:	460b      	mov	r3, r1
 8003212:	460a      	mov	r2, r1
 8003214:	f7ff ff2a 	bl	800306c <xQueueGenericSend>
 8003218:	bd08      	pop	{r3, pc}
 800321a:	4770      	bx	lr

0800321c <xQueueCreateMutex>:
	{
 800321c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800321e:	4602      	mov	r2, r0
 8003220:	2100      	movs	r1, #0
 8003222:	2001      	movs	r0, #1
 8003224:	f7ff fefc 	bl	8003020 <xQueueGenericCreate>
 8003228:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800322a:	f7ff ffeb 	bl	8003204 <prvInitialiseMutex>
	}
 800322e:	4620      	mov	r0, r4
 8003230:	bd10      	pop	{r4, pc}

08003232 <xQueueGenericSendFromISR>:
{
 8003232:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8003236:	b170      	cbz	r0, 8003256 <xQueueGenericSendFromISR+0x24>
 8003238:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800323a:	b1b9      	cbz	r1, 800326c <xQueueGenericSendFromISR+0x3a>
 800323c:	2001      	movs	r0, #1
 800323e:	b9d8      	cbnz	r0, 8003278 <xQueueGenericSendFromISR+0x46>
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	b672      	cpsid	i
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	b662      	cpsie	i
 8003254:	e7fe      	b.n	8003254 <xQueueGenericSendFromISR+0x22>
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	b672      	cpsid	i
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	b662      	cpsie	i
 800326a:	e7fe      	b.n	800326a <xQueueGenericSendFromISR+0x38>
 800326c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800326e:	b908      	cbnz	r0, 8003274 <xQueueGenericSendFromISR+0x42>
 8003270:	2001      	movs	r0, #1
 8003272:	e7e4      	b.n	800323e <xQueueGenericSendFromISR+0xc>
 8003274:	2000      	movs	r0, #0
 8003276:	e7e2      	b.n	800323e <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003278:	2b02      	cmp	r3, #2
 800327a:	d00b      	beq.n	8003294 <xQueueGenericSendFromISR+0x62>
 800327c:	b978      	cbnz	r0, 800329e <xQueueGenericSendFromISR+0x6c>
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	b672      	cpsid	i
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	b662      	cpsie	i
 8003292:	e7fe      	b.n	8003292 <xQueueGenericSendFromISR+0x60>
 8003294:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003296:	2d01      	cmp	r5, #1
 8003298:	d0f0      	beq.n	800327c <xQueueGenericSendFromISR+0x4a>
 800329a:	2000      	movs	r0, #0
 800329c:	e7ee      	b.n	800327c <xQueueGenericSendFromISR+0x4a>
 800329e:	461f      	mov	r7, r3
 80032a0:	4690      	mov	r8, r2
 80032a2:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032a4:	f001 f8e0 	bl	8004468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032a8:	f3ef 8611 	mrs	r6, BASEPRI
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	b672      	cpsid	i
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80032c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d301      	bcc.n	80032cc <xQueueGenericSendFromISR+0x9a>
 80032c8:	2f02      	cmp	r7, #2
 80032ca:	d121      	bne.n	8003310 <xQueueGenericSendFromISR+0xde>
			const int8_t cTxLock = pxQueue->cTxLock;
 80032cc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80032d0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032d2:	463a      	mov	r2, r7
 80032d4:	4649      	mov	r1, r9
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7ff fdcd 	bl	8002e76 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80032dc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80032e0:	d110      	bne.n	8003304 <xQueueGenericSendFromISR+0xd2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032e4:	b1b3      	cbz	r3, 8003314 <xQueueGenericSendFromISR+0xe2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032ea:	f000 fdf3 	bl	8003ed4 <xTaskRemoveFromEventList>
 80032ee:	b198      	cbz	r0, 8003318 <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 80032f0:	f1b8 0f00 	cmp.w	r8, #0
 80032f4:	d012      	beq.n	800331c <xQueueGenericSendFromISR+0xea>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032f6:	2001      	movs	r0, #1
 80032f8:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032fc:	f386 8811 	msr	BASEPRI, r6
}
 8003300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003304:	1c6b      	adds	r3, r5, #1
 8003306:	b25b      	sxtb	r3, r3
 8003308:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800330c:	2001      	movs	r0, #1
 800330e:	e7f5      	b.n	80032fc <xQueueGenericSendFromISR+0xca>
			xReturn = errQUEUE_FULL;
 8003310:	2000      	movs	r0, #0
 8003312:	e7f3      	b.n	80032fc <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8003314:	2001      	movs	r0, #1
 8003316:	e7f1      	b.n	80032fc <xQueueGenericSendFromISR+0xca>
 8003318:	2001      	movs	r0, #1
 800331a:	e7ef      	b.n	80032fc <xQueueGenericSendFromISR+0xca>
 800331c:	2001      	movs	r0, #1
 800331e:	e7ed      	b.n	80032fc <xQueueGenericSendFromISR+0xca>

08003320 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8003320:	b170      	cbz	r0, 8003340 <xQueueGiveFromISR+0x20>
{
 8003322:	b570      	push	{r4, r5, r6, lr}
 8003324:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8003326:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003328:	b1ab      	cbz	r3, 8003356 <xQueueGiveFromISR+0x36>
	__asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	b672      	cpsid	i
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	b662      	cpsie	i
 800333e:	e7fe      	b.n	800333e <xQueueGiveFromISR+0x1e>
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	b672      	cpsid	i
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	b662      	cpsie	i
 8003354:	e7fe      	b.n	8003354 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003356:	6803      	ldr	r3, [r0, #0]
 8003358:	b163      	cbz	r3, 8003374 <xQueueGiveFromISR+0x54>
 800335a:	2301      	movs	r3, #1
 800335c:	b983      	cbnz	r3, 8003380 <xQueueGiveFromISR+0x60>
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	b672      	cpsid	i
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	b662      	cpsie	i
 8003372:	e7fe      	b.n	8003372 <xQueueGiveFromISR+0x52>
 8003374:	6843      	ldr	r3, [r0, #4]
 8003376:	b90b      	cbnz	r3, 800337c <xQueueGiveFromISR+0x5c>
 8003378:	2301      	movs	r3, #1
 800337a:	e7ef      	b.n	800335c <xQueueGiveFromISR+0x3c>
 800337c:	2300      	movs	r3, #0
 800337e:	e7ed      	b.n	800335c <xQueueGiveFromISR+0x3c>
 8003380:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003382:	f001 f871 	bl	8004468 <vPortValidateInterruptPriority>
	__asm volatile
 8003386:	f3ef 8511 	mrs	r5, BASEPRI
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	b672      	cpsid	i
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800339e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80033a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d21a      	bcs.n	80033dc <xQueueGiveFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
 80033a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80033aa:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80033ac:	3201      	adds	r2, #1
 80033ae:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b4:	d10c      	bne.n	80033d0 <xQueueGiveFromISR+0xb0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033b8:	b193      	cbz	r3, 80033e0 <xQueueGiveFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033be:	f000 fd89 	bl	8003ed4 <xTaskRemoveFromEventList>
 80033c2:	b178      	cbz	r0, 80033e4 <xQueueGiveFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80033c4:	b186      	cbz	r6, 80033e8 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80033c6:	2001      	movs	r0, #1
 80033c8:	6030      	str	r0, [r6, #0]
	__asm volatile
 80033ca:	f385 8811 	msr	BASEPRI, r5
}
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033d0:	3301      	adds	r3, #1
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80033d8:	2001      	movs	r0, #1
 80033da:	e7f6      	b.n	80033ca <xQueueGiveFromISR+0xaa>
			xReturn = errQUEUE_FULL;
 80033dc:	2000      	movs	r0, #0
 80033de:	e7f4      	b.n	80033ca <xQueueGiveFromISR+0xaa>
			xReturn = pdPASS;
 80033e0:	2001      	movs	r0, #1
 80033e2:	e7f2      	b.n	80033ca <xQueueGiveFromISR+0xaa>
 80033e4:	2001      	movs	r0, #1
 80033e6:	e7f0      	b.n	80033ca <xQueueGiveFromISR+0xaa>
 80033e8:	2001      	movs	r0, #1
 80033ea:	e7ee      	b.n	80033ca <xQueueGiveFromISR+0xaa>

080033ec <xQueueGenericReceive>:
{
 80033ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80033f4:	b170      	cbz	r0, 8003414 <xQueueGenericReceive+0x28>
 80033f6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033f8:	b1b9      	cbz	r1, 800342a <xQueueGenericReceive+0x3e>
 80033fa:	2501      	movs	r5, #1
 80033fc:	b9dd      	cbnz	r5, 8003436 <xQueueGenericReceive+0x4a>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	b672      	cpsid	i
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	b662      	cpsie	i
 8003412:	e7fe      	b.n	8003412 <xQueueGenericReceive+0x26>
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	b672      	cpsid	i
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	b662      	cpsie	i
 8003428:	e7fe      	b.n	8003428 <xQueueGenericReceive+0x3c>
 800342a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800342c:	b90a      	cbnz	r2, 8003432 <xQueueGenericReceive+0x46>
 800342e:	2501      	movs	r5, #1
 8003430:	e7e4      	b.n	80033fc <xQueueGenericReceive+0x10>
 8003432:	2500      	movs	r5, #0
 8003434:	e7e2      	b.n	80033fc <xQueueGenericReceive+0x10>
 8003436:	461f      	mov	r7, r3
 8003438:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800343a:	f000 fdf5 	bl	8004028 <xTaskGetSchedulerState>
 800343e:	b910      	cbnz	r0, 8003446 <xQueueGenericReceive+0x5a>
 8003440:	9b01      	ldr	r3, [sp, #4]
 8003442:	b103      	cbz	r3, 8003446 <xQueueGenericReceive+0x5a>
 8003444:	2500      	movs	r5, #0
 8003446:	b955      	cbnz	r5, 800345e <xQueueGenericReceive+0x72>
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	b672      	cpsid	i
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	b662      	cpsie	i
 800345c:	e7fe      	b.n	800345c <xQueueGenericReceive+0x70>
 800345e:	2600      	movs	r6, #0
 8003460:	e05d      	b.n	800351e <xQueueGenericReceive+0x132>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003462:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003464:	4641      	mov	r1, r8
 8003466:	4620      	mov	r0, r4
 8003468:	f7ff fd40 	bl	8002eec <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800346c:	b9df      	cbnz	r7, 80034a6 <xQueueGenericReceive+0xba>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800346e:	3d01      	subs	r5, #1
 8003470:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	b913      	cbnz	r3, 800347c <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003476:	f000 fe97 	bl	80041a8 <pvTaskIncrementMutexHeldCount>
 800347a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800347c:	6923      	ldr	r3, [r4, #16]
 800347e:	b163      	cbz	r3, 800349a <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003480:	f104 0010 	add.w	r0, r4, #16
 8003484:	f000 fd26 	bl	8003ed4 <xTaskRemoveFromEventList>
 8003488:	b138      	cbz	r0, 800349a <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 800348a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800348e:	4b45      	ldr	r3, [pc, #276]	; (80035a4 <xQueueGenericReceive+0x1b8>)
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800349a:	f000 ff19 	bl	80042d0 <vPortExitCritical>
				return pdPASS;
 800349e:	2001      	movs	r0, #1
}
 80034a0:	b004      	add	sp, #16
 80034a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80034a6:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f5      	beq.n	800349a <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034b2:	f000 fd0f 	bl	8003ed4 <xTaskRemoveFromEventList>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d0ef      	beq.n	800349a <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 80034ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034be:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <xQueueGenericReceive+0x1b8>)
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	e7e6      	b.n	800349a <xQueueGenericReceive+0xae>
					taskEXIT_CRITICAL();
 80034cc:	f000 ff00 	bl	80042d0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80034d0:	2000      	movs	r0, #0
 80034d2:	e7e5      	b.n	80034a0 <xQueueGenericReceive+0xb4>
					vTaskSetTimeOutState( &xTimeOut );
 80034d4:	a802      	add	r0, sp, #8
 80034d6:	f000 fd45 	bl	8003f64 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034da:	2601      	movs	r6, #1
 80034dc:	e029      	b.n	8003532 <xQueueGenericReceive+0x146>
		prvLockQueue( pxQueue );
 80034de:	2300      	movs	r3, #0
 80034e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80034e4:	e031      	b.n	800354a <xQueueGenericReceive+0x15e>
 80034e6:	2300      	movs	r3, #0
 80034e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034ec:	e033      	b.n	8003556 <xQueueGenericReceive+0x16a>
						taskENTER_CRITICAL();
 80034ee:	f000 fec9 	bl	8004284 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80034f2:	6860      	ldr	r0, [r4, #4]
 80034f4:	f000 fda8 	bl	8004048 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80034f8:	f000 feea 	bl	80042d0 <vPortExitCritical>
 80034fc:	e03b      	b.n	8003576 <xQueueGenericReceive+0x18a>
				prvUnlockQueue( pxQueue );
 80034fe:	4620      	mov	r0, r4
 8003500:	f7ff fd06 	bl	8002f10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003504:	f000 fb90 	bl	8003c28 <xTaskResumeAll>
 8003508:	e009      	b.n	800351e <xQueueGenericReceive+0x132>
			prvUnlockQueue( pxQueue );
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fd00 	bl	8002f10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003510:	f000 fb8a 	bl	8003c28 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff fca1 	bl	8002e5c <prvIsQueueEmpty>
 800351a:	2800      	cmp	r0, #0
 800351c:	d140      	bne.n	80035a0 <xQueueGenericReceive+0x1b4>
		taskENTER_CRITICAL();
 800351e:	f000 feb1 	bl	8004284 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003522:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003524:	2d00      	cmp	r5, #0
 8003526:	d19c      	bne.n	8003462 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003528:	9b01      	ldr	r3, [sp, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ce      	beq.n	80034cc <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
 800352e:	2e00      	cmp	r6, #0
 8003530:	d0d0      	beq.n	80034d4 <xQueueGenericReceive+0xe8>
		taskEXIT_CRITICAL();
 8003532:	f000 fecd 	bl	80042d0 <vPortExitCritical>
		vTaskSuspendAll();
 8003536:	f000 facf 	bl	8003ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800353a:	f000 fea3 	bl	8004284 <vPortEnterCritical>
 800353e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003542:	b25b      	sxtb	r3, r3
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003548:	d0c9      	beq.n	80034de <xQueueGenericReceive+0xf2>
 800354a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800354e:	b25b      	sxtb	r3, r3
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003554:	d0c7      	beq.n	80034e6 <xQueueGenericReceive+0xfa>
 8003556:	f000 febb 	bl	80042d0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800355a:	a901      	add	r1, sp, #4
 800355c:	a802      	add	r0, sp, #8
 800355e:	f000 fd19 	bl	8003f94 <xTaskCheckForTimeOut>
 8003562:	2800      	cmp	r0, #0
 8003564:	d1d1      	bne.n	800350a <xQueueGenericReceive+0x11e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003566:	4620      	mov	r0, r4
 8003568:	f7ff fc78 	bl	8002e5c <prvIsQueueEmpty>
 800356c:	2800      	cmp	r0, #0
 800356e:	d0c6      	beq.n	80034fe <xQueueGenericReceive+0x112>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0bb      	beq.n	80034ee <xQueueGenericReceive+0x102>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003576:	9901      	ldr	r1, [sp, #4]
 8003578:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800357c:	f000 fc90 	bl	8003ea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003580:	4620      	mov	r0, r4
 8003582:	f7ff fcc5 	bl	8002f10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003586:	f000 fb4f 	bl	8003c28 <xTaskResumeAll>
 800358a:	2800      	cmp	r0, #0
 800358c:	d1c7      	bne.n	800351e <xQueueGenericReceive+0x132>
					portYIELD_WITHIN_API();
 800358e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <xQueueGenericReceive+0x1b8>)
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	e7be      	b.n	800351e <xQueueGenericReceive+0x132>
				return errQUEUE_EMPTY;
 80035a0:	2000      	movs	r0, #0
 80035a2:	e77d      	b.n	80034a0 <xQueueGenericReceive+0xb4>
 80035a4:	e000ed04 	.word	0xe000ed04

080035a8 <xQueueReceiveFromISR>:
{
 80035a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80035ac:	b170      	cbz	r0, 80035cc <xQueueReceiveFromISR+0x24>
 80035ae:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035b0:	b1b9      	cbz	r1, 80035e2 <xQueueReceiveFromISR+0x3a>
 80035b2:	2301      	movs	r3, #1
 80035b4:	b9db      	cbnz	r3, 80035ee <xQueueReceiveFromISR+0x46>
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	b672      	cpsid	i
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	b662      	cpsie	i
 80035ca:	e7fe      	b.n	80035ca <xQueueReceiveFromISR+0x22>
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	b672      	cpsid	i
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	b662      	cpsie	i
 80035e0:	e7fe      	b.n	80035e0 <xQueueReceiveFromISR+0x38>
 80035e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035e4:	b90b      	cbnz	r3, 80035ea <xQueueReceiveFromISR+0x42>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e7e4      	b.n	80035b4 <xQueueReceiveFromISR+0xc>
 80035ea:	2300      	movs	r3, #0
 80035ec:	e7e2      	b.n	80035b4 <xQueueReceiveFromISR+0xc>
 80035ee:	4617      	mov	r7, r2
 80035f0:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035f2:	f000 ff39 	bl	8004468 <vPortValidateInterruptPriority>
	__asm volatile
 80035f6:	f3ef 8611 	mrs	r6, BASEPRI
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	b672      	cpsid	i
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800360e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003612:	f1b8 0f00 	cmp.w	r8, #0
 8003616:	d020      	beq.n	800365a <xQueueReceiveFromISR+0xb2>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003618:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800361c:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800361e:	4649      	mov	r1, r9
 8003620:	4620      	mov	r0, r4
 8003622:	f7ff fc63 	bl	8002eec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003626:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800362a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800362c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003630:	d10d      	bne.n	800364e <xQueueReceiveFromISR+0xa6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003632:	6923      	ldr	r3, [r4, #16]
 8003634:	b19b      	cbz	r3, 800365e <xQueueReceiveFromISR+0xb6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003636:	f104 0010 	add.w	r0, r4, #16
 800363a:	f000 fc4b 	bl	8003ed4 <xTaskRemoveFromEventList>
 800363e:	b180      	cbz	r0, 8003662 <xQueueReceiveFromISR+0xba>
						if( pxHigherPriorityTaskWoken != NULL )
 8003640:	b18f      	cbz	r7, 8003666 <xQueueReceiveFromISR+0xbe>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003642:	2001      	movs	r0, #1
 8003644:	6038      	str	r0, [r7, #0]
	__asm volatile
 8003646:	f386 8811 	msr	BASEPRI, r6
}
 800364a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800364e:	1c6b      	adds	r3, r5, #1
 8003650:	b25b      	sxtb	r3, r3
 8003652:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8003656:	2001      	movs	r0, #1
 8003658:	e7f5      	b.n	8003646 <xQueueReceiveFromISR+0x9e>
			xReturn = pdFAIL;
 800365a:	2000      	movs	r0, #0
 800365c:	e7f3      	b.n	8003646 <xQueueReceiveFromISR+0x9e>
			xReturn = pdPASS;
 800365e:	2001      	movs	r0, #1
 8003660:	e7f1      	b.n	8003646 <xQueueReceiveFromISR+0x9e>
 8003662:	2001      	movs	r0, #1
 8003664:	e7ef      	b.n	8003646 <xQueueReceiveFromISR+0x9e>
 8003666:	2001      	movs	r0, #1
 8003668:	e7ed      	b.n	8003646 <xQueueReceiveFromISR+0x9e>

0800366a <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 800366a:	b950      	cbnz	r0, 8003682 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003670:	b672      	cpsid	i
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	b662      	cpsie	i
 8003680:	e7fe      	b.n	8003680 <uxQueueMessagesWaiting+0x16>
{
 8003682:	b510      	push	{r4, lr}
 8003684:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003686:	f000 fdfd 	bl	8004284 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800368a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800368c:	f000 fe20 	bl	80042d0 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003690:	4620      	mov	r0, r4
 8003692:	bd10      	pop	{r4, pc}

08003694 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <prvResetNextTaskUnblockTime+0x2c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	b94b      	cbnz	r3, 80036b0 <prvResetNextTaskUnblockTime+0x1c>
 800369c:	2301      	movs	r3, #1
 800369e:	b94b      	cbnz	r3, 80036b4 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036a0:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <prvResetNextTaskUnblockTime+0x2c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <prvResetNextTaskUnblockTime+0x30>)
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036b0:	2300      	movs	r3, #0
 80036b2:	e7f4      	b.n	800369e <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 80036b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <prvResetNextTaskUnblockTime+0x30>)
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	2000009c 	.word	0x2000009c
 80036c4:	20000174 	.word	0x20000174

080036c8 <prvDeleteTCB>:
	{
 80036c8:	b510      	push	{r4, lr}
 80036ca:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 80036cc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80036ce:	f000 ffe5 	bl	800469c <vPortFree>
			vPortFree( pxTCB );
 80036d2:	4620      	mov	r0, r4
 80036d4:	f000 ffe2 	bl	800469c <vPortFree>
 80036d8:	bd10      	pop	{r4, pc}

080036da <prvInitialiseNewTask>:
{
 80036da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036de:	4680      	mov	r8, r0
 80036e0:	4699      	mov	r9, r3
 80036e2:	9d08      	ldr	r5, [sp, #32]
 80036e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80036e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036e8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80036ea:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80036ee:	4413      	add	r3, r2
 80036f0:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036f4:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036f8:	2300      	movs	r3, #0
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	d807      	bhi.n	800370e <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036fe:	5cc8      	ldrb	r0, [r1, r3]
 8003700:	18e2      	adds	r2, r4, r3
 8003702:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8003706:	5cca      	ldrb	r2, [r1, r3]
 8003708:	b10a      	cbz	r2, 800370e <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800370a:	3301      	adds	r3, #1
 800370c:	e7f5      	b.n	80036fa <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800370e:	2300      	movs	r3, #0
 8003710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003714:	2d06      	cmp	r5, #6
 8003716:	d900      	bls.n	800371a <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003718:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800371a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800371c:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800371e:	f04f 0a00 	mov.w	sl, #0
 8003722:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003726:	1d20      	adds	r0, r4, #4
 8003728:	f7ff fb4d 	bl	8002dc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800372c:	f104 0018 	add.w	r0, r4, #24
 8003730:	f7ff fb49 	bl	8002dc6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003734:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003736:	f1c5 0507 	rsb	r5, r5, #7
 800373a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800373c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800373e:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003742:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003746:	464a      	mov	r2, r9
 8003748:	4641      	mov	r1, r8
 800374a:	4630      	mov	r0, r6
 800374c:	f000 fd72 	bl	8004234 <pxPortInitialiseStack>
 8003750:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003752:	b107      	cbz	r7, 8003756 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003754:	603c      	str	r4, [r7, #0]
 8003756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800375c <prvInitialiseTaskLists>:
{
 800375c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800375e:	2400      	movs	r4, #0
 8003760:	e007      	b.n	8003772 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003762:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003766:	0093      	lsls	r3, r2, #2
 8003768:	480e      	ldr	r0, [pc, #56]	; (80037a4 <prvInitialiseTaskLists+0x48>)
 800376a:	4418      	add	r0, r3
 800376c:	f7ff fb20 	bl	8002db0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003770:	3401      	adds	r4, #1
 8003772:	2c06      	cmp	r4, #6
 8003774:	d9f5      	bls.n	8003762 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8003776:	4d0c      	ldr	r5, [pc, #48]	; (80037a8 <prvInitialiseTaskLists+0x4c>)
 8003778:	4628      	mov	r0, r5
 800377a:	f7ff fb19 	bl	8002db0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800377e:	4c0b      	ldr	r4, [pc, #44]	; (80037ac <prvInitialiseTaskLists+0x50>)
 8003780:	4620      	mov	r0, r4
 8003782:	f7ff fb15 	bl	8002db0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003786:	480a      	ldr	r0, [pc, #40]	; (80037b0 <prvInitialiseTaskLists+0x54>)
 8003788:	f7ff fb12 	bl	8002db0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800378c:	4809      	ldr	r0, [pc, #36]	; (80037b4 <prvInitialiseTaskLists+0x58>)
 800378e:	f7ff fb0f 	bl	8002db0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003792:	4809      	ldr	r0, [pc, #36]	; (80037b8 <prvInitialiseTaskLists+0x5c>)
 8003794:	f7ff fb0c 	bl	8002db0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <prvInitialiseTaskLists+0x60>)
 800379a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <prvInitialiseTaskLists+0x64>)
 800379e:	601c      	str	r4, [r3, #0]
 80037a0:	bd38      	pop	{r3, r4, r5, pc}
 80037a2:	bf00      	nop
 80037a4:	200000a4 	.word	0x200000a4
 80037a8:	20000148 	.word	0x20000148
 80037ac:	2000015c 	.word	0x2000015c
 80037b0:	2000017c 	.word	0x2000017c
 80037b4:	200001a8 	.word	0x200001a8
 80037b8:	20000194 	.word	0x20000194
 80037bc:	2000009c 	.word	0x2000009c
 80037c0:	200000a0 	.word	0x200000a0

080037c4 <prvAddNewTaskToReadyList>:
{
 80037c4:	b510      	push	{r4, lr}
 80037c6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80037c8:	f000 fd5c 	bl	8004284 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80037cc:	4a20      	ldr	r2, [pc, #128]	; (8003850 <prvAddNewTaskToReadyList+0x8c>)
 80037ce:	6813      	ldr	r3, [r2, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037d4:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <prvAddNewTaskToReadyList+0x90>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d031      	beq.n	8003840 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 80037dc:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <prvAddNewTaskToReadyList+0x94>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	b93b      	cbnz	r3, 80037f2 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037e2:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <prvAddNewTaskToReadyList+0x90>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d801      	bhi.n	80037f2 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 80037ee:	4b19      	ldr	r3, [pc, #100]	; (8003854 <prvAddNewTaskToReadyList+0x90>)
 80037f0:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 80037f2:	4a1a      	ldr	r2, [pc, #104]	; (800385c <prvAddNewTaskToReadyList+0x98>)
 80037f4:	6813      	ldr	r3, [r2, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80037fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037fc:	2201      	movs	r2, #1
 80037fe:	409a      	lsls	r2, r3
 8003800:	4917      	ldr	r1, [pc, #92]	; (8003860 <prvAddNewTaskToReadyList+0x9c>)
 8003802:	6808      	ldr	r0, [r1, #0]
 8003804:	4302      	orrs	r2, r0
 8003806:	600a      	str	r2, [r1, #0]
 8003808:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800380c:	009a      	lsls	r2, r3, #2
 800380e:	1d21      	adds	r1, r4, #4
 8003810:	4814      	ldr	r0, [pc, #80]	; (8003864 <prvAddNewTaskToReadyList+0xa0>)
 8003812:	4410      	add	r0, r2
 8003814:	f7ff fada 	bl	8002dcc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003818:	f000 fd5a 	bl	80042d0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <prvAddNewTaskToReadyList+0x94>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	b16b      	cbz	r3, 800383e <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <prvAddNewTaskToReadyList+0x90>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800382a:	429a      	cmp	r2, r3
 800382c:	d207      	bcs.n	800383e <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 800382e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <prvAddNewTaskToReadyList+0xa4>)
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <prvAddNewTaskToReadyList+0x90>)
 8003842:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003844:	6813      	ldr	r3, [r2, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d1d3      	bne.n	80037f2 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 800384a:	f7ff ff87 	bl	800375c <prvInitialiseTaskLists>
 800384e:	e7d0      	b.n	80037f2 <prvAddNewTaskToReadyList+0x2e>
 8003850:	20000130 	.word	0x20000130
 8003854:	20000098 	.word	0x20000098
 8003858:	20000190 	.word	0x20000190
 800385c:	20000140 	.word	0x20000140
 8003860:	20000144 	.word	0x20000144
 8003864:	200000a4 	.word	0x200000a4
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	4604      	mov	r4, r0
 8003870:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003872:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <prvAddCurrentTaskToDelayedList+0x84>)
 8003874:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003876:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <prvAddCurrentTaskToDelayedList+0x88>)
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	3004      	adds	r0, #4
 800387c:	f7ff facc 	bl	8002e18 <uxListRemove>
 8003880:	b950      	cbnz	r0, 8003898 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003882:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <prvAddCurrentTaskToDelayedList+0x88>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	2301      	movs	r3, #1
 800388a:	fa03 f202 	lsl.w	r2, r3, r2
 800388e:	491a      	ldr	r1, [pc, #104]	; (80038f8 <prvAddCurrentTaskToDelayedList+0x8c>)
 8003890:	680b      	ldr	r3, [r1, #0]
 8003892:	ea23 0302 	bic.w	r3, r3, r2
 8003896:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003898:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800389c:	bf14      	ite	ne
 800389e:	2300      	movne	r3, #0
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2e00      	cmp	r6, #0
 80038a4:	bf08      	it	eq
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b99b      	cbnz	r3, 80038d2 <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038aa:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <prvAddCurrentTaskToDelayedList+0x88>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80038b2:	42a5      	cmp	r5, r4
 80038b4:	d814      	bhi.n	80038e0 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <prvAddCurrentTaskToDelayedList+0x90>)
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <prvAddCurrentTaskToDelayedList+0x88>)
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	3104      	adds	r1, #4
 80038c0:	f7ff fa90 	bl	8002de4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <prvAddCurrentTaskToDelayedList+0x94>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	429c      	cmp	r4, r3
 80038ca:	d201      	bcs.n	80038d0 <prvAddCurrentTaskToDelayedList+0x64>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <prvAddCurrentTaskToDelayedList+0x94>)
 80038ce:	601c      	str	r4, [r3, #0]
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <prvAddCurrentTaskToDelayedList+0x88>)
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	3104      	adds	r1, #4
 80038d8:	480a      	ldr	r0, [pc, #40]	; (8003904 <prvAddCurrentTaskToDelayedList+0x98>)
 80038da:	f7ff fa77 	bl	8002dcc <vListInsertEnd>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <prvAddCurrentTaskToDelayedList+0x9c>)
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <prvAddCurrentTaskToDelayedList+0x88>)
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	3104      	adds	r1, #4
 80038ea:	f7ff fa7b 	bl	8002de4 <vListInsert>
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	200001bc 	.word	0x200001bc
 80038f4:	20000098 	.word	0x20000098
 80038f8:	20000144 	.word	0x20000144
 80038fc:	2000009c 	.word	0x2000009c
 8003900:	20000174 	.word	0x20000174
 8003904:	20000194 	.word	0x20000194
 8003908:	200000a0 	.word	0x200000a0

0800390c <xTaskCreate>:
	{
 800390c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003910:	b085      	sub	sp, #20
 8003912:	4606      	mov	r6, r0
 8003914:	460f      	mov	r7, r1
 8003916:	4615      	mov	r5, r2
 8003918:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800391a:	0090      	lsls	r0, r2, #2
 800391c:	f000 fe34 	bl	8004588 <pvPortMalloc>
			if( pxStack != NULL )
 8003920:	b300      	cbz	r0, 8003964 <xTaskCreate+0x58>
 8003922:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003924:	2054      	movs	r0, #84	; 0x54
 8003926:	f000 fe2f 	bl	8004588 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800392a:	4604      	mov	r4, r0
 800392c:	b1b0      	cbz	r0, 800395c <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800392e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8003932:	b1cc      	cbz	r4, 8003968 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003934:	2300      	movs	r3, #0
 8003936:	9303      	str	r3, [sp, #12]
 8003938:	9402      	str	r4, [sp, #8]
 800393a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	4643      	mov	r3, r8
 8003944:	462a      	mov	r2, r5
 8003946:	4639      	mov	r1, r7
 8003948:	4630      	mov	r0, r6
 800394a:	f7ff fec6 	bl	80036da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff ff38 	bl	80037c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003954:	2001      	movs	r0, #1
	}
 8003956:	b005      	add	sp, #20
 8003958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800395c:	4648      	mov	r0, r9
 800395e:	f000 fe9d 	bl	800469c <vPortFree>
 8003962:	e7e6      	b.n	8003932 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8003964:	2400      	movs	r4, #0
 8003966:	e7e4      	b.n	8003932 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800396c:	e7f3      	b.n	8003956 <xTaskCreate+0x4a>
	...

08003970 <vTaskDelete>:
	{
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8003974:	f000 fc86 	bl	8004284 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003978:	2c00      	cmp	r4, #0
 800397a:	d034      	beq.n	80039e6 <vTaskDelete+0x76>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800397c:	1d25      	adds	r5, r4, #4
 800397e:	4628      	mov	r0, r5
 8003980:	f7ff fa4a 	bl	8002e18 <uxListRemove>
 8003984:	b970      	cbnz	r0, 80039a4 <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003986:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003988:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800398c:	008b      	lsls	r3, r1, #2
 800398e:	4927      	ldr	r1, [pc, #156]	; (8003a2c <vTaskDelete+0xbc>)
 8003990:	58cb      	ldr	r3, [r1, r3]
 8003992:	b93b      	cbnz	r3, 80039a4 <vTaskDelete+0x34>
 8003994:	2301      	movs	r3, #1
 8003996:	fa03 f202 	lsl.w	r2, r3, r2
 800399a:	4925      	ldr	r1, [pc, #148]	; (8003a30 <vTaskDelete+0xc0>)
 800399c:	680b      	ldr	r3, [r1, #0]
 800399e:	ea23 0302 	bic.w	r3, r3, r2
 80039a2:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039a6:	b11b      	cbz	r3, 80039b0 <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039a8:	f104 0018 	add.w	r0, r4, #24
 80039ac:	f7ff fa34 	bl	8002e18 <uxListRemove>
			uxTaskNumber++;
 80039b0:	4a20      	ldr	r2, [pc, #128]	; (8003a34 <vTaskDelete+0xc4>)
 80039b2:	6813      	ldr	r3, [r2, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 80039b8:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <vTaskDelete+0xc8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	429c      	cmp	r4, r3
 80039be:	d015      	beq.n	80039ec <vTaskDelete+0x7c>
				--uxCurrentNumberOfTasks;
 80039c0:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <vTaskDelete+0xcc>)
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7ff fe7d 	bl	80036c8 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 80039ce:	f7ff fe61 	bl	8003694 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 80039d2:	f000 fc7d 	bl	80042d0 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80039d6:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <vTaskDelete+0xd0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	b11b      	cbz	r3, 80039e4 <vTaskDelete+0x74>
			if( pxTCB == pxCurrentTCB )
 80039dc:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <vTaskDelete+0xc8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	429c      	cmp	r4, r3
 80039e2:	d00c      	beq.n	80039fe <vTaskDelete+0x8e>
 80039e4:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80039e6:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <vTaskDelete+0xc8>)
 80039e8:	681c      	ldr	r4, [r3, #0]
 80039ea:	e7c7      	b.n	800397c <vTaskDelete+0xc>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80039ec:	4629      	mov	r1, r5
 80039ee:	4815      	ldr	r0, [pc, #84]	; (8003a44 <vTaskDelete+0xd4>)
 80039f0:	f7ff f9ec 	bl	8002dcc <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80039f4:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <vTaskDelete+0xd8>)
 80039f6:	6813      	ldr	r3, [r2, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e7e9      	b.n	80039d2 <vTaskDelete+0x62>
				configASSERT( uxSchedulerSuspended == 0 );
 80039fe:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <vTaskDelete+0xdc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	b153      	cbz	r3, 8003a1a <vTaskDelete+0xaa>
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	b672      	cpsid	i
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	b662      	cpsie	i
 8003a18:	e7fe      	b.n	8003a18 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8003a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <vTaskDelete+0xe0>)
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	f3bf 8f6f 	isb	sy
	}
 8003a2a:	e7db      	b.n	80039e4 <vTaskDelete+0x74>
 8003a2c:	200000a4 	.word	0x200000a4
 8003a30:	20000144 	.word	0x20000144
 8003a34:	20000140 	.word	0x20000140
 8003a38:	20000098 	.word	0x20000098
 8003a3c:	20000130 	.word	0x20000130
 8003a40:	20000190 	.word	0x20000190
 8003a44:	200001a8 	.word	0x200001a8
 8003a48:	20000134 	.word	0x20000134
 8003a4c:	2000013c 	.word	0x2000013c
 8003a50:	e000ed04 	.word	0xe000ed04

08003a54 <vTaskStartScheduler>:
{
 8003a54:	b500      	push	{lr}
 8003a56:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8003a58:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <vTaskStartScheduler+0x6c>)
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	4918      	ldr	r1, [pc, #96]	; (8003ac4 <vTaskStartScheduler+0x70>)
 8003a64:	4818      	ldr	r0, [pc, #96]	; (8003ac8 <vTaskStartScheduler+0x74>)
 8003a66:	f7ff ff51 	bl	800390c <xTaskCreate>
	if( xReturn == pdPASS )
 8003a6a:	2801      	cmp	r0, #1
 8003a6c:	d005      	beq.n	8003a7a <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a6e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003a72:	d019      	beq.n	8003aa8 <vTaskStartScheduler+0x54>
}
 8003a74:	b003      	add	sp, #12
 8003a76:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	b672      	cpsid	i
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a92:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <vTaskStartScheduler+0x78>)
 8003a94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a96:	2201      	movs	r2, #1
 8003a98:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <vTaskStartScheduler+0x7c>)
 8003a9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <vTaskStartScheduler+0x80>)
 8003aa0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003aa2:	f000 fc8d 	bl	80043c0 <xPortStartScheduler>
 8003aa6:	e7e5      	b.n	8003a74 <vTaskStartScheduler+0x20>
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	b672      	cpsid	i
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	b662      	cpsie	i
 8003abc:	e7fe      	b.n	8003abc <vTaskStartScheduler+0x68>
 8003abe:	bf00      	nop
 8003ac0:	20000170 	.word	0x20000170
 8003ac4:	0800ddac 	.word	0x0800ddac
 8003ac8:	08003dd9 	.word	0x08003dd9
 8003acc:	20000174 	.word	0x20000174
 8003ad0:	20000190 	.word	0x20000190
 8003ad4:	200001bc 	.word	0x200001bc

08003ad8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003ad8:	4a02      	ldr	r2, [pc, #8]	; (8003ae4 <vTaskSuspendAll+0xc>)
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	2000013c 	.word	0x2000013c

08003ae8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003ae8:	4b01      	ldr	r3, [pc, #4]	; (8003af0 <xTaskGetTickCount+0x8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	200001bc 	.word	0x200001bc

08003af4 <xTaskGetTickCountFromISR>:
{
 8003af4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003af6:	f000 fcb7 	bl	8004468 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003afa:	4b01      	ldr	r3, [pc, #4]	; (8003b00 <xTaskGetTickCountFromISR+0xc>)
 8003afc:	6818      	ldr	r0, [r3, #0]
}
 8003afe:	bd08      	pop	{r3, pc}
 8003b00:	200001bc 	.word	0x200001bc

08003b04 <xTaskIncrementTick>:
{
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <xTaskIncrementTick+0xf8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d16a      	bne.n	8003be4 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003b0e:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <xTaskIncrementTick+0xfc>)
 8003b10:	681d      	ldr	r5, [r3, #0]
 8003b12:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003b14:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003b16:	b9d5      	cbnz	r5, 8003b4e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8003b18:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <xTaskIncrementTick+0x100>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	b153      	cbz	r3, 8003b36 <xTaskIncrementTick+0x32>
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	b672      	cpsid	i
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	b662      	cpsie	i
 8003b34:	e7fe      	b.n	8003b34 <xTaskIncrementTick+0x30>
 8003b36:	4a33      	ldr	r2, [pc, #204]	; (8003c04 <xTaskIncrementTick+0x100>)
 8003b38:	6811      	ldr	r1, [r2, #0]
 8003b3a:	4b33      	ldr	r3, [pc, #204]	; (8003c08 <xTaskIncrementTick+0x104>)
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	6010      	str	r0, [r2, #0]
 8003b40:	6019      	str	r1, [r3, #0]
 8003b42:	4a32      	ldr	r2, [pc, #200]	; (8003c0c <xTaskIncrementTick+0x108>)
 8003b44:	6813      	ldr	r3, [r2, #0]
 8003b46:	3301      	adds	r3, #1
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	f7ff fda3 	bl	8003694 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b4e:	4b30      	ldr	r3, [pc, #192]	; (8003c10 <xTaskIncrementTick+0x10c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	429d      	cmp	r5, r3
 8003b54:	d23a      	bcs.n	8003bcc <xTaskIncrementTick+0xc8>
BaseType_t xSwitchRequired = pdFALSE;
 8003b56:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b58:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <xTaskIncrementTick+0x110>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b62:	009a      	lsls	r2, r3, #2
 8003b64:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <xTaskIncrementTick+0x114>)
 8003b66:	589b      	ldr	r3, [r3, r2]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d940      	bls.n	8003bee <xTaskIncrementTick+0xea>
				xSwitchRequired = pdTRUE;
 8003b6c:	2401      	movs	r4, #1
 8003b6e:	e03e      	b.n	8003bee <xTaskIncrementTick+0xea>
							xSwitchRequired = pdTRUE;
 8003b70:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b72:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <xTaskIncrementTick+0x100>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	b353      	cbz	r3, 8003bd0 <xTaskIncrementTick+0xcc>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	bb53      	cbnz	r3, 8003bd4 <xTaskIncrementTick+0xd0>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b7e:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <xTaskIncrementTick+0x100>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b86:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003b88:	429d      	cmp	r5, r3
 8003b8a:	d328      	bcc.n	8003bde <xTaskIncrementTick+0xda>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b8c:	1d37      	adds	r7, r6, #4
 8003b8e:	4638      	mov	r0, r7
 8003b90:	f7ff f942 	bl	8002e18 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b94:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003b96:	b11b      	cbz	r3, 8003ba0 <xTaskIncrementTick+0x9c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b98:	f106 0018 	add.w	r0, r6, #24
 8003b9c:	f7ff f93c 	bl	8002e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ba0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	491d      	ldr	r1, [pc, #116]	; (8003c1c <xTaskIncrementTick+0x118>)
 8003ba8:	6808      	ldr	r0, [r1, #0]
 8003baa:	4302      	orrs	r2, r0
 8003bac:	600a      	str	r2, [r1, #0]
 8003bae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bb2:	009a      	lsls	r2, r3, #2
 8003bb4:	4639      	mov	r1, r7
 8003bb6:	4818      	ldr	r0, [pc, #96]	; (8003c18 <xTaskIncrementTick+0x114>)
 8003bb8:	4410      	add	r0, r2
 8003bba:	f7ff f907 	bl	8002dcc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bbe:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <xTaskIncrementTick+0x110>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d2d2      	bcs.n	8003b70 <xTaskIncrementTick+0x6c>
 8003bca:	e7d2      	b.n	8003b72 <xTaskIncrementTick+0x6e>
 8003bcc:	2400      	movs	r4, #0
 8003bce:	e7d0      	b.n	8003b72 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e7d3      	b.n	8003b7c <xTaskIncrementTick+0x78>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <xTaskIncrementTick+0x10c>)
 8003bda:	601a      	str	r2, [r3, #0]
					break;
 8003bdc:	e7bc      	b.n	8003b58 <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 8003bde:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <xTaskIncrementTick+0x10c>)
 8003be0:	6013      	str	r3, [r2, #0]
						break;
 8003be2:	e7b9      	b.n	8003b58 <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8003be4:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <xTaskIncrementTick+0x11c>)
 8003be6:	6813      	ldr	r3, [r2, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003bec:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8003bee:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <xTaskIncrementTick+0x120>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 8003bf4:	2401      	movs	r4, #1
}
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2000013c 	.word	0x2000013c
 8003c00:	200001bc 	.word	0x200001bc
 8003c04:	2000009c 	.word	0x2000009c
 8003c08:	200000a0 	.word	0x200000a0
 8003c0c:	20000178 	.word	0x20000178
 8003c10:	20000174 	.word	0x20000174
 8003c14:	20000098 	.word	0x20000098
 8003c18:	200000a4 	.word	0x200000a4
 8003c1c:	20000144 	.word	0x20000144
 8003c20:	20000138 	.word	0x20000138
 8003c24:	200001c0 	.word	0x200001c0

08003c28 <xTaskResumeAll>:
{
 8003c28:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8003c2a:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <xTaskResumeAll+0xdc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	b953      	cbnz	r3, 8003c46 <xTaskResumeAll+0x1e>
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	b672      	cpsid	i
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	b662      	cpsie	i
 8003c44:	e7fe      	b.n	8003c44 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8003c46:	f000 fb1d 	bl	8004284 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003c4a:	4b2e      	ldr	r3, [pc, #184]	; (8003d04 <xTaskResumeAll+0xdc>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d150      	bne.n	8003cfa <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <xTaskResumeAll+0xe0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	b923      	cbnz	r3, 8003c68 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8003c5e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003c60:	f000 fb36 	bl	80042d0 <vPortExitCritical>
}
 8003c64:	4620      	mov	r0, r4
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c6a:	4b28      	ldr	r3, [pc, #160]	; (8003d0c <xTaskResumeAll+0xe4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	b31b      	cbz	r3, 8003cb8 <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c70:	4b26      	ldr	r3, [pc, #152]	; (8003d0c <xTaskResumeAll+0xe4>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c76:	f104 0018 	add.w	r0, r4, #24
 8003c7a:	f7ff f8cd 	bl	8002e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7e:	1d25      	adds	r5, r4, #4
 8003c80:	4628      	mov	r0, r5
 8003c82:	f7ff f8c9 	bl	8002e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c88:	2201      	movs	r2, #1
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	4920      	ldr	r1, [pc, #128]	; (8003d10 <xTaskResumeAll+0xe8>)
 8003c8e:	6808      	ldr	r0, [r1, #0]
 8003c90:	4302      	orrs	r2, r0
 8003c92:	600a      	str	r2, [r1, #0]
 8003c94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c98:	009a      	lsls	r2, r3, #2
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	481d      	ldr	r0, [pc, #116]	; (8003d14 <xTaskResumeAll+0xec>)
 8003c9e:	4410      	add	r0, r2
 8003ca0:	f7ff f894 	bl	8002dcc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <xTaskResumeAll+0xf0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d3dc      	bcc.n	8003c6a <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <xTaskResumeAll+0xf4>)
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e7d8      	b.n	8003c6a <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8003cb8:	b10c      	cbz	r4, 8003cbe <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8003cba:	f7ff fceb 	bl	8003694 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cbe:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <xTaskResumeAll+0xf8>)
 8003cc0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cc2:	b974      	cbnz	r4, 8003ce2 <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 8003cc4:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <xTaskResumeAll+0xf4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b1cb      	cbz	r3, 8003cfe <xTaskResumeAll+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 8003cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <xTaskResumeAll+0xfc>)
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003cda:	2401      	movs	r4, #1
 8003cdc:	e7c0      	b.n	8003c60 <xTaskResumeAll+0x38>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cde:	3c01      	subs	r4, #1
 8003ce0:	d007      	beq.n	8003cf2 <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 8003ce2:	f7ff ff0f 	bl	8003b04 <xTaskIncrementTick>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d0f9      	beq.n	8003cde <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8003cea:	2201      	movs	r2, #1
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <xTaskResumeAll+0xf4>)
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e7f5      	b.n	8003cde <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <xTaskResumeAll+0xf8>)
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e7e4      	b.n	8003cc4 <xTaskResumeAll+0x9c>
BaseType_t xAlreadyYielded = pdFALSE;
 8003cfa:	2400      	movs	r4, #0
 8003cfc:	e7b0      	b.n	8003c60 <xTaskResumeAll+0x38>
 8003cfe:	2400      	movs	r4, #0
 8003d00:	e7ae      	b.n	8003c60 <xTaskResumeAll+0x38>
 8003d02:	bf00      	nop
 8003d04:	2000013c 	.word	0x2000013c
 8003d08:	20000130 	.word	0x20000130
 8003d0c:	2000017c 	.word	0x2000017c
 8003d10:	20000144 	.word	0x20000144
 8003d14:	200000a4 	.word	0x200000a4
 8003d18:	20000098 	.word	0x20000098
 8003d1c:	200001c0 	.word	0x200001c0
 8003d20:	20000138 	.word	0x20000138
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <vTaskDelay>:
	{
 8003d28:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d2a:	b1b8      	cbz	r0, 8003d5c <vTaskDelay+0x34>
 8003d2c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <vTaskDelay+0x4c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	b153      	cbz	r3, 8003d4a <vTaskDelay+0x22>
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	b672      	cpsid	i
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	b662      	cpsie	i
 8003d48:	e7fe      	b.n	8003d48 <vTaskDelay+0x20>
			vTaskSuspendAll();
 8003d4a:	f7ff fec5 	bl	8003ad8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4620      	mov	r0, r4
 8003d52:	f7ff fd8b 	bl	800386c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003d56:	f7ff ff67 	bl	8003c28 <xTaskResumeAll>
 8003d5a:	e000      	b.n	8003d5e <vTaskDelay+0x36>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d5c:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003d5e:	b938      	cbnz	r0, 8003d70 <vTaskDelay+0x48>
			portYIELD_WITHIN_API();
 8003d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <vTaskDelay+0x50>)
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	bf00      	nop
 8003d74:	2000013c 	.word	0x2000013c
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <prvCheckTasksWaitingTermination+0x50>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	b313      	cbz	r3, 8003dc8 <prvCheckTasksWaitingTermination+0x4c>
{
 8003d82:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8003d84:	f7ff fea8 	bl	8003ad8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <prvCheckTasksWaitingTermination+0x54>)
 8003d8a:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8003d8c:	f7ff ff4c 	bl	8003c28 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003d90:	b924      	cbnz	r4, 8003d9c <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d92:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <prvCheckTasksWaitingTermination+0x50>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f4      	bne.n	8003d84 <prvCheckTasksWaitingTermination+0x8>
}
 8003d9a:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8003d9c:	f000 fa72 	bl	8004284 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <prvCheckTasksWaitingTermination+0x54>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003da6:	1d20      	adds	r0, r4, #4
 8003da8:	f7ff f836 	bl	8002e18 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003dac:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <prvCheckTasksWaitingTermination+0x58>)
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003db4:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <prvCheckTasksWaitingTermination+0x50>)
 8003db6:	6813      	ldr	r3, [r2, #0]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8003dbc:	f000 fa88 	bl	80042d0 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f7ff fc81 	bl	80036c8 <prvDeleteTCB>
 8003dc6:	e7e4      	b.n	8003d92 <prvCheckTasksWaitingTermination+0x16>
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000134 	.word	0x20000134
 8003dd0:	200001a8 	.word	0x200001a8
 8003dd4:	20000130 	.word	0x20000130

08003dd8 <prvIdleTask>:
{
 8003dd8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8003dda:	f7ff ffcf 	bl	8003d7c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <prvIdleTask+0x20>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d9f9      	bls.n	8003dda <prvIdleTask+0x2>
				taskYIELD();
 8003de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dea:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <prvIdleTask+0x24>)
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	e7f0      	b.n	8003dda <prvIdleTask+0x2>
 8003df8:	200000a4 	.word	0x200000a4
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e00:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <vTaskSwitchContext+0x8c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	b9d3      	cbnz	r3, 8003e3c <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
 8003e06:	2200      	movs	r2, #0
 8003e08:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <vTaskSwitchContext+0x90>)
 8003e0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e0c:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <vTaskSwitchContext+0x94>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003e10:	fab3 f383 	clz	r3, r3
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f1c3 031f 	rsb	r3, r3, #31
 8003e1a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003e1e:	008a      	lsls	r2, r1, #2
 8003e20:	491d      	ldr	r1, [pc, #116]	; (8003e98 <vTaskSwitchContext+0x98>)
 8003e22:	588a      	ldr	r2, [r1, r2]
 8003e24:	b972      	cbnz	r2, 8003e44 <vTaskSwitchContext+0x44>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	b672      	cpsid	i
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	b662      	cpsie	i
 8003e3a:	e7fe      	b.n	8003e3a <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <vTaskSwitchContext+0x90>)
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	4770      	bx	lr
{
 8003e44:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e46:	4814      	ldr	r0, [pc, #80]	; (8003e98 <vTaskSwitchContext+0x98>)
 8003e48:	009a      	lsls	r2, r3, #2
 8003e4a:	18d4      	adds	r4, r2, r3
 8003e4c:	00a1      	lsls	r1, r4, #2
 8003e4e:	4401      	add	r1, r0
 8003e50:	684c      	ldr	r4, [r1, #4]
 8003e52:	6864      	ldr	r4, [r4, #4]
 8003e54:	604c      	str	r4, [r1, #4]
 8003e56:	441a      	add	r2, r3
 8003e58:	0091      	lsls	r1, r2, #2
 8003e5a:	3108      	adds	r1, #8
 8003e5c:	4408      	add	r0, r1
 8003e5e:	4284      	cmp	r4, r0
 8003e60:	d00b      	beq.n	8003e7a <vTaskSwitchContext+0x7a>
 8003e62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e66:	009a      	lsls	r2, r3, #2
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <vTaskSwitchContext+0x98>)
 8003e6a:	4413      	add	r3, r2
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <vTaskSwitchContext+0x9c>)
 8003e72:	601a      	str	r2, [r3, #0]
}
 8003e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e78:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e7a:	6860      	ldr	r0, [r4, #4]
 8003e7c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003e80:	0091      	lsls	r1, r2, #2
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <vTaskSwitchContext+0x98>)
 8003e84:	440a      	add	r2, r1
 8003e86:	6050      	str	r0, [r2, #4]
 8003e88:	e7eb      	b.n	8003e62 <vTaskSwitchContext+0x62>
 8003e8a:	bf00      	nop
 8003e8c:	2000013c 	.word	0x2000013c
 8003e90:	200001c0 	.word	0x200001c0
 8003e94:	20000144 	.word	0x20000144
 8003e98:	200000a4 	.word	0x200000a4
 8003e9c:	20000098 	.word	0x20000098

08003ea0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003ea0:	b950      	cbnz	r0, 8003eb8 <vTaskPlaceOnEventList+0x18>
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	b672      	cpsid	i
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	b662      	cpsie	i
 8003eb6:	e7fe      	b.n	8003eb6 <vTaskPlaceOnEventList+0x16>
{
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <vTaskPlaceOnEventList+0x30>)
 8003ebe:	6819      	ldr	r1, [r3, #0]
 8003ec0:	3118      	adds	r1, #24
 8003ec2:	f7fe ff8f 	bl	8002de4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f7ff fccf 	bl	800386c <prvAddCurrentTaskToDelayedList>
 8003ece:	bd10      	pop	{r4, pc}
 8003ed0:	20000098 	.word	0x20000098

08003ed4 <xTaskRemoveFromEventList>:
{
 8003ed4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ed6:	68c3      	ldr	r3, [r0, #12]
 8003ed8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003eda:	b324      	cbz	r4, 8003f26 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003edc:	f104 0518 	add.w	r5, r4, #24
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f7fe ff99 	bl	8002e18 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <xTaskRemoveFromEventList+0x78>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	bb3b      	cbnz	r3, 8003f3c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003eec:	1d25      	adds	r5, r4, #4
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f7fe ff92 	bl	8002e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ef4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	4915      	ldr	r1, [pc, #84]	; (8003f50 <xTaskRemoveFromEventList+0x7c>)
 8003efc:	6808      	ldr	r0, [r1, #0]
 8003efe:	4302      	orrs	r2, r0
 8003f00:	600a      	str	r2, [r1, #0]
 8003f02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f06:	009a      	lsls	r2, r3, #2
 8003f08:	4629      	mov	r1, r5
 8003f0a:	4812      	ldr	r0, [pc, #72]	; (8003f54 <xTaskRemoveFromEventList+0x80>)
 8003f0c:	4410      	add	r0, r2
 8003f0e:	f7fe ff5d 	bl	8002dcc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <xTaskRemoveFromEventList+0x84>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d913      	bls.n	8003f46 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8003f1e:	2001      	movs	r0, #1
 8003f20:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <xTaskRemoveFromEventList+0x88>)
 8003f22:	6018      	str	r0, [r3, #0]
 8003f24:	bd38      	pop	{r3, r4, r5, pc}
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	b672      	cpsid	i
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	b662      	cpsie	i
 8003f3a:	e7fe      	b.n	8003f3a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4808      	ldr	r0, [pc, #32]	; (8003f60 <xTaskRemoveFromEventList+0x8c>)
 8003f40:	f7fe ff44 	bl	8002dcc <vListInsertEnd>
 8003f44:	e7e5      	b.n	8003f12 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8003f46:	2000      	movs	r0, #0
}
 8003f48:	bd38      	pop	{r3, r4, r5, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2000013c 	.word	0x2000013c
 8003f50:	20000144 	.word	0x20000144
 8003f54:	200000a4 	.word	0x200000a4
 8003f58:	20000098 	.word	0x20000098
 8003f5c:	200001c0 	.word	0x200001c0
 8003f60:	2000017c 	.word	0x2000017c

08003f64 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8003f64:	b130      	cbz	r0, 8003f74 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f66:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <vTaskSetTimeOutState+0x28>)
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f6c:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <vTaskSetTimeOutState+0x2c>)
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	6042      	str	r2, [r0, #4]
 8003f72:	4770      	bx	lr
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	b672      	cpsid	i
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	b662      	cpsie	i
 8003f88:	e7fe      	b.n	8003f88 <vTaskSetTimeOutState+0x24>
 8003f8a:	bf00      	nop
 8003f8c:	20000178 	.word	0x20000178
 8003f90:	200001bc 	.word	0x200001bc

08003f94 <xTaskCheckForTimeOut>:
{
 8003f94:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8003f96:	b1c0      	cbz	r0, 8003fca <xTaskCheckForTimeOut+0x36>
 8003f98:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8003f9a:	b309      	cbz	r1, 8003fe0 <xTaskCheckForTimeOut+0x4c>
 8003f9c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8003f9e:	f000 f971 	bl	8004284 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <xTaskCheckForTimeOut+0x80>)
 8003fa4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003fa6:	682b      	ldr	r3, [r5, #0]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fac:	d02e      	beq.n	800400c <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	4a19      	ldr	r2, [pc, #100]	; (8004018 <xTaskCheckForTimeOut+0x84>)
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	4290      	cmp	r0, r2
 8003fb6:	d002      	beq.n	8003fbe <xTaskCheckForTimeOut+0x2a>
 8003fb8:	6862      	ldr	r2, [r4, #4]
 8003fba:	4291      	cmp	r1, r2
 8003fbc:	d228      	bcs.n	8004010 <xTaskCheckForTimeOut+0x7c>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fbe:	6862      	ldr	r2, [r4, #4]
 8003fc0:	1a88      	subs	r0, r1, r2
 8003fc2:	4283      	cmp	r3, r0
 8003fc4:	d817      	bhi.n	8003ff6 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 8003fc6:	2401      	movs	r4, #1
 8003fc8:	e01c      	b.n	8004004 <xTaskCheckForTimeOut+0x70>
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	b672      	cpsid	i
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	b662      	cpsie	i
 8003fde:	e7fe      	b.n	8003fde <xTaskCheckForTimeOut+0x4a>
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	b672      	cpsid	i
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	b662      	cpsie	i
 8003ff4:	e7fe      	b.n	8003ff4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003ff6:	1a52      	subs	r2, r2, r1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f7ff ffb1 	bl	8003f64 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8004002:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004004:	f000 f964 	bl	80042d0 <vPortExitCritical>
}
 8004008:	4620      	mov	r0, r4
 800400a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 800400c:	2400      	movs	r4, #0
 800400e:	e7f9      	b.n	8004004 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 8004010:	2401      	movs	r4, #1
 8004012:	e7f7      	b.n	8004004 <xTaskCheckForTimeOut+0x70>
 8004014:	200001bc 	.word	0x200001bc
 8004018:	20000178 	.word	0x20000178

0800401c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800401c:	2201      	movs	r2, #1
 800401e:	4b01      	ldr	r3, [pc, #4]	; (8004024 <vTaskMissedYield+0x8>)
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	4770      	bx	lr
 8004024:	200001c0 	.word	0x200001c0

08004028 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <xTaskGetSchedulerState+0x18>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	b123      	cbz	r3, 8004038 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <xTaskGetSchedulerState+0x1c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	b91b      	cbnz	r3, 800403c <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8004034:	2002      	movs	r0, #2
 8004036:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004038:	2001      	movs	r0, #1
 800403a:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 800403c:	2000      	movs	r0, #0
	}
 800403e:	4770      	bx	lr
 8004040:	20000190 	.word	0x20000190
 8004044:	2000013c 	.word	0x2000013c

08004048 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8004048:	2800      	cmp	r0, #0
 800404a:	d047      	beq.n	80040dc <vTaskPriorityInherit+0x94>
	{
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004050:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004052:	4923      	ldr	r1, [pc, #140]	; (80040e0 <vTaskPriorityInherit+0x98>)
 8004054:	6809      	ldr	r1, [r1, #0]
 8004056:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004058:	428b      	cmp	r3, r1
 800405a:	d216      	bcs.n	800408a <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800405c:	6981      	ldr	r1, [r0, #24]
 800405e:	2900      	cmp	r1, #0
 8004060:	db05      	blt.n	800406e <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004062:	491f      	ldr	r1, [pc, #124]	; (80040e0 <vTaskPriorityInherit+0x98>)
 8004064:	6809      	ldr	r1, [r1, #0]
 8004066:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004068:	f1c1 0107 	rsb	r1, r1, #7
 800406c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800406e:	6960      	ldr	r0, [r4, #20]
 8004070:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004074:	0099      	lsls	r1, r3, #2
 8004076:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <vTaskPriorityInherit+0x9c>)
 8004078:	440b      	add	r3, r1
 800407a:	4298      	cmp	r0, r3
 800407c:	d006      	beq.n	800408c <vTaskPriorityInherit+0x44>
 800407e:	2300      	movs	r3, #0
 8004080:	b933      	cbnz	r3, 8004090 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <vTaskPriorityInherit+0x98>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	62e3      	str	r3, [r4, #44]	; 0x2c
 800408a:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800408c:	2301      	movs	r3, #1
 800408e:	e7f7      	b.n	8004080 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004090:	1d25      	adds	r5, r4, #4
 8004092:	4628      	mov	r0, r5
 8004094:	f7fe fec0 	bl	8002e18 <uxListRemove>
 8004098:	b968      	cbnz	r0, 80040b6 <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800409a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800409c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80040a0:	008a      	lsls	r2, r1, #2
 80040a2:	4910      	ldr	r1, [pc, #64]	; (80040e4 <vTaskPriorityInherit+0x9c>)
 80040a4:	588a      	ldr	r2, [r1, r2]
 80040a6:	b932      	cbnz	r2, 80040b6 <vTaskPriorityInherit+0x6e>
 80040a8:	2201      	movs	r2, #1
 80040aa:	409a      	lsls	r2, r3
 80040ac:	490e      	ldr	r1, [pc, #56]	; (80040e8 <vTaskPriorityInherit+0xa0>)
 80040ae:	680b      	ldr	r3, [r1, #0]
 80040b0:	ea23 0302 	bic.w	r3, r3, r2
 80040b4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <vTaskPriorityInherit+0x98>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80040be:	2201      	movs	r2, #1
 80040c0:	409a      	lsls	r2, r3
 80040c2:	4909      	ldr	r1, [pc, #36]	; (80040e8 <vTaskPriorityInherit+0xa0>)
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	4302      	orrs	r2, r0
 80040c8:	600a      	str	r2, [r1, #0]
 80040ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80040ce:	009a      	lsls	r2, r3, #2
 80040d0:	4629      	mov	r1, r5
 80040d2:	4804      	ldr	r0, [pc, #16]	; (80040e4 <vTaskPriorityInherit+0x9c>)
 80040d4:	4410      	add	r0, r2
 80040d6:	f7fe fe79 	bl	8002dcc <vListInsertEnd>
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000098 	.word	0x20000098
 80040e4:	200000a4 	.word	0x200000a4
 80040e8:	20000144 	.word	0x20000144

080040ec <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d04e      	beq.n	800418e <xTaskPriorityDisinherit+0xa2>
	{
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80040f4:	4a29      	ldr	r2, [pc, #164]	; (800419c <xTaskPriorityDisinherit+0xb0>)
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	4290      	cmp	r0, r2
 80040fa:	d00a      	beq.n	8004112 <xTaskPriorityDisinherit+0x26>
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	b672      	cpsid	i
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	b662      	cpsie	i
 8004110:	e7fe      	b.n	8004110 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8004112:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004114:	b952      	cbnz	r2, 800412c <xTaskPriorityDisinherit+0x40>
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	b672      	cpsid	i
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	b662      	cpsie	i
 800412a:	e7fe      	b.n	800412a <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 800412c:	3a01      	subs	r2, #1
 800412e:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004130:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004132:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004134:	4288      	cmp	r0, r1
 8004136:	d02c      	beq.n	8004192 <xTaskPriorityDisinherit+0xa6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004138:	bb6a      	cbnz	r2, 8004196 <xTaskPriorityDisinherit+0xaa>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800413a:	1d25      	adds	r5, r4, #4
 800413c:	4628      	mov	r0, r5
 800413e:	f7fe fe6b 	bl	8002e18 <uxListRemove>
 8004142:	b970      	cbnz	r0, 8004162 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004144:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004146:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800414a:	008b      	lsls	r3, r1, #2
 800414c:	4914      	ldr	r1, [pc, #80]	; (80041a0 <xTaskPriorityDisinherit+0xb4>)
 800414e:	58cb      	ldr	r3, [r1, r3]
 8004150:	b93b      	cbnz	r3, 8004162 <xTaskPriorityDisinherit+0x76>
 8004152:	2301      	movs	r3, #1
 8004154:	fa03 f202 	lsl.w	r2, r3, r2
 8004158:	4912      	ldr	r1, [pc, #72]	; (80041a4 <xTaskPriorityDisinherit+0xb8>)
 800415a:	680b      	ldr	r3, [r1, #0]
 800415c:	ea23 0302 	bic.w	r3, r3, r2
 8004160:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004162:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004164:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004166:	f1c3 0207 	rsb	r2, r3, #7
 800416a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800416c:	2401      	movs	r4, #1
 800416e:	fa04 f203 	lsl.w	r2, r4, r3
 8004172:	490c      	ldr	r1, [pc, #48]	; (80041a4 <xTaskPriorityDisinherit+0xb8>)
 8004174:	6808      	ldr	r0, [r1, #0]
 8004176:	4302      	orrs	r2, r0
 8004178:	600a      	str	r2, [r1, #0]
 800417a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800417e:	009a      	lsls	r2, r3, #2
 8004180:	4629      	mov	r1, r5
 8004182:	4807      	ldr	r0, [pc, #28]	; (80041a0 <xTaskPriorityDisinherit+0xb4>)
 8004184:	4410      	add	r0, r2
 8004186:	f7fe fe21 	bl	8002dcc <vListInsertEnd>
					xReturn = pdTRUE;
 800418a:	4620      	mov	r0, r4
 800418c:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800418e:	2000      	movs	r0, #0
 8004190:	4770      	bx	lr
 8004192:	2000      	movs	r0, #0
 8004194:	bd38      	pop	{r3, r4, r5, pc}
 8004196:	2000      	movs	r0, #0
	}
 8004198:	bd38      	pop	{r3, r4, r5, pc}
 800419a:	bf00      	nop
 800419c:	20000098 	.word	0x20000098
 80041a0:	200000a4 	.word	0x200000a4
 80041a4:	20000144 	.word	0x20000144

080041a8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <pvTaskIncrementMutexHeldCount+0x18>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b123      	cbz	r3, 80041b8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80041ae:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <pvTaskIncrementMutexHeldCount+0x18>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80041b4:	3301      	adds	r3, #1
 80041b6:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 80041b8:	4b01      	ldr	r3, [pc, #4]	; (80041c0 <pvTaskIncrementMutexHeldCount+0x18>)
 80041ba:	6818      	ldr	r0, [r3, #0]
	}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	20000098 	.word	0x20000098

080041c4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <prvTaskExitError+0x38>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041cc:	d00a      	beq.n	80041e4 <prvTaskExitError+0x20>
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	b672      	cpsid	i
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	b662      	cpsie	i
 80041e2:	e7fe      	b.n	80041e2 <prvTaskExitError+0x1e>
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	b672      	cpsid	i
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	b662      	cpsie	i
 80041f8:	e7fe      	b.n	80041f8 <prvTaskExitError+0x34>
 80041fa:	bf00      	nop
 80041fc:	20000004 	.word	0x20000004

08004200 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004200:	4806      	ldr	r0, [pc, #24]	; (800421c <prvPortStartFirstTask+0x1c>)
 8004202:	6800      	ldr	r0, [r0, #0]
 8004204:	6800      	ldr	r0, [r0, #0]
 8004206:	f380 8808 	msr	MSP, r0
 800420a:	b662      	cpsie	i
 800420c:	b661      	cpsie	f
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	df00      	svc	0
 8004218:	bf00      	nop
 800421a:	0000      	.short	0x0000
 800421c:	e000ed08 	.word	0xe000ed08

08004220 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004220:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004230 <vPortEnableVFP+0x10>
 8004224:	6801      	ldr	r1, [r0, #0]
 8004226:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800422a:	6001      	str	r1, [r0, #0]
 800422c:	4770      	bx	lr
 800422e:	0000      	.short	0x0000
 8004230:	e000ed88 	.word	0xe000ed88

08004234 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004238:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800423c:	f021 0101 	bic.w	r1, r1, #1
 8004240:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <pxPortInitialiseStack+0x28>)
 8004246:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800424a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800424e:	f06f 0302 	mvn.w	r3, #2
 8004252:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004256:	3844      	subs	r0, #68	; 0x44
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	080041c5 	.word	0x080041c5

08004260 <SVC_Handler>:
	__asm volatile (
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <pxCurrentTCBConst2>)
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	6808      	ldr	r0, [r1, #0]
 8004266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426a:	f380 8809 	msr	PSP, r0
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8811 	msr	BASEPRI, r0
 800427a:	4770      	bx	lr
 800427c:	f3af 8000 	nop.w

08004280 <pxCurrentTCBConst2>:
 8004280:	20000098 	.word	0x20000098

08004284 <vPortEnterCritical>:
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	b672      	cpsid	i
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	b662      	cpsie	i
	uxCriticalNesting++;
 8004298:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <vPortEnterCritical+0x44>)
 800429a:	6813      	ldr	r3, [r2, #0]
 800429c:	3301      	adds	r3, #1
 800429e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d10f      	bne.n	80042c4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <vPortEnterCritical+0x48>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80042ac:	d00a      	beq.n	80042c4 <vPortEnterCritical+0x40>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	b672      	cpsid	i
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	b662      	cpsie	i
 80042c2:	e7fe      	b.n	80042c2 <vPortEnterCritical+0x3e>
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000004 	.word	0x20000004
 80042cc:	e000ed04 	.word	0xe000ed04

080042d0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <vPortExitCritical+0x2c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	b953      	cbnz	r3, 80042ec <vPortExitCritical+0x1c>
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	b672      	cpsid	i
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	b662      	cpsie	i
 80042ea:	e7fe      	b.n	80042ea <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80042ec:	3b01      	subs	r3, #1
 80042ee:	4a03      	ldr	r2, [pc, #12]	; (80042fc <vPortExitCritical+0x2c>)
 80042f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042f2:	b90b      	cbnz	r3, 80042f8 <vPortExitCritical+0x28>
	__asm volatile
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000004 	.word	0x20000004

08004300 <PendSV_Handler>:
	__asm volatile
 8004300:	f3ef 8009 	mrs	r0, PSP
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	4b15      	ldr	r3, [pc, #84]	; (8004360 <pxCurrentTCBConst>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	f01e 0f10 	tst.w	lr, #16
 8004310:	bf08      	it	eq
 8004312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431a:	6010      	str	r0, [r2, #0]
 800431c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004324:	b672      	cpsid	i
 8004326:	f380 8811 	msr	BASEPRI, r0
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	b662      	cpsie	i
 8004334:	f7ff fd64 	bl	8003e00 <vTaskSwitchContext>
 8004338:	f04f 0000 	mov.w	r0, #0
 800433c:	f380 8811 	msr	BASEPRI, r0
 8004340:	bc08      	pop	{r3}
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	6808      	ldr	r0, [r1, #0]
 8004346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434a:	f01e 0f10 	tst.w	lr, #16
 800434e:	bf08      	it	eq
 8004350:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004354:	f380 8809 	msr	PSP, r0
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop

08004360 <pxCurrentTCBConst>:
 8004360:	20000098 	.word	0x20000098

08004364 <SysTick_Handler>:
{
 8004364:	b508      	push	{r3, lr}
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	b672      	cpsid	i
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800437a:	f7ff fbc3 	bl	8003b04 <xTaskIncrementTick>
 800437e:	b118      	cbz	r0, 8004388 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <SysTick_Handler+0x2c>)
 8004386:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004388:	2300      	movs	r3, #0
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	bd08      	pop	{r3, pc}
 8004390:	e000ed04 	.word	0xe000ed04

08004394 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <vPortSetupTimerInterrupt+0x1c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a06      	ldr	r2, [pc, #24]	; (80043b4 <vPortSetupTimerInterrupt+0x20>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	3b01      	subs	r3, #1
 80043a2:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <vPortSetupTimerInterrupt+0x24>)
 80043a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043a6:	2207      	movs	r2, #7
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <vPortSetupTimerInterrupt+0x28>)
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000010 	.word	0x20000010
 80043b4:	10624dd3 	.word	0x10624dd3
 80043b8:	e000e014 	.word	0xe000e014
 80043bc:	e000e010 	.word	0xe000e010

080043c0 <xPortStartScheduler>:
{
 80043c0:	b500      	push	{lr}
 80043c2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043c4:	4b22      	ldr	r3, [pc, #136]	; (8004450 <xPortStartScheduler+0x90>)
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043cc:	22ff      	movs	r2, #255	; 0xff
 80043ce:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80043dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043e0:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <xPortStartScheduler+0x94>)
 80043e2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043e4:	2207      	movs	r2, #7
 80043e6:	4b1c      	ldr	r3, [pc, #112]	; (8004458 <xPortStartScheduler+0x98>)
 80043e8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043ea:	e009      	b.n	8004400 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80043ec:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <xPortStartScheduler+0x98>)
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004400:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004404:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004408:	d1f0      	bne.n	80043ec <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <xPortStartScheduler+0x98>)
 800440c:	6813      	ldr	r3, [r2, #0]
 800440e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004414:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004416:	9b01      	ldr	r3, [sp, #4]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	4a0d      	ldr	r2, [pc, #52]	; (8004450 <xPortStartScheduler+0x90>)
 800441c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800441e:	4b0f      	ldr	r3, [pc, #60]	; (800445c <xPortStartScheduler+0x9c>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004426:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800442e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004430:	f7ff ffb0 	bl	8004394 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004434:	2200      	movs	r2, #0
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <xPortStartScheduler+0xa0>)
 8004438:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 800443a:	f7ff fef1 	bl	8004220 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <xPortStartScheduler+0xa4>)
 8004440:	6813      	ldr	r3, [r2, #0]
 8004442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004446:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004448:	f7ff feda 	bl	8004200 <prvPortStartFirstTask>
	prvTaskExitError();
 800444c:	f7ff feba 	bl	80041c4 <prvTaskExitError>
 8004450:	e000e400 	.word	0xe000e400
 8004454:	200001c4 	.word	0x200001c4
 8004458:	200001c8 	.word	0x200001c8
 800445c:	e000ed20 	.word	0xe000ed20
 8004460:	20000004 	.word	0x20000004
 8004464:	e000ef34 	.word	0xe000ef34

08004468 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004468:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800446c:	2b0f      	cmp	r3, #15
 800446e:	d911      	bls.n	8004494 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004470:	4a12      	ldr	r2, [pc, #72]	; (80044bc <vPortValidateInterruptPriority+0x54>)
 8004472:	5c9b      	ldrb	r3, [r3, r2]
 8004474:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <vPortValidateInterruptPriority+0x58>)
 8004478:	7812      	ldrb	r2, [r2, #0]
 800447a:	4293      	cmp	r3, r2
 800447c:	d20a      	bcs.n	8004494 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	b672      	cpsid	i
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	b662      	cpsie	i
 8004492:	e7fe      	b.n	8004492 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <vPortValidateInterruptPriority+0x5c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800449c:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <vPortValidateInterruptPriority+0x60>)
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d90a      	bls.n	80044ba <vPortValidateInterruptPriority+0x52>
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	b672      	cpsid	i
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	b662      	cpsie	i
 80044b8:	e7fe      	b.n	80044b8 <vPortValidateInterruptPriority+0x50>
 80044ba:	4770      	bx	lr
 80044bc:	e000e3f0 	.word	0xe000e3f0
 80044c0:	200001c4 	.word	0x200001c4
 80044c4:	e000ed0c 	.word	0xe000ed0c
 80044c8:	200001c8 	.word	0x200001c8

080044cc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044cc:	4a12      	ldr	r2, [pc, #72]	; (8004518 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044ce:	f012 0f07 	tst.w	r2, #7
 80044d2:	d01e      	beq.n	8004512 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044d4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044d6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044da:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80044de:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044e0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044e2:	480e      	ldr	r0, [pc, #56]	; (800451c <prvHeapInit+0x50>)
 80044e4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044e6:	2100      	movs	r1, #0
 80044e8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044ea:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80044ec:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044ee:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80044f2:	480b      	ldr	r0, [pc, #44]	; (8004520 <prvHeapInit+0x54>)
 80044f4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80044f6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044f8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044fa:	1a99      	subs	r1, r3, r2
 80044fc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044fe:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <prvHeapInit+0x58>)
 8004502:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004504:	4b08      	ldr	r3, [pc, #32]	; (8004528 <prvHeapInit+0x5c>)
 8004506:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004508:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <prvHeapInit+0x60>)
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004512:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004516:	e7e4      	b.n	80044e2 <prvHeapInit+0x16>
 8004518:	200001d0 	.word	0x200001d0
 800451c:	20003ddc 	.word	0x20003ddc
 8004520:	200001cc 	.word	0x200001cc
 8004524:	20003dd8 	.word	0x20003dd8
 8004528:	20003dd4 	.word	0x20003dd4
 800452c:	20003dd0 	.word	0x20003dd0

08004530 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004530:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <prvInsertBlockIntoFreeList+0x50>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4282      	cmp	r2, r0
 8004538:	d31b      	bcc.n	8004572 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	185c      	adds	r4, r3, r1
 800453e:	42a0      	cmp	r0, r4
 8004540:	d103      	bne.n	800454a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004542:	6840      	ldr	r0, [r0, #4]
 8004544:	4401      	add	r1, r0
 8004546:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004548:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800454a:	6841      	ldr	r1, [r0, #4]
 800454c:	1844      	adds	r4, r0, r1
 800454e:	42a2      	cmp	r2, r4
 8004550:	d113      	bne.n	800457a <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004552:	4c0c      	ldr	r4, [pc, #48]	; (8004584 <prvInsertBlockIntoFreeList+0x54>)
 8004554:	6824      	ldr	r4, [r4, #0]
 8004556:	42a2      	cmp	r2, r4
 8004558:	d00d      	beq.n	8004576 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800455a:	6852      	ldr	r2, [r2, #4]
 800455c:	4411      	add	r1, r2
 800455e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004566:	4298      	cmp	r0, r3
 8004568:	d000      	beq.n	800456c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800456a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800456c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004570:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004572:	4613      	mov	r3, r2
 8004574:	e7de      	b.n	8004534 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004576:	6004      	str	r4, [r0, #0]
 8004578:	e7f5      	b.n	8004566 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800457a:	6002      	str	r2, [r0, #0]
 800457c:	e7f3      	b.n	8004566 <prvInsertBlockIntoFreeList+0x36>
 800457e:	bf00      	nop
 8004580:	20003ddc 	.word	0x20003ddc
 8004584:	200001cc 	.word	0x200001cc

08004588 <pvPortMalloc>:
{
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800458c:	f7ff faa4 	bl	8003ad8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004590:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <pvPortMalloc+0x100>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b1cb      	cbz	r3, 80045ca <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004596:	4b3d      	ldr	r3, [pc, #244]	; (800468c <pvPortMalloc+0x104>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	421c      	tst	r4, r3
 800459c:	d169      	bne.n	8004672 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 800459e:	b1bc      	cbz	r4, 80045d0 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 80045a0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045a2:	f014 0f07 	tst.w	r4, #7
 80045a6:	d013      	beq.n	80045d0 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045a8:	f024 0407 	bic.w	r4, r4, #7
 80045ac:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045ae:	f004 0307 	and.w	r3, r4, #7
 80045b2:	b16b      	cbz	r3, 80045d0 <pvPortMalloc+0x48>
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	b672      	cpsid	i
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	b662      	cpsie	i
 80045c8:	e7fe      	b.n	80045c8 <pvPortMalloc+0x40>
			prvHeapInit();
 80045ca:	f7ff ff7f 	bl	80044cc <prvHeapInit>
 80045ce:	e7e2      	b.n	8004596 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045d0:	2c00      	cmp	r4, #0
 80045d2:	d050      	beq.n	8004676 <pvPortMalloc+0xee>
 80045d4:	4b2e      	ldr	r3, [pc, #184]	; (8004690 <pvPortMalloc+0x108>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	429c      	cmp	r4, r3
 80045da:	d84e      	bhi.n	800467a <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 80045dc:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <pvPortMalloc+0x10c>)
 80045de:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045e0:	e001      	b.n	80045e6 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 80045e2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80045e4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045e6:	686a      	ldr	r2, [r5, #4]
 80045e8:	4294      	cmp	r4, r2
 80045ea:	d902      	bls.n	80045f2 <pvPortMalloc+0x6a>
 80045ec:	682a      	ldr	r2, [r5, #0]
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	d1f7      	bne.n	80045e2 <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 80045f2:	4a25      	ldr	r2, [pc, #148]	; (8004688 <pvPortMalloc+0x100>)
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	4295      	cmp	r5, r2
 80045f8:	d041      	beq.n	800467e <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045fa:	681e      	ldr	r6, [r3, #0]
 80045fc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045fe:	682a      	ldr	r2, [r5, #0]
 8004600:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004602:	686b      	ldr	r3, [r5, #4]
 8004604:	1b1b      	subs	r3, r3, r4
 8004606:	2b10      	cmp	r3, #16
 8004608:	d912      	bls.n	8004630 <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800460a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800460c:	f010 0f07 	tst.w	r0, #7
 8004610:	d00a      	beq.n	8004628 <pvPortMalloc+0xa0>
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	b672      	cpsid	i
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	b662      	cpsie	i
 8004626:	e7fe      	b.n	8004626 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004628:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800462a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800462c:	f7ff ff80 	bl	8004530 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004630:	686a      	ldr	r2, [r5, #4]
 8004632:	4917      	ldr	r1, [pc, #92]	; (8004690 <pvPortMalloc+0x108>)
 8004634:	680b      	ldr	r3, [r1, #0]
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800463a:	4917      	ldr	r1, [pc, #92]	; (8004698 <pvPortMalloc+0x110>)
 800463c:	6809      	ldr	r1, [r1, #0]
 800463e:	428b      	cmp	r3, r1
 8004640:	d201      	bcs.n	8004646 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004642:	4915      	ldr	r1, [pc, #84]	; (8004698 <pvPortMalloc+0x110>)
 8004644:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <pvPortMalloc+0x104>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4313      	orrs	r3, r2
 800464c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004652:	f7ff fae9 	bl	8003c28 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004656:	f016 0f07 	tst.w	r6, #7
 800465a:	d012      	beq.n	8004682 <pvPortMalloc+0xfa>
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	b672      	cpsid	i
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	b662      	cpsie	i
 8004670:	e7fe      	b.n	8004670 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8004672:	2600      	movs	r6, #0
 8004674:	e7ed      	b.n	8004652 <pvPortMalloc+0xca>
 8004676:	2600      	movs	r6, #0
 8004678:	e7eb      	b.n	8004652 <pvPortMalloc+0xca>
 800467a:	2600      	movs	r6, #0
 800467c:	e7e9      	b.n	8004652 <pvPortMalloc+0xca>
 800467e:	2600      	movs	r6, #0
 8004680:	e7e7      	b.n	8004652 <pvPortMalloc+0xca>
}
 8004682:	4630      	mov	r0, r6
 8004684:	bd70      	pop	{r4, r5, r6, pc}
 8004686:	bf00      	nop
 8004688:	200001cc 	.word	0x200001cc
 800468c:	20003dd0 	.word	0x20003dd0
 8004690:	20003dd4 	.word	0x20003dd4
 8004694:	20003ddc 	.word	0x20003ddc
 8004698:	20003dd8 	.word	0x20003dd8

0800469c <vPortFree>:
	if( pv != NULL )
 800469c:	2800      	cmp	r0, #0
 800469e:	d034      	beq.n	800470a <vPortFree+0x6e>
{
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80046a4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046a8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80046ac:	4917      	ldr	r1, [pc, #92]	; (800470c <vPortFree+0x70>)
 80046ae:	6809      	ldr	r1, [r1, #0]
 80046b0:	420a      	tst	r2, r1
 80046b2:	d10a      	bne.n	80046ca <vPortFree+0x2e>
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	b672      	cpsid	i
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	b662      	cpsie	i
 80046c8:	e7fe      	b.n	80046c8 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046ca:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80046ce:	b150      	cbz	r0, 80046e6 <vPortFree+0x4a>
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	b672      	cpsid	i
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	b662      	cpsie	i
 80046e4:	e7fe      	b.n	80046e4 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046e6:	ea22 0201 	bic.w	r2, r2, r1
 80046ea:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 80046ee:	f7ff f9f3 	bl	8003ad8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046f2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80046f6:	4a06      	ldr	r2, [pc, #24]	; (8004710 <vPortFree+0x74>)
 80046f8:	6813      	ldr	r3, [r2, #0]
 80046fa:	440b      	add	r3, r1
 80046fc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046fe:	4628      	mov	r0, r5
 8004700:	f7ff ff16 	bl	8004530 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8004704:	f7ff fa90 	bl	8003c28 <xTaskResumeAll>
 8004708:	bd38      	pop	{r3, r4, r5, pc}
 800470a:	4770      	bx	lr
 800470c:	20003dd0 	.word	0x20003dd0
 8004710:	20003dd4 	.word	0x20003dd4

08004714 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8004714:	b500      	push	{lr}
 8004716:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8004718:	4b20      	ldr	r3, [pc, #128]	; (800479c <tcpip_thread+0x88>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	b113      	cbz	r3, 8004724 <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 800471e:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <tcpip_thread+0x8c>)
 8004720:	6810      	ldr	r0, [r2, #0]
 8004722:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8004724:	481f      	ldr	r0, [pc, #124]	; (80047a4 <tcpip_thread+0x90>)
 8004726:	f007 faa6 	bl	800bc76 <sys_mutex_lock>
 800472a:	e00e      	b.n	800474a <tcpip_thread+0x36>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800472c:	4b1e      	ldr	r3, [pc, #120]	; (80047a8 <tcpip_thread+0x94>)
 800472e:	2269      	movs	r2, #105	; 0x69
 8004730:	491e      	ldr	r1, [pc, #120]	; (80047ac <tcpip_thread+0x98>)
 8004732:	481f      	ldr	r0, [pc, #124]	; (80047b0 <tcpip_thread+0x9c>)
 8004734:	f008 fa02 	bl	800cb3c <iprintf>
      continue;
 8004738:	e007      	b.n	800474a <tcpip_thread+0x36>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	6899      	ldr	r1, [r3, #8]
 800473e:	6858      	ldr	r0, [r3, #4]
 8004740:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8004742:	9901      	ldr	r1, [sp, #4]
 8004744:	2009      	movs	r0, #9
 8004746:	f000 fbe1 	bl	8004f0c <memp_free>
    UNLOCK_TCPIP_CORE();
 800474a:	4c16      	ldr	r4, [pc, #88]	; (80047a4 <tcpip_thread+0x90>)
 800474c:	4620      	mov	r0, r4
 800474e:	f007 fa99 	bl	800bc84 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8004752:	a901      	add	r1, sp, #4
 8004754:	4817      	ldr	r0, [pc, #92]	; (80047b4 <tcpip_thread+0xa0>)
 8004756:	f004 f933 	bl	80089c0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800475a:	4620      	mov	r0, r4
 800475c:	f007 fa8b 	bl	800bc76 <sys_mutex_lock>
    if (msg == NULL) {
 8004760:	9b01      	ldr	r3, [sp, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0e2      	beq.n	800472c <tcpip_thread+0x18>
    switch (msg->type) {
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	2a03      	cmp	r2, #3
 800476a:	d00a      	beq.n	8004782 <tcpip_thread+0x6e>
 800476c:	2a04      	cmp	r2, #4
 800476e:	d010      	beq.n	8004792 <tcpip_thread+0x7e>
 8004770:	2a02      	cmp	r2, #2
 8004772:	d0e2      	beq.n	800473a <tcpip_thread+0x26>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <tcpip_thread+0x94>)
 8004776:	229b      	movs	r2, #155	; 0x9b
 8004778:	490c      	ldr	r1, [pc, #48]	; (80047ac <tcpip_thread+0x98>)
 800477a:	480d      	ldr	r0, [pc, #52]	; (80047b0 <tcpip_thread+0x9c>)
 800477c:	f008 f9de 	bl	800cb3c <iprintf>
      break;
 8004780:	e7e3      	b.n	800474a <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	6898      	ldr	r0, [r3, #8]
 8004786:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8004788:	9901      	ldr	r1, [sp, #4]
 800478a:	2008      	movs	r0, #8
 800478c:	f000 fbbe 	bl	8004f0c <memp_free>
      break;
 8004790:	e7db      	b.n	800474a <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	6898      	ldr	r0, [r3, #8]
 8004796:	4790      	blx	r2
      break;
 8004798:	e7d7      	b.n	800474a <tcpip_thread+0x36>
 800479a:	bf00      	nop
 800479c:	20003de8 	.word	0x20003de8
 80047a0:	20003dec 	.word	0x20003dec
 80047a4:	20003f9c 	.word	0x20003f9c
 80047a8:	0800de1c 	.word	0x0800de1c
 80047ac:	0800de4c 	.word	0x0800de4c
 80047b0:	0800de6c 	.word	0x0800de6c
 80047b4:	20003de4 	.word	0x20003de4

080047b8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	4607      	mov	r7, r0
 80047bc:	460e      	mov	r6, r1
 80047be:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80047c0:	4813      	ldr	r0, [pc, #76]	; (8004810 <tcpip_inpkt+0x58>)
 80047c2:	f007 fa35 	bl	800bc30 <sys_mbox_valid>
 80047c6:	b188      	cbz	r0, 80047ec <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80047c8:	2009      	movs	r0, #9
 80047ca:	f000 fb85 	bl	8004ed8 <memp_malloc>
  if (msg == NULL) {
 80047ce:	4604      	mov	r4, r0
 80047d0:	b1d0      	cbz	r0, 8004808 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80047d2:	2302      	movs	r3, #2
 80047d4:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 80047d6:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80047d8:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 80047da:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80047dc:	4601      	mov	r1, r0
 80047de:	480c      	ldr	r0, [pc, #48]	; (8004810 <tcpip_inpkt+0x58>)
 80047e0:	f007 f9f0 	bl	800bbc4 <sys_mbox_trypost>
 80047e4:	4603      	mov	r3, r0
 80047e6:	b940      	cbnz	r0, 80047fa <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <tcpip_inpkt+0x5c>)
 80047ee:	22b5      	movs	r2, #181	; 0xb5
 80047f0:	4909      	ldr	r1, [pc, #36]	; (8004818 <tcpip_inpkt+0x60>)
 80047f2:	480a      	ldr	r0, [pc, #40]	; (800481c <tcpip_inpkt+0x64>)
 80047f4:	f008 f9a2 	bl	800cb3c <iprintf>
 80047f8:	e7e6      	b.n	80047c8 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80047fa:	4621      	mov	r1, r4
 80047fc:	2009      	movs	r0, #9
 80047fe:	f000 fb85 	bl	8004f0c <memp_free>
    return ERR_MEM;
 8004802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004806:	e7ef      	b.n	80047e8 <tcpip_inpkt+0x30>
    return ERR_MEM;
 8004808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800480c:	e7ec      	b.n	80047e8 <tcpip_inpkt+0x30>
 800480e:	bf00      	nop
 8004810:	20003de4 	.word	0x20003de4
 8004814:	0800de1c 	.word	0x0800de1c
 8004818:	0800de0c 	.word	0x0800de0c
 800481c:	0800de6c 	.word	0x0800de6c

08004820 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8004820:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8004822:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8004826:	f013 0f18 	tst.w	r3, #24
 800482a:	d103      	bne.n	8004834 <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800482c:	4a03      	ldr	r2, [pc, #12]	; (800483c <tcpip_input+0x1c>)
 800482e:	f7ff ffc3 	bl	80047b8 <tcpip_inpkt>
}
 8004832:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 8004834:	4a02      	ldr	r2, [pc, #8]	; (8004840 <tcpip_input+0x20>)
 8004836:	f7ff ffbf 	bl	80047b8 <tcpip_inpkt>
 800483a:	bd08      	pop	{r3, pc}
 800483c:	0800af35 	.word	0x0800af35
 8004840:	0800ba71 	.word	0x0800ba71

08004844 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	4607      	mov	r7, r0
 8004848:	460e      	mov	r6, r1
 800484a:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800484c:	4816      	ldr	r0, [pc, #88]	; (80048a8 <tcpip_callback_with_block+0x64>)
 800484e:	f007 f9ef 	bl	800bc30 <sys_mbox_valid>
 8004852:	b188      	cbz	r0, 8004878 <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8004854:	2008      	movs	r0, #8
 8004856:	f000 fb3f 	bl	8004ed8 <memp_malloc>
  if (msg == NULL) {
 800485a:	4604      	mov	r4, r0
 800485c:	b300      	cbz	r0, 80048a0 <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800485e:	2303      	movs	r3, #3
 8004860:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8004862:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8004864:	6086      	str	r6, [r0, #8]
  if (block) {
 8004866:	b975      	cbnz	r5, 8004886 <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8004868:	4601      	mov	r1, r0
 800486a:	480f      	ldr	r0, [pc, #60]	; (80048a8 <tcpip_callback_with_block+0x64>)
 800486c:	f007 f9aa 	bl	800bbc4 <sys_mbox_trypost>
 8004870:	4603      	mov	r3, r0
 8004872:	b970      	cbnz	r0, 8004892 <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 8004874:	4618      	mov	r0, r3
 8004876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <tcpip_callback_with_block+0x68>)
 800487a:	22ee      	movs	r2, #238	; 0xee
 800487c:	490c      	ldr	r1, [pc, #48]	; (80048b0 <tcpip_callback_with_block+0x6c>)
 800487e:	480d      	ldr	r0, [pc, #52]	; (80048b4 <tcpip_callback_with_block+0x70>)
 8004880:	f008 f95c 	bl	800cb3c <iprintf>
 8004884:	e7e6      	b.n	8004854 <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 8004886:	4601      	mov	r1, r0
 8004888:	4807      	ldr	r0, [pc, #28]	; (80048a8 <tcpip_callback_with_block+0x64>)
 800488a:	f007 f98f 	bl	800bbac <sys_mbox_post>
  return ERR_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e7f0      	b.n	8004874 <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8004892:	4621      	mov	r1, r4
 8004894:	2008      	movs	r0, #8
 8004896:	f000 fb39 	bl	8004f0c <memp_free>
      return ERR_MEM;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800489e:	e7e9      	b.n	8004874 <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 80048a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048a4:	e7e6      	b.n	8004874 <tcpip_callback_with_block+0x30>
 80048a6:	bf00      	nop
 80048a8:	20003de4 	.word	0x20003de4
 80048ac:	0800de1c 	.word	0x0800de1c
 80048b0:	0800de0c 	.word	0x0800de0c
 80048b4:	0800de6c 	.word	0x0800de6c

080048b8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80048b8:	b530      	push	{r4, r5, lr}
 80048ba:	b083      	sub	sp, #12
 80048bc:	4605      	mov	r5, r0
 80048be:	460c      	mov	r4, r1
  lwip_init();
 80048c0:	f000 f84b 	bl	800495a <lwip_init>

  tcpip_init_done = initfunc;
 80048c4:	4b13      	ldr	r3, [pc, #76]	; (8004914 <tcpip_init+0x5c>)
 80048c6:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80048c8:	4b13      	ldr	r3, [pc, #76]	; (8004918 <tcpip_init+0x60>)
 80048ca:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80048cc:	2106      	movs	r1, #6
 80048ce:	4813      	ldr	r0, [pc, #76]	; (800491c <tcpip_init+0x64>)
 80048d0:	f007 f95a 	bl	800bb88 <sys_mbox_new>
 80048d4:	b970      	cbnz	r0, 80048f4 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80048d6:	4812      	ldr	r0, [pc, #72]	; (8004920 <tcpip_init+0x68>)
 80048d8:	f007 f9bc 	bl	800bc54 <sys_mutex_new>
 80048dc:	b990      	cbnz	r0, 8004904 <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80048de:	2303      	movs	r3, #3
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048e6:	2200      	movs	r2, #0
 80048e8:	490e      	ldr	r1, [pc, #56]	; (8004924 <tcpip_init+0x6c>)
 80048ea:	480f      	ldr	r0, [pc, #60]	; (8004928 <tcpip_init+0x70>)
 80048ec:	f007 f9cf 	bl	800bc8e <sys_thread_new>
}
 80048f0:	b003      	add	sp, #12
 80048f2:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80048f4:	4b0d      	ldr	r3, [pc, #52]	; (800492c <tcpip_init+0x74>)
 80048f6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80048fa:	490d      	ldr	r1, [pc, #52]	; (8004930 <tcpip_init+0x78>)
 80048fc:	480d      	ldr	r0, [pc, #52]	; (8004934 <tcpip_init+0x7c>)
 80048fe:	f008 f91d 	bl	800cb3c <iprintf>
 8004902:	e7e8      	b.n	80048d6 <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8004904:	4b09      	ldr	r3, [pc, #36]	; (800492c <tcpip_init+0x74>)
 8004906:	f240 12d9 	movw	r2, #473	; 0x1d9
 800490a:	490b      	ldr	r1, [pc, #44]	; (8004938 <tcpip_init+0x80>)
 800490c:	4809      	ldr	r0, [pc, #36]	; (8004934 <tcpip_init+0x7c>)
 800490e:	f008 f915 	bl	800cb3c <iprintf>
 8004912:	e7e4      	b.n	80048de <tcpip_init+0x26>
 8004914:	20003de8 	.word	0x20003de8
 8004918:	20003dec 	.word	0x20003dec
 800491c:	20003de4 	.word	0x20003de4
 8004920:	20003f9c 	.word	0x20003f9c
 8004924:	08004715 	.word	0x08004715
 8004928:	0800ddfc 	.word	0x0800ddfc
 800492c:	0800de1c 	.word	0x0800de1c
 8004930:	0800ddb4 	.word	0x0800ddb4
 8004934:	0800de6c 	.word	0x0800de6c
 8004938:	0800ddd8 	.word	0x0800ddd8

0800493c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 800493c:	ba40      	rev16	r0, r0
}
 800493e:	b280      	uxth	r0, r0
 8004940:	4770      	bx	lr

08004942 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 8004942:	0203      	lsls	r3, r0, #8
 8004944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004948:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800494c:	0a02      	lsrs	r2, r0, #8
 800494e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8004952:	4313      	orrs	r3, r2
}
 8004954:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8004958:	4770      	bx	lr

0800495a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800495a:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800495c:	f007 f96e 	bl	800bc3c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8004960:	f000 f87c 	bl	8004a5c <mem_init>
  memp_init();
 8004964:	f000 faa8 	bl	8004eb8 <memp_init>
  pbuf_init();
  netif_init();
 8004968:	f000 fafb 	bl	8004f62 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800496c:	f004 f896 	bl	8008a9c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004970:	f001 f82e 	bl	80059d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8004974:	f003 fffe 	bl	8008974 <sys_timeouts_init>
 8004978:	bd08      	pop	{r3, pc}
	...

0800497c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800497c:	b510      	push	{r4, lr}
 800497e:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004980:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <plug_holes+0xbc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4283      	cmp	r3, r0
 8004986:	d831      	bhi.n	80049ec <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004988:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <plug_holes+0xc0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	429c      	cmp	r4, r3
 800498e:	d235      	bcs.n	80049fc <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004990:	7923      	ldrb	r3, [r4, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d13a      	bne.n	8004a0c <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004996:	8823      	ldrh	r3, [r4, #0]
 8004998:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800499c:	d83e      	bhi.n	8004a1c <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <plug_holes+0xbc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	8821      	ldrh	r1, [r4, #0]
 80049a4:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80049a6:	4294      	cmp	r4, r2
 80049a8:	d00f      	beq.n	80049ca <plug_holes+0x4e>
 80049aa:	7910      	ldrb	r0, [r2, #4]
 80049ac:	b968      	cbnz	r0, 80049ca <plug_holes+0x4e>
 80049ae:	4823      	ldr	r0, [pc, #140]	; (8004a3c <plug_holes+0xc0>)
 80049b0:	6800      	ldr	r0, [r0, #0]
 80049b2:	4282      	cmp	r2, r0
 80049b4:	d009      	beq.n	80049ca <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80049b6:	4822      	ldr	r0, [pc, #136]	; (8004a40 <plug_holes+0xc4>)
 80049b8:	6800      	ldr	r0, [r0, #0]
 80049ba:	4282      	cmp	r2, r0
 80049bc:	d036      	beq.n	8004a2c <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 80049be:	5a5a      	ldrh	r2, [r3, r1]
 80049c0:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80049c2:	5a5a      	ldrh	r2, [r3, r1]
 80049c4:	441a      	add	r2, r3
 80049c6:	1ae1      	subs	r1, r4, r3
 80049c8:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80049ca:	8861      	ldrh	r1, [r4, #2]
 80049cc:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 80049ce:	4294      	cmp	r4, r2
 80049d0:	d00b      	beq.n	80049ea <plug_holes+0x6e>
 80049d2:	7910      	ldrb	r0, [r2, #4]
 80049d4:	b948      	cbnz	r0, 80049ea <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80049d6:	481a      	ldr	r0, [pc, #104]	; (8004a40 <plug_holes+0xc4>)
 80049d8:	6800      	ldr	r0, [r0, #0]
 80049da:	4284      	cmp	r4, r0
 80049dc:	d029      	beq.n	8004a32 <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 80049de:	8820      	ldrh	r0, [r4, #0]
 80049e0:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80049e2:	8821      	ldrh	r1, [r4, #0]
 80049e4:	4419      	add	r1, r3
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	804b      	strh	r3, [r1, #2]
 80049ea:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80049ec:	4b15      	ldr	r3, [pc, #84]	; (8004a44 <plug_holes+0xc8>)
 80049ee:	f240 125d 	movw	r2, #349	; 0x15d
 80049f2:	4915      	ldr	r1, [pc, #84]	; (8004a48 <plug_holes+0xcc>)
 80049f4:	4815      	ldr	r0, [pc, #84]	; (8004a4c <plug_holes+0xd0>)
 80049f6:	f008 f8a1 	bl	800cb3c <iprintf>
 80049fa:	e7c5      	b.n	8004988 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <plug_holes+0xc8>)
 80049fe:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004a02:	4913      	ldr	r1, [pc, #76]	; (8004a50 <plug_holes+0xd4>)
 8004a04:	4811      	ldr	r0, [pc, #68]	; (8004a4c <plug_holes+0xd0>)
 8004a06:	f008 f899 	bl	800cb3c <iprintf>
 8004a0a:	e7c1      	b.n	8004990 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <plug_holes+0xc8>)
 8004a0e:	f240 125f 	movw	r2, #351	; 0x15f
 8004a12:	4910      	ldr	r1, [pc, #64]	; (8004a54 <plug_holes+0xd8>)
 8004a14:	480d      	ldr	r0, [pc, #52]	; (8004a4c <plug_holes+0xd0>)
 8004a16:	f008 f891 	bl	800cb3c <iprintf>
 8004a1a:	e7bc      	b.n	8004996 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <plug_holes+0xc8>)
 8004a1e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8004a22:	490d      	ldr	r1, [pc, #52]	; (8004a58 <plug_holes+0xdc>)
 8004a24:	4809      	ldr	r0, [pc, #36]	; (8004a4c <plug_holes+0xd0>)
 8004a26:	f008 f889 	bl	800cb3c <iprintf>
 8004a2a:	e7b8      	b.n	800499e <plug_holes+0x22>
      lfree = mem;
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <plug_holes+0xc4>)
 8004a2e:	6014      	str	r4, [r2, #0]
 8004a30:	e7c5      	b.n	80049be <plug_holes+0x42>
      lfree = pmem;
 8004a32:	4803      	ldr	r0, [pc, #12]	; (8004a40 <plug_holes+0xc4>)
 8004a34:	6002      	str	r2, [r0, #0]
 8004a36:	e7d2      	b.n	80049de <plug_holes+0x62>
 8004a38:	20003df8 	.word	0x20003df8
 8004a3c:	20003dfc 	.word	0x20003dfc
 8004a40:	20003df0 	.word	0x20003df0
 8004a44:	0800dfd8 	.word	0x0800dfd8
 8004a48:	0800e008 	.word	0x0800e008
 8004a4c:	0800de6c 	.word	0x0800de6c
 8004a50:	0800e020 	.word	0x0800e020
 8004a54:	0800e03c 	.word	0x0800e03c
 8004a58:	0800e058 	.word	0x0800e058

08004a5c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004a5c:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <mem_init+0x48>)
 8004a60:	f023 0303 	bic.w	r3, r3, #3
 8004a64:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <mem_init+0x4c>)
 8004a66:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8004a68:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8004a6c:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8004a6e:	2200      	movs	r2, #0
 8004a70:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004a72:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004a74:	185a      	adds	r2, r3, r1
 8004a76:	480d      	ldr	r0, [pc, #52]	; (8004aac <mem_init+0x50>)
 8004a78:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004a7e:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004a82:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004a84:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <mem_init+0x54>)
 8004a86:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004a88:	480a      	ldr	r0, [pc, #40]	; (8004ab4 <mem_init+0x58>)
 8004a8a:	f007 f8e3 	bl	800bc54 <sys_mutex_new>
 8004a8e:	b900      	cbnz	r0, 8004a92 <mem_init+0x36>
 8004a90:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <mem_init+0x5c>)
 8004a94:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004a98:	4908      	ldr	r1, [pc, #32]	; (8004abc <mem_init+0x60>)
 8004a9a:	4809      	ldr	r0, [pc, #36]	; (8004ac0 <mem_init+0x64>)
 8004a9c:	f008 f84e 	bl	800cb3c <iprintf>
  }
}
 8004aa0:	e7f6      	b.n	8004a90 <mem_init+0x34>
 8004aa2:	bf00      	nop
 8004aa4:	20003fbb 	.word	0x20003fbb
 8004aa8:	20003df8 	.word	0x20003df8
 8004aac:	20003dfc 	.word	0x20003dfc
 8004ab0:	20003df0 	.word	0x20003df0
 8004ab4:	20003df4 	.word	0x20003df4
 8004ab8:	0800dfd8 	.word	0x0800dfd8
 8004abc:	0800dee4 	.word	0x0800dee4
 8004ac0:	0800de6c 	.word	0x0800de6c

08004ac4 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d048      	beq.n	8004b5a <mem_free+0x96>
{
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8004acc:	f010 0f03 	tst.w	r0, #3
 8004ad0:	d11b      	bne.n	8004b0a <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004ad2:	4b22      	ldr	r3, [pc, #136]	; (8004b5c <mem_free+0x98>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	429c      	cmp	r4, r3
 8004ad8:	d303      	bcc.n	8004ae2 <mem_free+0x1e>
 8004ada:	4b21      	ldr	r3, [pc, #132]	; (8004b60 <mem_free+0x9c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	429c      	cmp	r4, r3
 8004ae0:	d306      	bcc.n	8004af0 <mem_free+0x2c>
 8004ae2:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <mem_free+0xa0>)
 8004ae4:	f240 12af 	movw	r2, #431	; 0x1af
 8004ae8:	491f      	ldr	r1, [pc, #124]	; (8004b68 <mem_free+0xa4>)
 8004aea:	4820      	ldr	r0, [pc, #128]	; (8004b6c <mem_free+0xa8>)
 8004aec:	f008 f826 	bl	800cb3c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <mem_free+0x98>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	429c      	cmp	r4, r3
 8004af6:	d303      	bcc.n	8004b00 <mem_free+0x3c>
 8004af8:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <mem_free+0x9c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	429c      	cmp	r4, r3
 8004afe:	d30c      	bcc.n	8004b1a <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8004b00:	f007 f8d8 	bl	800bcb4 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8004b04:	f007 f8e2 	bl	800bccc <sys_arch_unprotect>
    return;
 8004b08:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8004b0a:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <mem_free+0xa0>)
 8004b0c:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8004b10:	4917      	ldr	r1, [pc, #92]	; (8004b70 <mem_free+0xac>)
 8004b12:	4816      	ldr	r0, [pc, #88]	; (8004b6c <mem_free+0xa8>)
 8004b14:	f008 f812 	bl	800cb3c <iprintf>
 8004b18:	e7db      	b.n	8004ad2 <mem_free+0xe>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8004b1a:	4816      	ldr	r0, [pc, #88]	; (8004b74 <mem_free+0xb0>)
 8004b1c:	f007 f8ab 	bl	800bc76 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004b20:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004b24:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8004b28:	b17b      	cbz	r3, 8004b4a <mem_free+0x86>
  /* ... and is now unused. */
  mem->used = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <mem_free+0xb4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	429d      	cmp	r5, r3
 8004b36:	d201      	bcs.n	8004b3c <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004b38:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <mem_free+0xb4>)
 8004b3a:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f7ff ff1d 	bl	800497c <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004b42:	480c      	ldr	r0, [pc, #48]	; (8004b74 <mem_free+0xb0>)
 8004b44:	f007 f89e 	bl	800bc84 <sys_mutex_unlock>
 8004b48:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <mem_free+0xa0>)
 8004b4c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004b50:	490a      	ldr	r1, [pc, #40]	; (8004b7c <mem_free+0xb8>)
 8004b52:	4806      	ldr	r0, [pc, #24]	; (8004b6c <mem_free+0xa8>)
 8004b54:	f007 fff2 	bl	800cb3c <iprintf>
 8004b58:	e7e7      	b.n	8004b2a <mem_free+0x66>
 8004b5a:	4770      	bx	lr
 8004b5c:	20003df8 	.word	0x20003df8
 8004b60:	20003dfc 	.word	0x20003dfc
 8004b64:	0800dfd8 	.word	0x0800dfd8
 8004b68:	0800deb8 	.word	0x0800deb8
 8004b6c:	0800de6c 	.word	0x0800de6c
 8004b70:	0800de94 	.word	0x0800de94
 8004b74:	20003df4 	.word	0x20003df4
 8004b78:	20003df0 	.word	0x20003df0
 8004b7c:	0800ded0 	.word	0x0800ded0

08004b80 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004b84:	1ccc      	adds	r4, r1, #3
 8004b86:	b2a4      	uxth	r4, r4
 8004b88:	f024 0403 	bic.w	r4, r4, #3
 8004b8c:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8004b8e:	2c0b      	cmp	r4, #11
 8004b90:	d800      	bhi.n	8004b94 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004b92:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004b94:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8004b98:	d879      	bhi.n	8004c8e <mem_trim+0x10e>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004b9a:	4b3f      	ldr	r3, [pc, #252]	; (8004c98 <mem_trim+0x118>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	42ab      	cmp	r3, r5
 8004ba0:	d803      	bhi.n	8004baa <mem_trim+0x2a>
 8004ba2:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <mem_trim+0x11c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429d      	cmp	r5, r3
 8004ba8:	d306      	bcc.n	8004bb8 <mem_trim+0x38>
 8004baa:	4b3d      	ldr	r3, [pc, #244]	; (8004ca0 <mem_trim+0x120>)
 8004bac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004bb0:	493c      	ldr	r1, [pc, #240]	; (8004ca4 <mem_trim+0x124>)
 8004bb2:	483d      	ldr	r0, [pc, #244]	; (8004ca8 <mem_trim+0x128>)
 8004bb4:	f007 ffc2 	bl	800cb3c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004bb8:	4b37      	ldr	r3, [pc, #220]	; (8004c98 <mem_trim+0x118>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	429d      	cmp	r5, r3
 8004bbe:	d336      	bcc.n	8004c2e <mem_trim+0xae>
 8004bc0:	4a36      	ldr	r2, [pc, #216]	; (8004c9c <mem_trim+0x11c>)
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	4295      	cmp	r5, r2
 8004bc6:	d232      	bcs.n	8004c2e <mem_trim+0xae>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004bc8:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004bcc:	1aff      	subs	r7, r7, r3
 8004bce:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004bd0:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8004bd4:	1bf6      	subs	r6, r6, r7
 8004bd6:	b2b6      	uxth	r6, r6
 8004bd8:	3e08      	subs	r6, #8
 8004bda:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004bdc:	42b4      	cmp	r4, r6
 8004bde:	d82c      	bhi.n	8004c3a <mem_trim+0xba>
  if (newsize > size) {
 8004be0:	42b4      	cmp	r4, r6
 8004be2:	d856      	bhi.n	8004c92 <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8004be4:	d027      	beq.n	8004c36 <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8004be6:	4831      	ldr	r0, [pc, #196]	; (8004cac <mem_trim+0x12c>)
 8004be8:	f007 f845 	bl	800bc76 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004bec:	4b2a      	ldr	r3, [pc, #168]	; (8004c98 <mem_trim+0x118>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8004bf4:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8004bf6:	7908      	ldrb	r0, [r1, #4]
 8004bf8:	bb58      	cbnz	r0, 8004c52 <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8004bfa:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004bfc:	19e3      	adds	r3, r4, r7
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3308      	adds	r3, #8
 8004c02:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8004c04:	4c2a      	ldr	r4, [pc, #168]	; (8004cb0 <mem_trim+0x130>)
 8004c06:	6824      	ldr	r4, [r4, #0]
 8004c08:	42a1      	cmp	r1, r4
 8004c0a:	d01e      	beq.n	8004c4a <mem_trim+0xca>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004c0c:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 8004c0e:	2400      	movs	r4, #0
 8004c10:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004c12:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 8004c14:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004c16:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c1a:	5ad1      	ldrh	r1, [r2, r3]
 8004c1c:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8004c20:	d001      	beq.n	8004c26 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004c22:	440a      	add	r2, r1
 8004c24:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004c26:	4821      	ldr	r0, [pc, #132]	; (8004cac <mem_trim+0x12c>)
 8004c28:	f007 f82c 	bl	800bc84 <sys_mutex_unlock>
  return rmem;
 8004c2c:	e003      	b.n	8004c36 <mem_trim+0xb6>
    SYS_ARCH_PROTECT(lev);
 8004c2e:	f007 f841 	bl	800bcb4 <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 8004c32:	f007 f84b 	bl	800bccc <sys_arch_unprotect>
}
 8004c36:	4628      	mov	r0, r5
 8004c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004c3a:	4b19      	ldr	r3, [pc, #100]	; (8004ca0 <mem_trim+0x120>)
 8004c3c:	f240 2206 	movw	r2, #518	; 0x206
 8004c40:	491c      	ldr	r1, [pc, #112]	; (8004cb4 <mem_trim+0x134>)
 8004c42:	4819      	ldr	r0, [pc, #100]	; (8004ca8 <mem_trim+0x128>)
 8004c44:	f007 ff7a 	bl	800cb3c <iprintf>
 8004c48:	e7ca      	b.n	8004be0 <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004c4a:	18d1      	adds	r1, r2, r3
 8004c4c:	4c18      	ldr	r4, [pc, #96]	; (8004cb0 <mem_trim+0x130>)
 8004c4e:	6021      	str	r1, [r4, #0]
 8004c50:	e7dc      	b.n	8004c0c <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004c52:	f104 0314 	add.w	r3, r4, #20
 8004c56:	42b3      	cmp	r3, r6
 8004c58:	d8e5      	bhi.n	8004c26 <mem_trim+0xa6>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004c5a:	19e3      	adds	r3, r4, r7
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3308      	adds	r3, #8
 8004c60:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004c62:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8004c64:	4812      	ldr	r0, [pc, #72]	; (8004cb0 <mem_trim+0x130>)
 8004c66:	6800      	ldr	r0, [r0, #0]
 8004c68:	4281      	cmp	r1, r0
 8004c6a:	d201      	bcs.n	8004c70 <mem_trim+0xf0>
      lfree = mem2;
 8004c6c:	4810      	ldr	r0, [pc, #64]	; (8004cb0 <mem_trim+0x130>)
 8004c6e:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8004c70:	2000      	movs	r0, #0
 8004c72:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8004c74:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8004c78:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8004c7a:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8004c7c:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c80:	5ad1      	ldrh	r1, [r2, r3]
 8004c82:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8004c86:	d0ce      	beq.n	8004c26 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004c88:	440a      	add	r2, r1
 8004c8a:	8053      	strh	r3, [r2, #2]
 8004c8c:	e7cb      	b.n	8004c26 <mem_trim+0xa6>
    return NULL;
 8004c8e:	2500      	movs	r5, #0
 8004c90:	e7d1      	b.n	8004c36 <mem_trim+0xb6>
    return NULL;
 8004c92:	2500      	movs	r5, #0
 8004c94:	e7cf      	b.n	8004c36 <mem_trim+0xb6>
 8004c96:	bf00      	nop
 8004c98:	20003df8 	.word	0x20003df8
 8004c9c:	20003dfc 	.word	0x20003dfc
 8004ca0:	0800dfd8 	.word	0x0800dfd8
 8004ca4:	0800dfa0 	.word	0x0800dfa0
 8004ca8:	0800de6c 	.word	0x0800de6c
 8004cac:	20003df4 	.word	0x20003df4
 8004cb0:	20003df0 	.word	0x20003df0
 8004cb4:	0800dfb8 	.word	0x0800dfb8

08004cb8 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	f000 808e 	beq.w	8004dda <mem_malloc+0x122>
{
 8004cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc0:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004cc2:	3503      	adds	r5, #3
 8004cc4:	b2ad      	uxth	r5, r5
 8004cc6:	f025 0503 	bic.w	r5, r5, #3
 8004cca:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 8004ccc:	2d0b      	cmp	r5, #11
 8004cce:	d800      	bhi.n	8004cd2 <mem_malloc+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004cd0:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004cd2:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8004cd6:	f200 8082 	bhi.w	8004dde <mem_malloc+0x126>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8004cda:	4842      	ldr	r0, [pc, #264]	; (8004de4 <mem_malloc+0x12c>)
 8004cdc:	f006 ffcb 	bl	800bc76 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004ce0:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <mem_malloc+0x130>)
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	4b41      	ldr	r3, [pc, #260]	; (8004dec <mem_malloc+0x134>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	1a1b      	subs	r3, r3, r0
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	e049      	b.n	8004d82 <mem_malloc+0xca>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <mem_malloc+0x134>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	429c      	cmp	r4, r3
 8004cf8:	d014      	beq.n	8004d24 <mem_malloc+0x6c>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8004cfa:	483a      	ldr	r0, [pc, #232]	; (8004de4 <mem_malloc+0x12c>)
 8004cfc:	f006 ffc2 	bl	800bc84 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004d00:	4426      	add	r6, r4
 8004d02:	3608      	adds	r6, #8
 8004d04:	4b3a      	ldr	r3, [pc, #232]	; (8004df0 <mem_malloc+0x138>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	429e      	cmp	r6, r3
 8004d0a:	d821      	bhi.n	8004d50 <mem_malloc+0x98>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004d0c:	f014 0503 	ands.w	r5, r4, #3
 8004d10:	d126      	bne.n	8004d60 <mem_malloc+0xa8>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	d12c      	bne.n	8004d70 <mem_malloc+0xb8>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004d16:	f104 0008 	add.w	r0, r4, #8
 8004d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 8004d1c:	4a32      	ldr	r2, [pc, #200]	; (8004de8 <mem_malloc+0x130>)
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 8004d24:	791a      	ldrb	r2, [r3, #4]
 8004d26:	b11a      	cbz	r2, 8004d30 <mem_malloc+0x78>
 8004d28:	4931      	ldr	r1, [pc, #196]	; (8004df0 <mem_malloc+0x138>)
 8004d2a:	6809      	ldr	r1, [r1, #0]
 8004d2c:	428b      	cmp	r3, r1
 8004d2e:	d1f5      	bne.n	8004d1c <mem_malloc+0x64>
          lfree = cur;
 8004d30:	492e      	ldr	r1, [pc, #184]	; (8004dec <mem_malloc+0x134>)
 8004d32:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004d34:	492e      	ldr	r1, [pc, #184]	; (8004df0 <mem_malloc+0x138>)
 8004d36:	6809      	ldr	r1, [r1, #0]
 8004d38:	428b      	cmp	r3, r1
 8004d3a:	d0de      	beq.n	8004cfa <mem_malloc+0x42>
 8004d3c:	2a00      	cmp	r2, #0
 8004d3e:	d0dc      	beq.n	8004cfa <mem_malloc+0x42>
 8004d40:	4b2c      	ldr	r3, [pc, #176]	; (8004df4 <mem_malloc+0x13c>)
 8004d42:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004d46:	492c      	ldr	r1, [pc, #176]	; (8004df8 <mem_malloc+0x140>)
 8004d48:	482c      	ldr	r0, [pc, #176]	; (8004dfc <mem_malloc+0x144>)
 8004d4a:	f007 fef7 	bl	800cb3c <iprintf>
 8004d4e:	e7d4      	b.n	8004cfa <mem_malloc+0x42>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004d50:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <mem_malloc+0x13c>)
 8004d52:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8004d56:	492a      	ldr	r1, [pc, #168]	; (8004e00 <mem_malloc+0x148>)
 8004d58:	4828      	ldr	r0, [pc, #160]	; (8004dfc <mem_malloc+0x144>)
 8004d5a:	f007 feef 	bl	800cb3c <iprintf>
 8004d5e:	e7d5      	b.n	8004d0c <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004d60:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <mem_malloc+0x13c>)
 8004d62:	f240 22d6 	movw	r2, #726	; 0x2d6
 8004d66:	4927      	ldr	r1, [pc, #156]	; (8004e04 <mem_malloc+0x14c>)
 8004d68:	4824      	ldr	r0, [pc, #144]	; (8004dfc <mem_malloc+0x144>)
 8004d6a:	f007 fee7 	bl	800cb3c <iprintf>
 8004d6e:	e7d0      	b.n	8004d12 <mem_malloc+0x5a>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004d70:	4b20      	ldr	r3, [pc, #128]	; (8004df4 <mem_malloc+0x13c>)
 8004d72:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8004d76:	4924      	ldr	r1, [pc, #144]	; (8004e08 <mem_malloc+0x150>)
 8004d78:	4820      	ldr	r0, [pc, #128]	; (8004dfc <mem_malloc+0x144>)
 8004d7a:	f007 fedf 	bl	800cb3c <iprintf>
 8004d7e:	e7ca      	b.n	8004d16 <mem_malloc+0x5e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004d80:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004d82:	461f      	mov	r7, r3
 8004d84:	462e      	mov	r6, r5
 8004d86:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 8004d8a:	428b      	cmp	r3, r1
 8004d8c:	d220      	bcs.n	8004dd0 <mem_malloc+0x118>
      mem = (struct mem *)(void *)&ram[ptr];
 8004d8e:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 8004d90:	7921      	ldrb	r1, [r4, #4]
 8004d92:	2900      	cmp	r1, #0
 8004d94:	d1f4      	bne.n	8004d80 <mem_malloc+0xc8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004d96:	5ac2      	ldrh	r2, [r0, r3]
 8004d98:	1bd2      	subs	r2, r2, r7
 8004d9a:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 8004d9c:	4296      	cmp	r6, r2
 8004d9e:	d8ef      	bhi.n	8004d80 <mem_malloc+0xc8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004da0:	f106 0114 	add.w	r1, r6, #20
 8004da4:	428a      	cmp	r2, r1
 8004da6:	d3a2      	bcc.n	8004cee <mem_malloc+0x36>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004da8:	18ea      	adds	r2, r5, r3
 8004daa:	b292      	uxth	r2, r2
 8004dac:	3208      	adds	r2, #8
 8004dae:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004db0:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 8004db2:	2500      	movs	r5, #0
 8004db4:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 8004db6:	8825      	ldrh	r5, [r4, #0]
 8004db8:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 8004dba:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8004dbc:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004dc2:	5a83      	ldrh	r3, [r0, r2]
 8004dc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dc8:	d093      	beq.n	8004cf2 <mem_malloc+0x3a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004dca:	4418      	add	r0, r3
 8004dcc:	8042      	strh	r2, [r0, #2]
 8004dce:	e790      	b.n	8004cf2 <mem_malloc+0x3a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8004dd0:	4804      	ldr	r0, [pc, #16]	; (8004de4 <mem_malloc+0x12c>)
 8004dd2:	f006 ff57 	bl	800bc84 <sys_mutex_unlock>
  return NULL;
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8004dda:	2000      	movs	r0, #0
 8004ddc:	4770      	bx	lr
    return NULL;
 8004dde:	2000      	movs	r0, #0
}
 8004de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20003df4 	.word	0x20003df4
 8004de8:	20003df8 	.word	0x20003df8
 8004dec:	20003df0 	.word	0x20003df0
 8004df0:	20003dfc 	.word	0x20003dfc
 8004df4:	0800dfd8 	.word	0x0800dfd8
 8004df8:	0800df00 	.word	0x0800df00
 8004dfc:	0800de6c 	.word	0x0800de6c
 8004e00:	0800df1c 	.word	0x0800df1c
 8004e04:	0800df4c 	.word	0x0800df4c
 8004e08:	0800df7c 	.word	0x0800df7c

08004e0c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8004e10:	f006 ff50 	bl	800bcb4 <sys_arch_protect>
 8004e14:	4605      	mov	r5, r0

  memp = *desc->tab;
 8004e16:	68a3      	ldr	r3, [r4, #8]
 8004e18:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004e1a:	b18c      	cbz	r4, 8004e40 <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004e1c:	6822      	ldr	r2, [r4, #0]
 8004e1e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004e20:	f014 0f03 	tst.w	r4, #3
 8004e24:	d104      	bne.n	8004e30 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8004e26:	4628      	mov	r0, r5
 8004e28:	f006 ff50 	bl	800bccc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <do_memp_malloc_pool+0x3c>)
 8004e32:	f240 1249 	movw	r2, #329	; 0x149
 8004e36:	4905      	ldr	r1, [pc, #20]	; (8004e4c <do_memp_malloc_pool+0x40>)
 8004e38:	4805      	ldr	r0, [pc, #20]	; (8004e50 <do_memp_malloc_pool+0x44>)
 8004e3a:	f007 fe7f 	bl	800cb3c <iprintf>
 8004e3e:	e7f2      	b.n	8004e26 <do_memp_malloc_pool+0x1a>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8004e40:	f006 ff44 	bl	800bccc <sys_arch_unprotect>
  return NULL;
 8004e44:	2000      	movs	r0, #0
}
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	0800e0a4 	.word	0x0800e0a4
 8004e4c:	0800e0d4 	.word	0x0800e0d4
 8004e50:	0800de6c 	.word	0x0800de6c

08004e54 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4605      	mov	r5, r0
 8004e58:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004e5a:	f011 0f03 	tst.w	r1, #3
 8004e5e:	d109      	bne.n	8004e74 <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8004e60:	f006 ff28 	bl	800bcb4 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004e64:	68ab      	ldr	r3, [r5, #8]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8004e6a:	68ab      	ldr	r3, [r5, #8]
 8004e6c:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8004e6e:	f006 ff2d 	bl	800bccc <sys_arch_unprotect>
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8004e74:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <do_memp_free_pool+0x30>)
 8004e76:	f240 129d 	movw	r2, #413	; 0x19d
 8004e7a:	4903      	ldr	r1, [pc, #12]	; (8004e88 <do_memp_free_pool+0x34>)
 8004e7c:	4803      	ldr	r0, [pc, #12]	; (8004e8c <do_memp_free_pool+0x38>)
 8004e7e:	f007 fe5d 	bl	800cb3c <iprintf>
 8004e82:	e7ed      	b.n	8004e60 <do_memp_free_pool+0xc>
 8004e84:	0800e0a4 	.word	0x0800e0a4
 8004e88:	0800e084 	.word	0x0800e084
 8004e8c:	0800de6c 	.word	0x0800de6c

08004e90 <memp_init_pool>:
  *desc->tab = NULL;
 8004e90:	6883      	ldr	r3, [r0, #8]
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004e96:	6843      	ldr	r3, [r0, #4]
 8004e98:	3303      	adds	r3, #3
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8004e9e:	e007      	b.n	8004eb0 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8004ea0:	6881      	ldr	r1, [r0, #8]
 8004ea2:	6809      	ldr	r1, [r1, #0]
 8004ea4:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8004ea6:	6881      	ldr	r1, [r0, #8]
 8004ea8:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004eaa:	8801      	ldrh	r1, [r0, #0]
 8004eac:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8004eae:	3201      	adds	r2, #1
 8004eb0:	8841      	ldrh	r1, [r0, #2]
 8004eb2:	428a      	cmp	r2, r1
 8004eb4:	dbf4      	blt.n	8004ea0 <memp_init_pool+0x10>
}
 8004eb6:	4770      	bx	lr

08004eb8 <memp_init>:
{
 8004eb8:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004eba:	2400      	movs	r4, #0
 8004ebc:	e006      	b.n	8004ecc <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <memp_init+0x1c>)
 8004ec0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004ec4:	f7ff ffe4 	bl	8004e90 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004ec8:	3401      	adds	r4, #1
 8004eca:	b2a4      	uxth	r4, r4
 8004ecc:	2c0c      	cmp	r4, #12
 8004ece:	d9f6      	bls.n	8004ebe <memp_init+0x6>
}
 8004ed0:	bd10      	pop	{r4, pc}
 8004ed2:	bf00      	nop
 8004ed4:	0800e1d0 	.word	0x0800e1d0

08004ed8 <memp_malloc>:
{
 8004ed8:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004eda:	280c      	cmp	r0, #12
 8004edc:	d805      	bhi.n	8004eea <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <memp_malloc+0x24>)
 8004ee0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004ee4:	f7ff ff92 	bl	8004e0c <do_memp_malloc_pool>
}
 8004ee8:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <memp_malloc+0x28>)
 8004eec:	f240 1287 	movw	r2, #391	; 0x187
 8004ef0:	4904      	ldr	r1, [pc, #16]	; (8004f04 <memp_malloc+0x2c>)
 8004ef2:	4805      	ldr	r0, [pc, #20]	; (8004f08 <memp_malloc+0x30>)
 8004ef4:	f007 fe22 	bl	800cb3c <iprintf>
 8004ef8:	2000      	movs	r0, #0
 8004efa:	bd08      	pop	{r3, pc}
 8004efc:	0800e1d0 	.word	0x0800e1d0
 8004f00:	0800e0a4 	.word	0x0800e0a4
 8004f04:	0800e1b0 	.word	0x0800e1b0
 8004f08:	0800de6c 	.word	0x0800de6c

08004f0c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004f0c:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004f0e:	280c      	cmp	r0, #12
 8004f10:	d806      	bhi.n	8004f20 <memp_free+0x14>

  if (mem == NULL) {
 8004f12:	b121      	cbz	r1, 8004f1e <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <memp_free+0x24>)
 8004f16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004f1a:	f7ff ff9b 	bl	8004e54 <do_memp_free_pool>
 8004f1e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <memp_free+0x28>)
 8004f22:	f240 12db 	movw	r2, #475	; 0x1db
 8004f26:	4904      	ldr	r1, [pc, #16]	; (8004f38 <memp_free+0x2c>)
 8004f28:	4804      	ldr	r0, [pc, #16]	; (8004f3c <memp_free+0x30>)
 8004f2a:	f007 fe07 	bl	800cb3c <iprintf>
 8004f2e:	bd08      	pop	{r3, pc}
 8004f30:	0800e1d0 	.word	0x0800e1d0
 8004f34:	0800e0a4 	.word	0x0800e0a4
 8004f38:	0800e194 	.word	0x0800e194
 8004f3c:	0800de6c 	.word	0x0800de6c

08004f40 <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004f40:	f011 0f01 	tst.w	r1, #1
 8004f44:	d00c      	beq.n	8004f60 <netif_issue_reports+0x20>
{
 8004f46:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004f48:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004f4a:	b123      	cbz	r3, 8004f56 <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004f4c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8004f50:	f013 0f08 	tst.w	r3, #8
 8004f54:	d100      	bne.n	8004f58 <netif_issue_reports+0x18>
 8004f56:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 8004f58:	1d01      	adds	r1, r0, #4
 8004f5a:	f005 fc5b 	bl	800a814 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8004f5e:	e7fa      	b.n	8004f56 <netif_issue_reports+0x16>
 8004f60:	4770      	bx	lr

08004f62 <netif_init>:
{
 8004f62:	4770      	bx	lr

08004f64 <netif_set_ipaddr>:
{
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	b082      	sub	sp, #8
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004f68:	460d      	mov	r5, r1
 8004f6a:	b1c1      	cbz	r1, 8004f9e <netif_set_ipaddr+0x3a>
 8004f6c:	680a      	ldr	r2, [r1, #0]
 8004f6e:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004f70:	6842      	ldr	r2, [r0, #4]
 8004f72:	9901      	ldr	r1, [sp, #4]
 8004f74:	4291      	cmp	r1, r2
 8004f76:	d010      	beq.n	8004f9a <netif_set_ipaddr+0x36>
 8004f78:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004f7a:	1d06      	adds	r6, r0, #4
 8004f7c:	a901      	add	r1, sp, #4
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f001 fb0c 	bl	800659c <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004f84:	a901      	add	r1, sp, #4
 8004f86:	4630      	mov	r0, r6
 8004f88:	f003 ff56 	bl	8008e38 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004f8c:	b15d      	cbz	r5, 8004fa6 <netif_set_ipaddr+0x42>
 8004f8e:	682b      	ldr	r3, [r5, #0]
 8004f90:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004f92:	2101      	movs	r1, #1
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff ffd3 	bl	8004f40 <netif_issue_reports>
}
 8004f9a:	b002      	add	sp, #8
 8004f9c:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004f9e:	4a03      	ldr	r2, [pc, #12]	; (8004fac <netif_set_ipaddr+0x48>)
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	9201      	str	r2, [sp, #4]
 8004fa4:	e7e4      	b.n	8004f70 <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e7f2      	b.n	8004f90 <netif_set_ipaddr+0x2c>
 8004faa:	bf00      	nop
 8004fac:	0800f76c 	.word	0x0800f76c

08004fb0 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004fb0:	b111      	cbz	r1, 8004fb8 <netif_set_gw+0x8>
 8004fb2:	680b      	ldr	r3, [r1, #0]
 8004fb4:	60c3      	str	r3, [r0, #12]
 8004fb6:	4770      	bx	lr
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e7fb      	b.n	8004fb4 <netif_set_gw+0x4>

08004fbc <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004fbc:	b111      	cbz	r1, 8004fc4 <netif_set_netmask+0x8>
 8004fbe:	680b      	ldr	r3, [r1, #0]
 8004fc0:	6083      	str	r3, [r0, #8]
 8004fc2:	4770      	bx	lr
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e7fb      	b.n	8004fc0 <netif_set_netmask+0x4>

08004fc8 <netif_set_addr>:
{
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4617      	mov	r7, r2
 8004fce:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 8004fd0:	460d      	mov	r5, r1
 8004fd2:	b109      	cbz	r1, 8004fd8 <netif_set_addr+0x10>
 8004fd4:	680b      	ldr	r3, [r1, #0]
 8004fd6:	b963      	cbnz	r3, 8004ff2 <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f7ff ffc2 	bl	8004f64 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f7ff ffea 	bl	8004fbc <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004fe8:	4631      	mov	r1, r6
 8004fea:	4620      	mov	r0, r4
 8004fec:	f7ff ffe0 	bl	8004fb0 <netif_set_gw>
 8004ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	f7ff ffe2 	bl	8004fbc <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f7ff ffd8 	bl	8004fb0 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 8005000:	4629      	mov	r1, r5
 8005002:	4620      	mov	r0, r4
 8005004:	f7ff ffae 	bl	8004f64 <netif_set_ipaddr>
 8005008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800500c <netif_add>:
{
 800500c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005010:	4604      	mov	r4, r0
 8005012:	460e      	mov	r6, r1
 8005014:	4617      	mov	r7, r2
 8005016:	4698      	mov	r8, r3
 8005018:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 800501a:	b31d      	cbz	r5, 8005064 <netif_add+0x58>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800501c:	2300      	movs	r3, #0
 800501e:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005020:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005022:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 8005024:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8005028:	6223      	str	r3, [r4, #32]
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800502a:	2303      	movs	r3, #3
 800502c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 8005030:	9b06      	ldr	r3, [sp, #24]
 8005032:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8005034:	4a10      	ldr	r2, [pc, #64]	; (8005078 <netif_add+0x6c>)
 8005036:	7813      	ldrb	r3, [r2, #0]
 8005038:	1c59      	adds	r1, r3, #1
 800503a:	7011      	strb	r1, [r2, #0]
 800503c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->input = input;
 8005040:	9b08      	ldr	r3, [sp, #32]
 8005042:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005044:	4643      	mov	r3, r8
 8005046:	463a      	mov	r2, r7
 8005048:	4631      	mov	r1, r6
 800504a:	4620      	mov	r0, r4
 800504c:	f7ff ffbc 	bl	8004fc8 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8005050:	4620      	mov	r0, r4
 8005052:	47a8      	blx	r5
 8005054:	b968      	cbnz	r0, 8005072 <netif_add+0x66>
  netif->next = netif_list;
 8005056:	4b09      	ldr	r3, [pc, #36]	; (800507c <netif_add+0x70>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800505c:	601c      	str	r4, [r3, #0]
  return netif;
 800505e:	4620      	mov	r0, r4
 8005060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <netif_add+0x74>)
 8005066:	22fb      	movs	r2, #251	; 0xfb
 8005068:	4906      	ldr	r1, [pc, #24]	; (8005084 <netif_add+0x78>)
 800506a:	4807      	ldr	r0, [pc, #28]	; (8005088 <netif_add+0x7c>)
 800506c:	f007 fd66 	bl	800cb3c <iprintf>
 8005070:	e7d4      	b.n	800501c <netif_add+0x10>
    return NULL;
 8005072:	2000      	movs	r0, #0
}
 8005074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005078:	20003e34 	.word	0x20003e34
 800507c:	200076c0 	.word	0x200076c0
 8005080:	0800e204 	.word	0x0800e204
 8005084:	0800e238 	.word	0x0800e238
 8005088:	0800de6c 	.word	0x0800de6c

0800508c <netif_set_default>:
  netif_default = netif;
 800508c:	4b01      	ldr	r3, [pc, #4]	; (8005094 <netif_set_default+0x8>)
 800508e:	6018      	str	r0, [r3, #0]
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	200076c4 	.word	0x200076c4

08005098 <netif_set_up>:
{
 8005098:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800509a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800509e:	f013 0f01 	tst.w	r3, #1
 80050a2:	d106      	bne.n	80050b2 <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80050ac:	f013 0f04 	tst.w	r3, #4
 80050b0:	d100      	bne.n	80050b4 <netif_set_up+0x1c>
 80050b2:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80050b4:	2103      	movs	r1, #3
 80050b6:	f7ff ff43 	bl	8004f40 <netif_issue_reports>
}
 80050ba:	e7fa      	b.n	80050b2 <netif_set_up+0x1a>

080050bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80050bc:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 80050be:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80050c2:	f013 0f01 	tst.w	r3, #1
 80050c6:	d006      	beq.n	80050d6 <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 80050c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80050cc:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80050d0:	f013 0f08 	tst.w	r3, #8
 80050d4:	d100      	bne.n	80050d8 <netif_set_down+0x1c>
 80050d6:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 80050d8:	f005 fb1e 	bl	800a718 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80050dc:	e7fb      	b.n	80050d6 <netif_set_down+0x1a>
	...

080050e0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	460c      	mov	r4, r1
 80050e4:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80050e6:	4605      	mov	r5, r0
 80050e8:	b1d8      	cbz	r0, 8005122 <pbuf_header_impl+0x42>
  if ((header_size_increment == 0) || (p == NULL)) {
 80050ea:	2d00      	cmp	r5, #0
 80050ec:	bf18      	it	ne
 80050ee:	2c00      	cmpne	r4, #0
 80050f0:	d04d      	beq.n	800518e <pbuf_header_impl+0xae>
    return 0;
  }

  if (header_size_increment < 0) {
 80050f2:	2c00      	cmp	r4, #0
 80050f4:	db1d      	blt.n	8005132 <pbuf_header_impl+0x52>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80050f6:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80050f8:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80050fa:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	bf18      	it	ne
 8005100:	2b00      	cmpne	r3, #0
 8005102:	d128      	bne.n	8005156 <pbuf_header_impl+0x76>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005104:	1b0b      	subs	r3, r1, r4
 8005106:	606b      	str	r3, [r5, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005108:	f105 0210 	add.w	r2, r5, #16
 800510c:	4293      	cmp	r3, r2
 800510e:	d31f      	bcc.n	8005150 <pbuf_header_impl+0x70>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8005110:	b2a4      	uxth	r4, r4
 8005112:	896b      	ldrh	r3, [r5, #10]
 8005114:	4423      	add	r3, r4
 8005116:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 8005118:	892b      	ldrh	r3, [r5, #8]
 800511a:	441c      	add	r4, r3
 800511c:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800511e:	2000      	movs	r0, #0
 8005120:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <pbuf_header_impl+0xb8>)
 8005124:	f240 223f 	movw	r2, #575	; 0x23f
 8005128:	491c      	ldr	r1, [pc, #112]	; (800519c <pbuf_header_impl+0xbc>)
 800512a:	481d      	ldr	r0, [pc, #116]	; (80051a0 <pbuf_header_impl+0xc0>)
 800512c:	f007 fd06 	bl	800cb3c <iprintf>
 8005130:	e7db      	b.n	80050ea <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 8005132:	b2a2      	uxth	r2, r4
 8005134:	4252      	negs	r2, r2
 8005136:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005138:	896b      	ldrh	r3, [r5, #10]
 800513a:	429a      	cmp	r2, r3
 800513c:	d9dc      	bls.n	80050f8 <pbuf_header_impl+0x18>
 800513e:	4b16      	ldr	r3, [pc, #88]	; (8005198 <pbuf_header_impl+0xb8>)
 8005140:	f240 2247 	movw	r2, #583	; 0x247
 8005144:	4917      	ldr	r1, [pc, #92]	; (80051a4 <pbuf_header_impl+0xc4>)
 8005146:	4816      	ldr	r0, [pc, #88]	; (80051a0 <pbuf_header_impl+0xc0>)
 8005148:	f007 fcf8 	bl	800cb3c <iprintf>
 800514c:	2001      	movs	r0, #1
 800514e:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 8005150:	6069      	str	r1, [r5, #4]
      return 1;
 8005152:	2001      	movs	r0, #1
 8005154:	bd70      	pop	{r4, r5, r6, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8005156:	3b01      	subs	r3, #1
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d80e      	bhi.n	800517c <pbuf_header_impl+0x9c>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800515e:	2c00      	cmp	r4, #0
 8005160:	db06      	blt.n	8005170 <pbuf_header_impl+0x90>
    } else if ((header_size_increment > 0) && force) {
 8005162:	2e00      	cmp	r6, #0
 8005164:	bf18      	it	ne
 8005166:	2c00      	cmpne	r4, #0
 8005168:	dd13      	ble.n	8005192 <pbuf_header_impl+0xb2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800516a:	1b09      	subs	r1, r1, r4
 800516c:	6069      	str	r1, [r5, #4]
 800516e:	e7cf      	b.n	8005110 <pbuf_header_impl+0x30>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005170:	896b      	ldrh	r3, [r5, #10]
 8005172:	429a      	cmp	r2, r3
 8005174:	d8f5      	bhi.n	8005162 <pbuf_header_impl+0x82>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005176:	1b09      	subs	r1, r1, r4
 8005178:	6069      	str	r1, [r5, #4]
 800517a:	e7c9      	b.n	8005110 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <pbuf_header_impl+0xb8>)
 800517e:	f240 2277 	movw	r2, #631	; 0x277
 8005182:	4909      	ldr	r1, [pc, #36]	; (80051a8 <pbuf_header_impl+0xc8>)
 8005184:	4806      	ldr	r0, [pc, #24]	; (80051a0 <pbuf_header_impl+0xc0>)
 8005186:	f007 fcd9 	bl	800cb3c <iprintf>
    return 1;
 800518a:	2001      	movs	r0, #1
 800518c:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800518e:	2000      	movs	r0, #0
 8005190:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8005192:	2001      	movs	r0, #1
}
 8005194:	bd70      	pop	{r4, r5, r6, pc}
 8005196:	bf00      	nop
 8005198:	0800e508 	.word	0x0800e508
 800519c:	0800efec 	.word	0x0800efec
 80051a0:	0800de6c 	.word	0x0800de6c
 80051a4:	0800e538 	.word	0x0800e538
 80051a8:	0800e558 	.word	0x0800e558

080051ac <pbuf_pool_is_empty>:
{
 80051ac:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 80051ae:	f006 fd81 	bl	800bcb4 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <pbuf_pool_is_empty+0x38>)
 80051b4:	781c      	ldrb	r4, [r3, #0]
 80051b6:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 80051b8:	2201      	movs	r2, #1
 80051ba:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80051bc:	f006 fd86 	bl	800bccc <sys_arch_unprotect>
  if (!queued) {
 80051c0:	b104      	cbz	r4, 80051c4 <pbuf_pool_is_empty+0x18>
 80051c2:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80051c4:	2200      	movs	r2, #0
 80051c6:	4611      	mov	r1, r2
 80051c8:	4807      	ldr	r0, [pc, #28]	; (80051e8 <pbuf_pool_is_empty+0x3c>)
 80051ca:	f7ff fb3b 	bl	8004844 <tcpip_callback_with_block>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d0f7      	beq.n	80051c2 <pbuf_pool_is_empty+0x16>
 80051d2:	f006 fd6f 	bl	800bcb4 <sys_arch_protect>
 80051d6:	2200      	movs	r2, #0
 80051d8:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <pbuf_pool_is_empty+0x38>)
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	f006 fd76 	bl	800bccc <sys_arch_unprotect>
}
 80051e0:	e7ef      	b.n	80051c2 <pbuf_pool_is_empty+0x16>
 80051e2:	bf00      	nop
 80051e4:	200076c8 	.word	0x200076c8
 80051e8:	08005221 	.word	0x08005221

080051ec <pbuf_free_ooseq>:
{
 80051ec:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80051ee:	f006 fd61 	bl	800bcb4 <sys_arch_protect>
 80051f2:	2200      	movs	r2, #0
 80051f4:	4b08      	ldr	r3, [pc, #32]	; (8005218 <pbuf_free_ooseq+0x2c>)
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	f006 fd68 	bl	800bccc <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80051fc:	4b07      	ldr	r3, [pc, #28]	; (800521c <pbuf_free_ooseq+0x30>)
 80051fe:	681c      	ldr	r4, [r3, #0]
 8005200:	b144      	cbz	r4, 8005214 <pbuf_free_ooseq+0x28>
    if (NULL != pcb->ooseq) {
 8005202:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005204:	b908      	cbnz	r0, 800520a <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005206:	68e4      	ldr	r4, [r4, #12]
 8005208:	e7fa      	b.n	8005200 <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 800520a:	f000 fc62 	bl	8005ad2 <tcp_segs_free>
      pcb->ooseq = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 8005212:	bd10      	pop	{r4, pc}
 8005214:	bd10      	pop	{r4, pc}
 8005216:	bf00      	nop
 8005218:	200076c8 	.word	0x200076c8
 800521c:	200076d0 	.word	0x200076d0

08005220 <pbuf_free_ooseq_callback>:
{
 8005220:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 8005222:	f7ff ffe3 	bl	80051ec <pbuf_free_ooseq>
 8005226:	bd08      	pop	{r3, pc}

08005228 <pbuf_alloced_custom>:
{
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 800522c:	2804      	cmp	r0, #4
 800522e:	d80a      	bhi.n	8005246 <pbuf_alloced_custom+0x1e>
 8005230:	e8df f000 	tbb	[pc, r0]
 8005234:	05031412 	.word	0x05031412
 8005238:	07          	.byte	0x07
 8005239:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800523a:	200e      	movs	r0, #14
    break;
 800523c:	e00f      	b.n	800525e <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800523e:	2000      	movs	r0, #0
    break;
 8005240:	e00d      	b.n	800525e <pbuf_alloced_custom+0x36>
    offset = 0;
 8005242:	2000      	movs	r0, #0
    break;
 8005244:	e00b      	b.n	800525e <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8005246:	4b13      	ldr	r3, [pc, #76]	; (8005294 <pbuf_alloced_custom+0x6c>)
 8005248:	f240 12c5 	movw	r2, #453	; 0x1c5
 800524c:	4912      	ldr	r1, [pc, #72]	; (8005298 <pbuf_alloced_custom+0x70>)
 800524e:	4813      	ldr	r0, [pc, #76]	; (800529c <pbuf_alloced_custom+0x74>)
 8005250:	f007 fc74 	bl	800cb3c <iprintf>
    return NULL;
 8005254:	2000      	movs	r0, #0
 8005256:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005258:	2036      	movs	r0, #54	; 0x36
 800525a:	e000      	b.n	800525e <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800525c:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800525e:	3003      	adds	r0, #3
 8005260:	f020 0003 	bic.w	r0, r0, #3
 8005264:	180e      	adds	r6, r1, r0
 8005266:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 800526a:	42ae      	cmp	r6, r5
 800526c:	d810      	bhi.n	8005290 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 800526e:	2500      	movs	r5, #0
 8005270:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 8005272:	b154      	cbz	r4, 800528a <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005274:	4420      	add	r0, r4
 8005276:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005278:	2002      	movs	r0, #2
 800527a:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800527c:	8119      	strh	r1, [r3, #8]
 800527e:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8005280:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005282:	2201      	movs	r2, #1
 8005284:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8005286:	4618      	mov	r0, r3
 8005288:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 800528a:	2000      	movs	r0, #0
 800528c:	6058      	str	r0, [r3, #4]
 800528e:	e7f3      	b.n	8005278 <pbuf_alloced_custom+0x50>
    return NULL;
 8005290:	2000      	movs	r0, #0
}
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	0800e508 	.word	0x0800e508
 8005298:	0800e334 	.word	0x0800e334
 800529c:	0800de6c 	.word	0x0800de6c

080052a0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80052a0:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 80052a2:	2200      	movs	r2, #0
 80052a4:	f7ff ff1c 	bl	80050e0 <pbuf_header_impl>
}
 80052a8:	bd08      	pop	{r3, pc}

080052aa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80052aa:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 80052ac:	2201      	movs	r2, #1
 80052ae:	f7ff ff17 	bl	80050e0 <pbuf_header_impl>
}
 80052b2:	bd08      	pop	{r3, pc}

080052b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80052b6:	b128      	cbz	r0, 80052c4 <pbuf_free+0x10>
 80052b8:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80052ba:	7b03      	ldrb	r3, [r0, #12]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d80b      	bhi.n	80052d8 <pbuf_free+0x24>
{
 80052c0:	2600      	movs	r6, #0
 80052c2:	e01f      	b.n	8005304 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <pbuf_free+0xc0>)
 80052c6:	f240 22d2 	movw	r2, #722	; 0x2d2
 80052ca:	492b      	ldr	r1, [pc, #172]	; (8005378 <pbuf_free+0xc4>)
 80052cc:	482b      	ldr	r0, [pc, #172]	; (800537c <pbuf_free+0xc8>)
 80052ce:	f007 fc35 	bl	800cb3c <iprintf>
    return 0;
 80052d2:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80052d4:	4630      	mov	r0, r6
 80052d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 80052d8:	4b26      	ldr	r3, [pc, #152]	; (8005374 <pbuf_free+0xc0>)
 80052da:	f240 22de 	movw	r2, #734	; 0x2de
 80052de:	4928      	ldr	r1, [pc, #160]	; (8005380 <pbuf_free+0xcc>)
 80052e0:	4826      	ldr	r0, [pc, #152]	; (800537c <pbuf_free+0xc8>)
 80052e2:	f007 fc2b 	bl	800cb3c <iprintf>
 80052e6:	e7eb      	b.n	80052c0 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80052e8:	4b22      	ldr	r3, [pc, #136]	; (8005374 <pbuf_free+0xc0>)
 80052ea:	f240 22eb 	movw	r2, #747	; 0x2eb
 80052ee:	4925      	ldr	r1, [pc, #148]	; (8005384 <pbuf_free+0xd0>)
 80052f0:	4822      	ldr	r0, [pc, #136]	; (800537c <pbuf_free+0xc8>)
 80052f2:	f007 fc23 	bl	800cb3c <iprintf>
 80052f6:	e00d      	b.n	8005314 <pbuf_free+0x60>
        pc->custom_free_function(p);
 80052f8:	6923      	ldr	r3, [r4, #16]
 80052fa:	4620      	mov	r0, r4
 80052fc:	4798      	blx	r3
      count++;
 80052fe:	3601      	adds	r6, #1
 8005300:	b2f6      	uxtb	r6, r6
      p = q;
 8005302:	462c      	mov	r4, r5
  while (p != NULL) {
 8005304:	2c00      	cmp	r4, #0
 8005306:	d0e5      	beq.n	80052d4 <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 8005308:	f006 fcd4 	bl	800bcb4 <sys_arch_protect>
 800530c:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800530e:	89e3      	ldrh	r3, [r4, #14]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0e9      	beq.n	80052e8 <pbuf_free+0x34>
    ref = --(p->ref);
 8005314:	89e5      	ldrh	r5, [r4, #14]
 8005316:	3d01      	subs	r5, #1
 8005318:	b2ad      	uxth	r5, r5
 800531a:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800531c:	4638      	mov	r0, r7
 800531e:	f006 fcd5 	bl	800bccc <sys_arch_unprotect>
    if (ref == 0) {
 8005322:	bb25      	cbnz	r5, 800536e <pbuf_free+0xba>
      q = p->next;
 8005324:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 8005326:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005328:	7b62      	ldrb	r2, [r4, #13]
 800532a:	f012 0f02 	tst.w	r2, #2
 800532e:	d00a      	beq.n	8005346 <pbuf_free+0x92>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e0      	bne.n	80052f8 <pbuf_free+0x44>
 8005336:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <pbuf_free+0xc0>)
 8005338:	f240 22f9 	movw	r2, #761	; 0x2f9
 800533c:	4912      	ldr	r1, [pc, #72]	; (8005388 <pbuf_free+0xd4>)
 800533e:	480f      	ldr	r0, [pc, #60]	; (800537c <pbuf_free+0xc8>)
 8005340:	f007 fbfc 	bl	800cb3c <iprintf>
 8005344:	e7d8      	b.n	80052f8 <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 8005346:	2b03      	cmp	r3, #3
 8005348:	d007      	beq.n	800535a <pbuf_free+0xa6>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800534a:	3b01      	subs	r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b01      	cmp	r3, #1
 8005350:	d908      	bls.n	8005364 <pbuf_free+0xb0>
          mem_free(p);
 8005352:	4620      	mov	r0, r4
 8005354:	f7ff fbb6 	bl	8004ac4 <mem_free>
 8005358:	e7d1      	b.n	80052fe <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 800535a:	4621      	mov	r1, r4
 800535c:	200c      	movs	r0, #12
 800535e:	f7ff fdd5 	bl	8004f0c <memp_free>
 8005362:	e7cc      	b.n	80052fe <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 8005364:	4621      	mov	r1, r4
 8005366:	200b      	movs	r0, #11
 8005368:	f7ff fdd0 	bl	8004f0c <memp_free>
 800536c:	e7c7      	b.n	80052fe <pbuf_free+0x4a>
      p = NULL;
 800536e:	2400      	movs	r4, #0
 8005370:	e7c8      	b.n	8005304 <pbuf_free+0x50>
 8005372:	bf00      	nop
 8005374:	0800e508 	.word	0x0800e508
 8005378:	0800efec 	.word	0x0800efec
 800537c:	0800de6c 	.word	0x0800de6c
 8005380:	0800e4b4 	.word	0x0800e4b4
 8005384:	0800e4cc 	.word	0x0800e4cc
 8005388:	0800e4e4 	.word	0x0800e4e4

0800538c <pbuf_alloc>:
{
 800538c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005390:	460d      	mov	r5, r1
 8005392:	4617      	mov	r7, r2
  switch (layer) {
 8005394:	2804      	cmp	r0, #4
 8005396:	d80a      	bhi.n	80053ae <pbuf_alloc+0x22>
 8005398:	e8df f000 	tbb	[pc, r0]
 800539c:	05031412 	.word	0x05031412
 80053a0:	07          	.byte	0x07
 80053a1:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80053a2:	240e      	movs	r4, #14
    break;
 80053a4:	e00f      	b.n	80053c6 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80053a6:	2400      	movs	r4, #0
    break;
 80053a8:	e00d      	b.n	80053c6 <pbuf_alloc+0x3a>
    offset = 0;
 80053aa:	2400      	movs	r4, #0
    break;
 80053ac:	e00b      	b.n	80053c6 <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80053ae:	4b64      	ldr	r3, [pc, #400]	; (8005540 <pbuf_alloc+0x1b4>)
 80053b0:	f44f 728b 	mov.w	r2, #278	; 0x116
 80053b4:	4963      	ldr	r1, [pc, #396]	; (8005544 <pbuf_alloc+0x1b8>)
 80053b6:	4864      	ldr	r0, [pc, #400]	; (8005548 <pbuf_alloc+0x1bc>)
 80053b8:	f007 fbc0 	bl	800cb3c <iprintf>
    return NULL;
 80053bc:	2600      	movs	r6, #0
 80053be:	e0b1      	b.n	8005524 <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80053c0:	2436      	movs	r4, #54	; 0x36
 80053c2:	e000      	b.n	80053c6 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80053c4:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 80053c6:	2f03      	cmp	r7, #3
 80053c8:	f200 80af 	bhi.w	800552a <pbuf_alloc+0x19e>
 80053cc:	e8df f007 	tbb	[pc, r7]
 80053d0:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80053d4:	200c      	movs	r0, #12
 80053d6:	f7ff fd7f 	bl	8004ed8 <memp_malloc>
    if (p == NULL) {
 80053da:	4606      	mov	r6, r0
 80053dc:	b1f8      	cbz	r0, 800541e <pbuf_alloc+0x92>
    p->type = type;
 80053de:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80053e4:	f104 0310 	add.w	r3, r4, #16
 80053e8:	4403      	add	r3, r0
 80053ea:	3303      	adds	r3, #3
 80053ec:	f023 0303 	bic.w	r3, r3, #3
 80053f0:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 80053f2:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80053f4:	1ce2      	adds	r2, r4, #3
 80053f6:	f022 0203 	bic.w	r2, r2, #3
 80053fa:	f5c2 7214 	rsb	r2, r2, #592	; 0x250
 80053fe:	42aa      	cmp	r2, r5
 8005400:	bf28      	it	cs
 8005402:	462a      	movcs	r2, r5
 8005404:	b292      	uxth	r2, r2
 8005406:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005408:	4413      	add	r3, r2
 800540a:	f500 7818 	add.w	r8, r0, #608	; 0x260
 800540e:	4543      	cmp	r3, r8
 8005410:	d808      	bhi.n	8005424 <pbuf_alloc+0x98>
    p->ref = 1;
 8005412:	2301      	movs	r3, #1
 8005414:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 8005416:	8973      	ldrh	r3, [r6, #10]
 8005418:	1aed      	subs	r5, r5, r3
    r = p;
 800541a:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 800541c:	e026      	b.n	800546c <pbuf_alloc+0xe0>
      PBUF_POOL_IS_EMPTY();
 800541e:	f7ff fec5 	bl	80051ac <pbuf_pool_is_empty>
      return NULL;
 8005422:	e07f      	b.n	8005524 <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005424:	4b46      	ldr	r3, [pc, #280]	; (8005540 <pbuf_alloc+0x1b4>)
 8005426:	f44f 7298 	mov.w	r2, #304	; 0x130
 800542a:	4948      	ldr	r1, [pc, #288]	; (800554c <pbuf_alloc+0x1c0>)
 800542c:	4846      	ldr	r0, [pc, #280]	; (8005548 <pbuf_alloc+0x1bc>)
 800542e:	f007 fb85 	bl	800cb3c <iprintf>
 8005432:	e7ee      	b.n	8005412 <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 8005434:	f7ff feba 	bl	80051ac <pbuf_pool_is_empty>
        pbuf_free(p);
 8005438:	4630      	mov	r0, r6
 800543a:	f7ff ff3b 	bl	80052b4 <pbuf_free>
        return NULL;
 800543e:	4626      	mov	r6, r4
 8005440:	e070      	b.n	8005524 <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005442:	4b3f      	ldr	r3, [pc, #252]	; (8005540 <pbuf_alloc+0x1b4>)
 8005444:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8005448:	4941      	ldr	r1, [pc, #260]	; (8005550 <pbuf_alloc+0x1c4>)
 800544a:	483f      	ldr	r0, [pc, #252]	; (8005548 <pbuf_alloc+0x1bc>)
 800544c:	f007 fb76 	bl	800cb3c <iprintf>
 8005450:	e01e      	b.n	8005490 <pbuf_alloc+0x104>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005452:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <pbuf_alloc+0x1b4>)
 8005454:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8005458:	493e      	ldr	r1, [pc, #248]	; (8005554 <pbuf_alloc+0x1c8>)
 800545a:	483b      	ldr	r0, [pc, #236]	; (8005548 <pbuf_alloc+0x1bc>)
 800545c:	f007 fb6e 	bl	800cb3c <iprintf>
 8005460:	e024      	b.n	80054ac <pbuf_alloc+0x120>
      q->ref = 1;
 8005462:	2301      	movs	r3, #1
 8005464:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 8005466:	8963      	ldrh	r3, [r4, #10]
 8005468:	1aed      	subs	r5, r5, r3
      r = q;
 800546a:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 800546c:	2d00      	cmp	r5, #0
 800546e:	dd55      	ble.n	800551c <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005470:	200c      	movs	r0, #12
 8005472:	f7ff fd31 	bl	8004ed8 <memp_malloc>
      if (q == NULL) {
 8005476:	4604      	mov	r4, r0
 8005478:	2800      	cmp	r0, #0
 800547a:	d0db      	beq.n	8005434 <pbuf_alloc+0xa8>
      q->type = type;
 800547c:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8005482:	6003      	str	r3, [r0, #0]
      r->next = q;
 8005484:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005488:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800548c:	429d      	cmp	r5, r3
 800548e:	dcd8      	bgt.n	8005442 <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 8005490:	b2ab      	uxth	r3, r5
 8005492:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005494:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005498:	bf28      	it	cs
 800549a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800549e:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80054a0:	f104 0310 	add.w	r3, r4, #16
 80054a4:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80054a6:	f013 0f03 	tst.w	r3, #3
 80054aa:	d1d2      	bne.n	8005452 <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80054ac:	6873      	ldr	r3, [r6, #4]
 80054ae:	8972      	ldrh	r2, [r6, #10]
 80054b0:	4413      	add	r3, r2
 80054b2:	4598      	cmp	r8, r3
 80054b4:	d2d5      	bcs.n	8005462 <pbuf_alloc+0xd6>
 80054b6:	4b22      	ldr	r3, [pc, #136]	; (8005540 <pbuf_alloc+0x1b4>)
 80054b8:	f240 1255 	movw	r2, #341	; 0x155
 80054bc:	4923      	ldr	r1, [pc, #140]	; (800554c <pbuf_alloc+0x1c0>)
 80054be:	4822      	ldr	r0, [pc, #136]	; (8005548 <pbuf_alloc+0x1bc>)
 80054c0:	f007 fb3c 	bl	800cb3c <iprintf>
 80054c4:	e7cd      	b.n	8005462 <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80054c6:	f104 0013 	add.w	r0, r4, #19
 80054ca:	f020 0003 	bic.w	r0, r0, #3
 80054ce:	b283      	uxth	r3, r0
 80054d0:	1cea      	adds	r2, r5, #3
 80054d2:	b290      	uxth	r0, r2
 80054d4:	f020 0003 	bic.w	r0, r0, #3
 80054d8:	4418      	add	r0, r3
 80054da:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80054dc:	f022 0203 	bic.w	r2, r2, #3
 80054e0:	4290      	cmp	r0, r2
 80054e2:	d32b      	bcc.n	800553c <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 80054e4:	f7ff fbe8 	bl	8004cb8 <mem_malloc>
    if (p == NULL) {
 80054e8:	4606      	mov	r6, r0
 80054ea:	b1d8      	cbz	r0, 8005524 <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80054ec:	f104 0310 	add.w	r3, r4, #16
 80054f0:	4403      	add	r3, r0
 80054f2:	3303      	adds	r3, #3
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80054fa:	8105      	strh	r5, [r0, #8]
 80054fc:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	6003      	str	r3, [r0, #0]
    p->type = type;
 8005502:	7307      	strb	r7, [r0, #12]
 8005504:	e00a      	b.n	800551c <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005506:	200b      	movs	r0, #11
 8005508:	f7ff fce6 	bl	8004ed8 <memp_malloc>
    if (p == NULL) {
 800550c:	4606      	mov	r6, r0
 800550e:	b148      	cbz	r0, 8005524 <pbuf_alloc+0x198>
    p->payload = NULL;
 8005510:	2300      	movs	r3, #0
 8005512:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8005514:	8105      	strh	r5, [r0, #8]
 8005516:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8005518:	6003      	str	r3, [r0, #0]
    p->type = type;
 800551a:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 800551c:	2301      	movs	r3, #1
 800551e:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	7373      	strb	r3, [r6, #13]
}
 8005524:	4630      	mov	r0, r6
 8005526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <pbuf_alloc+0x1b4>)
 800552c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005530:	4909      	ldr	r1, [pc, #36]	; (8005558 <pbuf_alloc+0x1cc>)
 8005532:	4805      	ldr	r0, [pc, #20]	; (8005548 <pbuf_alloc+0x1bc>)
 8005534:	f007 fb02 	bl	800cb3c <iprintf>
    return NULL;
 8005538:	2600      	movs	r6, #0
 800553a:	e7f3      	b.n	8005524 <pbuf_alloc+0x198>
        return NULL;
 800553c:	2600      	movs	r6, #0
 800553e:	e7f1      	b.n	8005524 <pbuf_alloc+0x198>
 8005540:	0800e508 	.word	0x0800e508
 8005544:	0800e250 	.word	0x0800e250
 8005548:	0800de6c 	.word	0x0800de6c
 800554c:	0800e26c 	.word	0x0800e26c
 8005550:	0800e2d4 	.word	0x0800e2d4
 8005554:	0800e2e8 	.word	0x0800e2e8
 8005558:	0800e318 	.word	0x0800e318

0800555c <pbuf_realloc>:
{
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005560:	4604      	mov	r4, r0
 8005562:	b198      	cbz	r0, 800558c <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8005564:	7b23      	ldrb	r3, [r4, #12]
 8005566:	2b03      	cmp	r3, #3
 8005568:	bf18      	it	ne
 800556a:	2b01      	cmpne	r3, #1
 800556c:	d009      	beq.n	8005582 <pbuf_realloc+0x26>
 800556e:	b143      	cbz	r3, 8005582 <pbuf_realloc+0x26>
 8005570:	2b02      	cmp	r3, #2
 8005572:	d006      	beq.n	8005582 <pbuf_realloc+0x26>
 8005574:	4b2b      	ldr	r3, [pc, #172]	; (8005624 <pbuf_realloc+0xc8>)
 8005576:	f240 12f7 	movw	r2, #503	; 0x1f7
 800557a:	492b      	ldr	r1, [pc, #172]	; (8005628 <pbuf_realloc+0xcc>)
 800557c:	482b      	ldr	r0, [pc, #172]	; (800562c <pbuf_realloc+0xd0>)
 800557e:	f007 fadd 	bl	800cb3c <iprintf>
  if (new_len >= p->tot_len) {
 8005582:	8926      	ldrh	r6, [r4, #8]
 8005584:	42ae      	cmp	r6, r5
 8005586:	d938      	bls.n	80055fa <pbuf_realloc+0x9e>
  grow = new_len - p->tot_len;
 8005588:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 800558a:	e00d      	b.n	80055a8 <pbuf_realloc+0x4c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800558c:	4b25      	ldr	r3, [pc, #148]	; (8005624 <pbuf_realloc+0xc8>)
 800558e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005592:	4927      	ldr	r1, [pc, #156]	; (8005630 <pbuf_realloc+0xd4>)
 8005594:	4825      	ldr	r0, [pc, #148]	; (800562c <pbuf_realloc+0xd0>)
 8005596:	f007 fad1 	bl	800cb3c <iprintf>
 800559a:	e7e3      	b.n	8005564 <pbuf_realloc+0x8>
    q->tot_len += (u16_t)grow;
 800559c:	8923      	ldrh	r3, [r4, #8]
 800559e:	fa13 f386 	uxtah	r3, r3, r6
 80055a2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80055a4:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80055a6:	b184      	cbz	r4, 80055ca <pbuf_realloc+0x6e>
  while (rem_len > q->len) {
 80055a8:	8961      	ldrh	r1, [r4, #10]
 80055aa:	428d      	cmp	r5, r1
 80055ac:	d915      	bls.n	80055da <pbuf_realloc+0x7e>
    rem_len -= q->len;
 80055ae:	1a69      	subs	r1, r5, r1
 80055b0:	b28d      	uxth	r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80055b2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80055b6:	429e      	cmp	r6, r3
 80055b8:	ddf0      	ble.n	800559c <pbuf_realloc+0x40>
 80055ba:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <pbuf_realloc+0xc8>)
 80055bc:	f240 220b 	movw	r2, #523	; 0x20b
 80055c0:	491c      	ldr	r1, [pc, #112]	; (8005634 <pbuf_realloc+0xd8>)
 80055c2:	481a      	ldr	r0, [pc, #104]	; (800562c <pbuf_realloc+0xd0>)
 80055c4:	f007 faba 	bl	800cb3c <iprintf>
 80055c8:	e7e8      	b.n	800559c <pbuf_realloc+0x40>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80055ca:	4b16      	ldr	r3, [pc, #88]	; (8005624 <pbuf_realloc+0xc8>)
 80055cc:	f240 220f 	movw	r2, #527	; 0x20f
 80055d0:	4919      	ldr	r1, [pc, #100]	; (8005638 <pbuf_realloc+0xdc>)
 80055d2:	4816      	ldr	r0, [pc, #88]	; (800562c <pbuf_realloc+0xd0>)
 80055d4:	f007 fab2 	bl	800cb3c <iprintf>
 80055d8:	e7e6      	b.n	80055a8 <pbuf_realloc+0x4c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80055da:	7b23      	ldrb	r3, [r4, #12]
 80055dc:	b92b      	cbnz	r3, 80055ea <pbuf_realloc+0x8e>
 80055de:	428d      	cmp	r5, r1
 80055e0:	d003      	beq.n	80055ea <pbuf_realloc+0x8e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80055e2:	7b63      	ldrb	r3, [r4, #13]
 80055e4:	f013 0f02 	tst.w	r3, #2
 80055e8:	d008      	beq.n	80055fc <pbuf_realloc+0xa0>
  q->len = rem_len;
 80055ea:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80055ec:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80055ee:	6820      	ldr	r0, [r4, #0]
 80055f0:	b108      	cbz	r0, 80055f6 <pbuf_realloc+0x9a>
    pbuf_free(q->next);
 80055f2:	f7ff fe5f 	bl	80052b4 <pbuf_free>
  q->next = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80055fc:	6863      	ldr	r3, [r4, #4]
 80055fe:	1b1b      	subs	r3, r3, r4
 8005600:	fa15 f183 	uxtah	r1, r5, r3
 8005604:	b289      	uxth	r1, r1
 8005606:	4620      	mov	r0, r4
 8005608:	f7ff faba 	bl	8004b80 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800560c:	4604      	mov	r4, r0
 800560e:	2800      	cmp	r0, #0
 8005610:	d1eb      	bne.n	80055ea <pbuf_realloc+0x8e>
 8005612:	4b04      	ldr	r3, [pc, #16]	; (8005624 <pbuf_realloc+0xc8>)
 8005614:	f240 221d 	movw	r2, #541	; 0x21d
 8005618:	4908      	ldr	r1, [pc, #32]	; (800563c <pbuf_realloc+0xe0>)
 800561a:	4804      	ldr	r0, [pc, #16]	; (800562c <pbuf_realloc+0xd0>)
 800561c:	f007 fa8e 	bl	800cb3c <iprintf>
 8005620:	e7e3      	b.n	80055ea <pbuf_realloc+0x8e>
 8005622:	bf00      	nop
 8005624:	0800e508 	.word	0x0800e508
 8005628:	0800e580 	.word	0x0800e580
 800562c:	0800de6c 	.word	0x0800de6c
 8005630:	0800e568 	.word	0x0800e568
 8005634:	0800e59c 	.word	0x0800e59c
 8005638:	0800e5b0 	.word	0x0800e5b0
 800563c:	0800e5c8 	.word	0x0800e5c8

08005640 <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 8005640:	2300      	movs	r3, #0
  while (p != NULL) {
 8005642:	e002      	b.n	800564a <pbuf_clen+0xa>
    ++len;
 8005644:	3301      	adds	r3, #1
 8005646:	b29b      	uxth	r3, r3
    p = p->next;
 8005648:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 800564a:	2800      	cmp	r0, #0
 800564c:	d1fa      	bne.n	8005644 <pbuf_clen+0x4>
  }
  return len;
}
 800564e:	4618      	mov	r0, r3
 8005650:	4770      	bx	lr
	...

08005654 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8005654:	b198      	cbz	r0, 800567e <pbuf_ref+0x2a>
{
 8005656:	b510      	push	{r4, lr}
 8005658:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 800565a:	f006 fb2b 	bl	800bcb4 <sys_arch_protect>
 800565e:	89e3      	ldrh	r3, [r4, #14]
 8005660:	3301      	adds	r3, #1
 8005662:	81e3      	strh	r3, [r4, #14]
 8005664:	f006 fb32 	bl	800bccc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005668:	89e3      	ldrh	r3, [r4, #14]
 800566a:	b103      	cbz	r3, 800566e <pbuf_ref+0x1a>
 800566c:	bd10      	pop	{r4, pc}
 800566e:	4b04      	ldr	r3, [pc, #16]	; (8005680 <pbuf_ref+0x2c>)
 8005670:	f240 3239 	movw	r2, #825	; 0x339
 8005674:	4903      	ldr	r1, [pc, #12]	; (8005684 <pbuf_ref+0x30>)
 8005676:	4804      	ldr	r0, [pc, #16]	; (8005688 <pbuf_ref+0x34>)
 8005678:	f007 fa60 	bl	800cb3c <iprintf>
  }
}
 800567c:	e7f6      	b.n	800566c <pbuf_ref+0x18>
 800567e:	4770      	bx	lr
 8005680:	0800e508 	.word	0x0800e508
 8005684:	0800e5e4 	.word	0x0800e5e4
 8005688:	0800de6c 	.word	0x0800de6c

0800568c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800568c:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800568e:	4604      	mov	r4, r0
 8005690:	460d      	mov	r5, r1
 8005692:	2900      	cmp	r1, #0
 8005694:	bf18      	it	ne
 8005696:	2800      	cmpne	r0, #0
 8005698:	d10c      	bne.n	80056b4 <pbuf_cat+0x28>
 800569a:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <pbuf_cat+0x64>)
 800569c:	f240 324d 	movw	r2, #845	; 0x34d
 80056a0:	4914      	ldr	r1, [pc, #80]	; (80056f4 <pbuf_cat+0x68>)
 80056a2:	4815      	ldr	r0, [pc, #84]	; (80056f8 <pbuf_cat+0x6c>)
 80056a4:	f007 fa4a 	bl	800cb3c <iprintf>
 80056a8:	bd38      	pop	{r3, r4, r5, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80056aa:	892b      	ldrh	r3, [r5, #8]
 80056ac:	8921      	ldrh	r1, [r4, #8]
 80056ae:	440b      	add	r3, r1
 80056b0:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80056b2:	4614      	mov	r4, r2
 80056b4:	6822      	ldr	r2, [r4, #0]
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	d1f7      	bne.n	80056aa <pbuf_cat+0x1e>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80056ba:	8922      	ldrh	r2, [r4, #8]
 80056bc:	8963      	ldrh	r3, [r4, #10]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d006      	beq.n	80056d0 <pbuf_cat+0x44>
 80056c2:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <pbuf_cat+0x64>)
 80056c4:	f240 3255 	movw	r2, #853	; 0x355
 80056c8:	490c      	ldr	r1, [pc, #48]	; (80056fc <pbuf_cat+0x70>)
 80056ca:	480b      	ldr	r0, [pc, #44]	; (80056f8 <pbuf_cat+0x6c>)
 80056cc:	f007 fa36 	bl	800cb3c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	b133      	cbz	r3, 80056e2 <pbuf_cat+0x56>
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <pbuf_cat+0x64>)
 80056d6:	f240 3256 	movw	r2, #854	; 0x356
 80056da:	4909      	ldr	r1, [pc, #36]	; (8005700 <pbuf_cat+0x74>)
 80056dc:	4806      	ldr	r0, [pc, #24]	; (80056f8 <pbuf_cat+0x6c>)
 80056de:	f007 fa2d 	bl	800cb3c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80056e2:	892b      	ldrh	r3, [r5, #8]
 80056e4:	8922      	ldrh	r2, [r4, #8]
 80056e6:	4413      	add	r3, r2
 80056e8:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80056ea:	6025      	str	r5, [r4, #0]
 80056ec:	bd38      	pop	{r3, r4, r5, pc}
 80056ee:	bf00      	nop
 80056f0:	0800e508 	.word	0x0800e508
 80056f4:	0800e358 	.word	0x0800e358
 80056f8:	0800de6c 	.word	0x0800de6c
 80056fc:	0800e390 	.word	0x0800e390
 8005700:	0800e3c0 	.word	0x0800e3c0

08005704 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005704:	b510      	push	{r4, lr}
 8005706:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8005708:	f7ff ffc0 	bl	800568c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800570c:	4620      	mov	r0, r4
 800570e:	f7ff ffa1 	bl	8005654 <pbuf_ref>
 8005712:	bd10      	pop	{r4, pc}

08005714 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005718:	2900      	cmp	r1, #0
 800571a:	bf18      	it	ne
 800571c:	2800      	cmpne	r0, #0
 800571e:	d009      	beq.n	8005734 <pbuf_copy+0x20>
 8005720:	4607      	mov	r7, r0
 8005722:	460d      	mov	r5, r1
 8005724:	8902      	ldrh	r2, [r0, #8]
 8005726:	890b      	ldrh	r3, [r1, #8]
 8005728:	429a      	cmp	r2, r3
 800572a:	d303      	bcc.n	8005734 <pbuf_copy+0x20>
 800572c:	f04f 0800 	mov.w	r8, #0
 8005730:	4646      	mov	r6, r8
 8005732:	e02c      	b.n	800578e <pbuf_copy+0x7a>
 8005734:	4b40      	ldr	r3, [pc, #256]	; (8005838 <pbuf_copy+0x124>)
 8005736:	f240 32bd 	movw	r2, #957	; 0x3bd
 800573a:	4940      	ldr	r1, [pc, #256]	; (800583c <pbuf_copy+0x128>)
 800573c:	4840      	ldr	r0, [pc, #256]	; (8005840 <pbuf_copy+0x12c>)
 800573e:	f007 f9fd 	bl	800cb3c <iprintf>
 8005742:	f06f 000f 	mvn.w	r0, #15
 8005746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800574a:	1b9b      	subs	r3, r3, r6
 800574c:	b29c      	uxth	r4, r3
 800574e:	e026      	b.n	800579e <pbuf_copy+0x8a>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005750:	4b39      	ldr	r3, [pc, #228]	; (8005838 <pbuf_copy+0x124>)
 8005752:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005756:	493b      	ldr	r1, [pc, #236]	; (8005844 <pbuf_copy+0x130>)
 8005758:	4839      	ldr	r0, [pc, #228]	; (8005840 <pbuf_copy+0x12c>)
 800575a:	f007 f9ef 	bl	800cb3c <iprintf>
 800575e:	e02d      	b.n	80057bc <pbuf_copy+0xa8>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005760:	4b35      	ldr	r3, [pc, #212]	; (8005838 <pbuf_copy+0x124>)
 8005762:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005766:	4938      	ldr	r1, [pc, #224]	; (8005848 <pbuf_copy+0x134>)
 8005768:	4835      	ldr	r0, [pc, #212]	; (8005840 <pbuf_copy+0x12c>)
 800576a:	f007 f9e7 	bl	800cb3c <iprintf>
 800576e:	e028      	b.n	80057c2 <pbuf_copy+0xae>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8005770:	897b      	ldrh	r3, [r7, #10]
 8005772:	429e      	cmp	r6, r3
 8005774:	d02c      	beq.n	80057d0 <pbuf_copy+0xbc>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005776:	b11d      	cbz	r5, 8005780 <pbuf_copy+0x6c>
 8005778:	896a      	ldrh	r2, [r5, #10]
 800577a:	892b      	ldrh	r3, [r5, #8]
 800577c:	429a      	cmp	r2, r3
 800577e:	d03c      	beq.n	80057fa <pbuf_copy+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005780:	b11f      	cbz	r7, 800578a <pbuf_copy+0x76>
 8005782:	897a      	ldrh	r2, [r7, #10]
 8005784:	893b      	ldrh	r3, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	d045      	beq.n	8005816 <pbuf_copy+0x102>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800578a:	2d00      	cmp	r5, #0
 800578c:	d051      	beq.n	8005832 <pbuf_copy+0x11e>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	1b99      	subs	r1, r3, r6
 8005792:	896c      	ldrh	r4, [r5, #10]
 8005794:	eba4 0208 	sub.w	r2, r4, r8
 8005798:	4291      	cmp	r1, r2
 800579a:	dbd6      	blt.n	800574a <pbuf_copy+0x36>
      len = p_from->len - offset_from;
 800579c:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	6869      	ldr	r1, [r5, #4]
 80057a2:	4622      	mov	r2, r4
 80057a4:	4441      	add	r1, r8
 80057a6:	4430      	add	r0, r6
 80057a8:	f007 f9b5 	bl	800cb16 <memcpy>
    offset_to += len;
 80057ac:	4426      	add	r6, r4
 80057ae:	b2b6      	uxth	r6, r6
    offset_from += len;
 80057b0:	4444      	add	r4, r8
 80057b2:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80057b6:	897b      	ldrh	r3, [r7, #10]
 80057b8:	429e      	cmp	r6, r3
 80057ba:	d8c9      	bhi.n	8005750 <pbuf_copy+0x3c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80057bc:	896b      	ldrh	r3, [r5, #10]
 80057be:	4598      	cmp	r8, r3
 80057c0:	d8ce      	bhi.n	8005760 <pbuf_copy+0x4c>
    if (offset_from >= p_from->len) {
 80057c2:	896b      	ldrh	r3, [r5, #10]
 80057c4:	4598      	cmp	r8, r3
 80057c6:	d3d3      	bcc.n	8005770 <pbuf_copy+0x5c>
      p_from = p_from->next;
 80057c8:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	e7cf      	b.n	8005770 <pbuf_copy+0x5c>
      p_to = p_to->next;
 80057d0:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80057d2:	fab7 f387 	clz	r3, r7
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2d00      	cmp	r5, #0
 80057da:	bf08      	it	eq
 80057dc:	2300      	moveq	r3, #0
 80057de:	b90b      	cbnz	r3, 80057e4 <pbuf_copy+0xd0>
      offset_to = 0;
 80057e0:	2600      	movs	r6, #0
 80057e2:	e7c8      	b.n	8005776 <pbuf_copy+0x62>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80057e4:	4b14      	ldr	r3, [pc, #80]	; (8005838 <pbuf_copy+0x124>)
 80057e6:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80057ea:	4918      	ldr	r1, [pc, #96]	; (800584c <pbuf_copy+0x138>)
 80057ec:	4814      	ldr	r0, [pc, #80]	; (8005840 <pbuf_copy+0x12c>)
 80057ee:	f007 f9a5 	bl	800cb3c <iprintf>
 80057f2:	f06f 000f 	mvn.w	r0, #15
 80057f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80057fa:	682b      	ldr	r3, [r5, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0bf      	beq.n	8005780 <pbuf_copy+0x6c>
 8005800:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <pbuf_copy+0x124>)
 8005802:	f240 32de 	movw	r2, #990	; 0x3de
 8005806:	4912      	ldr	r1, [pc, #72]	; (8005850 <pbuf_copy+0x13c>)
 8005808:	480d      	ldr	r0, [pc, #52]	; (8005840 <pbuf_copy+0x12c>)
 800580a:	f007 f997 	bl	800cb3c <iprintf>
 800580e:	f06f 0005 	mvn.w	r0, #5
 8005812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0b6      	beq.n	800578a <pbuf_copy+0x76>
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <pbuf_copy+0x124>)
 800581e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8005822:	490b      	ldr	r1, [pc, #44]	; (8005850 <pbuf_copy+0x13c>)
 8005824:	4806      	ldr	r0, [pc, #24]	; (8005840 <pbuf_copy+0x12c>)
 8005826:	f007 f989 	bl	800cb3c <iprintf>
 800582a:	f06f 0005 	mvn.w	r0, #5
 800582e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005832:	2000      	movs	r0, #0
}
 8005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005838:	0800e508 	.word	0x0800e508
 800583c:	0800e3d0 	.word	0x0800e3d0
 8005840:	0800de6c 	.word	0x0800de6c
 8005844:	0800e400 	.word	0x0800e400
 8005848:	0800e418 	.word	0x0800e418
 800584c:	0800e434 	.word	0x0800e434
 8005850:	0800e444 	.word	0x0800e444

08005854 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005858:	b128      	cbz	r0, 8005866 <pbuf_copy_partial+0x12>
 800585a:	460f      	mov	r7, r1
 800585c:	4690      	mov	r8, r2
 800585e:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005860:	b161      	cbz	r1, 800587c <pbuf_copy_partial+0x28>
 8005862:	2600      	movs	r6, #0
 8005864:	e027      	b.n	80058b6 <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005866:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <pbuf_copy_partial+0x7c>)
 8005868:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800586c:	4919      	ldr	r1, [pc, #100]	; (80058d4 <pbuf_copy_partial+0x80>)
 800586e:	481a      	ldr	r0, [pc, #104]	; (80058d8 <pbuf_copy_partial+0x84>)
 8005870:	f007 f964 	bl	800cb3c <iprintf>
 8005874:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8005876:	4630      	mov	r0, r6
 8005878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800587c:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <pbuf_copy_partial+0x7c>)
 800587e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005882:	4916      	ldr	r1, [pc, #88]	; (80058dc <pbuf_copy_partial+0x88>)
 8005884:	4814      	ldr	r0, [pc, #80]	; (80058d8 <pbuf_copy_partial+0x84>)
 8005886:	f007 f959 	bl	800cb3c <iprintf>
 800588a:	2600      	movs	r6, #0
 800588c:	e7f3      	b.n	8005876 <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 800588e:	896a      	ldrh	r2, [r5, #10]
 8005890:	1ad2      	subs	r2, r2, r3
 8005892:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 8005894:	45a0      	cmp	r8, r4
 8005896:	d200      	bcs.n	800589a <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 8005898:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800589a:	6869      	ldr	r1, [r5, #4]
 800589c:	4622      	mov	r2, r4
 800589e:	4419      	add	r1, r3
 80058a0:	19b8      	adds	r0, r7, r6
 80058a2:	f007 f938 	bl	800cb16 <memcpy>
      copied_total += buf_copy_len;
 80058a6:	4426      	add	r6, r4
 80058a8:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 80058aa:	eba8 0404 	sub.w	r4, r8, r4
 80058ae:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 80058b2:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80058b4:	682d      	ldr	r5, [r5, #0]
 80058b6:	f1b8 0f00 	cmp.w	r8, #0
 80058ba:	bf18      	it	ne
 80058bc:	2d00      	cmpne	r5, #0
 80058be:	d0da      	beq.n	8005876 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0e4      	beq.n	800588e <pbuf_copy_partial+0x3a>
 80058c4:	8969      	ldrh	r1, [r5, #10]
 80058c6:	428b      	cmp	r3, r1
 80058c8:	d3e1      	bcc.n	800588e <pbuf_copy_partial+0x3a>
      offset -= p->len;
 80058ca:	1a5b      	subs	r3, r3, r1
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	e7f1      	b.n	80058b4 <pbuf_copy_partial+0x60>
 80058d0:	0800e508 	.word	0x0800e508
 80058d4:	0800e470 	.word	0x0800e470
 80058d8:	0800de6c 	.word	0x0800de6c
 80058dc:	0800e490 	.word	0x0800e490

080058e0 <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80058e0:	e000      	b.n	80058e4 <tcp_remove_listener+0x4>
 80058e2:	68c0      	ldr	r0, [r0, #12]
 80058e4:	b128      	cbz	r0, 80058f2 <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 80058e6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80058e8:	428b      	cmp	r3, r1
 80058ea:	d1fa      	bne.n	80058e2 <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	6783      	str	r3, [r0, #120]	; 0x78
 80058f0:	e7f7      	b.n	80058e2 <tcp_remove_listener+0x2>
      }
   }
}
 80058f2:	4770      	bx	lr

080058f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80058f4:	b538      	push	{r3, r4, r5, lr}
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80058f6:	4605      	mov	r5, r0
 80058f8:	b150      	cbz	r0, 8005910 <tcp_listen_closed+0x1c>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80058fa:	7d2b      	ldrb	r3, [r5, #20]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d005      	beq.n	800590c <tcp_listen_closed+0x18>
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <tcp_listen_closed+0x40>)
 8005902:	22c1      	movs	r2, #193	; 0xc1
 8005904:	490c      	ldr	r1, [pc, #48]	; (8005938 <tcp_listen_closed+0x44>)
 8005906:	480d      	ldr	r0, [pc, #52]	; (800593c <tcp_listen_closed+0x48>)
 8005908:	f007 f918 	bl	800cb3c <iprintf>
{
 800590c:	2401      	movs	r4, #1
 800590e:	e00e      	b.n	800592e <tcp_listen_closed+0x3a>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <tcp_listen_closed+0x40>)
 8005912:	22c0      	movs	r2, #192	; 0xc0
 8005914:	490a      	ldr	r1, [pc, #40]	; (8005940 <tcp_listen_closed+0x4c>)
 8005916:	4809      	ldr	r0, [pc, #36]	; (800593c <tcp_listen_closed+0x48>)
 8005918:	f007 f910 	bl	800cb3c <iprintf>
 800591c:	e7ed      	b.n	80058fa <tcp_listen_closed+0x6>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800591e:	4b09      	ldr	r3, [pc, #36]	; (8005944 <tcp_listen_closed+0x50>)
 8005920:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005924:	4629      	mov	r1, r5
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	f7ff ffda 	bl	80058e0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800592c:	3401      	adds	r4, #1
 800592e:	2c03      	cmp	r4, #3
 8005930:	d9f5      	bls.n	800591e <tcp_listen_closed+0x2a>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	0800e668 	.word	0x0800e668
 8005938:	0800e6a4 	.word	0x0800e6a4
 800593c:	0800de6c 	.word	0x0800de6c
 8005940:	0800e698 	.word	0x0800e698
 8005944:	0800e6bc 	.word	0x0800e6bc

08005948 <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005948:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800594a:	4604      	mov	r4, r0
 800594c:	b140      	cbz	r0, 8005960 <tcp_close_shutdown_fin+0x18>

  switch (pcb->state) {
 800594e:	7d23      	ldrb	r3, [r4, #20]
 8005950:	2b04      	cmp	r3, #4
 8005952:	d01a      	beq.n	800598a <tcp_close_shutdown_fin+0x42>
 8005954:	2b07      	cmp	r3, #7
 8005956:	d021      	beq.n	800599c <tcp_close_shutdown_fin+0x54>
 8005958:	2b03      	cmp	r3, #3
 800595a:	d009      	beq.n	8005970 <tcp_close_shutdown_fin+0x28>
      pcb->state = LAST_ACK;
    }
    break;
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800595c:	2500      	movs	r5, #0
 800595e:	e012      	b.n	8005986 <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005960:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <tcp_close_shutdown_fin+0x7c>)
 8005962:	f240 124d 	movw	r2, #333	; 0x14d
 8005966:	4918      	ldr	r1, [pc, #96]	; (80059c8 <tcp_close_shutdown_fin+0x80>)
 8005968:	4818      	ldr	r0, [pc, #96]	; (80059cc <tcp_close_shutdown_fin+0x84>)
 800596a:	f007 f8e7 	bl	800cb3c <iprintf>
 800596e:	e7ee      	b.n	800594e <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 8005970:	4620      	mov	r0, r4
 8005972:	f002 fbfd 	bl	8008170 <tcp_send_fin>
    if (err == ERR_OK) {
 8005976:	4605      	mov	r5, r0
 8005978:	b908      	cbnz	r0, 800597e <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 800597a:	2305      	movs	r3, #5
 800597c:	7523      	strb	r3, [r4, #20]
  }

  if (err == ERR_OK) {
 800597e:	b1b5      	cbz	r5, 80059ae <tcp_close_shutdown_fin+0x66>
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  } else if (err == ERR_MEM) {
 8005980:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005984:	d017      	beq.n	80059b6 <tcp_close_shutdown_fin+0x6e>
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 8005986:	4628      	mov	r0, r5
 8005988:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 800598a:	4620      	mov	r0, r4
 800598c:	f002 fbf0 	bl	8008170 <tcp_send_fin>
    if (err == ERR_OK) {
 8005990:	4605      	mov	r5, r0
 8005992:	2800      	cmp	r0, #0
 8005994:	d1f3      	bne.n	800597e <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8005996:	2305      	movs	r3, #5
 8005998:	7523      	strb	r3, [r4, #20]
 800599a:	e7f0      	b.n	800597e <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 800599c:	4620      	mov	r0, r4
 800599e:	f002 fbe7 	bl	8008170 <tcp_send_fin>
    if (err == ERR_OK) {
 80059a2:	4605      	mov	r5, r0
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d1ea      	bne.n	800597e <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 80059a8:	2309      	movs	r3, #9
 80059aa:	7523      	strb	r3, [r4, #20]
 80059ac:	e7e7      	b.n	800597e <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 80059ae:	4620      	mov	r0, r4
 80059b0:	f002 fc3a 	bl	8008228 <tcp_output>
 80059b4:	e7e7      	b.n	8005986 <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 80059b6:	7ea3      	ldrb	r3, [r4, #26]
 80059b8:	f043 0308 	orr.w	r3, r3, #8
 80059bc:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 80059be:	2500      	movs	r5, #0
 80059c0:	e7e1      	b.n	8005986 <tcp_close_shutdown_fin+0x3e>
 80059c2:	bf00      	nop
 80059c4:	0800e668 	.word	0x0800e668
 80059c8:	0800e698 	.word	0x0800e698
 80059cc:	0800de6c 	.word	0x0800de6c

080059d0 <tcp_init>:
{
 80059d0:	4770      	bx	lr
	...

080059d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80059d4:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80059d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059d8:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 80059da:	192a      	adds	r2, r5, r4

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80059dc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80059de:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80059e0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80059e4:	d901      	bls.n	80059ea <tcp_update_rcv_ann_wnd+0x16>
 80059e6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80059ea:	440b      	add	r3, r1
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	db02      	blt.n	80059f8 <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80059f2:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80059f4:	1a50      	subs	r0, r2, r1
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80059f8:	1a6b      	subs	r3, r5, r1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	dd03      	ble.n	8005a06 <tcp_update_rcv_ann_wnd+0x32>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80059fe:	2200      	movs	r2, #0
 8005a00:	8542      	strh	r2, [r0, #42]	; 0x2a
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
    }
    return 0;
 8005a02:	4610      	mov	r0, r2
 8005a04:	bd38      	pop	{r3, r4, r5, pc}
 8005a06:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005a08:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005a0a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8005a0e:	d202      	bcs.n	8005a16 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005a10:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8005a12:	2000      	movs	r0, #0
  }
}
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005a16:	4b04      	ldr	r3, [pc, #16]	; (8005a28 <tcp_update_rcv_ann_wnd+0x54>)
 8005a18:	f44f 7242 	mov.w	r2, #776	; 0x308
 8005a1c:	4903      	ldr	r1, [pc, #12]	; (8005a2c <tcp_update_rcv_ann_wnd+0x58>)
 8005a1e:	4804      	ldr	r0, [pc, #16]	; (8005a30 <tcp_update_rcv_ann_wnd+0x5c>)
 8005a20:	f007 f88c 	bl	800cb3c <iprintf>
 8005a24:	e7f4      	b.n	8005a10 <tcp_update_rcv_ann_wnd+0x3c>
 8005a26:	bf00      	nop
 8005a28:	0800e668 	.word	0x0800e668
 8005a2c:	0800e8cc 	.word	0x0800e8cc
 8005a30:	0800de6c 	.word	0x0800de6c

08005a34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4605      	mov	r5, r0
 8005a38:	460c      	mov	r4, r1
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005a3a:	7d03      	ldrb	r3, [r0, #20]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d010      	beq.n	8005a62 <tcp_recved+0x2e>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8005a40:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8005a42:	4421      	add	r1, r4
 8005a44:	b289      	uxth	r1, r1
 8005a46:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005a48:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8005a4c:	d911      	bls.n	8005a72 <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005a4e:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8005a52:	852b      	strh	r3, [r5, #40]	; 0x28
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005a54:	4628      	mov	r0, r5
 8005a56:	f7ff ffbd 	bl	80059d4 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005a5a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8005a5e:	da1b      	bge.n	8005a98 <tcp_recved+0x64>
 8005a60:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <tcp_recved+0x74>)
 8005a64:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a68:	4910      	ldr	r1, [pc, #64]	; (8005aac <tcp_recved+0x78>)
 8005a6a:	4811      	ldr	r0, [pc, #68]	; (8005ab0 <tcp_recved+0x7c>)
 8005a6c:	f007 f866 	bl	800cb3c <iprintf>
 8005a70:	e7e6      	b.n	8005a40 <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 8005a72:	2900      	cmp	r1, #0
 8005a74:	d1ee      	bne.n	8005a54 <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005a76:	7d2b      	ldrb	r3, [r5, #20]
 8005a78:	2b09      	cmp	r3, #9
 8005a7a:	bf18      	it	ne
 8005a7c:	2b07      	cmpne	r3, #7
 8005a7e:	d103      	bne.n	8005a88 <tcp_recved+0x54>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005a80:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8005a84:	852b      	strh	r3, [r5, #40]	; 0x28
 8005a86:	e7e5      	b.n	8005a54 <tcp_recved+0x20>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8005a88:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <tcp_recved+0x74>)
 8005a8a:	f240 322d 	movw	r2, #813	; 0x32d
 8005a8e:	4909      	ldr	r1, [pc, #36]	; (8005ab4 <tcp_recved+0x80>)
 8005a90:	4807      	ldr	r0, [pc, #28]	; (8005ab0 <tcp_recved+0x7c>)
 8005a92:	f007 f853 	bl	800cb3c <iprintf>
 8005a96:	e7dd      	b.n	8005a54 <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8005a98:	7eab      	ldrb	r3, [r5, #26]
 8005a9a:	f043 0302 	orr.w	r3, r3, #2
 8005a9e:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f002 fbc1 	bl	8008228 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005aa6:	e7db      	b.n	8005a60 <tcp_recved+0x2c>
 8005aa8:	0800e668 	.word	0x0800e668
 8005aac:	0800e720 	.word	0x0800e720
 8005ab0:	0800de6c 	.word	0x0800de6c
 8005ab4:	0800e748 	.word	0x0800e748

08005ab8 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8005ab8:	b150      	cbz	r0, 8005ad0 <tcp_seg_free+0x18>
{
 8005aba:	b510      	push	{r4, lr}
 8005abc:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8005abe:	6840      	ldr	r0, [r0, #4]
 8005ac0:	b108      	cbz	r0, 8005ac6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8005ac2:	f7ff fbf7 	bl	80052b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	2003      	movs	r0, #3
 8005aca:	f7ff fa1f 	bl	8004f0c <memp_free>
 8005ace:	bd10      	pop	{r4, pc}
 8005ad0:	4770      	bx	lr

08005ad2 <tcp_segs_free>:
  while (seg != NULL) {
 8005ad2:	b138      	cbz	r0, 8005ae4 <tcp_segs_free+0x12>
{
 8005ad4:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8005ad6:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8005ad8:	f7ff ffee 	bl	8005ab8 <tcp_seg_free>
    seg = next;
 8005adc:	4620      	mov	r0, r4
  while (seg != NULL) {
 8005ade:	2c00      	cmp	r4, #0
 8005ae0:	d1f9      	bne.n	8005ad6 <tcp_segs_free+0x4>
}
 8005ae2:	bd10      	pop	{r4, pc}
 8005ae4:	4770      	bx	lr

08005ae6 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005ae6:	b538      	push	{r3, r4, r5, lr}
 8005ae8:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005aea:	2003      	movs	r0, #3
 8005aec:	f7ff f9f4 	bl	8004ed8 <memp_malloc>
  if (cseg == NULL) {
 8005af0:	4604      	mov	r4, r0
 8005af2:	b150      	cbz	r0, 8005b0a <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005af4:	6828      	ldr	r0, [r5, #0]
 8005af6:	6869      	ldr	r1, [r5, #4]
 8005af8:	68aa      	ldr	r2, [r5, #8]
 8005afa:	68eb      	ldr	r3, [r5, #12]
 8005afc:	6020      	str	r0, [r4, #0]
 8005afe:	6061      	str	r1, [r4, #4]
 8005b00:	60a2      	str	r2, [r4, #8]
 8005b02:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8005b04:	6860      	ldr	r0, [r4, #4]
 8005b06:	f7ff fda5 	bl	8005654 <pbuf_ref>
  return cseg;
}
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	bd38      	pop	{r3, r4, r5, pc}

08005b0e <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005b0e:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8005b10:	7d03      	ldrb	r3, [r0, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf18      	it	ne
 8005b16:	2b0a      	cmpne	r3, #10
 8005b18:	d01a      	beq.n	8005b50 <tcp_pcb_purge+0x42>
     pcb->state != TIME_WAIT &&
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d018      	beq.n	8005b50 <tcp_pcb_purge+0x42>
 8005b1e:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8005b20:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8005b22:	b118      	cbz	r0, 8005b2c <tcp_pcb_purge+0x1e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8005b24:	f7ff fbc6 	bl	80052b4 <pbuf_free>
      pcb->refused_data = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8005b2c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005b2e:	f7ff ffd0 	bl	8005ad2 <tcp_segs_free>
    pcb->ooseq = NULL;
 8005b32:	2500      	movs	r5, #0
 8005b34:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b3a:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8005b3c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005b3e:	f7ff ffc8 	bl	8005ad2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005b42:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005b44:	f7ff ffc5 	bl	8005ad2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005b48:	66a5      	str	r5, [r4, #104]	; 0x68
 8005b4a:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005b4c:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8005b50:	bd38      	pop	{r3, r4, r5, pc}
	...

08005b54 <tcp_slowtmr>:
{
 8005b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b58:	b082      	sub	sp, #8
  ++tcp_ticks;
 8005b5a:	4aae      	ldr	r2, [pc, #696]	; (8005e14 <tcp_slowtmr+0x2c0>)
 8005b5c:	6813      	ldr	r3, [r2, #0]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005b62:	4aad      	ldr	r2, [pc, #692]	; (8005e18 <tcp_slowtmr+0x2c4>)
 8005b64:	7813      	ldrb	r3, [r2, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8005b6a:	4bac      	ldr	r3, [pc, #688]	; (8005e1c <tcp_slowtmr+0x2c8>)
 8005b6c:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8005b6e:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8005b70:	e018      	b.n	8005ba4 <tcp_slowtmr+0x50>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005b72:	4bab      	ldr	r3, [pc, #684]	; (8005e20 <tcp_slowtmr+0x2cc>)
 8005b74:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8005b78:	49aa      	ldr	r1, [pc, #680]	; (8005e24 <tcp_slowtmr+0x2d0>)
 8005b7a:	48ab      	ldr	r0, [pc, #684]	; (8005e28 <tcp_slowtmr+0x2d4>)
 8005b7c:	f006 ffde 	bl	800cb3c <iprintf>
 8005b80:	e016      	b.n	8005bb0 <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005b82:	4ba7      	ldr	r3, [pc, #668]	; (8005e20 <tcp_slowtmr+0x2cc>)
 8005b84:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005b88:	49a8      	ldr	r1, [pc, #672]	; (8005e2c <tcp_slowtmr+0x2d8>)
 8005b8a:	48a7      	ldr	r0, [pc, #668]	; (8005e28 <tcp_slowtmr+0x2d4>)
 8005b8c:	f006 ffd6 	bl	800cb3c <iprintf>
 8005b90:	e011      	b.n	8005bb6 <tcp_slowtmr+0x62>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005b92:	4ba3      	ldr	r3, [pc, #652]	; (8005e20 <tcp_slowtmr+0x2cc>)
 8005b94:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8005b98:	49a5      	ldr	r1, [pc, #660]	; (8005e30 <tcp_slowtmr+0x2dc>)
 8005b9a:	48a3      	ldr	r0, [pc, #652]	; (8005e28 <tcp_slowtmr+0x2d4>)
 8005b9c:	f006 ffce 	bl	800cb3c <iprintf>
 8005ba0:	e00c      	b.n	8005bbc <tcp_slowtmr+0x68>
      pcb = pcb->next;
 8005ba2:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8005ba4:	2c00      	cmp	r4, #0
 8005ba6:	f000 817e 	beq.w	8005ea6 <tcp_slowtmr+0x352>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005baa:	7d23      	ldrb	r3, [r4, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0e0      	beq.n	8005b72 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005bb0:	7d23      	ldrb	r3, [r4, #20]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d0e5      	beq.n	8005b82 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005bb6:	7d23      	ldrb	r3, [r4, #20]
 8005bb8:	2b0a      	cmp	r3, #10
 8005bba:	d0ea      	beq.n	8005b92 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005bbc:	7f62      	ldrb	r2, [r4, #29]
 8005bbe:	4b96      	ldr	r3, [pc, #600]	; (8005e18 <tcp_slowtmr+0x2c4>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d0ed      	beq.n	8005ba2 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8005bc6:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005bc8:	7d23      	ldrb	r3, [r4, #20]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d016      	beq.n	8005bfc <tcp_slowtmr+0xa8>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8005bce:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005bd2:	2a0b      	cmp	r2, #11
 8005bd4:	d860      	bhi.n	8005c98 <tcp_slowtmr+0x144>
      if (pcb->persist_backoff > 0) {
 8005bd6:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 8005bda:	b335      	cbz	r5, 8005c2a <tcp_slowtmr+0xd6>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005bdc:	3d01      	subs	r5, #1
 8005bde:	4b95      	ldr	r3, [pc, #596]	; (8005e34 <tcp_slowtmr+0x2e0>)
 8005be0:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 8005be2:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d902      	bls.n	8005bf0 <tcp_slowtmr+0x9c>
          pcb->persist_cnt++;
 8005bea:	3301      	adds	r3, #1
 8005bec:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8005bf0:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d907      	bls.n	8005c08 <tcp_slowtmr+0xb4>
    pcb_remove = 0;
 8005bf8:	2500      	movs	r5, #0
 8005bfa:	e04e      	b.n	8005c9a <tcp_slowtmr+0x146>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005bfc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005c00:	2a05      	cmp	r2, #5
 8005c02:	d9e4      	bls.n	8005bce <tcp_slowtmr+0x7a>
      ++pcb_remove;
 8005c04:	2501      	movs	r5, #1
 8005c06:	e048      	b.n	8005c9a <tcp_slowtmr+0x146>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f002 fd5e 	bl	80086ca <tcp_zero_window_probe>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d160      	bne.n	8005cd4 <tcp_slowtmr+0x180>
            pcb->persist_cnt = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005c18:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8005c1c:	2b06      	cmp	r3, #6
 8005c1e:	d85b      	bhi.n	8005cd8 <tcp_slowtmr+0x184>
              pcb->persist_backoff++;
 8005c20:	3301      	adds	r3, #1
 8005c22:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 8005c26:	2500      	movs	r5, #0
 8005c28:	e037      	b.n	8005c9a <tcp_slowtmr+0x146>
        if (pcb->rtime >= 0) {
 8005c2a:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8005c2e:	2900      	cmp	r1, #0
 8005c30:	db01      	blt.n	8005c36 <tcp_slowtmr+0xe2>
          ++pcb->rtime;
 8005c32:	3101      	adds	r1, #1
 8005c34:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005c36:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005c38:	b379      	cbz	r1, 8005c9a <tcp_slowtmr+0x146>
 8005c3a:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8005c3e:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8005c42:	4288      	cmp	r0, r1
 8005c44:	db29      	blt.n	8005c9a <tcp_slowtmr+0x146>
          if (pcb->state != SYN_SENT) {
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d00d      	beq.n	8005c66 <tcp_slowtmr+0x112>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8005c4a:	2a0c      	cmp	r2, #12
 8005c4c:	bf28      	it	cs
 8005c4e:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005c50:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8005c54:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8005c58:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8005c5c:	4976      	ldr	r1, [pc, #472]	; (8005e38 <tcp_slowtmr+0x2e4>)
 8005c5e:	5c8a      	ldrb	r2, [r1, r2]
 8005c60:	4093      	lsls	r3, r2
 8005c62:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005c6a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8005c6e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8005c72:	4293      	cmp	r3, r2
 8005c74:	bf28      	it	cs
 8005c76:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005c7e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8005c80:	004a      	lsls	r2, r1, #1
 8005c82:	b292      	uxth	r2, r2
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d201      	bcs.n	8005c8c <tcp_slowtmr+0x138>
            pcb->ssthresh = (pcb->mss << 1);
 8005c88:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 8005c8c:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 8005c90:	4620      	mov	r0, r4
 8005c92:	f002 fc7b 	bl	800858c <tcp_rexmit_rto>
 8005c96:	e000      	b.n	8005c9a <tcp_slowtmr+0x146>
      ++pcb_remove;
 8005c98:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8005c9a:	7d23      	ldrb	r3, [r4, #20]
 8005c9c:	2b06      	cmp	r3, #6
 8005c9e:	d01d      	beq.n	8005cdc <tcp_slowtmr+0x188>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005ca0:	7a22      	ldrb	r2, [r4, #8]
 8005ca2:	f012 0f08 	tst.w	r2, #8
 8005ca6:	d03f      	beq.n	8005d28 <tcp_slowtmr+0x1d4>
 8005ca8:	2b07      	cmp	r3, #7
 8005caa:	bf18      	it	ne
 8005cac:	2b04      	cmpne	r3, #4
 8005cae:	d170      	bne.n	8005d92 <tcp_slowtmr+0x23e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005cb0:	4b58      	ldr	r3, [pc, #352]	; (8005e14 <tcp_slowtmr+0x2c0>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	6a23      	ldr	r3, [r4, #32]
 8005cb6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005cb8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005cbc:	4b5f      	ldr	r3, [pc, #380]	; (8005e3c <tcp_slowtmr+0x2e8>)
 8005cbe:	440b      	add	r3, r1
 8005cc0:	485f      	ldr	r0, [pc, #380]	; (8005e40 <tcp_slowtmr+0x2ec>)
 8005cc2:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005cc6:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8005cca:	d914      	bls.n	8005cf6 <tcp_slowtmr+0x1a2>
        ++pcb_remove;
 8005ccc:	3501      	adds	r5, #1
 8005cce:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8005cd0:	2701      	movs	r7, #1
 8005cd2:	e02a      	b.n	8005d2a <tcp_slowtmr+0x1d6>
    pcb_remove = 0;
 8005cd4:	2500      	movs	r5, #0
 8005cd6:	e7e0      	b.n	8005c9a <tcp_slowtmr+0x146>
 8005cd8:	2500      	movs	r5, #0
 8005cda:	e7de      	b.n	8005c9a <tcp_slowtmr+0x146>
      if (pcb->flags & TF_RXCLOSED) {
 8005cdc:	7ea2      	ldrb	r2, [r4, #26]
 8005cde:	f012 0f10 	tst.w	r2, #16
 8005ce2:	d0dd      	beq.n	8005ca0 <tcp_slowtmr+0x14c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ce4:	6a21      	ldr	r1, [r4, #32]
 8005ce6:	4a4b      	ldr	r2, [pc, #300]	; (8005e14 <tcp_slowtmr+0x2c0>)
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	1a52      	subs	r2, r2, r1
 8005cec:	2a28      	cmp	r2, #40	; 0x28
 8005cee:	d9d7      	bls.n	8005ca0 <tcp_slowtmr+0x14c>
          ++pcb_remove;
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	b2ed      	uxtb	r5, r5
 8005cf4:	e7d4      	b.n	8005ca0 <tcp_slowtmr+0x14c>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005cf6:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8005cfa:	4852      	ldr	r0, [pc, #328]	; (8005e44 <tcp_slowtmr+0x2f0>)
 8005cfc:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 8005d00:	494f      	ldr	r1, [pc, #316]	; (8005e40 <tcp_slowtmr+0x2ec>)
 8005d02:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d06:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8005d0a:	d801      	bhi.n	8005d10 <tcp_slowtmr+0x1bc>
    pcb_reset = 0;
 8005d0c:	2700      	movs	r7, #0
 8005d0e:	e00c      	b.n	8005d2a <tcp_slowtmr+0x1d6>
        err = tcp_keepalive(pcb);
 8005d10:	4620      	mov	r0, r4
 8005d12:	f002 fcae 	bl	8008672 <tcp_keepalive>
        if (err == ERR_OK) {
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d13d      	bne.n	8005d96 <tcp_slowtmr+0x242>
          pcb->keep_cnt_sent++;
 8005d1a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8005d1e:	3301      	adds	r3, #1
 8005d20:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8005d24:	2700      	movs	r7, #0
 8005d26:	e000      	b.n	8005d2a <tcp_slowtmr+0x1d6>
 8005d28:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8005d2a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005d2c:	b150      	cbz	r0, 8005d44 <tcp_slowtmr+0x1f0>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005d2e:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <tcp_slowtmr+0x2c0>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	6a23      	ldr	r3, [r4, #32]
 8005d34:	1ad2      	subs	r2, r2, r3
 8005d36:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005d3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005d3e:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 8005d40:	428a      	cmp	r2, r1
 8005d42:	d22a      	bcs.n	8005d9a <tcp_slowtmr+0x246>
    if (pcb->state == SYN_RCVD) {
 8005d44:	7d23      	ldrb	r3, [r4, #20]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d02c      	beq.n	8005da4 <tcp_slowtmr+0x250>
    if (pcb->state == LAST_ACK) {
 8005d4a:	2b09      	cmp	r3, #9
 8005d4c:	d033      	beq.n	8005db6 <tcp_slowtmr+0x262>
    if (pcb_remove) {
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	d13a      	bne.n	8005dc8 <tcp_slowtmr+0x274>
      pcb = pcb->next;
 8005d52:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8005d54:	7ee3      	ldrb	r3, [r4, #27]
 8005d56:	3301      	adds	r3, #1
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005d5c:	7f22      	ldrb	r2, [r4, #28]
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	f0c0 809e 	bcc.w	8005ea0 <tcp_slowtmr+0x34c>
        prev->polltmr = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8005d68:	4a37      	ldr	r2, [pc, #220]	; (8005e48 <tcp_slowtmr+0x2f4>)
 8005d6a:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8005d6c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 808d 	beq.w	8005e90 <tcp_slowtmr+0x33c>
 8005d76:	4621      	mov	r1, r4
 8005d78:	6920      	ldr	r0, [r4, #16]
 8005d7a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8005d7c:	4b32      	ldr	r3, [pc, #200]	; (8005e48 <tcp_slowtmr+0x2f4>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f47f aef2 	bne.w	8005b6a <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f000 8084 	beq.w	8005e94 <tcp_slowtmr+0x340>
      prev = pcb;
 8005d8c:	4626      	mov	r6, r4
      pcb = pcb->next;
 8005d8e:	462c      	mov	r4, r5
 8005d90:	e708      	b.n	8005ba4 <tcp_slowtmr+0x50>
    pcb_reset = 0;
 8005d92:	2700      	movs	r7, #0
 8005d94:	e7c9      	b.n	8005d2a <tcp_slowtmr+0x1d6>
 8005d96:	2700      	movs	r7, #0
 8005d98:	e7c7      	b.n	8005d2a <tcp_slowtmr+0x1d6>
      tcp_segs_free(pcb->ooseq);
 8005d9a:	f7ff fe9a 	bl	8005ad2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	6723      	str	r3, [r4, #112]	; 0x70
 8005da2:	e7cf      	b.n	8005d44 <tcp_slowtmr+0x1f0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005da4:	6a21      	ldr	r1, [r4, #32]
 8005da6:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <tcp_slowtmr+0x2c0>)
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	1a52      	subs	r2, r2, r1
 8005dac:	2a28      	cmp	r2, #40	; 0x28
 8005dae:	d9cc      	bls.n	8005d4a <tcp_slowtmr+0x1f6>
        ++pcb_remove;
 8005db0:	3501      	adds	r5, #1
 8005db2:	b2ed      	uxtb	r5, r5
 8005db4:	e7c9      	b.n	8005d4a <tcp_slowtmr+0x1f6>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005db6:	6a22      	ldr	r2, [r4, #32]
 8005db8:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <tcp_slowtmr+0x2c0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	2bf0      	cmp	r3, #240	; 0xf0
 8005dc0:	d9c5      	bls.n	8005d4e <tcp_slowtmr+0x1fa>
        ++pcb_remove;
 8005dc2:	3501      	adds	r5, #1
 8005dc4:	b2ed      	uxtb	r5, r5
 8005dc6:	e7c2      	b.n	8005d4e <tcp_slowtmr+0x1fa>
      tcp_err_fn err_fn = pcb->errf;
 8005dc8:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f7ff fe9e 	bl	8005b0e <tcp_pcb_purge>
      if (prev != NULL) {
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d042      	beq.n	8005e5c <tcp_slowtmr+0x308>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <tcp_slowtmr+0x2c8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	429c      	cmp	r4, r3
 8005ddc:	d036      	beq.n	8005e4c <tcp_slowtmr+0x2f8>
        prev->next = pcb->next;
 8005dde:	68e3      	ldr	r3, [r4, #12]
 8005de0:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 8005de2:	2f00      	cmp	r7, #0
 8005de4:	d149      	bne.n	8005e7a <tcp_slowtmr+0x326>
      err_arg = pcb->callback_arg;
 8005de6:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 8005dea:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8005dec:	4621      	mov	r1, r4
 8005dee:	2001      	movs	r0, #1
 8005df0:	f7ff f88c 	bl	8004f0c <memp_free>
      tcp_active_pcbs_changed = 0;
 8005df4:	2200      	movs	r2, #0
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <tcp_slowtmr+0x2f4>)
 8005df8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005dfa:	b11d      	cbz	r5, 8005e04 <tcp_slowtmr+0x2b0>
 8005dfc:	f06f 010c 	mvn.w	r1, #12
 8005e00:	4640      	mov	r0, r8
 8005e02:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8005e04:	4b10      	ldr	r3, [pc, #64]	; (8005e48 <tcp_slowtmr+0x2f4>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f47f aeae 	bne.w	8005b6a <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8005e0e:	463c      	mov	r4, r7
 8005e10:	e6c8      	b.n	8005ba4 <tcp_slowtmr+0x50>
 8005e12:	bf00      	nop
 8005e14:	200076d4 	.word	0x200076d4
 8005e18:	20003e36 	.word	0x20003e36
 8005e1c:	200076d0 	.word	0x200076d0
 8005e20:	0800e668 	.word	0x0800e668
 8005e24:	0800e76c 	.word	0x0800e76c
 8005e28:	0800de6c 	.word	0x0800de6c
 8005e2c:	0800e798 	.word	0x0800e798
 8005e30:	0800e7c4 	.word	0x0800e7c4
 8005e34:	0800e718 	.word	0x0800e718
 8005e38:	0800e62c 	.word	0x0800e62c
 8005e3c:	000a4cb8 	.word	0x000a4cb8
 8005e40:	10624dd3 	.word	0x10624dd3
 8005e44:	000124f8 	.word	0x000124f8
 8005e48:	200076cc 	.word	0x200076cc
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005e4c:	4b39      	ldr	r3, [pc, #228]	; (8005f34 <tcp_slowtmr+0x3e0>)
 8005e4e:	f240 4289 	movw	r2, #1161	; 0x489
 8005e52:	4939      	ldr	r1, [pc, #228]	; (8005f38 <tcp_slowtmr+0x3e4>)
 8005e54:	4839      	ldr	r0, [pc, #228]	; (8005f3c <tcp_slowtmr+0x3e8>)
 8005e56:	f006 fe71 	bl	800cb3c <iprintf>
 8005e5a:	e7c0      	b.n	8005dde <tcp_slowtmr+0x28a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005e5c:	4b38      	ldr	r3, [pc, #224]	; (8005f40 <tcp_slowtmr+0x3ec>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	429c      	cmp	r4, r3
 8005e62:	d006      	beq.n	8005e72 <tcp_slowtmr+0x31e>
 8005e64:	4b33      	ldr	r3, [pc, #204]	; (8005f34 <tcp_slowtmr+0x3e0>)
 8005e66:	f240 428d 	movw	r2, #1165	; 0x48d
 8005e6a:	4936      	ldr	r1, [pc, #216]	; (8005f44 <tcp_slowtmr+0x3f0>)
 8005e6c:	4833      	ldr	r0, [pc, #204]	; (8005f3c <tcp_slowtmr+0x3e8>)
 8005e6e:	f006 fe65 	bl	800cb3c <iprintf>
        tcp_active_pcbs = pcb->next;
 8005e72:	68e2      	ldr	r2, [r4, #12]
 8005e74:	4b32      	ldr	r3, [pc, #200]	; (8005f40 <tcp_slowtmr+0x3ec>)
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e7b3      	b.n	8005de2 <tcp_slowtmr+0x28e>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005e7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e7c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005e7e:	8b23      	ldrh	r3, [r4, #24]
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	8ae3      	ldrh	r3, [r4, #22]
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	1d23      	adds	r3, r4, #4
 8005e88:	4622      	mov	r2, r4
 8005e8a:	f002 fb29 	bl	80084e0 <tcp_rst>
 8005e8e:	e7aa      	b.n	8005de6 <tcp_slowtmr+0x292>
        TCP_EVENT_POLL(prev, err);
 8005e90:	2000      	movs	r0, #0
 8005e92:	e773      	b.n	8005d7c <tcp_slowtmr+0x228>
          tcp_output(prev);
 8005e94:	4620      	mov	r0, r4
 8005e96:	f002 f9c7 	bl	8008228 <tcp_output>
      prev = pcb;
 8005e9a:	4626      	mov	r6, r4
      pcb = pcb->next;
 8005e9c:	462c      	mov	r4, r5
 8005e9e:	e681      	b.n	8005ba4 <tcp_slowtmr+0x50>
      prev = pcb;
 8005ea0:	4626      	mov	r6, r4
      pcb = pcb->next;
 8005ea2:	462c      	mov	r4, r5
 8005ea4:	e67e      	b.n	8005ba4 <tcp_slowtmr+0x50>
  pcb = tcp_tw_pcbs;
 8005ea6:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <tcp_slowtmr+0x3f4>)
 8005ea8:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8005eaa:	e003      	b.n	8005eb4 <tcp_slowtmr+0x360>
      ++pcb_remove;
 8005eac:	2301      	movs	r3, #1
    if (pcb_remove) {
 8005eae:	b9ab      	cbnz	r3, 8005edc <tcp_slowtmr+0x388>
      prev = pcb;
 8005eb0:	462c      	mov	r4, r5
      pcb = pcb->next;
 8005eb2:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	d039      	beq.n	8005f2c <tcp_slowtmr+0x3d8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005eb8:	7d2b      	ldrb	r3, [r5, #20]
 8005eba:	2b0a      	cmp	r3, #10
 8005ebc:	d006      	beq.n	8005ecc <tcp_slowtmr+0x378>
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <tcp_slowtmr+0x3e0>)
 8005ec0:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005ec4:	4921      	ldr	r1, [pc, #132]	; (8005f4c <tcp_slowtmr+0x3f8>)
 8005ec6:	481d      	ldr	r0, [pc, #116]	; (8005f3c <tcp_slowtmr+0x3e8>)
 8005ec8:	f006 fe38 	bl	800cb3c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005ecc:	6a2a      	ldr	r2, [r5, #32]
 8005ece:	4b20      	ldr	r3, [pc, #128]	; (8005f50 <tcp_slowtmr+0x3fc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	2bf0      	cmp	r3, #240	; 0xf0
 8005ed6:	d8e9      	bhi.n	8005eac <tcp_slowtmr+0x358>
    pcb_remove = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e7e8      	b.n	8005eae <tcp_slowtmr+0x35a>
      tcp_pcb_purge(pcb);
 8005edc:	4628      	mov	r0, r5
 8005ede:	f7ff fe16 	bl	8005b0e <tcp_pcb_purge>
      if (prev != NULL) {
 8005ee2:	b1a4      	cbz	r4, 8005f0e <tcp_slowtmr+0x3ba>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005ee4:	4b18      	ldr	r3, [pc, #96]	; (8005f48 <tcp_slowtmr+0x3f4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	429d      	cmp	r5, r3
 8005eea:	d008      	beq.n	8005efe <tcp_slowtmr+0x3aa>
        prev->next = pcb->next;
 8005eec:	68eb      	ldr	r3, [r5, #12]
 8005eee:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8005ef0:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	2001      	movs	r0, #1
 8005ef6:	f7ff f809 	bl	8004f0c <memp_free>
      pcb = pcb->next;
 8005efa:	4635      	mov	r5, r6
 8005efc:	e7da      	b.n	8005eb4 <tcp_slowtmr+0x360>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005efe:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <tcp_slowtmr+0x3e0>)
 8005f00:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8005f04:	4913      	ldr	r1, [pc, #76]	; (8005f54 <tcp_slowtmr+0x400>)
 8005f06:	480d      	ldr	r0, [pc, #52]	; (8005f3c <tcp_slowtmr+0x3e8>)
 8005f08:	f006 fe18 	bl	800cb3c <iprintf>
 8005f0c:	e7ee      	b.n	8005eec <tcp_slowtmr+0x398>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <tcp_slowtmr+0x3f4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	429d      	cmp	r5, r3
 8005f14:	d006      	beq.n	8005f24 <tcp_slowtmr+0x3d0>
 8005f16:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <tcp_slowtmr+0x3e0>)
 8005f18:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8005f1c:	490e      	ldr	r1, [pc, #56]	; (8005f58 <tcp_slowtmr+0x404>)
 8005f1e:	4807      	ldr	r0, [pc, #28]	; (8005f3c <tcp_slowtmr+0x3e8>)
 8005f20:	f006 fe0c 	bl	800cb3c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005f24:	68ea      	ldr	r2, [r5, #12]
 8005f26:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <tcp_slowtmr+0x3f4>)
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e7e1      	b.n	8005ef0 <tcp_slowtmr+0x39c>
}
 8005f2c:	b002      	add	sp, #8
 8005f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f32:	bf00      	nop
 8005f34:	0800e668 	.word	0x0800e668
 8005f38:	0800e7f4 	.word	0x0800e7f4
 8005f3c:	0800de6c 	.word	0x0800de6c
 8005f40:	200076d0 	.word	0x200076d0
 8005f44:	0800e820 	.word	0x0800e820
 8005f48:	200076e0 	.word	0x200076e0
 8005f4c:	0800e84c 	.word	0x0800e84c
 8005f50:	200076d4 	.word	0x200076d4
 8005f54:	0800e87c 	.word	0x0800e87c
 8005f58:	0800e8a4 	.word	0x0800e8a4

08005f5c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8005f60:	6803      	ldr	r3, [r0, #0]
 8005f62:	428b      	cmp	r3, r1
 8005f64:	d005      	beq.n	8005f72 <tcp_pcb_remove+0x16>
 8005f66:	b14b      	cbz	r3, 8005f7c <tcp_pcb_remove+0x20>
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	4294      	cmp	r4, r2
 8005f6c:	d004      	beq.n	8005f78 <tcp_pcb_remove+0x1c>
 8005f6e:	4613      	mov	r3, r2
 8005f70:	e7f9      	b.n	8005f66 <tcp_pcb_remove+0xa>
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	6003      	str	r3, [r0, #0]
 8005f76:	e001      	b.n	8005f7c <tcp_pcb_remove+0x20>
 8005f78:	68e2      	ldr	r2, [r4, #12]
 8005f7a:	60da      	str	r2, [r3, #12]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7ff fdc4 	bl	8005b0e <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8005f86:	7d23      	ldrb	r3, [r4, #20]
 8005f88:	2b0a      	cmp	r3, #10
 8005f8a:	bf18      	it	ne
 8005f8c:	2b01      	cmpne	r3, #1
 8005f8e:	d003      	beq.n	8005f98 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8005f90:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8005f92:	f013 0f01 	tst.w	r3, #1
 8005f96:	d121      	bne.n	8005fdc <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 8005f98:	7d23      	ldrb	r3, [r4, #20]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d01a      	beq.n	8005fd4 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8005f9e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005fa0:	b133      	cbz	r3, 8005fb0 <tcp_pcb_remove+0x54>
 8005fa2:	4b12      	ldr	r3, [pc, #72]	; (8005fec <tcp_pcb_remove+0x90>)
 8005fa4:	f240 7253 	movw	r2, #1875	; 0x753
 8005fa8:	4911      	ldr	r1, [pc, #68]	; (8005ff0 <tcp_pcb_remove+0x94>)
 8005faa:	4812      	ldr	r0, [pc, #72]	; (8005ff4 <tcp_pcb_remove+0x98>)
 8005fac:	f006 fdc6 	bl	800cb3c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8005fb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005fb2:	b133      	cbz	r3, 8005fc2 <tcp_pcb_remove+0x66>
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <tcp_pcb_remove+0x90>)
 8005fb6:	f240 7254 	movw	r2, #1876	; 0x754
 8005fba:	490f      	ldr	r1, [pc, #60]	; (8005ff8 <tcp_pcb_remove+0x9c>)
 8005fbc:	480d      	ldr	r0, [pc, #52]	; (8005ff4 <tcp_pcb_remove+0x98>)
 8005fbe:	f006 fdbd 	bl	800cb3c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8005fc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005fc4:	b133      	cbz	r3, 8005fd4 <tcp_pcb_remove+0x78>
 8005fc6:	4b09      	ldr	r3, [pc, #36]	; (8005fec <tcp_pcb_remove+0x90>)
 8005fc8:	f240 7256 	movw	r2, #1878	; 0x756
 8005fcc:	490b      	ldr	r1, [pc, #44]	; (8005ffc <tcp_pcb_remove+0xa0>)
 8005fce:	4809      	ldr	r0, [pc, #36]	; (8005ff4 <tcp_pcb_remove+0x98>)
 8005fd0:	f006 fdb4 	bl	800cb3c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8005fd8:	82e3      	strh	r3, [r4, #22]
 8005fda:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 8005fdc:	f043 0302 	orr.w	r3, r3, #2
 8005fe0:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f002 f920 	bl	8008228 <tcp_output>
 8005fe8:	e7d6      	b.n	8005f98 <tcp_pcb_remove+0x3c>
 8005fea:	bf00      	nop
 8005fec:	0800e668 	.word	0x0800e668
 8005ff0:	0800e6cc 	.word	0x0800e6cc
 8005ff4:	0800de6c 	.word	0x0800de6c
 8005ff8:	0800e6e4 	.word	0x0800e6e4
 8005ffc:	0800e700 	.word	0x0800e700

08006000 <tcp_close_shutdown>:
{
 8006000:	b510      	push	{r4, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006006:	b329      	cbz	r1, 8006054 <tcp_close_shutdown+0x54>
 8006008:	7d03      	ldrb	r3, [r0, #20]
 800600a:	2b07      	cmp	r3, #7
 800600c:	bf18      	it	ne
 800600e:	2b04      	cmpne	r3, #4
 8006010:	d120      	bne.n	8006054 <tcp_close_shutdown+0x54>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006012:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006014:	b1d3      	cbz	r3, 800604c <tcp_close_shutdown+0x4c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006016:	7ea3      	ldrb	r3, [r4, #26]
 8006018:	f013 0f10 	tst.w	r3, #16
 800601c:	d025      	beq.n	800606a <tcp_close_shutdown+0x6a>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800601e:	8b23      	ldrh	r3, [r4, #24]
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	8ae3      	ldrh	r3, [r4, #22]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	1d23      	adds	r3, r4, #4
 8006028:	4622      	mov	r2, r4
 800602a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800602c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800602e:	f002 fa57 	bl	80084e0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8006032:	4620      	mov	r0, r4
 8006034:	f7ff fd6b 	bl	8005b0e <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006038:	4b3d      	ldr	r3, [pc, #244]	; (8006130 <tcp_close_shutdown+0x130>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	429c      	cmp	r4, r3
 800603e:	d01c      	beq.n	800607a <tcp_close_shutdown+0x7a>
 8006040:	b30b      	cbz	r3, 8006086 <tcp_close_shutdown+0x86>
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	4294      	cmp	r4, r2
 8006046:	d01c      	beq.n	8006082 <tcp_close_shutdown+0x82>
 8006048:	4613      	mov	r3, r2
 800604a:	e7f9      	b.n	8006040 <tcp_close_shutdown+0x40>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800604c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800604e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006052:	d1e0      	bne.n	8006016 <tcp_close_shutdown+0x16>
  switch (pcb->state) {
 8006054:	7d23      	ldrb	r3, [r4, #20]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d050      	beq.n	80060fc <tcp_close_shutdown+0xfc>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d033      	beq.n	80060c6 <tcp_close_shutdown+0xc6>
 800605e:	2b02      	cmp	r3, #2
 8006060:	d059      	beq.n	8006116 <tcp_close_shutdown+0x116>
    return tcp_close_shutdown_fin(pcb);
 8006062:	4620      	mov	r0, r4
 8006064:	f7ff fc70 	bl	8005948 <tcp_close_shutdown_fin>
 8006068:	e046      	b.n	80060f8 <tcp_close_shutdown+0xf8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800606a:	4b32      	ldr	r3, [pc, #200]	; (8006134 <tcp_close_shutdown+0x134>)
 800606c:	f240 120f 	movw	r2, #271	; 0x10f
 8006070:	4931      	ldr	r1, [pc, #196]	; (8006138 <tcp_close_shutdown+0x138>)
 8006072:	4832      	ldr	r0, [pc, #200]	; (800613c <tcp_close_shutdown+0x13c>)
 8006074:	f006 fd62 	bl	800cb3c <iprintf>
 8006078:	e7d1      	b.n	800601e <tcp_close_shutdown+0x1e>
      TCP_RMV_ACTIVE(pcb);
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	4b2c      	ldr	r3, [pc, #176]	; (8006130 <tcp_close_shutdown+0x130>)
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e001      	b.n	8006086 <tcp_close_shutdown+0x86>
 8006082:	68e2      	ldr	r2, [r4, #12]
 8006084:	60da      	str	r2, [r3, #12]
 8006086:	2300      	movs	r3, #0
 8006088:	60e3      	str	r3, [r4, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <tcp_close_shutdown+0x140>)
 800608e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8006090:	7d23      	ldrb	r3, [r4, #20]
 8006092:	2b04      	cmp	r3, #4
 8006094:	d009      	beq.n	80060aa <tcp_close_shutdown+0xaa>
        if (tcp_input_pcb == pcb) {
 8006096:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <tcp_close_shutdown+0x144>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	429c      	cmp	r4, r3
 800609c:	d00f      	beq.n	80060be <tcp_close_shutdown+0xbe>
          memp_free(MEMP_TCP_PCB, pcb);
 800609e:	4621      	mov	r1, r4
 80060a0:	2001      	movs	r0, #1
 80060a2:	f7fe ff33 	bl	8004f0c <memp_free>
      return ERR_OK;
 80060a6:	2000      	movs	r0, #0
 80060a8:	e026      	b.n	80060f8 <tcp_close_shutdown+0xf8>
        pcb->state = TIME_WAIT;
 80060aa:	230a      	movs	r3, #10
 80060ac:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80060ae:	4b26      	ldr	r3, [pc, #152]	; (8006148 <tcp_close_shutdown+0x148>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	60e2      	str	r2, [r4, #12]
 80060b4:	601c      	str	r4, [r3, #0]
 80060b6:	f002 fc23 	bl	8008900 <tcp_timer_needed>
      return ERR_OK;
 80060ba:	2000      	movs	r0, #0
 80060bc:	e01c      	b.n	80060f8 <tcp_close_shutdown+0xf8>
          tcp_trigger_input_pcb_close();
 80060be:	f001 fe93 	bl	8007de8 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 80060c2:	2000      	movs	r0, #0
 80060c4:	e018      	b.n	80060f8 <tcp_close_shutdown+0xf8>
    if (pcb->local_port != 0) {
 80060c6:	8ae3      	ldrh	r3, [r4, #22]
 80060c8:	b18b      	cbz	r3, 80060ee <tcp_close_shutdown+0xee>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80060ca:	4b20      	ldr	r3, [pc, #128]	; (800614c <tcp_close_shutdown+0x14c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	429c      	cmp	r4, r3
 80060d0:	d005      	beq.n	80060de <tcp_close_shutdown+0xde>
 80060d2:	b153      	cbz	r3, 80060ea <tcp_close_shutdown+0xea>
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	4294      	cmp	r4, r2
 80060d8:	d005      	beq.n	80060e6 <tcp_close_shutdown+0xe6>
 80060da:	4613      	mov	r3, r2
 80060dc:	e7f9      	b.n	80060d2 <tcp_close_shutdown+0xd2>
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	4b1a      	ldr	r3, [pc, #104]	; (800614c <tcp_close_shutdown+0x14c>)
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e001      	b.n	80060ea <tcp_close_shutdown+0xea>
 80060e6:	68e2      	ldr	r2, [r4, #12]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	2300      	movs	r3, #0
 80060ec:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 80060ee:	4621      	mov	r1, r4
 80060f0:	2001      	movs	r0, #1
 80060f2:	f7fe ff0b 	bl	8004f0c <memp_free>
  return ERR_OK;
 80060f6:	2000      	movs	r0, #0
}
 80060f8:	b002      	add	sp, #8
 80060fa:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 80060fc:	4620      	mov	r0, r4
 80060fe:	f7ff fbf9 	bl	80058f4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006102:	4621      	mov	r1, r4
 8006104:	4812      	ldr	r0, [pc, #72]	; (8006150 <tcp_close_shutdown+0x150>)
 8006106:	f7ff ff29 	bl	8005f5c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800610a:	4621      	mov	r1, r4
 800610c:	2002      	movs	r0, #2
 800610e:	f7fe fefd 	bl	8004f0c <memp_free>
  return ERR_OK;
 8006112:	2000      	movs	r0, #0
    break;
 8006114:	e7f0      	b.n	80060f8 <tcp_close_shutdown+0xf8>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8006116:	4621      	mov	r1, r4
 8006118:	4805      	ldr	r0, [pc, #20]	; (8006130 <tcp_close_shutdown+0x130>)
 800611a:	f7ff ff1f 	bl	8005f5c <tcp_pcb_remove>
 800611e:	2001      	movs	r0, #1
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <tcp_close_shutdown+0x140>)
 8006122:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8006124:	4621      	mov	r1, r4
 8006126:	f7fe fef1 	bl	8004f0c <memp_free>
  return ERR_OK;
 800612a:	2000      	movs	r0, #0
    break;
 800612c:	e7e4      	b.n	80060f8 <tcp_close_shutdown+0xf8>
 800612e:	bf00      	nop
 8006130:	200076d0 	.word	0x200076d0
 8006134:	0800e668 	.word	0x0800e668
 8006138:	0800e63c 	.word	0x0800e63c
 800613c:	0800de6c 	.word	0x0800de6c
 8006140:	200076cc 	.word	0x200076cc
 8006144:	200076e4 	.word	0x200076e4
 8006148:	200076e0 	.word	0x200076e0
 800614c:	200076dc 	.word	0x200076dc
 8006150:	200076d8 	.word	0x200076d8

08006154 <tcp_close>:
{
 8006154:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 8006156:	7d03      	ldrb	r3, [r0, #20]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d003      	beq.n	8006164 <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 800615c:	7e83      	ldrb	r3, [r0, #26]
 800615e:	f043 0310 	orr.w	r3, r3, #16
 8006162:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8006164:	2101      	movs	r1, #1
 8006166:	f7ff ff4b 	bl	8006000 <tcp_close_shutdown>
}
 800616a:	bd08      	pop	{r3, pc}

0800616c <tcp_recv_null>:
{
 800616c:	b510      	push	{r4, lr}
 800616e:	4608      	mov	r0, r1
  if (p != NULL) {
 8006170:	b142      	cbz	r2, 8006184 <tcp_recv_null+0x18>
 8006172:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 8006174:	8911      	ldrh	r1, [r2, #8]
 8006176:	f7ff fc5d 	bl	8005a34 <tcp_recved>
    pbuf_free(p);
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff f89a 	bl	80052b4 <pbuf_free>
  return ERR_OK;
 8006180:	2000      	movs	r0, #0
 8006182:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8006184:	b10b      	cbz	r3, 800618a <tcp_recv_null+0x1e>
  return ERR_OK;
 8006186:	2000      	movs	r0, #0
}
 8006188:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 800618a:	f7ff ffe3 	bl	8006154 <tcp_close>
 800618e:	bd10      	pop	{r4, pc}

08006190 <tcp_process_refused_data>:
{
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8006194:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8006196:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800619c:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80061a0:	b1dd      	cbz	r5, 80061da <tcp_process_refused_data+0x4a>
 80061a2:	4632      	mov	r2, r6
 80061a4:	4601      	mov	r1, r0
 80061a6:	6900      	ldr	r0, [r0, #16]
 80061a8:	47a8      	blx	r5
 80061aa:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80061ac:	b9fd      	cbnz	r5, 80061ee <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80061ae:	f017 0f20 	tst.w	r7, #32
 80061b2:	d022      	beq.n	80061fa <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80061b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80061b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80061ba:	d001      	beq.n	80061c0 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 80061bc:	3301      	adds	r3, #1
 80061be:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80061c0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80061c4:	b18e      	cbz	r6, 80061ea <tcp_process_refused_data+0x5a>
 80061c6:	2300      	movs	r3, #0
 80061c8:	461a      	mov	r2, r3
 80061ca:	4621      	mov	r1, r4
 80061cc:	6920      	ldr	r0, [r4, #16]
 80061ce:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80061d0:	f110 0f0d 	cmn.w	r0, #13
 80061d4:	d111      	bne.n	80061fa <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 80061d6:	4605      	mov	r5, r0
 80061d8:	e00f      	b.n	80061fa <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80061da:	2300      	movs	r3, #0
 80061dc:	4632      	mov	r2, r6
 80061de:	4601      	mov	r1, r0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff ffc3 	bl	800616c <tcp_recv_null>
 80061e6:	4605      	mov	r5, r0
 80061e8:	e7e0      	b.n	80061ac <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 80061ea:	4628      	mov	r0, r5
 80061ec:	e7f0      	b.n	80061d0 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 80061ee:	f115 0f0d 	cmn.w	r5, #13
 80061f2:	d002      	beq.n	80061fa <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 80061f4:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80061f6:	f06f 0504 	mvn.w	r5, #4
}
 80061fa:	4628      	mov	r0, r5
 80061fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006200 <tcp_fasttmr>:
{
 8006200:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8006202:	4a1c      	ldr	r2, [pc, #112]	; (8006274 <tcp_fasttmr+0x74>)
 8006204:	7813      	ldrb	r3, [r2, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <tcp_fasttmr+0x78>)
 800620c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800620e:	e013      	b.n	8006238 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8006210:	f043 0302 	orr.w	r3, r3, #2
 8006214:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8006216:	4620      	mov	r0, r4
 8006218:	f002 f806 	bl	8008228 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800621c:	7ea3      	ldrb	r3, [r4, #26]
 800621e:	f023 0303 	bic.w	r3, r3, #3
 8006222:	76a3      	strb	r3, [r4, #26]
 8006224:	e013      	b.n	800624e <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 8006226:	f023 0308 	bic.w	r3, r3, #8
 800622a:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800622c:	4620      	mov	r0, r4
 800622e:	f7ff fb8b 	bl	8005948 <tcp_close_shutdown_fin>
 8006232:	e010      	b.n	8006256 <tcp_fasttmr+0x56>
      pcb = pcb->next;
 8006234:	68e5      	ldr	r5, [r4, #12]
{
 8006236:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8006238:	b1dc      	cbz	r4, 8006272 <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 800623a:	7f62      	ldrb	r2, [r4, #29]
 800623c:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <tcp_fasttmr+0x74>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d0f7      	beq.n	8006234 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 8006244:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8006246:	7ea3      	ldrb	r3, [r4, #26]
 8006248:	f013 0f01 	tst.w	r3, #1
 800624c:	d1e0      	bne.n	8006210 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 800624e:	7ea3      	ldrb	r3, [r4, #26]
 8006250:	f013 0f08 	tst.w	r3, #8
 8006254:	d1e7      	bne.n	8006226 <tcp_fasttmr+0x26>
      next = pcb->next;
 8006256:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8006258:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0eb      	beq.n	8006236 <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 800625e:	4e07      	ldr	r6, [pc, #28]	; (800627c <tcp_fasttmr+0x7c>)
 8006260:	2300      	movs	r3, #0
 8006262:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8006264:	4620      	mov	r0, r4
 8006266:	f7ff ff93 	bl	8006190 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800626a:	7833      	ldrb	r3, [r6, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0e2      	beq.n	8006236 <tcp_fasttmr+0x36>
 8006270:	e7cb      	b.n	800620a <tcp_fasttmr+0xa>
}
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	20003e36 	.word	0x20003e36
 8006278:	200076d0 	.word	0x200076d0
 800627c:	200076cc 	.word	0x200076cc

08006280 <tcp_tmr>:
{
 8006280:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8006282:	f7ff ffbd 	bl	8006200 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8006286:	4a06      	ldr	r2, [pc, #24]	; (80062a0 <tcp_tmr+0x20>)
 8006288:	7813      	ldrb	r3, [r2, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	7013      	strb	r3, [r2, #0]
 8006290:	f013 0f01 	tst.w	r3, #1
 8006294:	d100      	bne.n	8006298 <tcp_tmr+0x18>
 8006296:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 8006298:	f7ff fc5c 	bl	8005b54 <tcp_slowtmr>
}
 800629c:	e7fb      	b.n	8006296 <tcp_tmr+0x16>
 800629e:	bf00      	nop
 80062a0:	20003e35 	.word	0x20003e35

080062a4 <tcp_abandon>:
{
 80062a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	4604      	mov	r4, r0
 80062ac:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80062ae:	7d03      	ldrb	r3, [r0, #20]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d01a      	beq.n	80062ea <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 80062b4:	7d23      	ldrb	r3, [r4, #20]
 80062b6:	2b0a      	cmp	r3, #10
 80062b8:	d01f      	beq.n	80062fa <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 80062ba:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80062be:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 80062c2:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80062c6:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d141      	bne.n	8006350 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 80062cc:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 80062d0:	f1ba 0f00 	cmp.w	sl, #0
 80062d4:	d046      	beq.n	8006364 <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80062d6:	4b2a      	ldr	r3, [pc, #168]	; (8006380 <tcp_abandon+0xdc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429c      	cmp	r4, r3
 80062dc:	d016      	beq.n	800630c <tcp_abandon+0x68>
 80062de:	b1db      	cbz	r3, 8006318 <tcp_abandon+0x74>
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	4294      	cmp	r4, r2
 80062e4:	d016      	beq.n	8006314 <tcp_abandon+0x70>
 80062e6:	4613      	mov	r3, r2
 80062e8:	e7f9      	b.n	80062de <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80062ea:	4b26      	ldr	r3, [pc, #152]	; (8006384 <tcp_abandon+0xe0>)
 80062ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80062f0:	4925      	ldr	r1, [pc, #148]	; (8006388 <tcp_abandon+0xe4>)
 80062f2:	4826      	ldr	r0, [pc, #152]	; (800638c <tcp_abandon+0xe8>)
 80062f4:	f006 fc22 	bl	800cb3c <iprintf>
 80062f8:	e7dc      	b.n	80062b4 <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80062fa:	4621      	mov	r1, r4
 80062fc:	4824      	ldr	r0, [pc, #144]	; (8006390 <tcp_abandon+0xec>)
 80062fe:	f7ff fe2d 	bl	8005f5c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006302:	4621      	mov	r1, r4
 8006304:	2001      	movs	r0, #1
 8006306:	f7fe fe01 	bl	8004f0c <memp_free>
 800630a:	e01e      	b.n	800634a <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <tcp_abandon+0xdc>)
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e001      	b.n	8006318 <tcp_abandon+0x74>
 8006314:	68e2      	ldr	r2, [r4, #12]
 8006316:	60da      	str	r2, [r3, #12]
 8006318:	2500      	movs	r5, #0
 800631a:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 800631c:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 800631e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006320:	b108      	cbz	r0, 8006326 <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 8006322:	f7ff fbd6 	bl	8005ad2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8006326:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006328:	b108      	cbz	r0, 800632e <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 800632a:	f7ff fbd2 	bl	8005ad2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800632e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006330:	b108      	cbz	r0, 8006336 <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 8006332:	f7ff fbce 	bl	8005ad2 <tcp_segs_free>
    if (send_rst) {
 8006336:	b9bd      	cbnz	r5, 8006368 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 8006338:	4621      	mov	r1, r4
 800633a:	2001      	movs	r0, #1
 800633c:	f7fe fde6 	bl	8004f0c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006340:	b11e      	cbz	r6, 800634a <tcp_abandon+0xa6>
 8006342:	f06f 010c 	mvn.w	r1, #12
 8006346:	4638      	mov	r0, r7
 8006348:	47b0      	blx	r6
}
 800634a:	b002      	add	sp, #8
 800634c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8006350:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006354:	4621      	mov	r1, r4
 8006356:	480f      	ldr	r0, [pc, #60]	; (8006394 <tcp_abandon+0xf0>)
 8006358:	f7ff fe00 	bl	8005f5c <tcp_pcb_remove>
 800635c:	2201      	movs	r2, #1
 800635e:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <tcp_abandon+0xf4>)
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e7dc      	b.n	800631e <tcp_abandon+0x7a>
    int send_rst = 0;
 8006364:	2500      	movs	r5, #0
 8006366:	e7da      	b.n	800631e <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006368:	8b23      	ldrh	r3, [r4, #24]
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	f8cd a000 	str.w	sl, [sp]
 8006370:	1d23      	adds	r3, r4, #4
 8006372:	4622      	mov	r2, r4
 8006374:	4649      	mov	r1, r9
 8006376:	4640      	mov	r0, r8
 8006378:	f002 f8b2 	bl	80084e0 <tcp_rst>
 800637c:	e7dc      	b.n	8006338 <tcp_abandon+0x94>
 800637e:	bf00      	nop
 8006380:	200076dc 	.word	0x200076dc
 8006384:	0800e668 	.word	0x0800e668
 8006388:	0800e5f8 	.word	0x0800e5f8
 800638c:	0800de6c 	.word	0x0800de6c
 8006390:	200076e0 	.word	0x200076e0
 8006394:	200076d0 	.word	0x200076d0
 8006398:	200076cc 	.word	0x200076cc

0800639c <tcp_abort>:
{
 800639c:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 800639e:	2101      	movs	r1, #1
 80063a0:	f7ff ff80 	bl	80062a4 <tcp_abandon>
 80063a4:	bd08      	pop	{r3, pc}
	...

080063a8 <tcp_kill_timewait>:
{
 80063a8:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <tcp_kill_timewait+0x2c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80063ae:	2400      	movs	r4, #0
  inactive = NULL;
 80063b0:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80063b2:	e000      	b.n	80063b6 <tcp_kill_timewait+0xe>
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	b143      	cbz	r3, 80063ca <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80063b8:	6a19      	ldr	r1, [r3, #32]
 80063ba:	4a07      	ldr	r2, [pc, #28]	; (80063d8 <tcp_kill_timewait+0x30>)
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	1a52      	subs	r2, r2, r1
 80063c0:	4294      	cmp	r4, r2
 80063c2:	d8f7      	bhi.n	80063b4 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 80063c4:	4614      	mov	r4, r2
      inactive = pcb;
 80063c6:	4618      	mov	r0, r3
 80063c8:	e7f4      	b.n	80063b4 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 80063ca:	b108      	cbz	r0, 80063d0 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 80063cc:	f7ff ffe6 	bl	800639c <tcp_abort>
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	bf00      	nop
 80063d4:	200076e0 	.word	0x200076e0
 80063d8:	200076d4 	.word	0x200076d4

080063dc <tcp_kill_prio>:
{
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80063e0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80063e4:	d000      	beq.n	80063e8 <tcp_kill_prio+0xc>
 80063e6:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80063e8:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <tcp_kill_prio+0x3c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80063ec:	2400      	movs	r4, #0
  inactive = NULL;
 80063ee:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80063f0:	b91b      	cbnz	r3, 80063fa <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 80063f2:	b108      	cbz	r0, 80063f8 <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 80063f4:	f7ff ffd2 	bl	800639c <tcp_abort>
 80063f8:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 80063fa:	7d5d      	ldrb	r5, [r3, #21]
 80063fc:	42aa      	cmp	r2, r5
 80063fe:	d308      	bcc.n	8006412 <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006400:	6a1e      	ldr	r6, [r3, #32]
 8006402:	4906      	ldr	r1, [pc, #24]	; (800641c <tcp_kill_prio+0x40>)
 8006404:	6809      	ldr	r1, [r1, #0]
 8006406:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 8006408:	428c      	cmp	r4, r1
 800640a:	d802      	bhi.n	8006412 <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 800640c:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 800640e:	460c      	mov	r4, r1
      inactive = pcb;
 8006410:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	e7ec      	b.n	80063f0 <tcp_kill_prio+0x14>
 8006416:	bf00      	nop
 8006418:	200076d0 	.word	0x200076d0
 800641c:	200076d4 	.word	0x200076d4

08006420 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8006426:	e003      	b.n	8006430 <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006428:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800642a:	f7ff ffb7 	bl	800639c <tcp_abort>
      pcb = next;
 800642e:	4628      	mov	r0, r5
  while (pcb != NULL) {
 8006430:	b128      	cbz	r0, 800643e <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006432:	6802      	ldr	r2, [r0, #0]
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d0f6      	beq.n	8006428 <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 800643a:	68c0      	ldr	r0, [r0, #12]
 800643c:	e7f8      	b.n	8006430 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800643e:	bd38      	pop	{r3, r4, r5, pc}

08006440 <tcp_kill_state>:
{
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006444:	f1a0 0308 	sub.w	r3, r0, #8
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b01      	cmp	r3, #1
 800644c:	d906      	bls.n	800645c <tcp_kill_state+0x1c>
 800644e:	4b0f      	ldr	r3, [pc, #60]	; (800648c <tcp_kill_state+0x4c>)
 8006450:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006454:	490e      	ldr	r1, [pc, #56]	; (8006490 <tcp_kill_state+0x50>)
 8006456:	480f      	ldr	r0, [pc, #60]	; (8006494 <tcp_kill_state+0x54>)
 8006458:	f006 fb70 	bl	800cb3c <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800645c:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <tcp_kill_state+0x58>)
 800645e:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8006460:	2100      	movs	r1, #0
  inactive = NULL;
 8006462:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006464:	e000      	b.n	8006468 <tcp_kill_state+0x28>
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	b15b      	cbz	r3, 8006482 <tcp_kill_state+0x42>
    if (pcb->state == state) {
 800646a:	7d1a      	ldrb	r2, [r3, #20]
 800646c:	4294      	cmp	r4, r2
 800646e:	d1fa      	bne.n	8006466 <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006470:	6a1d      	ldr	r5, [r3, #32]
 8006472:	4a0a      	ldr	r2, [pc, #40]	; (800649c <tcp_kill_state+0x5c>)
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	1b52      	subs	r2, r2, r5
 8006478:	4291      	cmp	r1, r2
 800647a:	d8f4      	bhi.n	8006466 <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 800647c:	4611      	mov	r1, r2
        inactive = pcb;
 800647e:	4618      	mov	r0, r3
 8006480:	e7f1      	b.n	8006466 <tcp_kill_state+0x26>
  if (inactive != NULL) {
 8006482:	b110      	cbz	r0, 800648a <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 8006484:	2100      	movs	r1, #0
 8006486:	f7ff ff0d 	bl	80062a4 <tcp_abandon>
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	0800e668 	.word	0x0800e668
 8006490:	0800e658 	.word	0x0800e658
 8006494:	0800de6c 	.word	0x0800de6c
 8006498:	200076d0 	.word	0x200076d0
 800649c:	200076d4 	.word	0x200076d4

080064a0 <tcp_alloc>:
{
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80064a4:	2001      	movs	r0, #1
 80064a6:	f7fe fd17 	bl	8004ed8 <memp_malloc>
  if (pcb == NULL) {
 80064aa:	4604      	mov	r4, r0
 80064ac:	b368      	cbz	r0, 800650a <tcp_alloc+0x6a>
  if (pcb != NULL) {
 80064ae:	b354      	cbz	r4, 8006506 <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80064b0:	2298      	movs	r2, #152	; 0x98
 80064b2:	2100      	movs	r1, #0
 80064b4:	4620      	mov	r0, r4
 80064b6:	f006 fb39 	bl	800cb2c <memset>
    pcb->prio = prio;
 80064ba:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80064bc:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80064c0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80064c4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80064c8:	8562      	strh	r2, [r4, #42]	; 0x2a
 80064ca:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80064cc:	22ff      	movs	r2, #255	; 0xff
 80064ce:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 80064d0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80064d4:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80064d6:	2206      	movs	r2, #6
 80064d8:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80064dc:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 80064de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064e2:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 80064e4:	2201      	movs	r2, #1
 80064e6:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80064ea:	4a19      	ldr	r2, [pc, #100]	; (8006550 <tcp_alloc+0xb0>)
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 80064f0:	4a18      	ldr	r2, [pc, #96]	; (8006554 <tcp_alloc+0xb4>)
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 80064f6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 80064fa:	4b17      	ldr	r3, [pc, #92]	; (8006558 <tcp_alloc+0xb8>)
 80064fc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006500:	4b16      	ldr	r3, [pc, #88]	; (800655c <tcp_alloc+0xbc>)
 8006502:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8006506:	4620      	mov	r0, r4
 8006508:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 800650a:	f7ff ff4d 	bl	80063a8 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800650e:	2001      	movs	r0, #1
 8006510:	f7fe fce2 	bl	8004ed8 <memp_malloc>
    if (pcb == NULL) {
 8006514:	4604      	mov	r4, r0
 8006516:	2800      	cmp	r0, #0
 8006518:	d1c9      	bne.n	80064ae <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800651a:	2009      	movs	r0, #9
 800651c:	f7ff ff90 	bl	8006440 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006520:	2001      	movs	r0, #1
 8006522:	f7fe fcd9 	bl	8004ed8 <memp_malloc>
      if (pcb == NULL) {
 8006526:	4604      	mov	r4, r0
 8006528:	2800      	cmp	r0, #0
 800652a:	d1c0      	bne.n	80064ae <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 800652c:	2008      	movs	r0, #8
 800652e:	f7ff ff87 	bl	8006440 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006532:	2001      	movs	r0, #1
 8006534:	f7fe fcd0 	bl	8004ed8 <memp_malloc>
        if (pcb == NULL) {
 8006538:	4604      	mov	r4, r0
 800653a:	2800      	cmp	r0, #0
 800653c:	d1b7      	bne.n	80064ae <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 800653e:	4628      	mov	r0, r5
 8006540:	f7ff ff4c 	bl	80063dc <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006544:	2001      	movs	r0, #1
 8006546:	f7fe fcc7 	bl	8004ed8 <memp_malloc>
 800654a:	4604      	mov	r4, r0
 800654c:	e7af      	b.n	80064ae <tcp_alloc+0xe>
 800654e:	bf00      	nop
 8006550:	200076d4 	.word	0x200076d4
 8006554:	20003e36 	.word	0x20003e36
 8006558:	0800616d 	.word	0x0800616d
 800655c:	006ddd00 	.word	0x006ddd00

08006560 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8006560:	4b03      	ldr	r3, [pc, #12]	; (8006570 <tcp_next_iss+0x10>)
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	4a03      	ldr	r2, [pc, #12]	; (8006574 <tcp_next_iss+0x14>)
 8006566:	6812      	ldr	r2, [r2, #0]
 8006568:	4410      	add	r0, r2
 800656a:	6018      	str	r0, [r3, #0]
}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20000008 	.word	0x20000008
 8006574:	200076d4 	.word	0x200076d4

08006578 <tcp_eff_send_mss_impl>:
{
 8006578:	b510      	push	{r4, lr}
 800657a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 800657c:	4608      	mov	r0, r1
 800657e:	f004 fc89 	bl	800ae94 <ip4_route>
    if (outif == NULL) {
 8006582:	b138      	cbz	r0, 8006594 <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 8006584:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 8006586:	b13b      	cbz	r3, 8006598 <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006588:	3b28      	subs	r3, #40	; 0x28
 800658a:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 800658c:	42a0      	cmp	r0, r4
 800658e:	bf28      	it	cs
 8006590:	4620      	movcs	r0, r4
 8006592:	bd10      	pop	{r4, pc}
      return sendmss;
 8006594:	4620      	mov	r0, r4
 8006596:	bd10      	pop	{r4, pc}
 8006598:	4620      	mov	r0, r4
}
 800659a:	bd10      	pop	{r4, pc}

0800659c <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800659c:	b308      	cbz	r0, 80065e2 <tcp_netif_ip_addr_changed+0x46>
{
 800659e:	b570      	push	{r4, r5, r6, lr}
 80065a0:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 80065a2:	6803      	ldr	r3, [r0, #0]
 80065a4:	b903      	cbnz	r3, 80065a8 <tcp_netif_ip_addr_changed+0xc>
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80065aa:	4b0e      	ldr	r3, [pc, #56]	; (80065e4 <tcp_netif_ip_addr_changed+0x48>)
 80065ac:	6819      	ldr	r1, [r3, #0]
 80065ae:	f7ff ff37 	bl	8006420 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <tcp_netif_ip_addr_changed+0x4c>)
 80065b4:	6819      	ldr	r1, [r3, #0]
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7ff ff32 	bl	8006420 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80065bc:	2e00      	cmp	r6, #0
 80065be:	d0f2      	beq.n	80065a6 <tcp_netif_ip_addr_changed+0xa>
 80065c0:	6833      	ldr	r3, [r6, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0ef      	beq.n	80065a6 <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80065c6:	4b09      	ldr	r3, [pc, #36]	; (80065ec <tcp_netif_ip_addr_changed+0x50>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	e000      	b.n	80065ce <tcp_netif_ip_addr_changed+0x32>
{
 80065cc:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0e9      	beq.n	80065a6 <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 80065d2:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80065d4:	681d      	ldr	r5, [r3, #0]
 80065d6:	6820      	ldr	r0, [r4, #0]
 80065d8:	4285      	cmp	r5, r0
 80065da:	d1f7      	bne.n	80065cc <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80065dc:	6831      	ldr	r1, [r6, #0]
 80065de:	6019      	str	r1, [r3, #0]
 80065e0:	e7f4      	b.n	80065cc <tcp_netif_ip_addr_changed+0x30>
 80065e2:	4770      	bx	lr
 80065e4:	200076d0 	.word	0x200076d0
 80065e8:	200076dc 	.word	0x200076dc
 80065ec:	200076d8 	.word	0x200076d8

080065f0 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80065f0:	4b0e      	ldr	r3, [pc, #56]	; (800662c <tcp_getoptbyte+0x3c>)
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	b189      	cbz	r1, 800661a <tcp_getoptbyte+0x2a>
 80065f6:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <tcp_getoptbyte+0x40>)
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	4a0e      	ldr	r2, [pc, #56]	; (8006634 <tcp_getoptbyte+0x44>)
 80065fc:	8812      	ldrh	r2, [r2, #0]
 80065fe:	4293      	cmp	r3, r2
 8006600:	d30b      	bcc.n	800661a <tcp_getoptbyte+0x2a>
{
 8006602:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8006604:	1c5c      	adds	r4, r3, #1
 8006606:	480a      	ldr	r0, [pc, #40]	; (8006630 <tcp_getoptbyte+0x40>)
 8006608:	8004      	strh	r4, [r0, #0]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8006612:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8006614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006618:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800661a:	4b07      	ldr	r3, [pc, #28]	; (8006638 <tcp_getoptbyte+0x48>)
 800661c:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 800661e:	4904      	ldr	r1, [pc, #16]	; (8006630 <tcp_getoptbyte+0x40>)
 8006620:	880a      	ldrh	r2, [r1, #0]
 8006622:	1c50      	adds	r0, r2, #1
 8006624:	8008      	strh	r0, [r1, #0]
 8006626:	4413      	add	r3, r2
 8006628:	7d18      	ldrb	r0, [r3, #20]
 800662a:	4770      	bx	lr
 800662c:	20003e6c 	.word	0x20003e6c
 8006630:	20003e60 	.word	0x20003e60
 8006634:	20003e68 	.word	0x20003e68
 8006638:	20003e64 	.word	0x20003e64

0800663c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800663c:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800663e:	4b1f      	ldr	r3, [pc, #124]	; (80066bc <tcp_parseopt+0x80>)
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d038      	beq.n	80066b8 <tcp_parseopt+0x7c>
 8006646:	4605      	mov	r5, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8006648:	2200      	movs	r2, #0
 800664a:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <tcp_parseopt+0x84>)
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <tcp_parseopt+0x84>)
 8006650:	881a      	ldrh	r2, [r3, #0]
 8006652:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <tcp_parseopt+0x80>)
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d22e      	bcs.n	80066b8 <tcp_parseopt+0x7c>
      u8_t opt = tcp_getoptbyte();
 800665a:	f7ff ffc9 	bl	80065f0 <tcp_getoptbyte>
      switch (opt) {
 800665e:	2801      	cmp	r0, #1
 8006660:	d0f5      	beq.n	800664e <tcp_parseopt+0x12>
 8006662:	b348      	cbz	r0, 80066b8 <tcp_parseopt+0x7c>
 8006664:	2802      	cmp	r0, #2
 8006666:	d11d      	bne.n	80066a4 <tcp_parseopt+0x68>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8006668:	f7ff ffc2 	bl	80065f0 <tcp_getoptbyte>
 800666c:	2804      	cmp	r0, #4
 800666e:	d123      	bne.n	80066b8 <tcp_parseopt+0x7c>
 8006670:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <tcp_parseopt+0x84>)
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	3302      	adds	r3, #2
 8006676:	4a11      	ldr	r2, [pc, #68]	; (80066bc <tcp_parseopt+0x80>)
 8006678:	8812      	ldrh	r2, [r2, #0]
 800667a:	4293      	cmp	r3, r2
 800667c:	dc1c      	bgt.n	80066b8 <tcp_parseopt+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800667e:	f7ff ffb7 	bl	80065f0 <tcp_getoptbyte>
 8006682:	b283      	uxth	r3, r0
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	b29c      	uxth	r4, r3
        mss |= tcp_getoptbyte();
 8006688:	f7ff ffb2 	bl	80065f0 <tcp_getoptbyte>
 800668c:	b280      	uxth	r0, r0
 800668e:	ea44 0300 	orr.w	r3, r4, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8006692:	1e5a      	subs	r2, r3, #1
 8006694:	b292      	uxth	r2, r2
 8006696:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 800669a:	d301      	bcc.n	80066a0 <tcp_parseopt+0x64>
 800669c:	f44f 7306 	mov.w	r3, #536	; 0x218
 80066a0:	866b      	strh	r3, [r5, #50]	; 0x32
        break;
 80066a2:	e7d4      	b.n	800664e <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80066a4:	f7ff ffa4 	bl	80065f0 <tcp_getoptbyte>
        if (data < 2) {
 80066a8:	2801      	cmp	r0, #1
 80066aa:	d905      	bls.n	80066b8 <tcp_parseopt+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80066ac:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <tcp_parseopt+0x84>)
 80066ae:	881a      	ldrh	r2, [r3, #0]
 80066b0:	4410      	add	r0, r2
 80066b2:	3802      	subs	r0, #2
 80066b4:	8018      	strh	r0, [r3, #0]
 80066b6:	e7ca      	b.n	800664e <tcp_parseopt+0x12>
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	bf00      	nop
 80066bc:	20003e70 	.word	0x20003e70
 80066c0:	20003e60 	.word	0x20003e60

080066c4 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 80066c4:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <tcp_input_delayed_close+0x3c>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f013 0f10 	tst.w	r3, #16
 80066cc:	d016      	beq.n	80066fc <tcp_input_delayed_close+0x38>
{
 80066ce:	b510      	push	{r4, lr}
 80066d0:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 80066d2:	7e83      	ldrb	r3, [r0, #26]
 80066d4:	f013 0f10 	tst.w	r3, #16
 80066d8:	d106      	bne.n	80066e8 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80066da:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80066de:	b11b      	cbz	r3, 80066e8 <tcp_input_delayed_close+0x24>
 80066e0:	f06f 010e 	mvn.w	r1, #14
 80066e4:	6900      	ldr	r0, [r0, #16]
 80066e6:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80066e8:	4621      	mov	r1, r4
 80066ea:	4806      	ldr	r0, [pc, #24]	; (8006704 <tcp_input_delayed_close+0x40>)
 80066ec:	f7ff fc36 	bl	8005f5c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80066f0:	4621      	mov	r1, r4
 80066f2:	2001      	movs	r0, #1
 80066f4:	f7fe fc0a 	bl	8004f0c <memp_free>
    return 1;
 80066f8:	2001      	movs	r0, #1
 80066fa:	bd10      	pop	{r4, pc}
  return 0;
 80066fc:	2000      	movs	r0, #0
 80066fe:	4770      	bx	lr
 8006700:	20003e58 	.word	0x20003e58
 8006704:	200076d0 	.word	0x200076d0

08006708 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8006708:	4b1c      	ldr	r3, [pc, #112]	; (800677c <tcp_timewait_input+0x74>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	f013 0f04 	tst.w	r3, #4
 8006710:	d132      	bne.n	8006778 <tcp_timewait_input+0x70>
{
 8006712:	b510      	push	{r4, lr}
 8006714:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 8006716:	f013 0f02 	tst.w	r3, #2
 800671a:	d01c      	beq.n	8006756 <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800671c:	4b18      	ldr	r3, [pc, #96]	; (8006780 <tcp_timewait_input+0x78>)
 800671e:	6819      	ldr	r1, [r3, #0]
 8006720:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006722:	1aca      	subs	r2, r1, r3
 8006724:	2a00      	cmp	r2, #0
 8006726:	db1c      	blt.n	8006762 <tcp_timewait_input+0x5a>
 8006728:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 800672a:	4413      	add	r3, r2
 800672c:	1acb      	subs	r3, r1, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	dc17      	bgt.n	8006762 <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006732:	4b14      	ldr	r3, [pc, #80]	; (8006784 <tcp_timewait_input+0x7c>)
 8006734:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006736:	4a14      	ldr	r2, [pc, #80]	; (8006788 <tcp_timewait_input+0x80>)
 8006738:	4814      	ldr	r0, [pc, #80]	; (800678c <tcp_timewait_input+0x84>)
 800673a:	8800      	ldrh	r0, [r0, #0]
 800673c:	881c      	ldrh	r4, [r3, #0]
 800673e:	9401      	str	r4, [sp, #4]
 8006740:	885b      	ldrh	r3, [r3, #2]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	4613      	mov	r3, r2
 8006746:	3204      	adds	r2, #4
 8006748:	4401      	add	r1, r0
 800674a:	4811      	ldr	r0, [pc, #68]	; (8006790 <tcp_timewait_input+0x88>)
 800674c:	6800      	ldr	r0, [r0, #0]
 800674e:	f001 fec7 	bl	80084e0 <tcp_rst>
}
 8006752:	b002      	add	sp, #8
 8006754:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 8006756:	f013 0f01 	tst.w	r3, #1
 800675a:	d002      	beq.n	8006762 <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 800675c:	4b0d      	ldr	r3, [pc, #52]	; (8006794 <tcp_timewait_input+0x8c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <tcp_timewait_input+0x84>)
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f3      	beq.n	8006752 <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 800676a:	7e83      	ldrb	r3, [r0, #26]
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 8006772:	f001 fd59 	bl	8008228 <tcp_output>
 8006776:	e7ec      	b.n	8006752 <tcp_timewait_input+0x4a>
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20003e3c 	.word	0x20003e3c
 8006780:	20003e5c 	.word	0x20003e5c
 8006784:	20003e64 	.word	0x20003e64
 8006788:	20003fb0 	.word	0x20003fb0
 800678c:	20003e72 	.word	0x20003e72
 8006790:	20003e38 	.word	0x20003e38
 8006794:	200076d4 	.word	0x200076d4

08006798 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8006798:	4b3c      	ldr	r3, [pc, #240]	; (800688c <tcp_listen_input+0xf4>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f013 0f04 	tst.w	r3, #4
 80067a0:	d173      	bne.n	800688a <tcp_listen_input+0xf2>
{
 80067a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067a4:	b083      	sub	sp, #12
 80067a6:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 80067a8:	f013 0f10 	tst.w	r3, #16
 80067ac:	d104      	bne.n	80067b8 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 80067ae:	f013 0f02 	tst.w	r3, #2
 80067b2:	d114      	bne.n	80067de <tcp_listen_input+0x46>
}
 80067b4:	b003      	add	sp, #12
 80067b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80067b8:	4b35      	ldr	r3, [pc, #212]	; (8006890 <tcp_listen_input+0xf8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80067bc:	4a35      	ldr	r2, [pc, #212]	; (8006894 <tcp_listen_input+0xfc>)
 80067be:	4936      	ldr	r1, [pc, #216]	; (8006898 <tcp_listen_input+0x100>)
 80067c0:	880c      	ldrh	r4, [r1, #0]
 80067c2:	4936      	ldr	r1, [pc, #216]	; (800689c <tcp_listen_input+0x104>)
 80067c4:	6809      	ldr	r1, [r1, #0]
 80067c6:	4836      	ldr	r0, [pc, #216]	; (80068a0 <tcp_listen_input+0x108>)
 80067c8:	6800      	ldr	r0, [r0, #0]
 80067ca:	881d      	ldrh	r5, [r3, #0]
 80067cc:	9501      	str	r5, [sp, #4]
 80067ce:	885b      	ldrh	r3, [r3, #2]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	4613      	mov	r3, r2
 80067d4:	3204      	adds	r2, #4
 80067d6:	4421      	add	r1, r4
 80067d8:	f001 fe82 	bl	80084e0 <tcp_rst>
 80067dc:	e7ea      	b.n	80067b4 <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 80067de:	7d40      	ldrb	r0, [r0, #21]
 80067e0:	f7ff fe5e 	bl	80064a0 <tcp_alloc>
    if (npcb == NULL) {
 80067e4:	4604      	mov	r4, r0
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d041      	beq.n	800686e <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80067ea:	4b2e      	ldr	r3, [pc, #184]	; (80068a4 <tcp_listen_input+0x10c>)
 80067ec:	695a      	ldr	r2, [r3, #20]
 80067ee:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80067f4:	8aeb      	ldrh	r3, [r5, #22]
 80067f6:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80067f8:	4e25      	ldr	r6, [pc, #148]	; (8006890 <tcp_listen_input+0xf8>)
 80067fa:	6833      	ldr	r3, [r6, #0]
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8006800:	2303      	movs	r3, #3
 8006802:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8006804:	4f25      	ldr	r7, [pc, #148]	; (800689c <tcp_listen_input+0x104>)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	3301      	adds	r3, #1
 800680a:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800680c:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800680e:	f7ff fea7 	bl	8006560 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8006812:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 8006814:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8006816:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006818:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8006820:	692b      	ldr	r3, [r5, #16]
 8006822:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8006824:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006826:	7a2b      	ldrb	r3, [r5, #8]
 8006828:	f003 030c 	and.w	r3, r3, #12
 800682c:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800682e:	4b1e      	ldr	r3, [pc, #120]	; (80068a8 <tcp_listen_input+0x110>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	60e2      	str	r2, [r4, #12]
 8006834:	601c      	str	r4, [r3, #0]
 8006836:	f002 f863 	bl	8008900 <tcp_timer_needed>
 800683a:	2201      	movs	r2, #1
 800683c:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <tcp_listen_input+0x114>)
 800683e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006840:	4620      	mov	r0, r4
 8006842:	f7ff fefb 	bl	800663c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8006846:	6833      	ldr	r3, [r6, #0]
 8006848:	89db      	ldrh	r3, [r3, #14]
 800684a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800684e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006852:	1d21      	adds	r1, r4, #4
 8006854:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8006856:	f7ff fe8f 	bl	8006578 <tcp_eff_send_mss_impl>
 800685a:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800685c:	2112      	movs	r1, #18
 800685e:	4620      	mov	r0, r4
 8006860:	f001 fbd2 	bl	8008008 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8006864:	b960      	cbnz	r0, 8006880 <tcp_listen_input+0xe8>
    tcp_output(npcb);
 8006866:	4620      	mov	r0, r4
 8006868:	f001 fcde 	bl	8008228 <tcp_output>
 800686c:	e7a2      	b.n	80067b4 <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800686e:	69ab      	ldr	r3, [r5, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d09f      	beq.n	80067b4 <tcp_listen_input+0x1c>
 8006874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006878:	2100      	movs	r1, #0
 800687a:	6928      	ldr	r0, [r5, #16]
 800687c:	4798      	blx	r3
 800687e:	e799      	b.n	80067b4 <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 8006880:	2100      	movs	r1, #0
 8006882:	4620      	mov	r0, r4
 8006884:	f7ff fd0e 	bl	80062a4 <tcp_abandon>
      return;
 8006888:	e794      	b.n	80067b4 <tcp_listen_input+0x1c>
 800688a:	4770      	bx	lr
 800688c:	20003e3c 	.word	0x20003e3c
 8006890:	20003e64 	.word	0x20003e64
 8006894:	20003fb0 	.word	0x20003fb0
 8006898:	20003e72 	.word	0x20003e72
 800689c:	20003e5c 	.word	0x20003e5c
 80068a0:	20003e38 	.word	0x20003e38
 80068a4:	20003fa0 	.word	0x20003fa0
 80068a8:	200076d0 	.word	0x200076d0
 80068ac:	200076cc 	.word	0x200076cc

080068b0 <tcp_oos_insert_segment>:
{
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	4605      	mov	r5, r0
 80068b4:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80068b6:	68c3      	ldr	r3, [r0, #12]
 80068b8:	8998      	ldrh	r0, [r3, #12]
 80068ba:	f7fe f83f 	bl	800493c <lwip_htons>
 80068be:	f010 0f01 	tst.w	r0, #1
 80068c2:	d009      	beq.n	80068d8 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 80068c4:	4620      	mov	r0, r4
 80068c6:	f7ff f904 	bl	8005ad2 <tcp_segs_free>
    next = NULL;
 80068ca:	2400      	movs	r4, #0
 80068cc:	e02e      	b.n	800692c <tcp_oos_insert_segment+0x7c>
      next = next->next;
 80068ce:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff f8f1 	bl	8005ab8 <tcp_seg_free>
      next = next->next;
 80068d6:	4634      	mov	r4, r6
    while (next &&
 80068d8:	b1c4      	cbz	r4, 800690c <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80068da:	892b      	ldrh	r3, [r5, #8]
 80068dc:	4a14      	ldr	r2, [pc, #80]	; (8006930 <tcp_oos_insert_segment+0x80>)
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	4413      	add	r3, r2
 80068e2:	68e1      	ldr	r1, [r4, #12]
 80068e4:	684a      	ldr	r2, [r1, #4]
 80068e6:	8920      	ldrh	r0, [r4, #8]
 80068e8:	4402      	add	r2, r0
 80068ea:	1a9b      	subs	r3, r3, r2
    while (next &&
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	db0d      	blt.n	800690c <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80068f0:	8988      	ldrh	r0, [r1, #12]
 80068f2:	f7fe f823 	bl	800493c <lwip_htons>
 80068f6:	f010 0f01 	tst.w	r0, #1
 80068fa:	d0e8      	beq.n	80068ce <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80068fc:	68ef      	ldr	r7, [r5, #12]
 80068fe:	89be      	ldrh	r6, [r7, #12]
 8006900:	2001      	movs	r0, #1
 8006902:	f7fe f81b 	bl	800493c <lwip_htons>
 8006906:	4330      	orrs	r0, r6
 8006908:	81b8      	strh	r0, [r7, #12]
 800690a:	e7e0      	b.n	80068ce <tcp_oos_insert_segment+0x1e>
    if (next &&
 800690c:	b174      	cbz	r4, 800692c <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800690e:	892b      	ldrh	r3, [r5, #8]
 8006910:	4a07      	ldr	r2, [pc, #28]	; (8006930 <tcp_oos_insert_segment+0x80>)
 8006912:	6811      	ldr	r1, [r2, #0]
 8006914:	440b      	add	r3, r1
 8006916:	68e2      	ldr	r2, [r4, #12]
 8006918:	6852      	ldr	r2, [r2, #4]
 800691a:	1a9b      	subs	r3, r3, r2
    if (next &&
 800691c:	2b00      	cmp	r3, #0
 800691e:	dd05      	ble.n	800692c <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006920:	1a52      	subs	r2, r2, r1
 8006922:	b291      	uxth	r1, r2
 8006924:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8006926:	6868      	ldr	r0, [r5, #4]
 8006928:	f7fe fe18 	bl	800555c <pbuf_realloc>
  cseg->next = next;
 800692c:	602c      	str	r4, [r5, #0]
 800692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006930:	20003e5c 	.word	0x20003e5c

08006934 <tcp_receive>:
{
 8006934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800693a:	7d03      	ldrb	r3, [r0, #20]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d979      	bls.n	8006a34 <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 8006940:	4bae      	ldr	r3, [pc, #696]	; (8006bfc <tcp_receive+0x2c8>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f013 0f10 	tst.w	r3, #16
 8006948:	f000 81aa 	beq.w	8006ca0 <tcp_receive+0x36c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800694c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8006950:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006952:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006954:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006956:	4baa      	ldr	r3, [pc, #680]	; (8006c00 <tcp_receive+0x2cc>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	1acd      	subs	r5, r1, r3
 800695c:	2d00      	cmp	r5, #0
 800695e:	db7c      	blt.n	8006a5a <tcp_receive+0x126>
 8006960:	4299      	cmp	r1, r3
 8006962:	d06f      	beq.n	8006a44 <tcp_receive+0x110>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006964:	49a7      	ldr	r1, [pc, #668]	; (8006c04 <tcp_receive+0x2d0>)
 8006966:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006968:	428a      	cmp	r2, r1
 800696a:	d071      	beq.n	8006a50 <tcp_receive+0x11c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800696c:	4ba5      	ldr	r3, [pc, #660]	; (8006c04 <tcp_receive+0x2d0>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006972:	1a5a      	subs	r2, r3, r1
 8006974:	2a00      	cmp	r2, #0
 8006976:	f340 8095 	ble.w	8006aa4 <tcp_receive+0x170>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800697a:	2a01      	cmp	r2, #1
 800697c:	d404      	bmi.n	8006988 <tcp_receive+0x54>
 800697e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006980:	1a9a      	subs	r2, r3, r2
 8006982:	2a00      	cmp	r2, #0
 8006984:	f340 80cc 	ble.w	8006b20 <tcp_receive+0x1ec>
      tcp_send_empty_ack(pcb);
 8006988:	4620      	mov	r0, r4
 800698a:	f001 fc13 	bl	80081b4 <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 800698e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8176 	beq.w	8006c82 <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006996:	4a9b      	ldr	r2, [pc, #620]	; (8006c04 <tcp_receive+0x2d0>)
 8006998:	6815      	ldr	r5, [r2, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	6858      	ldr	r0, [r3, #4]
 800699e:	f7fd ffd0 	bl	8004942 <lwip_htonl>
 80069a2:	4606      	mov	r6, r0
 80069a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80069a6:	891f      	ldrh	r7, [r3, #8]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	8998      	ldrh	r0, [r3, #12]
 80069ac:	f7fd ffc6 	bl	800493c <lwip_htons>
 80069b0:	f010 0f03 	tst.w	r0, #3
 80069b4:	f000 8163 	beq.w	8006c7e <tcp_receive+0x34a>
 80069b8:	2301      	movs	r3, #1
 80069ba:	443b      	add	r3, r7
 80069bc:	441e      	add	r6, r3
 80069be:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	f2c0 815e 	blt.w	8006c82 <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80069c6:	4b8f      	ldr	r3, [pc, #572]	; (8006c04 <tcp_receive+0x2d0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f300 8157 	bgt.w	8006c82 <tcp_receive+0x34e>
      next = pcb->unsent;
 80069d4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 80069d6:	682b      	ldr	r3, [r5, #0]
 80069d8:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8144 	beq.w	8006c68 <tcp_receive+0x334>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80069e0:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 80069e4:	6868      	ldr	r0, [r5, #4]
 80069e6:	f7fe fe2b 	bl	8005640 <pbuf_clen>
 80069ea:	4286      	cmp	r6, r0
 80069ec:	f0c0 813f 	bcc.w	8006c6e <tcp_receive+0x33a>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80069f0:	6868      	ldr	r0, [r5, #4]
 80069f2:	f7fe fe25 	bl	8005640 <pbuf_clen>
 80069f6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80069fa:	1a18      	subs	r0, r3, r0
 80069fc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8006a00:	892b      	ldrh	r3, [r5, #8]
 8006a02:	4a81      	ldr	r2, [pc, #516]	; (8006c08 <tcp_receive+0x2d4>)
 8006a04:	8811      	ldrh	r1, [r2, #0]
 8006a06:	440b      	add	r3, r1
 8006a08:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f7ff f854 	bl	8005ab8 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 8006a10:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0ba      	beq.n	800698e <tcp_receive+0x5a>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8006a18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1b7      	bne.n	800698e <tcp_receive+0x5a>
 8006a1e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1b4      	bne.n	800698e <tcp_receive+0x5a>
 8006a24:	4b79      	ldr	r3, [pc, #484]	; (8006c0c <tcp_receive+0x2d8>)
 8006a26:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8006a2a:	4979      	ldr	r1, [pc, #484]	; (8006c10 <tcp_receive+0x2dc>)
 8006a2c:	4879      	ldr	r0, [pc, #484]	; (8006c14 <tcp_receive+0x2e0>)
 8006a2e:	f006 f885 	bl	800cb3c <iprintf>
 8006a32:	e7ac      	b.n	800698e <tcp_receive+0x5a>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006a34:	4b75      	ldr	r3, [pc, #468]	; (8006c0c <tcp_receive+0x2d8>)
 8006a36:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8006a3a:	4977      	ldr	r1, [pc, #476]	; (8006c18 <tcp_receive+0x2e4>)
 8006a3c:	4875      	ldr	r0, [pc, #468]	; (8006c14 <tcp_receive+0x2e0>)
 8006a3e:	f006 f87d 	bl	800cb3c <iprintf>
 8006a42:	e77d      	b.n	8006940 <tcp_receive+0xc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006a44:	496f      	ldr	r1, [pc, #444]	; (8006c04 <tcp_receive+0x2d0>)
 8006a46:	6809      	ldr	r1, [r1, #0]
 8006a48:	1a51      	subs	r1, r2, r1
 8006a4a:	2900      	cmp	r1, #0
 8006a4c:	da8a      	bge.n	8006964 <tcp_receive+0x30>
 8006a4e:	e004      	b.n	8006a5a <tcp_receive+0x126>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006a50:	4a72      	ldr	r2, [pc, #456]	; (8006c1c <tcp_receive+0x2e8>)
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	89d2      	ldrh	r2, [r2, #14]
 8006a56:	4290      	cmp	r0, r2
 8006a58:	d288      	bcs.n	800696c <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006a5a:	4a70      	ldr	r2, [pc, #448]	; (8006c1c <tcp_receive+0x2e8>)
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	89d2      	ldrh	r2, [r2, #14]
 8006a60:	b291      	uxth	r1, r2
 8006a62:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006a66:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 8006a6a:	4281      	cmp	r1, r0
 8006a6c:	d901      	bls.n	8006a72 <tcp_receive+0x13e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006a6e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 8006a72:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8006a74:	4b63      	ldr	r3, [pc, #396]	; (8006c04 <tcp_receive+0x2d0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8006a7a:	b951      	cbnz	r1, 8006a92 <tcp_receive+0x15e>
        if (pcb->persist_backoff == 0) {
 8006a7c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f47f af73 	bne.w	800696c <tcp_receive+0x38>
          pcb->persist_cnt = 0;
 8006a86:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8006a90:	e76c      	b.n	800696c <tcp_receive+0x38>
      } else if (pcb->persist_backoff > 0) {
 8006a92:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f43f af68 	beq.w	800696c <tcp_receive+0x38>
          pcb->persist_backoff = 0;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8006aa2:	e763      	b.n	800696c <tcp_receive+0x38>
      if (tcplen == 0) {
 8006aa4:	4a5e      	ldr	r2, [pc, #376]	; (8006c20 <tcp_receive+0x2ec>)
 8006aa6:	8812      	ldrh	r2, [r2, #0]
 8006aa8:	bb7a      	cbnz	r2, 8006b0a <tcp_receive+0x1d6>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006aaa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006aac:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8006ab0:	4402      	add	r2, r0
 8006ab2:	4296      	cmp	r6, r2
 8006ab4:	d001      	beq.n	8006aba <tcp_receive+0x186>
  int found_dupack = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e028      	b.n	8006b0c <tcp_receive+0x1d8>
          if (pcb->rtime >= 0) {
 8006aba:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	db2a      	blt.n	8006b18 <tcp_receive+0x1e4>
            if (pcb->lastack == ackno) {
 8006ac2:	428b      	cmp	r3, r1
 8006ac4:	d001      	beq.n	8006aca <tcp_receive+0x196>
  int found_dupack = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e020      	b.n	8006b0c <tcp_receive+0x1d8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8006aca:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ace:	1c53      	adds	r3, r2, #1
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d201      	bcs.n	8006ada <tcp_receive+0x1a6>
                ++pcb->dupacks;
 8006ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8006ada:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d90a      	bls.n	8006af8 <tcp_receive+0x1c4>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8006ae2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006ae6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006ae8:	4413      	add	r3, r2
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d215      	bcs.n	8006b1c <tcp_receive+0x1e8>
                  pcb->cwnd += pcb->mss;
 8006af0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
              found_dupack = 1;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e009      	b.n	8006b0c <tcp_receive+0x1d8>
              } else if (pcb->dupacks == 3) {
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d001      	beq.n	8006b00 <tcp_receive+0x1cc>
              found_dupack = 1;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e005      	b.n	8006b0c <tcp_receive+0x1d8>
                tcp_rexmit_fast(pcb);
 8006b00:	4620      	mov	r0, r4
 8006b02:	f001 fd88 	bl	8008616 <tcp_rexmit_fast>
              found_dupack = 1;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <tcp_receive+0x1d8>
  int found_dupack = 0;
 8006b0a:	2300      	movs	r3, #0
      if (!found_dupack) {
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f47f af3e 	bne.w	800698e <tcp_receive+0x5a>
        pcb->dupacks = 0;
 8006b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b16:	e73a      	b.n	800698e <tcp_receive+0x5a>
  int found_dupack = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e7f7      	b.n	8006b0c <tcp_receive+0x1d8>
              found_dupack = 1;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e7f5      	b.n	8006b0c <tcp_receive+0x1d8>
      if (pcb->flags & TF_INFR) {
 8006b20:	7ea2      	ldrb	r2, [r4, #26]
 8006b22:	f012 0f04 	tst.w	r2, #4
 8006b26:	d006      	beq.n	8006b36 <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 8006b28:	f022 0204 	bic.w	r2, r2, #4
 8006b2c:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8006b2e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8006b32:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 8006b36:	2100      	movs	r1, #0
 8006b38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006b3c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8006b40:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006b42:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8006b46:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8006b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8006b4e:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8006b50:	7d23      	ldrb	r3, [r4, #20]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d90c      	bls.n	8006b70 <tcp_receive+0x23c>
        if (pcb->cwnd < pcb->ssthresh) {
 8006b56:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006b5a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d260      	bcs.n	8006c24 <tcp_receive+0x2f0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8006b62:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006b64:	4413      	add	r3, r2
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d201      	bcs.n	8006b70 <tcp_receive+0x23c>
            pcb->cwnd += pcb->mss;
 8006b6c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 8006b70:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d06d      	beq.n	8006c52 <tcp_receive+0x31e>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	6858      	ldr	r0, [r3, #4]
 8006b7a:	f7fd fee2 	bl	8004942 <lwip_htonl>
 8006b7e:	4605      	mov	r5, r0
 8006b80:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006b82:	891e      	ldrh	r6, [r3, #8]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	8998      	ldrh	r0, [r3, #12]
 8006b88:	f7fd fed8 	bl	800493c <lwip_htons>
 8006b8c:	f010 0f03 	tst.w	r0, #3
 8006b90:	d05d      	beq.n	8006c4e <tcp_receive+0x31a>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4433      	add	r3, r6
 8006b96:	441d      	add	r5, r3
 8006b98:	4b1a      	ldr	r3, [pc, #104]	; (8006c04 <tcp_receive+0x2d0>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 8006b9e:	2d00      	cmp	r5, #0
 8006ba0:	dc57      	bgt.n	8006c52 <tcp_receive+0x31e>
        next = pcb->unacked;
 8006ba2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006ba8:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8006bac:	6868      	ldr	r0, [r5, #4]
 8006bae:	f7fe fd47 	bl	8005640 <pbuf_clen>
 8006bb2:	4286      	cmp	r6, r0
 8006bb4:	d343      	bcc.n	8006c3e <tcp_receive+0x30a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8006bb6:	6868      	ldr	r0, [r5, #4]
 8006bb8:	f7fe fd42 	bl	8005640 <pbuf_clen>
 8006bbc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006bc0:	1a18      	subs	r0, r3, r0
 8006bc2:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8006bc6:	892b      	ldrh	r3, [r5, #8]
 8006bc8:	4a0f      	ldr	r2, [pc, #60]	; (8006c08 <tcp_receive+0x2d4>)
 8006bca:	8811      	ldrh	r1, [r2, #0]
 8006bcc:	440b      	add	r3, r1
 8006bce:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f7fe ff71 	bl	8005ab8 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8006bd6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0c8      	beq.n	8006b70 <tcp_receive+0x23c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8006bde:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1c5      	bne.n	8006b70 <tcp_receive+0x23c>
 8006be4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1c2      	bne.n	8006b70 <tcp_receive+0x23c>
 8006bea:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <tcp_receive+0x2d8>)
 8006bec:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8006bf0:	4907      	ldr	r1, [pc, #28]	; (8006c10 <tcp_receive+0x2dc>)
 8006bf2:	4808      	ldr	r0, [pc, #32]	; (8006c14 <tcp_receive+0x2e0>)
 8006bf4:	f005 ffa2 	bl	800cb3c <iprintf>
 8006bf8:	e7ba      	b.n	8006b70 <tcp_receive+0x23c>
 8006bfa:	bf00      	nop
 8006bfc:	20003e3c 	.word	0x20003e3c
 8006c00:	20003e5c 	.word	0x20003e5c
 8006c04:	20003e38 	.word	0x20003e38
 8006c08:	20003e50 	.word	0x20003e50
 8006c0c:	0800eab0 	.word	0x0800eab0
 8006c10:	0800eb28 	.word	0x0800eb28
 8006c14:	0800de6c 	.word	0x0800de6c
 8006c18:	0800eae4 	.word	0x0800eae4
 8006c1c:	20003e64 	.word	0x20003e64
 8006c20:	20003e72 	.word	0x20003e72
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8006c24:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006c26:	fb03 f303 	mul.w	r3, r3, r3
 8006c2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c2e:	fa12 f383 	uxtah	r3, r2, r3
 8006c32:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d29b      	bcs.n	8006b70 <tcp_receive+0x23c>
            pcb->cwnd = new_cwnd;
 8006c38:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8006c3c:	e798      	b.n	8006b70 <tcp_receive+0x23c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006c3e:	4ba2      	ldr	r3, [pc, #648]	; (8006ec8 <tcp_receive+0x594>)
 8006c40:	f240 429e 	movw	r2, #1182	; 0x49e
 8006c44:	49a1      	ldr	r1, [pc, #644]	; (8006ecc <tcp_receive+0x598>)
 8006c46:	48a2      	ldr	r0, [pc, #648]	; (8006ed0 <tcp_receive+0x59c>)
 8006c48:	f005 ff78 	bl	800cb3c <iprintf>
 8006c4c:	e7b3      	b.n	8006bb6 <tcp_receive+0x282>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e7a0      	b.n	8006b94 <tcp_receive+0x260>
      if (pcb->unacked == NULL) {
 8006c52:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006c54:	b123      	cbz	r3, 8006c60 <tcp_receive+0x32c>
        pcb->rtime = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	76e3      	strb	r3, [r4, #27]
 8006c5e:	e696      	b.n	800698e <tcp_receive+0x5a>
        pcb->rtime = -1;
 8006c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c64:	8623      	strh	r3, [r4, #48]	; 0x30
 8006c66:	e7f8      	b.n	8006c5a <tcp_receive+0x326>
        pcb->unsent_oversize = 0;
 8006c68:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8006c6c:	e6b8      	b.n	80069e0 <tcp_receive+0xac>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006c6e:	4b96      	ldr	r3, [pc, #600]	; (8006ec8 <tcp_receive+0x594>)
 8006c70:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006c74:	4995      	ldr	r1, [pc, #596]	; (8006ecc <tcp_receive+0x598>)
 8006c76:	4896      	ldr	r0, [pc, #600]	; (8006ed0 <tcp_receive+0x59c>)
 8006c78:	f005 ff60 	bl	800cb3c <iprintf>
 8006c7c:	e6b8      	b.n	80069f0 <tcp_receive+0xbc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e69b      	b.n	80069ba <tcp_receive+0x86>
    pcb->snd_buf += recv_acked;
 8006c82:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8006c86:	4a93      	ldr	r2, [pc, #588]	; (8006ed4 <tcp_receive+0x5a0>)
 8006c88:	8812      	ldrh	r2, [r2, #0]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c92:	b12b      	cbz	r3, 8006ca0 <tcp_receive+0x36c>
 8006c94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006c96:	4990      	ldr	r1, [pc, #576]	; (8006ed8 <tcp_receive+0x5a4>)
 8006c98:	6809      	ldr	r1, [r1, #0]
 8006c9a:	1a52      	subs	r2, r2, r1
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	db29      	blt.n	8006cf4 <tcp_receive+0x3c0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8006ca0:	4b8e      	ldr	r3, [pc, #568]	; (8006edc <tcp_receive+0x5a8>)
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 834b 	beq.w	8007340 <tcp_receive+0xa0c>
 8006caa:	7d22      	ldrb	r2, [r4, #20]
 8006cac:	2a06      	cmp	r2, #6
 8006cae:	f200 8347 	bhi.w	8007340 <tcp_receive+0xa0c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006cb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006cb4:	4a8a      	ldr	r2, [pc, #552]	; (8006ee0 <tcp_receive+0x5ac>)
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	1a8e      	subs	r6, r1, r2
 8006cba:	2e01      	cmp	r6, #1
 8006cbc:	d404      	bmi.n	8006cc8 <tcp_receive+0x394>
 8006cbe:	4413      	add	r3, r2
 8006cc0:	1acb      	subs	r3, r1, r3
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dd36      	ble.n	8006d36 <tcp_receive+0x402>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8006cc8:	1a52      	subs	r2, r2, r1
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	f2c0 8093 	blt.w	8006df6 <tcp_receive+0x4c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006cd0:	4b83      	ldr	r3, [pc, #524]	; (8006ee0 <tcp_receive+0x5ac>)
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006cd6:	1a8b      	subs	r3, r1, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	db06      	blt.n	8006cea <tcp_receive+0x3b6>
 8006cdc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006cde:	4413      	add	r3, r2
 8006ce0:	1acb      	subs	r3, r1, r3
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f340 808b 	ble.w	8006e00 <tcp_receive+0x4cc>
      tcp_send_empty_ack(pcb);
 8006cea:	4620      	mov	r0, r4
 8006cec:	f001 fa62 	bl	80081b4 <tcp_send_empty_ack>
 8006cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8006cf4:	4a7b      	ldr	r2, [pc, #492]	; (8006ee4 <tcp_receive+0x5b0>)
 8006cf6:	6812      	ldr	r2, [r2, #0]
 8006cf8:	1ad2      	subs	r2, r2, r3
 8006cfa:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 8006cfc:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8006d00:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 8006d04:	b292      	uxth	r2, r2
 8006d06:	b213      	sxth	r3, r2
      pcb->sa += m;
 8006d08:	4411      	add	r1, r2
 8006d0a:	b209      	sxth	r1, r1
 8006d0c:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	db0e      	blt.n	8006d30 <tcp_receive+0x3fc>
      m = m - (pcb->sv >> 2);
 8006d12:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 8006d16:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 8006d1a:	fa12 f383 	uxtah	r3, r2, r3
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006d22:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8006d26:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d2e:	e7b7      	b.n	8006ca0 <tcp_receive+0x36c>
        m = -m;
 8006d30:	4253      	negs	r3, r2
 8006d32:	b21b      	sxth	r3, r3
 8006d34:	e7ed      	b.n	8006d12 <tcp_receive+0x3de>
      struct pbuf *p = inseg.p;
 8006d36:	4b6c      	ldr	r3, [pc, #432]	; (8006ee8 <tcp_receive+0x5b4>)
 8006d38:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 8006d3a:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8006d3c:	b195      	cbz	r5, 8006d64 <tcp_receive+0x430>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8006d3e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8006d42:	429e      	cmp	r6, r3
 8006d44:	dc16      	bgt.n	8006d74 <tcp_receive+0x440>
      if (inseg.p->len < off) {
 8006d46:	4b68      	ldr	r3, [pc, #416]	; (8006ee8 <tcp_receive+0x5b4>)
 8006d48:	6858      	ldr	r0, [r3, #4]
 8006d4a:	8943      	ldrh	r3, [r0, #10]
 8006d4c:	429e      	cmp	r6, r3
 8006d4e:	dd44      	ble.n	8006dda <tcp_receive+0x4a6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8006d50:	8903      	ldrh	r3, [r0, #8]
 8006d52:	429e      	cmp	r6, r3
 8006d54:	dc16      	bgt.n	8006d84 <tcp_receive+0x450>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8006d56:	4b64      	ldr	r3, [pc, #400]	; (8006ee8 <tcp_receive+0x5b4>)
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	891a      	ldrh	r2, [r3, #8]
 8006d5c:	b2b6      	uxth	r6, r6
 8006d5e:	1b92      	subs	r2, r2, r6
 8006d60:	b292      	uxth	r2, r2
        while (p->len < off) {
 8006d62:	e01c      	b.n	8006d9e <tcp_receive+0x46a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8006d64:	4b58      	ldr	r3, [pc, #352]	; (8006ec8 <tcp_receive+0x594>)
 8006d66:	f240 523c 	movw	r2, #1340	; 0x53c
 8006d6a:	4960      	ldr	r1, [pc, #384]	; (8006eec <tcp_receive+0x5b8>)
 8006d6c:	4858      	ldr	r0, [pc, #352]	; (8006ed0 <tcp_receive+0x59c>)
 8006d6e:	f005 fee5 	bl	800cb3c <iprintf>
 8006d72:	e7e4      	b.n	8006d3e <tcp_receive+0x40a>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8006d74:	4b54      	ldr	r3, [pc, #336]	; (8006ec8 <tcp_receive+0x594>)
 8006d76:	f240 523d 	movw	r2, #1341	; 0x53d
 8006d7a:	495d      	ldr	r1, [pc, #372]	; (8006ef0 <tcp_receive+0x5bc>)
 8006d7c:	4854      	ldr	r0, [pc, #336]	; (8006ed0 <tcp_receive+0x59c>)
 8006d7e:	f005 fedd 	bl	800cb3c <iprintf>
 8006d82:	e7e0      	b.n	8006d46 <tcp_receive+0x412>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8006d84:	4b50      	ldr	r3, [pc, #320]	; (8006ec8 <tcp_receive+0x594>)
 8006d86:	f240 523f 	movw	r2, #1343	; 0x53f
 8006d8a:	495a      	ldr	r1, [pc, #360]	; (8006ef4 <tcp_receive+0x5c0>)
 8006d8c:	4850      	ldr	r0, [pc, #320]	; (8006ed0 <tcp_receive+0x59c>)
 8006d8e:	f005 fed5 	bl	800cb3c <iprintf>
 8006d92:	e7e0      	b.n	8006d56 <tcp_receive+0x422>
          off -= p->len;
 8006d94:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 8006d96:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	816b      	strh	r3, [r5, #10]
          p = p->next;
 8006d9c:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 8006d9e:	896b      	ldrh	r3, [r5, #10]
 8006da0:	429f      	cmp	r7, r3
 8006da2:	dcf7      	bgt.n	8006d94 <tcp_receive+0x460>
        if (pbuf_header(p, (s16_t)-off)) {
 8006da4:	4279      	negs	r1, r7
 8006da6:	b209      	sxth	r1, r1
 8006da8:	4628      	mov	r0, r5
 8006daa:	f7fe fa79 	bl	80052a0 <pbuf_header>
 8006dae:	b960      	cbnz	r0, 8006dca <tcp_receive+0x496>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8006db0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006db2:	484b      	ldr	r0, [pc, #300]	; (8006ee0 <tcp_receive+0x5ac>)
 8006db4:	6803      	ldr	r3, [r0, #0]
 8006db6:	1a9b      	subs	r3, r3, r2
 8006db8:	494b      	ldr	r1, [pc, #300]	; (8006ee8 <tcp_receive+0x5b4>)
 8006dba:	890d      	ldrh	r5, [r1, #8]
 8006dbc:	fa15 f383 	uxtah	r3, r5, r3
 8006dc0:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006dc2:	68cb      	ldr	r3, [r1, #12]
 8006dc4:	6002      	str	r2, [r0, #0]
 8006dc6:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006dc8:	e782      	b.n	8006cd0 <tcp_receive+0x39c>
          LWIP_ASSERT("pbuf_header failed", 0);
 8006dca:	4b3f      	ldr	r3, [pc, #252]	; (8006ec8 <tcp_receive+0x594>)
 8006dcc:	f240 524c 	movw	r2, #1356	; 0x54c
 8006dd0:	4949      	ldr	r1, [pc, #292]	; (8006ef8 <tcp_receive+0x5c4>)
 8006dd2:	483f      	ldr	r0, [pc, #252]	; (8006ed0 <tcp_receive+0x59c>)
 8006dd4:	f005 feb2 	bl	800cb3c <iprintf>
 8006dd8:	e7ea      	b.n	8006db0 <tcp_receive+0x47c>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8006dda:	4271      	negs	r1, r6
 8006ddc:	b209      	sxth	r1, r1
 8006dde:	f7fe fa5f 	bl	80052a0 <pbuf_header>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d0e4      	beq.n	8006db0 <tcp_receive+0x47c>
          LWIP_ASSERT("pbuf_header failed", 0);
 8006de6:	4b38      	ldr	r3, [pc, #224]	; (8006ec8 <tcp_receive+0x594>)
 8006de8:	f240 5251 	movw	r2, #1361	; 0x551
 8006dec:	4942      	ldr	r1, [pc, #264]	; (8006ef8 <tcp_receive+0x5c4>)
 8006dee:	4838      	ldr	r0, [pc, #224]	; (8006ed0 <tcp_receive+0x59c>)
 8006df0:	f005 fea4 	bl	800cb3c <iprintf>
 8006df4:	e7dc      	b.n	8006db0 <tcp_receive+0x47c>
        tcp_ack_now(pcb);
 8006df6:	7ea3      	ldrb	r3, [r4, #26]
 8006df8:	f043 0302 	orr.w	r3, r3, #2
 8006dfc:	76a3      	strb	r3, [r4, #26]
 8006dfe:	e767      	b.n	8006cd0 <tcp_receive+0x39c>
      if (pcb->rcv_nxt == seqno) {
 8006e00:	4291      	cmp	r1, r2
 8006e02:	d008      	beq.n	8006e16 <tcp_receive+0x4e2>
        tcp_send_empty_ack(pcb);
 8006e04:	4620      	mov	r0, r4
 8006e06:	f001 f9d5 	bl	80081b4 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8006e0a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	f000 81ad 	beq.w	800716c <tcp_receive+0x838>
 8006e12:	2600      	movs	r6, #0
 8006e14:	e1e4      	b.n	80071e0 <tcp_receive+0x8ac>
        tcplen = TCP_TCPLEN(&inseg);
 8006e16:	4b34      	ldr	r3, [pc, #208]	; (8006ee8 <tcp_receive+0x5b4>)
 8006e18:	891d      	ldrh	r5, [r3, #8]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	8998      	ldrh	r0, [r3, #12]
 8006e1e:	f7fd fd8d 	bl	800493c <lwip_htons>
 8006e22:	f010 0f03 	tst.w	r0, #3
 8006e26:	d015      	beq.n	8006e54 <tcp_receive+0x520>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	442b      	add	r3, r5
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4a2b      	ldr	r2, [pc, #172]	; (8006edc <tcp_receive+0x5a8>)
 8006e30:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 8006e32:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d80f      	bhi.n	8006e58 <tcp_receive+0x524>
        if (pcb->ooseq != NULL) {
 8006e38:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80ed 	beq.w	800701a <tcp_receive+0x6e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006e40:	4b29      	ldr	r3, [pc, #164]	; (8006ee8 <tcp_receive+0x5b4>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	8998      	ldrh	r0, [r3, #12]
 8006e46:	f7fd fd79 	bl	800493c <lwip_htons>
 8006e4a:	f010 0f01 	tst.w	r0, #1
 8006e4e:	d168      	bne.n	8006f22 <tcp_receive+0x5ee>
            next = pcb->ooseq;
 8006e50:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 8006e52:	e077      	b.n	8006f44 <tcp_receive+0x610>
        tcplen = TCP_TCPLEN(&inseg);
 8006e54:	2300      	movs	r3, #0
 8006e56:	e7e8      	b.n	8006e2a <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006e58:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <tcp_receive+0x5b4>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	8998      	ldrh	r0, [r3, #12]
 8006e5e:	f7fd fd6d 	bl	800493c <lwip_htons>
 8006e62:	f010 0f01 	tst.w	r0, #1
 8006e66:	d14b      	bne.n	8006f00 <tcp_receive+0x5cc>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8006e68:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006e6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ee8 <tcp_receive+0x5b4>)
 8006e6c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	8998      	ldrh	r0, [r3, #12]
 8006e72:	f7fd fd63 	bl	800493c <lwip_htons>
 8006e76:	f010 0f02 	tst.w	r0, #2
 8006e7a:	d003      	beq.n	8006e84 <tcp_receive+0x550>
            inseg.len -= 1;
 8006e7c:	4a1a      	ldr	r2, [pc, #104]	; (8006ee8 <tcp_receive+0x5b4>)
 8006e7e:	8913      	ldrh	r3, [r2, #8]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8006e84:	4d18      	ldr	r5, [pc, #96]	; (8006ee8 <tcp_receive+0x5b4>)
 8006e86:	8929      	ldrh	r1, [r5, #8]
 8006e88:	6868      	ldr	r0, [r5, #4]
 8006e8a:	f7fe fb67 	bl	800555c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8006e8e:	892e      	ldrh	r6, [r5, #8]
 8006e90:	68eb      	ldr	r3, [r5, #12]
 8006e92:	8998      	ldrh	r0, [r3, #12]
 8006e94:	f7fd fd52 	bl	800493c <lwip_htons>
 8006e98:	f010 0f03 	tst.w	r0, #3
 8006e9c:	d03f      	beq.n	8006f1e <tcp_receive+0x5ea>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4433      	add	r3, r6
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	4a0d      	ldr	r2, [pc, #52]	; (8006edc <tcp_receive+0x5a8>)
 8006ea6:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006ea8:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <tcp_receive+0x5ac>)
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	4413      	add	r3, r2
 8006eae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006eb0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8006eb2:	440a      	add	r2, r1
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d0bf      	beq.n	8006e38 <tcp_receive+0x504>
 8006eb8:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <tcp_receive+0x594>)
 8006eba:	f240 527f 	movw	r2, #1407	; 0x57f
 8006ebe:	490f      	ldr	r1, [pc, #60]	; (8006efc <tcp_receive+0x5c8>)
 8006ec0:	4803      	ldr	r0, [pc, #12]	; (8006ed0 <tcp_receive+0x59c>)
 8006ec2:	f005 fe3b 	bl	800cb3c <iprintf>
 8006ec6:	e7b7      	b.n	8006e38 <tcp_receive+0x504>
 8006ec8:	0800eab0 	.word	0x0800eab0
 8006ecc:	0800eb00 	.word	0x0800eb00
 8006ed0:	0800de6c 	.word	0x0800de6c
 8006ed4:	20003e50 	.word	0x20003e50
 8006ed8:	20003e38 	.word	0x20003e38
 8006edc:	20003e72 	.word	0x20003e72
 8006ee0:	20003e5c 	.word	0x20003e5c
 8006ee4:	200076d4 	.word	0x200076d4
 8006ee8:	20003e40 	.word	0x20003e40
 8006eec:	0800eb48 	.word	0x0800eb48
 8006ef0:	0800eb58 	.word	0x0800eb58
 8006ef4:	0800eb68 	.word	0x0800eb68
 8006ef8:	0800eb78 	.word	0x0800eb78
 8006efc:	0800eb8c 	.word	0x0800eb8c
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8006f00:	4ba9      	ldr	r3, [pc, #676]	; (80071a8 <tcp_receive+0x874>)
 8006f02:	68de      	ldr	r6, [r3, #12]
 8006f04:	89b0      	ldrh	r0, [r6, #12]
 8006f06:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 8006f0a:	b2ad      	uxth	r5, r5
 8006f0c:	f7fd fd16 	bl	800493c <lwip_htons>
 8006f10:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8006f14:	f7fd fd12 	bl	800493c <lwip_htons>
 8006f18:	4328      	orrs	r0, r5
 8006f1a:	81b0      	strh	r0, [r6, #12]
 8006f1c:	e7a4      	b.n	8006e68 <tcp_receive+0x534>
          tcplen = TCP_TCPLEN(&inseg);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e7be      	b.n	8006ea0 <tcp_receive+0x56c>
            while (pcb->ooseq != NULL) {
 8006f22:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d078      	beq.n	800701a <tcp_receive+0x6e6>
              pcb->ooseq = pcb->ooseq->next;
 8006f28:	6803      	ldr	r3, [r0, #0]
 8006f2a:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8006f2c:	f7fe fdc4 	bl	8005ab8 <tcp_seg_free>
 8006f30:	e7f7      	b.n	8006f22 <tcp_receive+0x5ee>
                tcplen = TCP_TCPLEN(&inseg);
 8006f32:	2300      	movs	r3, #0
 8006f34:	443b      	add	r3, r7
 8006f36:	4a9d      	ldr	r2, [pc, #628]	; (80071ac <tcp_receive+0x878>)
 8006f38:	8013      	strh	r3, [r2, #0]
              next = next->next;
 8006f3a:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f7fe fdbb 	bl	8005ab8 <tcp_seg_free>
              next = next->next;
 8006f42:	4635      	mov	r5, r6
            while (next &&
 8006f44:	b375      	cbz	r5, 8006fa4 <tcp_receive+0x670>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8006f46:	4b99      	ldr	r3, [pc, #612]	; (80071ac <tcp_receive+0x878>)
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	4a99      	ldr	r2, [pc, #612]	; (80071b0 <tcp_receive+0x87c>)
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	4413      	add	r3, r2
 8006f50:	68e9      	ldr	r1, [r5, #12]
 8006f52:	684a      	ldr	r2, [r1, #4]
 8006f54:	8928      	ldrh	r0, [r5, #8]
 8006f56:	4402      	add	r2, r0
 8006f58:	1a9b      	subs	r3, r3, r2
            while (next &&
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	db22      	blt.n	8006fa4 <tcp_receive+0x670>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8006f5e:	8988      	ldrh	r0, [r1, #12]
 8006f60:	f7fd fcec 	bl	800493c <lwip_htons>
 8006f64:	f010 0f01 	tst.w	r0, #1
 8006f68:	d0e7      	beq.n	8006f3a <tcp_receive+0x606>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8006f6a:	4b8f      	ldr	r3, [pc, #572]	; (80071a8 <tcp_receive+0x874>)
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	8998      	ldrh	r0, [r3, #12]
 8006f70:	f7fd fce4 	bl	800493c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8006f74:	f010 0f02 	tst.w	r0, #2
 8006f78:	d1df      	bne.n	8006f3a <tcp_receive+0x606>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8006f7a:	4e8b      	ldr	r6, [pc, #556]	; (80071a8 <tcp_receive+0x874>)
 8006f7c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8006f80:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8006f84:	2001      	movs	r0, #1
 8006f86:	f7fd fcd9 	bl	800493c <lwip_htons>
 8006f8a:	4338      	orrs	r0, r7
 8006f8c:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8006f90:	8937      	ldrh	r7, [r6, #8]
 8006f92:	68f3      	ldr	r3, [r6, #12]
 8006f94:	8998      	ldrh	r0, [r3, #12]
 8006f96:	f7fd fcd1 	bl	800493c <lwip_htons>
 8006f9a:	f010 0f03 	tst.w	r0, #3
 8006f9e:	d0c8      	beq.n	8006f32 <tcp_receive+0x5fe>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e7c7      	b.n	8006f34 <tcp_receive+0x600>
            if (next &&
 8006fa4:	2d00      	cmp	r5, #0
 8006fa6:	d037      	beq.n	8007018 <tcp_receive+0x6e4>
                TCP_SEQ_GT(seqno + tcplen,
 8006fa8:	4b81      	ldr	r3, [pc, #516]	; (80071b0 <tcp_receive+0x87c>)
 8006faa:	6819      	ldr	r1, [r3, #0]
 8006fac:	4b7f      	ldr	r3, [pc, #508]	; (80071ac <tcp_receive+0x878>)
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	440b      	add	r3, r1
 8006fb2:	68ea      	ldr	r2, [r5, #12]
 8006fb4:	6852      	ldr	r2, [r2, #4]
 8006fb6:	1a9b      	subs	r3, r3, r2
            if (next &&
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dd2d      	ble.n	8007018 <tcp_receive+0x6e4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8006fbc:	1a52      	subs	r2, r2, r1
 8006fbe:	4b7a      	ldr	r3, [pc, #488]	; (80071a8 <tcp_receive+0x874>)
 8006fc0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	8998      	ldrh	r0, [r3, #12]
 8006fc6:	f7fd fcb9 	bl	800493c <lwip_htons>
 8006fca:	f010 0f02 	tst.w	r0, #2
 8006fce:	d003      	beq.n	8006fd8 <tcp_receive+0x6a4>
                inseg.len -= 1;
 8006fd0:	4a75      	ldr	r2, [pc, #468]	; (80071a8 <tcp_receive+0x874>)
 8006fd2:	8913      	ldrh	r3, [r2, #8]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8006fd8:	4e73      	ldr	r6, [pc, #460]	; (80071a8 <tcp_receive+0x874>)
 8006fda:	8931      	ldrh	r1, [r6, #8]
 8006fdc:	6870      	ldr	r0, [r6, #4]
 8006fde:	f7fe fabd 	bl	800555c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8006fe2:	8937      	ldrh	r7, [r6, #8]
 8006fe4:	68f3      	ldr	r3, [r6, #12]
 8006fe6:	8998      	ldrh	r0, [r3, #12]
 8006fe8:	f7fd fca8 	bl	800493c <lwip_htons>
 8006fec:	f010 0f03 	tst.w	r0, #3
 8006ff0:	d03b      	beq.n	800706a <tcp_receive+0x736>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	443b      	add	r3, r7
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	4a6c      	ldr	r2, [pc, #432]	; (80071ac <tcp_receive+0x878>)
 8006ffa:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8006ffc:	4a6c      	ldr	r2, [pc, #432]	; (80071b0 <tcp_receive+0x87c>)
 8006ffe:	6812      	ldr	r2, [r2, #0]
 8007000:	4413      	add	r3, r2
 8007002:	68ea      	ldr	r2, [r5, #12]
 8007004:	6852      	ldr	r2, [r2, #4]
 8007006:	4293      	cmp	r3, r2
 8007008:	d006      	beq.n	8007018 <tcp_receive+0x6e4>
 800700a:	4b6a      	ldr	r3, [pc, #424]	; (80071b4 <tcp_receive+0x880>)
 800700c:	f240 52af 	movw	r2, #1455	; 0x5af
 8007010:	4969      	ldr	r1, [pc, #420]	; (80071b8 <tcp_receive+0x884>)
 8007012:	486a      	ldr	r0, [pc, #424]	; (80071bc <tcp_receive+0x888>)
 8007014:	f005 fd92 	bl	800cb3c <iprintf>
            pcb->ooseq = next;
 8007018:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
 800701a:	4b64      	ldr	r3, [pc, #400]	; (80071ac <tcp_receive+0x878>)
 800701c:	881a      	ldrh	r2, [r3, #0]
 800701e:	4b64      	ldr	r3, [pc, #400]	; (80071b0 <tcp_receive+0x87c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4413      	add	r3, r2
 8007024:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8007026:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007028:	429a      	cmp	r2, r3
 800702a:	d820      	bhi.n	800706e <tcp_receive+0x73a>
        pcb->rcv_wnd -= tcplen;
 800702c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800702e:	4a5f      	ldr	r2, [pc, #380]	; (80071ac <tcp_receive+0x878>)
 8007030:	8812      	ldrh	r2, [r2, #0]
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8007036:	4620      	mov	r0, r4
 8007038:	f7fe fccc 	bl	80059d4 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800703c:	4b5a      	ldr	r3, [pc, #360]	; (80071a8 <tcp_receive+0x874>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	891a      	ldrh	r2, [r3, #8]
 8007042:	b122      	cbz	r2, 800704e <tcp_receive+0x71a>
          recv_data = inseg.p;
 8007044:	4a5e      	ldr	r2, [pc, #376]	; (80071c0 <tcp_receive+0x88c>)
 8007046:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8007048:	2200      	movs	r2, #0
 800704a:	4b57      	ldr	r3, [pc, #348]	; (80071a8 <tcp_receive+0x874>)
 800704c:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800704e:	4b56      	ldr	r3, [pc, #344]	; (80071a8 <tcp_receive+0x874>)
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	8998      	ldrh	r0, [r3, #12]
 8007054:	f7fd fc72 	bl	800493c <lwip_htons>
 8007058:	f010 0f01 	tst.w	r0, #1
 800705c:	d035      	beq.n	80070ca <tcp_receive+0x796>
          recv_flags |= TF_GOT_FIN;
 800705e:	4a59      	ldr	r2, [pc, #356]	; (80071c4 <tcp_receive+0x890>)
 8007060:	7813      	ldrb	r3, [r2, #0]
 8007062:	f043 0320 	orr.w	r3, r3, #32
 8007066:	7013      	strb	r3, [r2, #0]
 8007068:	e02f      	b.n	80070ca <tcp_receive+0x796>
              tcplen = TCP_TCPLEN(&inseg);
 800706a:	2300      	movs	r3, #0
 800706c:	e7c2      	b.n	8006ff4 <tcp_receive+0x6c0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800706e:	4b51      	ldr	r3, [pc, #324]	; (80071b4 <tcp_receive+0x880>)
 8007070:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8007074:	4954      	ldr	r1, [pc, #336]	; (80071c8 <tcp_receive+0x894>)
 8007076:	4851      	ldr	r0, [pc, #324]	; (80071bc <tcp_receive+0x888>)
 8007078:	f005 fd60 	bl	800cb3c <iprintf>
 800707c:	e7d6      	b.n	800702c <tcp_receive+0x6f8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800707e:	2300      	movs	r3, #0
 8007080:	e035      	b.n	80070ee <tcp_receive+0x7ba>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007082:	2300      	movs	r3, #0
 8007084:	e041      	b.n	800710a <tcp_receive+0x7d6>
 8007086:	4b4b      	ldr	r3, [pc, #300]	; (80071b4 <tcp_receive+0x880>)
 8007088:	f240 52de 	movw	r2, #1502	; 0x5de
 800708c:	494f      	ldr	r1, [pc, #316]	; (80071cc <tcp_receive+0x898>)
 800708e:	484b      	ldr	r0, [pc, #300]	; (80071bc <tcp_receive+0x888>)
 8007090:	f005 fd54 	bl	800cb3c <iprintf>
 8007094:	e03c      	b.n	8007110 <tcp_receive+0x7dc>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8007096:	2300      	movs	r3, #0
 8007098:	e043      	b.n	8007122 <tcp_receive+0x7ee>
              recv_data = cseg->p;
 800709a:	4b49      	ldr	r3, [pc, #292]	; (80071c0 <tcp_receive+0x88c>)
 800709c:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80070a2:	68eb      	ldr	r3, [r5, #12]
 80070a4:	8998      	ldrh	r0, [r3, #12]
 80070a6:	f7fd fc49 	bl	800493c <lwip_htons>
 80070aa:	f010 0f01 	tst.w	r0, #1
 80070ae:	d007      	beq.n	80070c0 <tcp_receive+0x78c>
            recv_flags |= TF_GOT_FIN;
 80070b0:	4a44      	ldr	r2, [pc, #272]	; (80071c4 <tcp_receive+0x890>)
 80070b2:	7813      	ldrb	r3, [r2, #0]
 80070b4:	f043 0320 	orr.w	r3, r3, #32
 80070b8:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80070ba:	7d23      	ldrb	r3, [r4, #20]
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d042      	beq.n	8007146 <tcp_receive+0x812>
          pcb->ooseq = cseg->next;
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 80070c4:	4628      	mov	r0, r5
 80070c6:	f7fe fcf7 	bl	8005ab8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80070ca:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80070cc:	2d00      	cmp	r5, #0
 80070ce:	d03d      	beq.n	800714c <tcp_receive+0x818>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80070d0:	68ea      	ldr	r2, [r5, #12]
 80070d2:	6853      	ldr	r3, [r2, #4]
 80070d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80070d6:	428b      	cmp	r3, r1
 80070d8:	d138      	bne.n	800714c <tcp_receive+0x818>
          seqno = pcb->ooseq->tcphdr->seqno;
 80070da:	4935      	ldr	r1, [pc, #212]	; (80071b0 <tcp_receive+0x87c>)
 80070dc:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80070de:	892e      	ldrh	r6, [r5, #8]
 80070e0:	8990      	ldrh	r0, [r2, #12]
 80070e2:	f7fd fc2b 	bl	800493c <lwip_htons>
 80070e6:	f010 0f03 	tst.w	r0, #3
 80070ea:	d0c8      	beq.n	800707e <tcp_receive+0x74a>
 80070ec:	2301      	movs	r3, #1
 80070ee:	199a      	adds	r2, r3, r6
 80070f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f2:	4413      	add	r3, r2
 80070f4:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80070f6:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 80070f8:	892f      	ldrh	r7, [r5, #8]
 80070fa:	68eb      	ldr	r3, [r5, #12]
 80070fc:	8998      	ldrh	r0, [r3, #12]
 80070fe:	f7fd fc1d 	bl	800493c <lwip_htons>
 8007102:	f010 0f03 	tst.w	r0, #3
 8007106:	d0bc      	beq.n	8007082 <tcp_receive+0x74e>
 8007108:	2301      	movs	r3, #1
 800710a:	443b      	add	r3, r7
 800710c:	429e      	cmp	r6, r3
 800710e:	d3ba      	bcc.n	8007086 <tcp_receive+0x752>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8007110:	892e      	ldrh	r6, [r5, #8]
 8007112:	68eb      	ldr	r3, [r5, #12]
 8007114:	8998      	ldrh	r0, [r3, #12]
 8007116:	f7fd fc11 	bl	800493c <lwip_htons>
 800711a:	f010 0f03 	tst.w	r0, #3
 800711e:	d0ba      	beq.n	8007096 <tcp_receive+0x762>
 8007120:	2301      	movs	r3, #1
 8007122:	199a      	adds	r2, r3, r6
 8007124:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800712a:	4620      	mov	r0, r4
 800712c:	f7fe fc52 	bl	80059d4 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8007130:	6869      	ldr	r1, [r5, #4]
 8007132:	890b      	ldrh	r3, [r1, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0b4      	beq.n	80070a2 <tcp_receive+0x76e>
            if (recv_data) {
 8007138:	4b21      	ldr	r3, [pc, #132]	; (80071c0 <tcp_receive+0x88c>)
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	2800      	cmp	r0, #0
 800713e:	d0ac      	beq.n	800709a <tcp_receive+0x766>
              pbuf_cat(recv_data, cseg->p);
 8007140:	f7fe faa4 	bl	800568c <pbuf_cat>
 8007144:	e7ab      	b.n	800709e <tcp_receive+0x76a>
              pcb->state = CLOSE_WAIT;
 8007146:	2307      	movs	r3, #7
 8007148:	7523      	strb	r3, [r4, #20]
 800714a:	e7b9      	b.n	80070c0 <tcp_receive+0x78c>
        tcp_ack(pcb);
 800714c:	7ea3      	ldrb	r3, [r4, #26]
 800714e:	f013 0f01 	tst.w	r3, #1
 8007152:	d006      	beq.n	8007162 <tcp_receive+0x82e>
 8007154:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007158:	f043 0302 	orr.w	r3, r3, #2
 800715c:	76a3      	strb	r3, [r4, #26]
 800715e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	76a3      	strb	r3, [r4, #26]
 8007168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 800716c:	480e      	ldr	r0, [pc, #56]	; (80071a8 <tcp_receive+0x874>)
 800716e:	f7fe fcba 	bl	8005ae6 <tcp_seg_copy>
 8007172:	6720      	str	r0, [r4, #112]	; 0x70
 8007174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 8007178:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <tcp_receive+0x874>)
 800717a:	891a      	ldrh	r2, [r3, #8]
 800717c:	892b      	ldrh	r3, [r5, #8]
 800717e:	429a      	cmp	r2, r3
 8007180:	f240 80ee 	bls.w	8007360 <tcp_receive+0xa2c>
                cseg = tcp_seg_copy(&inseg);
 8007184:	4808      	ldr	r0, [pc, #32]	; (80071a8 <tcp_receive+0x874>)
 8007186:	f7fe fcae 	bl	8005ae6 <tcp_seg_copy>
                if (cseg != NULL) {
 800718a:	4603      	mov	r3, r0
 800718c:	2800      	cmp	r0, #0
 800718e:	f000 80e7 	beq.w	8007360 <tcp_receive+0xa2c>
                  if (prev != NULL) {
 8007192:	b136      	cbz	r6, 80071a2 <tcp_receive+0x86e>
                    prev->next = cseg;
 8007194:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 8007196:	4629      	mov	r1, r5
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff fb89 	bl	80068b0 <tcp_oos_insert_segment>
 800719e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 80071a2:	6720      	str	r0, [r4, #112]	; 0x70
 80071a4:	e7f7      	b.n	8007196 <tcp_receive+0x862>
 80071a6:	bf00      	nop
 80071a8:	20003e40 	.word	0x20003e40
 80071ac:	20003e72 	.word	0x20003e72
 80071b0:	20003e5c 	.word	0x20003e5c
 80071b4:	0800eab0 	.word	0x0800eab0
 80071b8:	0800ebc4 	.word	0x0800ebc4
 80071bc:	0800de6c 	.word	0x0800de6c
 80071c0:	20003e54 	.word	0x20003e54
 80071c4:	20003e58 	.word	0x20003e58
 80071c8:	0800ec00 	.word	0x0800ec00
 80071cc:	0800ec20 	.word	0x0800ec20
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80071d0:	1a5a      	subs	r2, r3, r1
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	db35      	blt.n	8007242 <tcp_receive+0x90e>
              if (next->next == NULL &&
 80071d6:	682a      	ldr	r2, [r5, #0]
 80071d8:	462e      	mov	r6, r5
 80071da:	2a00      	cmp	r2, #0
 80071dc:	d03d      	beq.n	800725a <tcp_receive+0x926>
 80071de:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80071e0:	2d00      	cmp	r5, #0
 80071e2:	f000 80ab 	beq.w	800733c <tcp_receive+0xa08>
            if (seqno == next->tcphdr->seqno) {
 80071e6:	68e8      	ldr	r0, [r5, #12]
 80071e8:	6841      	ldr	r1, [r0, #4]
 80071ea:	4b5e      	ldr	r3, [pc, #376]	; (8007364 <tcp_receive+0xa30>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4299      	cmp	r1, r3
 80071f0:	d0c2      	beq.n	8007178 <tcp_receive+0x844>
              if (prev == NULL) {
 80071f2:	2e00      	cmp	r6, #0
 80071f4:	d0ec      	beq.n	80071d0 <tcp_receive+0x89c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80071f6:	68f2      	ldr	r2, [r6, #12]
 80071f8:	6852      	ldr	r2, [r2, #4]
 80071fa:	1a9a      	subs	r2, r3, r2
 80071fc:	2a01      	cmp	r2, #1
 80071fe:	d4ea      	bmi.n	80071d6 <tcp_receive+0x8a2>
 8007200:	1a5a      	subs	r2, r3, r1
 8007202:	3201      	adds	r2, #1
 8007204:	2a00      	cmp	r2, #0
 8007206:	dce6      	bgt.n	80071d6 <tcp_receive+0x8a2>
                  cseg = tcp_seg_copy(&inseg);
 8007208:	4857      	ldr	r0, [pc, #348]	; (8007368 <tcp_receive+0xa34>)
 800720a:	f7fe fc6c 	bl	8005ae6 <tcp_seg_copy>
                  if (cseg != NULL) {
 800720e:	4604      	mov	r4, r0
 8007210:	2800      	cmp	r0, #0
 8007212:	f000 80a5 	beq.w	8007360 <tcp_receive+0xa2c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007216:	68f3      	ldr	r3, [r6, #12]
 8007218:	6859      	ldr	r1, [r3, #4]
 800721a:	8932      	ldrh	r2, [r6, #8]
 800721c:	440a      	add	r2, r1
 800721e:	4b51      	ldr	r3, [pc, #324]	; (8007364 <tcp_receive+0xa30>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	1ad2      	subs	r2, r2, r3
 8007224:	2a00      	cmp	r2, #0
 8007226:	dd05      	ble.n	8007234 <tcp_receive+0x900>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007228:	1a5b      	subs	r3, r3, r1
 800722a:	b299      	uxth	r1, r3
 800722c:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800722e:	6870      	ldr	r0, [r6, #4]
 8007230:	f7fe f994 	bl	800555c <pbuf_realloc>
                    prev->next = cseg;
 8007234:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8007236:	4629      	mov	r1, r5
 8007238:	4620      	mov	r0, r4
 800723a:	f7ff fb39 	bl	80068b0 <tcp_oos_insert_segment>
 800723e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 8007242:	4849      	ldr	r0, [pc, #292]	; (8007368 <tcp_receive+0xa34>)
 8007244:	f7fe fc4f 	bl	8005ae6 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007248:	2800      	cmp	r0, #0
 800724a:	f000 8089 	beq.w	8007360 <tcp_receive+0xa2c>
                    pcb->ooseq = cseg;
 800724e:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8007250:	4629      	mov	r1, r5
 8007252:	f7ff fb2d 	bl	80068b0 <tcp_oos_insert_segment>
 8007256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800725a:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 800725c:	2b00      	cmp	r3, #0
 800725e:	dc01      	bgt.n	8007264 <tcp_receive+0x930>
 8007260:	4615      	mov	r5, r2
 8007262:	e7bd      	b.n	80071e0 <tcp_receive+0x8ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007264:	8980      	ldrh	r0, [r0, #12]
 8007266:	f7fd fb69 	bl	800493c <lwip_htons>
 800726a:	f010 0f01 	tst.w	r0, #1
 800726e:	d177      	bne.n	8007360 <tcp_receive+0xa2c>
                next->next = tcp_seg_copy(&inseg);
 8007270:	483d      	ldr	r0, [pc, #244]	; (8007368 <tcp_receive+0xa34>)
 8007272:	f7fe fc38 	bl	8005ae6 <tcp_seg_copy>
 8007276:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8007278:	2800      	cmp	r0, #0
 800727a:	d071      	beq.n	8007360 <tcp_receive+0xa2c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800727c:	68eb      	ldr	r3, [r5, #12]
 800727e:	6859      	ldr	r1, [r3, #4]
 8007280:	892a      	ldrh	r2, [r5, #8]
 8007282:	440a      	add	r2, r1
 8007284:	4b37      	ldr	r3, [pc, #220]	; (8007364 <tcp_receive+0xa30>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	1ad2      	subs	r2, r2, r3
 800728a:	2a00      	cmp	r2, #0
 800728c:	dd05      	ble.n	800729a <tcp_receive+0x966>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800728e:	1a5b      	subs	r3, r3, r1
 8007290:	b299      	uxth	r1, r3
 8007292:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8007294:	6868      	ldr	r0, [r5, #4]
 8007296:	f7fe f961 	bl	800555c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800729a:	4b34      	ldr	r3, [pc, #208]	; (800736c <tcp_receive+0xa38>)
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	4a31      	ldr	r2, [pc, #196]	; (8007364 <tcp_receive+0xa30>)
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	4413      	add	r3, r2
 80072a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80072a6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80072a8:	440a      	add	r2, r1
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dd57      	ble.n	8007360 <tcp_receive+0xa2c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	8998      	ldrh	r0, [r3, #12]
 80072b6:	f7fd fb41 	bl	800493c <lwip_htons>
 80072ba:	f010 0f01 	tst.w	r0, #1
 80072be:	d12c      	bne.n	800731a <tcp_receive+0x9e6>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80072c0:	682a      	ldr	r2, [r5, #0]
 80072c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80072c6:	440b      	add	r3, r1
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	4926      	ldr	r1, [pc, #152]	; (8007364 <tcp_receive+0xa30>)
 80072cc:	6809      	ldr	r1, [r1, #0]
 80072ce:	1a5b      	subs	r3, r3, r1
 80072d0:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80072d2:	682b      	ldr	r3, [r5, #0]
 80072d4:	8919      	ldrh	r1, [r3, #8]
 80072d6:	6858      	ldr	r0, [r3, #4]
 80072d8:	f7fe f940 	bl	800555c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	891d      	ldrh	r5, [r3, #8]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	8998      	ldrh	r0, [r3, #12]
 80072e4:	f7fd fb2a 	bl	800493c <lwip_htons>
 80072e8:	f010 0f03 	tst.w	r0, #3
 80072ec:	d024      	beq.n	8007338 <tcp_receive+0xa04>
 80072ee:	2301      	movs	r3, #1
 80072f0:	442b      	add	r3, r5
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	4a1d      	ldr	r2, [pc, #116]	; (800736c <tcp_receive+0xa38>)
 80072f6:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80072f8:	4a1a      	ldr	r2, [pc, #104]	; (8007364 <tcp_receive+0xa30>)
 80072fa:	6812      	ldr	r2, [r2, #0]
 80072fc:	4413      	add	r3, r2
 80072fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007300:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007302:	440a      	add	r2, r1
 8007304:	4293      	cmp	r3, r2
 8007306:	d02b      	beq.n	8007360 <tcp_receive+0xa2c>
 8007308:	4b19      	ldr	r3, [pc, #100]	; (8007370 <tcp_receive+0xa3c>)
 800730a:	f240 627b 	movw	r2, #1659	; 0x67b
 800730e:	4919      	ldr	r1, [pc, #100]	; (8007374 <tcp_receive+0xa40>)
 8007310:	4819      	ldr	r0, [pc, #100]	; (8007378 <tcp_receive+0xa44>)
 8007312:	f005 fc13 	bl	800cb3c <iprintf>
 8007316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800731a:	682b      	ldr	r3, [r5, #0]
 800731c:	68df      	ldr	r7, [r3, #12]
 800731e:	89b8      	ldrh	r0, [r7, #12]
 8007320:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 8007324:	b2b6      	uxth	r6, r6
 8007326:	f7fd fb09 	bl	800493c <lwip_htons>
 800732a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800732e:	f7fd fb05 	bl	800493c <lwip_htons>
 8007332:	4330      	orrs	r0, r6
 8007334:	81b8      	strh	r0, [r7, #12]
 8007336:	e7c3      	b.n	80072c0 <tcp_receive+0x98c>
                    tcplen = TCP_TCPLEN(next->next);
 8007338:	2300      	movs	r3, #0
 800733a:	e7d9      	b.n	80072f0 <tcp_receive+0x9bc>
 800733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007340:	4b08      	ldr	r3, [pc, #32]	; (8007364 <tcp_receive+0xa30>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007346:	1a99      	subs	r1, r3, r2
 8007348:	2900      	cmp	r1, #0
 800734a:	db05      	blt.n	8007358 <tcp_receive+0xa24>
 800734c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800734e:	440a      	add	r2, r1
 8007350:	1a9b      	subs	r3, r3, r2
 8007352:	3301      	adds	r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	dd03      	ble.n	8007360 <tcp_receive+0xa2c>
      tcp_ack_now(pcb);
 8007358:	7ea3      	ldrb	r3, [r4, #26]
 800735a:	f043 0302 	orr.w	r3, r3, #2
 800735e:	76a3      	strb	r3, [r4, #26]
 8007360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007364:	20003e5c 	.word	0x20003e5c
 8007368:	20003e40 	.word	0x20003e40
 800736c:	20003e72 	.word	0x20003e72
 8007370:	0800eab0 	.word	0x0800eab0
 8007374:	0800eb8c 	.word	0x0800eb8c
 8007378:	0800de6c 	.word	0x0800de6c

0800737c <tcp_process>:
{
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 8007382:	4ba3      	ldr	r3, [pc, #652]	; (8007610 <tcp_process+0x294>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	f013 0f04 	tst.w	r3, #4
 800738a:	d03d      	beq.n	8007408 <tcp_process+0x8c>
    if (pcb->state == SYN_SENT) {
 800738c:	7d01      	ldrb	r1, [r0, #20]
 800738e:	2902      	cmp	r1, #2
 8007390:	d012      	beq.n	80073b8 <tcp_process+0x3c>
      if (seqno == pcb->rcv_nxt) {
 8007392:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007394:	4b9f      	ldr	r3, [pc, #636]	; (8007614 <tcp_process+0x298>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d01c      	beq.n	80073d6 <tcp_process+0x5a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800739c:	1a98      	subs	r0, r3, r2
 800739e:	2800      	cmp	r0, #0
 80073a0:	db1b      	blt.n	80073da <tcp_process+0x5e>
 80073a2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80073a4:	4402      	add	r2, r0
 80073a6:	1a9b      	subs	r3, r3, r2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	dd0c      	ble.n	80073c6 <tcp_process+0x4a>
  u8_t acceptable = 0;
 80073ac:	2300      	movs	r3, #0
    if (acceptable) {
 80073ae:	b9b3      	cbnz	r3, 80073de <tcp_process+0x62>
      return ERR_OK;
 80073b0:	2500      	movs	r5, #0
}
 80073b2:	4628      	mov	r0, r5
 80073b4:	b002      	add	sp, #8
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
      if (ackno == pcb->snd_nxt) {
 80073b8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80073ba:	4b97      	ldr	r3, [pc, #604]	; (8007618 <tcp_process+0x29c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d007      	beq.n	80073d2 <tcp_process+0x56>
  u8_t acceptable = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	e7f3      	b.n	80073ae <tcp_process+0x32>
        tcp_ack_now(pcb);
 80073c6:	7ea3      	ldrb	r3, [r4, #26]
 80073c8:	f043 0302 	orr.w	r3, r3, #2
 80073cc:	76a3      	strb	r3, [r4, #26]
  u8_t acceptable = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e7ed      	b.n	80073ae <tcp_process+0x32>
        acceptable = 1;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e7eb      	b.n	80073ae <tcp_process+0x32>
        acceptable = 1;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e7e9      	b.n	80073ae <tcp_process+0x32>
  u8_t acceptable = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	e7e7      	b.n	80073ae <tcp_process+0x32>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80073de:	b159      	cbz	r1, 80073f8 <tcp_process+0x7c>
      recv_flags |= TF_RESET;
 80073e0:	4a8e      	ldr	r2, [pc, #568]	; (800761c <tcp_process+0x2a0>)
 80073e2:	7813      	ldrb	r3, [r2, #0]
 80073e4:	f043 0308 	orr.w	r3, r3, #8
 80073e8:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80073ea:	7ea3      	ldrb	r3, [r4, #26]
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 80073f2:	f06f 050d 	mvn.w	r5, #13
 80073f6:	e7dc      	b.n	80073b2 <tcp_process+0x36>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80073f8:	4b89      	ldr	r3, [pc, #548]	; (8007620 <tcp_process+0x2a4>)
 80073fa:	f240 22e7 	movw	r2, #743	; 0x2e7
 80073fe:	4989      	ldr	r1, [pc, #548]	; (8007624 <tcp_process+0x2a8>)
 8007400:	4889      	ldr	r0, [pc, #548]	; (8007628 <tcp_process+0x2ac>)
 8007402:	f005 fb9b 	bl	800cb3c <iprintf>
 8007406:	e7eb      	b.n	80073e0 <tcp_process+0x64>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007408:	f013 0f02 	tst.w	r3, #2
 800740c:	d00a      	beq.n	8007424 <tcp_process+0xa8>
 800740e:	7d03      	ldrb	r3, [r0, #20]
 8007410:	3b02      	subs	r3, #2
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	d905      	bls.n	8007424 <tcp_process+0xa8>
    tcp_ack_now(pcb);
 8007418:	7e83      	ldrb	r3, [r0, #26]
 800741a:	f043 0302 	orr.w	r3, r3, #2
 800741e:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 8007420:	2500      	movs	r5, #0
 8007422:	e7c6      	b.n	80073b2 <tcp_process+0x36>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007424:	7ea3      	ldrb	r3, [r4, #26]
 8007426:	f013 0f10 	tst.w	r3, #16
 800742a:	d102      	bne.n	8007432 <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 800742c:	4b7f      	ldr	r3, [pc, #508]	; (800762c <tcp_process+0x2b0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8007438:	4620      	mov	r0, r4
 800743a:	f7ff f8ff 	bl	800663c <tcp_parseopt>
  switch (pcb->state) {
 800743e:	7d23      	ldrb	r3, [r4, #20]
 8007440:	3b02      	subs	r3, #2
 8007442:	2b07      	cmp	r3, #7
 8007444:	f200 8219 	bhi.w	800787a <tcp_process+0x4fe>
 8007448:	e8df f013 	tbh	[pc, r3, lsl #1]
 800744c:	009b0008 	.word	0x009b0008
 8007450:	01460135 	.word	0x01460135
 8007454:	0135019c 	.word	0x0135019c
 8007458:	01fd01ca 	.word	0x01fd01ca
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800745c:	4b6c      	ldr	r3, [pc, #432]	; (8007610 <tcp_process+0x294>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	f003 0212 	and.w	r2, r3, #18
 8007464:	2a12      	cmp	r2, #18
 8007466:	d004      	beq.n	8007472 <tcp_process+0xf6>
    else if (flags & TCP_ACK) {
 8007468:	f013 0f10 	tst.w	r3, #16
 800746c:	d16b      	bne.n	8007546 <tcp_process+0x1ca>
  return ERR_OK;
 800746e:	2500      	movs	r5, #0
 8007470:	e79f      	b.n	80073b2 <tcp_process+0x36>
        && (ackno == pcb->lastack + 1)) {
 8007472:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007474:	3201      	adds	r2, #1
 8007476:	4968      	ldr	r1, [pc, #416]	; (8007618 <tcp_process+0x29c>)
 8007478:	6809      	ldr	r1, [r1, #0]
 800747a:	428a      	cmp	r2, r1
 800747c:	d1f4      	bne.n	8007468 <tcp_process+0xec>
      pcb->rcv_nxt = seqno + 1;
 800747e:	4b65      	ldr	r3, [pc, #404]	; (8007614 <tcp_process+0x298>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007486:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 8007488:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800748a:	4a69      	ldr	r2, [pc, #420]	; (8007630 <tcp_process+0x2b4>)
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	89d2      	ldrh	r2, [r2, #14]
 8007490:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007494:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007498:	3b01      	subs	r3, #1
 800749a:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800749c:	2304      	movs	r3, #4
 800749e:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80074a0:	18e1      	adds	r1, r4, r3
 80074a2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80074a4:	f7ff f868 	bl	8006578 <tcp_eff_send_mss_impl>
 80074a8:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80074aa:	0043      	lsls	r3, r0, #1
 80074ac:	f241 121c 	movw	r2, #4380	; 0x111c
 80074b0:	4293      	cmp	r3, r2
 80074b2:	bf38      	it	cc
 80074b4:	4613      	movcc	r3, r2
 80074b6:	0080      	lsls	r0, r0, #2
 80074b8:	4283      	cmp	r3, r0
 80074ba:	bf28      	it	cs
 80074bc:	4603      	movcs	r3, r0
 80074be:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80074c2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80074c6:	b31b      	cbz	r3, 8007510 <tcp_process+0x194>
      --pcb->snd_queuelen;
 80074c8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80074cc:	3b01      	subs	r3, #1
 80074ce:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 80074d2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 80074d4:	b325      	cbz	r5, 8007520 <tcp_process+0x1a4>
        pcb->unacked = rseg->next;
 80074d6:	682b      	ldr	r3, [r5, #0]
 80074d8:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 80074da:	4628      	mov	r0, r5
 80074dc:	f7fe faec 	bl	8005ab8 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 80074e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80074e2:	b353      	cbz	r3, 800753a <tcp_process+0x1be>
        pcb->rtime = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 80074e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80074ec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80074f0:	b33b      	cbz	r3, 8007542 <tcp_process+0x1c6>
 80074f2:	2200      	movs	r2, #0
 80074f4:	4621      	mov	r1, r4
 80074f6:	6920      	ldr	r0, [r4, #16]
 80074f8:	4798      	blx	r3
 80074fa:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 80074fc:	f115 0f0d 	cmn.w	r5, #13
 8007500:	f43f af57 	beq.w	80073b2 <tcp_process+0x36>
      tcp_ack_now(pcb);
 8007504:	7ea3      	ldrb	r3, [r4, #26]
 8007506:	f043 0302 	orr.w	r3, r3, #2
 800750a:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 800750c:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 800750e:	e750      	b.n	80073b2 <tcp_process+0x36>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007510:	4b43      	ldr	r3, [pc, #268]	; (8007620 <tcp_process+0x2a4>)
 8007512:	f240 321a 	movw	r2, #794	; 0x31a
 8007516:	4947      	ldr	r1, [pc, #284]	; (8007634 <tcp_process+0x2b8>)
 8007518:	4843      	ldr	r0, [pc, #268]	; (8007628 <tcp_process+0x2ac>)
 800751a:	f005 fb0f 	bl	800cb3c <iprintf>
 800751e:	e7d3      	b.n	80074c8 <tcp_process+0x14c>
        rseg = pcb->unsent;
 8007520:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007522:	b115      	cbz	r5, 800752a <tcp_process+0x1ae>
        pcb->unsent = rseg->next;
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	66a3      	str	r3, [r4, #104]	; 0x68
 8007528:	e7d7      	b.n	80074da <tcp_process+0x15e>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800752a:	4b3d      	ldr	r3, [pc, #244]	; (8007620 <tcp_process+0x2a4>)
 800752c:	f240 3222 	movw	r2, #802	; 0x322
 8007530:	4941      	ldr	r1, [pc, #260]	; (8007638 <tcp_process+0x2bc>)
 8007532:	483d      	ldr	r0, [pc, #244]	; (8007628 <tcp_process+0x2ac>)
 8007534:	f005 fb02 	bl	800cb3c <iprintf>
 8007538:	e7f4      	b.n	8007524 <tcp_process+0x1a8>
        pcb->rtime = -1;
 800753a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800753e:	8623      	strh	r3, [r4, #48]	; 0x30
 8007540:	e7d4      	b.n	80074ec <tcp_process+0x170>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007542:	2500      	movs	r5, #0
 8007544:	e7da      	b.n	80074fc <tcp_process+0x180>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007546:	4b3a      	ldr	r3, [pc, #232]	; (8007630 <tcp_process+0x2b4>)
 8007548:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800754a:	4a3c      	ldr	r2, [pc, #240]	; (800763c <tcp_process+0x2c0>)
 800754c:	493c      	ldr	r1, [pc, #240]	; (8007640 <tcp_process+0x2c4>)
 800754e:	880d      	ldrh	r5, [r1, #0]
 8007550:	4930      	ldr	r1, [pc, #192]	; (8007614 <tcp_process+0x298>)
 8007552:	6809      	ldr	r1, [r1, #0]
 8007554:	4830      	ldr	r0, [pc, #192]	; (8007618 <tcp_process+0x29c>)
 8007556:	6800      	ldr	r0, [r0, #0]
 8007558:	881e      	ldrh	r6, [r3, #0]
 800755a:	9601      	str	r6, [sp, #4]
 800755c:	885b      	ldrh	r3, [r3, #2]
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	3204      	adds	r2, #4
 8007564:	4429      	add	r1, r5
 8007566:	f000 ffbb 	bl	80084e0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800756a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800756e:	2b05      	cmp	r3, #5
 8007570:	d901      	bls.n	8007576 <tcp_process+0x1fa>
  return ERR_OK;
 8007572:	2500      	movs	r5, #0
 8007574:	e71d      	b.n	80073b2 <tcp_process+0x36>
        pcb->rtime = 0;
 8007576:	2500      	movs	r5, #0
 8007578:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800757a:	4620      	mov	r0, r4
 800757c:	f001 f806 	bl	800858c <tcp_rexmit_rto>
 8007580:	e717      	b.n	80073b2 <tcp_process+0x36>
    if (flags & TCP_ACK) {
 8007582:	4b23      	ldr	r3, [pc, #140]	; (8007610 <tcp_process+0x294>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	f013 0f10 	tst.w	r3, #16
 800758a:	f000 8083 	beq.w	8007694 <tcp_process+0x318>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800758e:	4b22      	ldr	r3, [pc, #136]	; (8007618 <tcp_process+0x29c>)
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007594:	1ac3      	subs	r3, r0, r3
 8007596:	2b01      	cmp	r3, #1
 8007598:	d403      	bmi.n	80075a2 <tcp_process+0x226>
 800759a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800759c:	1ac3      	subs	r3, r0, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dd11      	ble.n	80075c6 <tcp_process+0x24a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075a2:	4b23      	ldr	r3, [pc, #140]	; (8007630 <tcp_process+0x2b4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80075a6:	4a25      	ldr	r2, [pc, #148]	; (800763c <tcp_process+0x2c0>)
 80075a8:	4925      	ldr	r1, [pc, #148]	; (8007640 <tcp_process+0x2c4>)
 80075aa:	880c      	ldrh	r4, [r1, #0]
 80075ac:	4919      	ldr	r1, [pc, #100]	; (8007614 <tcp_process+0x298>)
 80075ae:	6809      	ldr	r1, [r1, #0]
 80075b0:	881d      	ldrh	r5, [r3, #0]
 80075b2:	9501      	str	r5, [sp, #4]
 80075b4:	885b      	ldrh	r3, [r3, #2]
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	4613      	mov	r3, r2
 80075ba:	3204      	adds	r2, #4
 80075bc:	4421      	add	r1, r4
 80075be:	f000 ff8f 	bl	80084e0 <tcp_rst>
  return ERR_OK;
 80075c2:	2500      	movs	r5, #0
 80075c4:	e6f5      	b.n	80073b2 <tcp_process+0x36>
        pcb->state = ESTABLISHED;
 80075c6:	2304      	movs	r3, #4
 80075c8:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80075ca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80075cc:	b10b      	cbz	r3, 80075d2 <tcp_process+0x256>
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	b19b      	cbz	r3, 80075fa <tcp_process+0x27e>
        if (pcb->listener == NULL) {
 80075d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80075d4:	b1cb      	cbz	r3, 800760a <tcp_process+0x28e>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	b3b3      	cbz	r3, 8007648 <tcp_process+0x2cc>
 80075da:	2200      	movs	r2, #0
 80075dc:	4621      	mov	r1, r4
 80075de:	6920      	ldr	r0, [r4, #16]
 80075e0:	4798      	blx	r3
 80075e2:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 80075e4:	b39d      	cbz	r5, 800764e <tcp_process+0x2d2>
          if (err != ERR_ABRT) {
 80075e6:	f115 0f0d 	cmn.w	r5, #13
 80075ea:	f43f aee2 	beq.w	80073b2 <tcp_process+0x36>
            tcp_abort(pcb);
 80075ee:	4620      	mov	r0, r4
 80075f0:	f7fe fed4 	bl	800639c <tcp_abort>
          return ERR_ABRT;
 80075f4:	f06f 050c 	mvn.w	r5, #12
 80075f8:	e6db      	b.n	80073b2 <tcp_process+0x36>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <tcp_process+0x2a4>)
 80075fc:	f240 3251 	movw	r2, #849	; 0x351
 8007600:	4910      	ldr	r1, [pc, #64]	; (8007644 <tcp_process+0x2c8>)
 8007602:	4809      	ldr	r0, [pc, #36]	; (8007628 <tcp_process+0x2ac>)
 8007604:	f005 fa9a 	bl	800cb3c <iprintf>
 8007608:	e7e3      	b.n	80075d2 <tcp_process+0x256>
          err = ERR_VAL;
 800760a:	f06f 0505 	mvn.w	r5, #5
 800760e:	e7e9      	b.n	80075e4 <tcp_process+0x268>
 8007610:	20003e3c 	.word	0x20003e3c
 8007614:	20003e5c 	.word	0x20003e5c
 8007618:	20003e38 	.word	0x20003e38
 800761c:	20003e58 	.word	0x20003e58
 8007620:	0800eab0 	.word	0x0800eab0
 8007624:	0800ea44 	.word	0x0800ea44
 8007628:	0800de6c 	.word	0x0800de6c
 800762c:	200076d4 	.word	0x200076d4
 8007630:	20003e64 	.word	0x20003e64
 8007634:	0800ea64 	.word	0x0800ea64
 8007638:	0800ea7c 	.word	0x0800ea7c
 800763c:	20003fb0 	.word	0x20003fb0
 8007640:	20003e72 	.word	0x20003e72
 8007644:	0800ea90 	.word	0x0800ea90
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007648:	f06f 050f 	mvn.w	r5, #15
 800764c:	e7ca      	b.n	80075e4 <tcp_process+0x268>
        tcp_receive(pcb);
 800764e:	4620      	mov	r0, r4
 8007650:	f7ff f970 	bl	8006934 <tcp_receive>
        if (recv_acked != 0) {
 8007654:	4b8f      	ldr	r3, [pc, #572]	; (8007894 <tcp_process+0x518>)
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b113      	cbz	r3, 8007660 <tcp_process+0x2e4>
          recv_acked--;
 800765a:	3b01      	subs	r3, #1
 800765c:	4a8d      	ldr	r2, [pc, #564]	; (8007894 <tcp_process+0x518>)
 800765e:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007660:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8007662:	0053      	lsls	r3, r2, #1
 8007664:	f241 111c 	movw	r1, #4380	; 0x111c
 8007668:	428b      	cmp	r3, r1
 800766a:	bf38      	it	cc
 800766c:	460b      	movcc	r3, r1
 800766e:	0092      	lsls	r2, r2, #2
 8007670:	4293      	cmp	r3, r2
 8007672:	bf28      	it	cs
 8007674:	4613      	movcs	r3, r2
 8007676:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 800767a:	4b87      	ldr	r3, [pc, #540]	; (8007898 <tcp_process+0x51c>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f013 0f20 	tst.w	r3, #32
 8007682:	f43f ae96 	beq.w	80073b2 <tcp_process+0x36>
          tcp_ack_now(pcb);
 8007686:	7ea3      	ldrb	r3, [r4, #26]
 8007688:	f043 0302 	orr.w	r3, r3, #2
 800768c:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 800768e:	2307      	movs	r3, #7
 8007690:	7523      	strb	r3, [r4, #20]
 8007692:	e68e      	b.n	80073b2 <tcp_process+0x36>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007694:	f013 0f02 	tst.w	r3, #2
 8007698:	f000 80f1 	beq.w	800787e <tcp_process+0x502>
 800769c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800769e:	3b01      	subs	r3, #1
 80076a0:	4a7e      	ldr	r2, [pc, #504]	; (800789c <tcp_process+0x520>)
 80076a2:	6812      	ldr	r2, [r2, #0]
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d001      	beq.n	80076ac <tcp_process+0x330>
  return ERR_OK;
 80076a8:	2500      	movs	r5, #0
 80076aa:	e682      	b.n	80073b2 <tcp_process+0x36>
      tcp_rexmit(pcb);
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 ff88 	bl	80085c2 <tcp_rexmit>
  return ERR_OK;
 80076b2:	2500      	movs	r5, #0
 80076b4:	e67d      	b.n	80073b2 <tcp_process+0x36>
    tcp_receive(pcb);
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7ff f93c 	bl	8006934 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80076bc:	4b76      	ldr	r3, [pc, #472]	; (8007898 <tcp_process+0x51c>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	f013 0f20 	tst.w	r3, #32
 80076c4:	f000 80dd 	beq.w	8007882 <tcp_process+0x506>
      tcp_ack_now(pcb);
 80076c8:	7ea3      	ldrb	r3, [r4, #26]
 80076ca:	f043 0302 	orr.w	r3, r3, #2
 80076ce:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 80076d0:	2307      	movs	r3, #7
 80076d2:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 80076d4:	2500      	movs	r5, #0
 80076d6:	e66c      	b.n	80073b2 <tcp_process+0x36>
    tcp_receive(pcb);
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff f92b 	bl	8006934 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80076de:	4b6e      	ldr	r3, [pc, #440]	; (8007898 <tcp_process+0x51c>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	f013 0f20 	tst.w	r3, #32
 80076e6:	d038      	beq.n	800775a <tcp_process+0x3de>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80076e8:	4b6d      	ldr	r3, [pc, #436]	; (80078a0 <tcp_process+0x524>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f013 0f10 	tst.w	r3, #16
 80076f0:	d004      	beq.n	80076fc <tcp_process+0x380>
 80076f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80076f4:	4b6b      	ldr	r3, [pc, #428]	; (80078a4 <tcp_process+0x528>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d007      	beq.n	800770c <tcp_process+0x390>
        tcp_ack_now(pcb);
 80076fc:	7ea3      	ldrb	r3, [r4, #26]
 80076fe:	f043 0302 	orr.w	r3, r3, #2
 8007702:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8007704:	2308      	movs	r3, #8
 8007706:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8007708:	2500      	movs	r5, #0
 800770a:	e652      	b.n	80073b2 <tcp_process+0x36>
          pcb->unsent == NULL) {
 800770c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f4      	bne.n	80076fc <tcp_process+0x380>
        tcp_ack_now(pcb);
 8007712:	7ea3      	ldrb	r3, [r4, #26]
 8007714:	f043 0302 	orr.w	r3, r3, #2
 8007718:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800771a:	4620      	mov	r0, r4
 800771c:	f7fe f9f7 	bl	8005b0e <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007720:	4b61      	ldr	r3, [pc, #388]	; (80078a8 <tcp_process+0x52c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	429c      	cmp	r4, r3
 8007726:	d005      	beq.n	8007734 <tcp_process+0x3b8>
 8007728:	b153      	cbz	r3, 8007740 <tcp_process+0x3c4>
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	4294      	cmp	r4, r2
 800772e:	d005      	beq.n	800773c <tcp_process+0x3c0>
 8007730:	4613      	mov	r3, r2
 8007732:	e7f9      	b.n	8007728 <tcp_process+0x3ac>
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	4b5c      	ldr	r3, [pc, #368]	; (80078a8 <tcp_process+0x52c>)
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e001      	b.n	8007740 <tcp_process+0x3c4>
 800773c:	68e2      	ldr	r2, [r4, #12]
 800773e:	60da      	str	r2, [r3, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	4b5a      	ldr	r3, [pc, #360]	; (80078ac <tcp_process+0x530>)
 8007744:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007746:	230a      	movs	r3, #10
 8007748:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800774a:	4b59      	ldr	r3, [pc, #356]	; (80078b0 <tcp_process+0x534>)
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	60e2      	str	r2, [r4, #12]
 8007750:	601c      	str	r4, [r3, #0]
 8007752:	f001 f8d5 	bl	8008900 <tcp_timer_needed>
  return ERR_OK;
 8007756:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007758:	e62b      	b.n	80073b2 <tcp_process+0x36>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800775a:	4b51      	ldr	r3, [pc, #324]	; (80078a0 <tcp_process+0x524>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f013 0f10 	tst.w	r3, #16
 8007762:	f000 8090 	beq.w	8007886 <tcp_process+0x50a>
 8007766:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007768:	4b4e      	ldr	r3, [pc, #312]	; (80078a4 <tcp_process+0x528>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d001      	beq.n	8007774 <tcp_process+0x3f8>
  return ERR_OK;
 8007770:	2500      	movs	r5, #0
 8007772:	e61e      	b.n	80073b2 <tcp_process+0x36>
               pcb->unsent == NULL) {
 8007774:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007776:	b10b      	cbz	r3, 800777c <tcp_process+0x400>
  return ERR_OK;
 8007778:	2500      	movs	r5, #0
 800777a:	e61a      	b.n	80073b2 <tcp_process+0x36>
      pcb->state = FIN_WAIT_2;
 800777c:	2306      	movs	r3, #6
 800777e:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8007780:	2500      	movs	r5, #0
 8007782:	e616      	b.n	80073b2 <tcp_process+0x36>
    tcp_receive(pcb);
 8007784:	4620      	mov	r0, r4
 8007786:	f7ff f8d5 	bl	8006934 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800778a:	4b43      	ldr	r3, [pc, #268]	; (8007898 <tcp_process+0x51c>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	f013 0f20 	tst.w	r3, #32
 8007792:	d101      	bne.n	8007798 <tcp_process+0x41c>
  return ERR_OK;
 8007794:	2500      	movs	r5, #0
 8007796:	e60c      	b.n	80073b2 <tcp_process+0x36>
      tcp_ack_now(pcb);
 8007798:	7ea3      	ldrb	r3, [r4, #26]
 800779a:	f043 0302 	orr.w	r3, r3, #2
 800779e:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 80077a0:	4620      	mov	r0, r4
 80077a2:	f7fe f9b4 	bl	8005b0e <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80077a6:	4b40      	ldr	r3, [pc, #256]	; (80078a8 <tcp_process+0x52c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	429c      	cmp	r4, r3
 80077ac:	d005      	beq.n	80077ba <tcp_process+0x43e>
 80077ae:	b153      	cbz	r3, 80077c6 <tcp_process+0x44a>
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	4294      	cmp	r4, r2
 80077b4:	d005      	beq.n	80077c2 <tcp_process+0x446>
 80077b6:	4613      	mov	r3, r2
 80077b8:	e7f9      	b.n	80077ae <tcp_process+0x432>
 80077ba:	68da      	ldr	r2, [r3, #12]
 80077bc:	4b3a      	ldr	r3, [pc, #232]	; (80078a8 <tcp_process+0x52c>)
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	e001      	b.n	80077c6 <tcp_process+0x44a>
 80077c2:	68e2      	ldr	r2, [r4, #12]
 80077c4:	60da      	str	r2, [r3, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	4b38      	ldr	r3, [pc, #224]	; (80078ac <tcp_process+0x530>)
 80077ca:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80077cc:	230a      	movs	r3, #10
 80077ce:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80077d0:	4b37      	ldr	r3, [pc, #220]	; (80078b0 <tcp_process+0x534>)
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	60e2      	str	r2, [r4, #12]
 80077d6:	601c      	str	r4, [r3, #0]
 80077d8:	f001 f892 	bl	8008900 <tcp_timer_needed>
  return ERR_OK;
 80077dc:	2500      	movs	r5, #0
 80077de:	e5e8      	b.n	80073b2 <tcp_process+0x36>
    tcp_receive(pcb);
 80077e0:	4620      	mov	r0, r4
 80077e2:	f7ff f8a7 	bl	8006934 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80077e6:	4b2e      	ldr	r3, [pc, #184]	; (80078a0 <tcp_process+0x524>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	f013 0f10 	tst.w	r3, #16
 80077ee:	d04c      	beq.n	800788a <tcp_process+0x50e>
 80077f0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80077f2:	4b2c      	ldr	r3, [pc, #176]	; (80078a4 <tcp_process+0x528>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d001      	beq.n	80077fe <tcp_process+0x482>
  return ERR_OK;
 80077fa:	2500      	movs	r5, #0
 80077fc:	e5d9      	b.n	80073b2 <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80077fe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007800:	b10b      	cbz	r3, 8007806 <tcp_process+0x48a>
  return ERR_OK;
 8007802:	2500      	movs	r5, #0
 8007804:	e5d5      	b.n	80073b2 <tcp_process+0x36>
      tcp_pcb_purge(pcb);
 8007806:	4620      	mov	r0, r4
 8007808:	f7fe f981 	bl	8005b0e <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800780c:	4b26      	ldr	r3, [pc, #152]	; (80078a8 <tcp_process+0x52c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	429c      	cmp	r4, r3
 8007812:	d005      	beq.n	8007820 <tcp_process+0x4a4>
 8007814:	b153      	cbz	r3, 800782c <tcp_process+0x4b0>
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	4294      	cmp	r4, r2
 800781a:	d005      	beq.n	8007828 <tcp_process+0x4ac>
 800781c:	4613      	mov	r3, r2
 800781e:	e7f9      	b.n	8007814 <tcp_process+0x498>
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	4b21      	ldr	r3, [pc, #132]	; (80078a8 <tcp_process+0x52c>)
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e001      	b.n	800782c <tcp_process+0x4b0>
 8007828:	68e2      	ldr	r2, [r4, #12]
 800782a:	60da      	str	r2, [r3, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	4b1f      	ldr	r3, [pc, #124]	; (80078ac <tcp_process+0x530>)
 8007830:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007832:	230a      	movs	r3, #10
 8007834:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007836:	4b1e      	ldr	r3, [pc, #120]	; (80078b0 <tcp_process+0x534>)
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	60e2      	str	r2, [r4, #12]
 800783c:	601c      	str	r4, [r3, #0]
 800783e:	f001 f85f 	bl	8008900 <tcp_timer_needed>
  return ERR_OK;
 8007842:	2500      	movs	r5, #0
 8007844:	e5b5      	b.n	80073b2 <tcp_process+0x36>
    tcp_receive(pcb);
 8007846:	4620      	mov	r0, r4
 8007848:	f7ff f874 	bl	8006934 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800784c:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <tcp_process+0x524>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f013 0f10 	tst.w	r3, #16
 8007854:	d01b      	beq.n	800788e <tcp_process+0x512>
 8007856:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007858:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <tcp_process+0x528>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d001      	beq.n	8007864 <tcp_process+0x4e8>
  return ERR_OK;
 8007860:	2500      	movs	r5, #0
 8007862:	e5a6      	b.n	80073b2 <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007864:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007866:	b10b      	cbz	r3, 800786c <tcp_process+0x4f0>
  return ERR_OK;
 8007868:	2500      	movs	r5, #0
 800786a:	e5a2      	b.n	80073b2 <tcp_process+0x36>
      recv_flags |= TF_CLOSED;
 800786c:	4a0a      	ldr	r2, [pc, #40]	; (8007898 <tcp_process+0x51c>)
 800786e:	7813      	ldrb	r3, [r2, #0]
 8007870:	f043 0310 	orr.w	r3, r3, #16
 8007874:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 8007876:	2500      	movs	r5, #0
 8007878:	e59b      	b.n	80073b2 <tcp_process+0x36>
 800787a:	2500      	movs	r5, #0
 800787c:	e599      	b.n	80073b2 <tcp_process+0x36>
 800787e:	2500      	movs	r5, #0
 8007880:	e597      	b.n	80073b2 <tcp_process+0x36>
 8007882:	2500      	movs	r5, #0
 8007884:	e595      	b.n	80073b2 <tcp_process+0x36>
 8007886:	2500      	movs	r5, #0
 8007888:	e593      	b.n	80073b2 <tcp_process+0x36>
 800788a:	2500      	movs	r5, #0
 800788c:	e591      	b.n	80073b2 <tcp_process+0x36>
 800788e:	2500      	movs	r5, #0
 8007890:	e58f      	b.n	80073b2 <tcp_process+0x36>
 8007892:	bf00      	nop
 8007894:	20003e50 	.word	0x20003e50
 8007898:	20003e58 	.word	0x20003e58
 800789c:	20003e5c 	.word	0x20003e5c
 80078a0:	20003e3c 	.word	0x20003e3c
 80078a4:	20003e38 	.word	0x20003e38
 80078a8:	200076d0 	.word	0x200076d0
 80078ac:	200076cc 	.word	0x200076cc
 80078b0:	200076e0 	.word	0x200076e0

080078b4 <tcp_input>:
{
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 80078ba:	6842      	ldr	r2, [r0, #4]
 80078bc:	4b9f      	ldr	r3, [pc, #636]	; (8007b3c <tcp_input+0x288>)
 80078be:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 80078c0:	8943      	ldrh	r3, [r0, #10]
 80078c2:	2b13      	cmp	r3, #19
 80078c4:	d93e      	bls.n	8007944 <tcp_input+0x90>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80078c6:	4b9e      	ldr	r3, [pc, #632]	; (8007b40 <tcp_input+0x28c>)
 80078c8:	6819      	ldr	r1, [r3, #0]
 80078ca:	6958      	ldr	r0, [r3, #20]
 80078cc:	f003 fcb3 	bl	800b236 <ip4_addr_isbroadcast_u32>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d137      	bne.n	8007944 <tcp_input+0x90>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80078d4:	4b9a      	ldr	r3, [pc, #616]	; (8007b40 <tcp_input+0x28c>)
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80078dc:	2be0      	cmp	r3, #224	; 0xe0
 80078de:	d031      	beq.n	8007944 <tcp_input+0x90>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80078e0:	4b96      	ldr	r3, [pc, #600]	; (8007b3c <tcp_input+0x288>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	8998      	ldrh	r0, [r3, #12]
 80078e6:	f7fd f829 	bl	800493c <lwip_htons>
 80078ea:	f3c0 310f 	ubfx	r1, r0, #12, #16
 80078ee:	0089      	lsls	r1, r1, #2
 80078f0:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80078f2:	2913      	cmp	r1, #19
 80078f4:	d926      	bls.n	8007944 <tcp_input+0x90>
 80078f6:	b289      	uxth	r1, r1
 80078f8:	8923      	ldrh	r3, [r4, #8]
 80078fa:	4299      	cmp	r1, r3
 80078fc:	d822      	bhi.n	8007944 <tcp_input+0x90>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80078fe:	f1a1 0314 	sub.w	r3, r1, #20
 8007902:	b29b      	uxth	r3, r3
 8007904:	4a8f      	ldr	r2, [pc, #572]	; (8007b44 <tcp_input+0x290>)
 8007906:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 8007908:	2000      	movs	r0, #0
 800790a:	4a8f      	ldr	r2, [pc, #572]	; (8007b48 <tcp_input+0x294>)
 800790c:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 800790e:	8962      	ldrh	r2, [r4, #10]
 8007910:	4291      	cmp	r1, r2
 8007912:	d91c      	bls.n	800794e <tcp_input+0x9a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d051      	beq.n	80079be <tcp_input+0x10a>
    pbuf_header(p, -TCP_HLEN);
 800791a:	f06f 0113 	mvn.w	r1, #19
 800791e:	4620      	mov	r0, r4
 8007920:	f7fd fcbe 	bl	80052a0 <pbuf_header>
    tcphdr_opt1len = p->len;
 8007924:	8961      	ldrh	r1, [r4, #10]
 8007926:	4b89      	ldr	r3, [pc, #548]	; (8007b4c <tcp_input+0x298>)
 8007928:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800792a:	4b86      	ldr	r3, [pc, #536]	; (8007b44 <tcp_input+0x290>)
 800792c:	881d      	ldrh	r5, [r3, #0]
 800792e:	1a6d      	subs	r5, r5, r1
 8007930:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8007932:	4249      	negs	r1, r1
 8007934:	b209      	sxth	r1, r1
 8007936:	4620      	mov	r0, r4
 8007938:	f7fd fcb2 	bl	80052a0 <pbuf_header>
    if (opt2len > p->next->len) {
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	8943      	ldrh	r3, [r0, #10]
 8007940:	429d      	cmp	r5, r3
 8007942:	d943      	bls.n	80079cc <tcp_input+0x118>
  pbuf_free(p);
 8007944:	4620      	mov	r0, r4
 8007946:	f7fd fcb5 	bl	80052b4 <pbuf_free>
}
 800794a:	b002      	add	sp, #8
 800794c:	bd70      	pop	{r4, r5, r6, pc}
    tcphdr_opt1len = tcphdr_optlen;
 800794e:	4a7f      	ldr	r2, [pc, #508]	; (8007b4c <tcp_input+0x298>)
 8007950:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007952:	4249      	negs	r1, r1
 8007954:	4620      	mov	r0, r4
 8007956:	f7fd fca3 	bl	80052a0 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800795a:	4d78      	ldr	r5, [pc, #480]	; (8007b3c <tcp_input+0x288>)
 800795c:	682e      	ldr	r6, [r5, #0]
 800795e:	8830      	ldrh	r0, [r6, #0]
 8007960:	f7fc ffec 	bl	800493c <lwip_htons>
 8007964:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007966:	682e      	ldr	r6, [r5, #0]
 8007968:	8870      	ldrh	r0, [r6, #2]
 800796a:	f7fc ffe7 	bl	800493c <lwip_htons>
 800796e:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007970:	682e      	ldr	r6, [r5, #0]
 8007972:	6870      	ldr	r0, [r6, #4]
 8007974:	f7fc ffe5 	bl	8004942 <lwip_htonl>
 8007978:	6070      	str	r0, [r6, #4]
 800797a:	4b75      	ldr	r3, [pc, #468]	; (8007b50 <tcp_input+0x29c>)
 800797c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800797e:	682e      	ldr	r6, [r5, #0]
 8007980:	68b0      	ldr	r0, [r6, #8]
 8007982:	f7fc ffde 	bl	8004942 <lwip_htonl>
 8007986:	60b0      	str	r0, [r6, #8]
 8007988:	4b72      	ldr	r3, [pc, #456]	; (8007b54 <tcp_input+0x2a0>)
 800798a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800798c:	682e      	ldr	r6, [r5, #0]
 800798e:	89f0      	ldrh	r0, [r6, #14]
 8007990:	f7fc ffd4 	bl	800493c <lwip_htons>
 8007994:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 8007996:	682b      	ldr	r3, [r5, #0]
 8007998:	8998      	ldrh	r0, [r3, #12]
 800799a:	f7fc ffcf 	bl	800493c <lwip_htons>
 800799e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 80079a2:	4a6d      	ldr	r2, [pc, #436]	; (8007b58 <tcp_input+0x2a4>)
 80079a4:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80079a6:	8922      	ldrh	r2, [r4, #8]
 80079a8:	f013 0303 	ands.w	r3, r3, #3
 80079ac:	bf18      	it	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	4413      	add	r3, r2
 80079b2:	4a6a      	ldr	r2, [pc, #424]	; (8007b5c <tcp_input+0x2a8>)
 80079b4:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079b6:	4b6a      	ldr	r3, [pc, #424]	; (8007b60 <tcp_input+0x2ac>)
 80079b8:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 80079ba:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079bc:	e033      	b.n	8007a26 <tcp_input+0x172>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80079be:	4b69      	ldr	r3, [pc, #420]	; (8007b64 <tcp_input+0x2b0>)
 80079c0:	22b2      	movs	r2, #178	; 0xb2
 80079c2:	4969      	ldr	r1, [pc, #420]	; (8007b68 <tcp_input+0x2b4>)
 80079c4:	4869      	ldr	r0, [pc, #420]	; (8007b6c <tcp_input+0x2b8>)
 80079c6:	f005 f8b9 	bl	800cb3c <iprintf>
 80079ca:	e7a6      	b.n	800791a <tcp_input+0x66>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80079cc:	6842      	ldr	r2, [r0, #4]
 80079ce:	4b5e      	ldr	r3, [pc, #376]	; (8007b48 <tcp_input+0x294>)
 80079d0:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 80079d2:	4269      	negs	r1, r5
 80079d4:	b209      	sxth	r1, r1
 80079d6:	f7fd fc63 	bl	80052a0 <pbuf_header>
    p->tot_len -= opt2len;
 80079da:	8923      	ldrh	r3, [r4, #8]
 80079dc:	1b5d      	subs	r5, r3, r5
 80079de:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80079e0:	8963      	ldrh	r3, [r4, #10]
 80079e2:	b95b      	cbnz	r3, 80079fc <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80079e4:	8922      	ldrh	r2, [r4, #8]
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	891b      	ldrh	r3, [r3, #8]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d0b5      	beq.n	800795a <tcp_input+0xa6>
 80079ee:	4b5d      	ldr	r3, [pc, #372]	; (8007b64 <tcp_input+0x2b0>)
 80079f0:	22d0      	movs	r2, #208	; 0xd0
 80079f2:	495f      	ldr	r1, [pc, #380]	; (8007b70 <tcp_input+0x2bc>)
 80079f4:	485d      	ldr	r0, [pc, #372]	; (8007b6c <tcp_input+0x2b8>)
 80079f6:	f005 f8a1 	bl	800cb3c <iprintf>
 80079fa:	e7ae      	b.n	800795a <tcp_input+0xa6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80079fc:	4b59      	ldr	r3, [pc, #356]	; (8007b64 <tcp_input+0x2b0>)
 80079fe:	22cf      	movs	r2, #207	; 0xcf
 8007a00:	495c      	ldr	r1, [pc, #368]	; (8007b74 <tcp_input+0x2c0>)
 8007a02:	485a      	ldr	r0, [pc, #360]	; (8007b6c <tcp_input+0x2b8>)
 8007a04:	f005 f89a 	bl	800cb3c <iprintf>
 8007a08:	e7ec      	b.n	80079e4 <tcp_input+0x130>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007a0a:	7d2b      	ldrb	r3, [r5, #20]
 8007a0c:	2b0a      	cmp	r3, #10
 8007a0e:	d016      	beq.n	8007a3e <tcp_input+0x18a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007a10:	7d2b      	ldrb	r3, [r5, #20]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d01a      	beq.n	8007a4c <tcp_input+0x198>
    if (pcb->remote_port == tcphdr->src &&
 8007a16:	8b29      	ldrh	r1, [r5, #24]
 8007a18:	4b48      	ldr	r3, [pc, #288]	; (8007b3c <tcp_input+0x288>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	881a      	ldrh	r2, [r3, #0]
 8007a1e:	4291      	cmp	r1, r2
 8007a20:	d01b      	beq.n	8007a5a <tcp_input+0x1a6>
    prev = pcb;
 8007a22:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a24:	68ed      	ldr	r5, [r5, #12]
 8007a26:	2d00      	cmp	r5, #0
 8007a28:	d032      	beq.n	8007a90 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007a2a:	7d2b      	ldrb	r3, [r5, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1ec      	bne.n	8007a0a <tcp_input+0x156>
 8007a30:	4b4c      	ldr	r3, [pc, #304]	; (8007b64 <tcp_input+0x2b0>)
 8007a32:	22e2      	movs	r2, #226	; 0xe2
 8007a34:	4950      	ldr	r1, [pc, #320]	; (8007b78 <tcp_input+0x2c4>)
 8007a36:	484d      	ldr	r0, [pc, #308]	; (8007b6c <tcp_input+0x2b8>)
 8007a38:	f005 f880 	bl	800cb3c <iprintf>
 8007a3c:	e7e5      	b.n	8007a0a <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007a3e:	4b49      	ldr	r3, [pc, #292]	; (8007b64 <tcp_input+0x2b0>)
 8007a40:	22e3      	movs	r2, #227	; 0xe3
 8007a42:	494e      	ldr	r1, [pc, #312]	; (8007b7c <tcp_input+0x2c8>)
 8007a44:	4849      	ldr	r0, [pc, #292]	; (8007b6c <tcp_input+0x2b8>)
 8007a46:	f005 f879 	bl	800cb3c <iprintf>
 8007a4a:	e7e1      	b.n	8007a10 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007a4c:	4b45      	ldr	r3, [pc, #276]	; (8007b64 <tcp_input+0x2b0>)
 8007a4e:	22e4      	movs	r2, #228	; 0xe4
 8007a50:	494b      	ldr	r1, [pc, #300]	; (8007b80 <tcp_input+0x2cc>)
 8007a52:	4846      	ldr	r0, [pc, #280]	; (8007b6c <tcp_input+0x2b8>)
 8007a54:	f005 f872 	bl	800cb3c <iprintf>
 8007a58:	e7dd      	b.n	8007a16 <tcp_input+0x162>
        pcb->local_port == tcphdr->dest &&
 8007a5a:	8aea      	ldrh	r2, [r5, #22]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d1df      	bne.n	8007a22 <tcp_input+0x16e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a62:	686a      	ldr	r2, [r5, #4]
 8007a64:	4b36      	ldr	r3, [pc, #216]	; (8007b40 <tcp_input+0x28c>)
 8007a66:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d1da      	bne.n	8007a22 <tcp_input+0x16e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007a6c:	682a      	ldr	r2, [r5, #0]
 8007a6e:	4b34      	ldr	r3, [pc, #208]	; (8007b40 <tcp_input+0x28c>)
 8007a70:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d1d5      	bne.n	8007a22 <tcp_input+0x16e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007a76:	68eb      	ldr	r3, [r5, #12]
 8007a78:	429d      	cmp	r5, r3
 8007a7a:	d04d      	beq.n	8007b18 <tcp_input+0x264>
      if (prev != NULL) {
 8007a7c:	b12e      	cbz	r6, 8007a8a <tcp_input+0x1d6>
        prev->next = pcb->next;
 8007a7e:	68eb      	ldr	r3, [r5, #12]
 8007a80:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 8007a82:	4b37      	ldr	r3, [pc, #220]	; (8007b60 <tcp_input+0x2ac>)
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 8007a88:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007a8a:	68eb      	ldr	r3, [r5, #12]
 8007a8c:	429d      	cmp	r5, r3
 8007a8e:	d04a      	beq.n	8007b26 <tcp_input+0x272>
  if (pcb == NULL) {
 8007a90:	2d00      	cmp	r5, #0
 8007a92:	d04f      	beq.n	8007b34 <tcp_input+0x280>
  if (pcb != NULL) {
 8007a94:	2d00      	cmp	r5, #0
 8007a96:	f000 8168 	beq.w	8007d6a <tcp_input+0x4b6>
    inseg.next = NULL;
 8007a9a:	4a3a      	ldr	r2, [pc, #232]	; (8007b84 <tcp_input+0x2d0>)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 8007aa0:	8921      	ldrh	r1, [r4, #8]
 8007aa2:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 8007aa4:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007aa6:	4925      	ldr	r1, [pc, #148]	; (8007b3c <tcp_input+0x288>)
 8007aa8:	6809      	ldr	r1, [r1, #0]
 8007aaa:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 8007aac:	4a36      	ldr	r2, [pc, #216]	; (8007b88 <tcp_input+0x2d4>)
 8007aae:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 8007ab0:	4a36      	ldr	r2, [pc, #216]	; (8007b8c <tcp_input+0x2d8>)
 8007ab2:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 8007ab4:	4a36      	ldr	r2, [pc, #216]	; (8007b90 <tcp_input+0x2dc>)
 8007ab6:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 8007ab8:	4b27      	ldr	r3, [pc, #156]	; (8007b58 <tcp_input+0x2a4>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	f013 0f08 	tst.w	r3, #8
 8007ac0:	d003      	beq.n	8007aca <tcp_input+0x216>
      p->flags |= PBUF_FLAG_PUSH;
 8007ac2:	7b63      	ldrb	r3, [r4, #13]
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 8007aca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 80b9 	beq.w	8007c44 <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f7fe fb5c 	bl	8006190 <tcp_process_refused_data>
 8007ad8:	f110 0f0d 	cmn.w	r0, #13
 8007adc:	d008      	beq.n	8007af0 <tcp_input+0x23c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007ade:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 80af 	beq.w	8007c44 <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007ae6:	4b1d      	ldr	r3, [pc, #116]	; (8007b5c <tcp_input+0x2a8>)
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 80aa 	beq.w	8007c44 <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 8007af0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 80a2 	beq.w	8007c3c <tcp_input+0x388>
    tcp_input_pcb = NULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	4a26      	ldr	r2, [pc, #152]	; (8007b94 <tcp_input+0x2e0>)
 8007afc:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 8007afe:	4a22      	ldr	r2, [pc, #136]	; (8007b88 <tcp_input+0x2d4>)
 8007b00:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 8007b02:	4b20      	ldr	r3, [pc, #128]	; (8007b84 <tcp_input+0x2d0>)
 8007b04:	6858      	ldr	r0, [r3, #4]
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f43f af1f 	beq.w	800794a <tcp_input+0x96>
      pbuf_free(inseg.p);
 8007b0c:	f7fd fbd2 	bl	80052b4 <pbuf_free>
      inseg.p = NULL;
 8007b10:	2200      	movs	r2, #0
 8007b12:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <tcp_input+0x2d0>)
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	e718      	b.n	800794a <tcp_input+0x96>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007b18:	4b12      	ldr	r3, [pc, #72]	; (8007b64 <tcp_input+0x2b0>)
 8007b1a:	22ec      	movs	r2, #236	; 0xec
 8007b1c:	491e      	ldr	r1, [pc, #120]	; (8007b98 <tcp_input+0x2e4>)
 8007b1e:	4813      	ldr	r0, [pc, #76]	; (8007b6c <tcp_input+0x2b8>)
 8007b20:	f005 f80c 	bl	800cb3c <iprintf>
 8007b24:	e7aa      	b.n	8007a7c <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007b26:	4b0f      	ldr	r3, [pc, #60]	; (8007b64 <tcp_input+0x2b0>)
 8007b28:	22f4      	movs	r2, #244	; 0xf4
 8007b2a:	491c      	ldr	r1, [pc, #112]	; (8007b9c <tcp_input+0x2e8>)
 8007b2c:	480f      	ldr	r0, [pc, #60]	; (8007b6c <tcp_input+0x2b8>)
 8007b2e:	f005 f805 	bl	800cb3c <iprintf>
 8007b32:	e7ad      	b.n	8007a90 <tcp_input+0x1dc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b34:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <tcp_input+0x2ec>)
 8007b36:	681d      	ldr	r5, [r3, #0]
 8007b38:	e03b      	b.n	8007bb2 <tcp_input+0x2fe>
 8007b3a:	bf00      	nop
 8007b3c:	20003e64 	.word	0x20003e64
 8007b40:	20003fa0 	.word	0x20003fa0
 8007b44:	20003e70 	.word	0x20003e70
 8007b48:	20003e6c 	.word	0x20003e6c
 8007b4c:	20003e68 	.word	0x20003e68
 8007b50:	20003e5c 	.word	0x20003e5c
 8007b54:	20003e38 	.word	0x20003e38
 8007b58:	20003e3c 	.word	0x20003e3c
 8007b5c:	20003e72 	.word	0x20003e72
 8007b60:	200076d0 	.word	0x200076d0
 8007b64:	0800eab0 	.word	0x0800eab0
 8007b68:	0800e8e8 	.word	0x0800e8e8
 8007b6c:	0800de6c 	.word	0x0800de6c
 8007b70:	0800e904 	.word	0x0800e904
 8007b74:	0800e8f8 	.word	0x0800e8f8
 8007b78:	0800e924 	.word	0x0800e924
 8007b7c:	0800e94c 	.word	0x0800e94c
 8007b80:	0800e978 	.word	0x0800e978
 8007b84:	20003e40 	.word	0x20003e40
 8007b88:	20003e54 	.word	0x20003e54
 8007b8c:	20003e58 	.word	0x20003e58
 8007b90:	20003e50 	.word	0x20003e50
 8007b94:	200076e4 	.word	0x200076e4
 8007b98:	0800e9a0 	.word	0x0800e9a0
 8007b9c:	0800e9cc 	.word	0x0800e9cc
 8007ba0:	200076e0 	.word	0x200076e0
      if (pcb->remote_port == tcphdr->src &&
 8007ba4:	8b29      	ldrh	r1, [r5, #24]
 8007ba6:	4b80      	ldr	r3, [pc, #512]	; (8007da8 <tcp_input+0x4f4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	881a      	ldrh	r2, [r3, #0]
 8007bac:	4291      	cmp	r1, r2
 8007bae:	d00b      	beq.n	8007bc8 <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bb0:	68ed      	ldr	r5, [r5, #12]
 8007bb2:	b1f5      	cbz	r5, 8007bf2 <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007bb4:	7d2b      	ldrb	r3, [r5, #20]
 8007bb6:	2b0a      	cmp	r3, #10
 8007bb8:	d0f4      	beq.n	8007ba4 <tcp_input+0x2f0>
 8007bba:	4b7c      	ldr	r3, [pc, #496]	; (8007dac <tcp_input+0x4f8>)
 8007bbc:	22fe      	movs	r2, #254	; 0xfe
 8007bbe:	497c      	ldr	r1, [pc, #496]	; (8007db0 <tcp_input+0x4fc>)
 8007bc0:	487c      	ldr	r0, [pc, #496]	; (8007db4 <tcp_input+0x500>)
 8007bc2:	f004 ffbb 	bl	800cb3c <iprintf>
 8007bc6:	e7ed      	b.n	8007ba4 <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 8007bc8:	8aea      	ldrh	r2, [r5, #22]
 8007bca:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d1ef      	bne.n	8007bb0 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007bd0:	686a      	ldr	r2, [r5, #4]
 8007bd2:	4b79      	ldr	r3, [pc, #484]	; (8007db8 <tcp_input+0x504>)
 8007bd4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d1ea      	bne.n	8007bb0 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007bda:	682a      	ldr	r2, [r5, #0]
 8007bdc:	4b76      	ldr	r3, [pc, #472]	; (8007db8 <tcp_input+0x504>)
 8007bde:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d1e5      	bne.n	8007bb0 <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 8007be4:	4628      	mov	r0, r5
 8007be6:	f7fe fd8f 	bl	8006708 <tcp_timewait_input>
        pbuf_free(p);
 8007bea:	4620      	mov	r0, r4
 8007bec:	f7fd fb62 	bl	80052b4 <pbuf_free>
        return;
 8007bf0:	e6ab      	b.n	800794a <tcp_input+0x96>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bf2:	4b72      	ldr	r3, [pc, #456]	; (8007dbc <tcp_input+0x508>)
 8007bf4:	681e      	ldr	r6, [r3, #0]
 8007bf6:	4630      	mov	r0, r6
    prev = NULL;
 8007bf8:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bfa:	e001      	b.n	8007c00 <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 8007bfc:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bfe:	68c0      	ldr	r0, [r0, #12]
 8007c00:	b168      	cbz	r0, 8007c1e <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 8007c02:	8ac2      	ldrh	r2, [r0, #22]
 8007c04:	4b68      	ldr	r3, [pc, #416]	; (8007da8 <tcp_input+0x4f4>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	885b      	ldrh	r3, [r3, #2]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d1f6      	bne.n	8007bfc <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007c0e:	6803      	ldr	r3, [r0, #0]
 8007c10:	4a69      	ldr	r2, [pc, #420]	; (8007db8 <tcp_input+0x504>)
 8007c12:	6952      	ldr	r2, [r2, #20]
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d002      	beq.n	8007c1e <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007c18:	b108      	cbz	r0, 8007c1e <tcp_input+0x36a>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1ee      	bne.n	8007bfc <tcp_input+0x348>
    if (lpcb != NULL) {
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f43f af38 	beq.w	8007a94 <tcp_input+0x1e0>
      if (prev != NULL) {
 8007c24:	b121      	cbz	r1, 8007c30 <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007c26:	68c3      	ldr	r3, [r0, #12]
 8007c28:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007c2a:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007c2c:	4b63      	ldr	r3, [pc, #396]	; (8007dbc <tcp_input+0x508>)
 8007c2e:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 8007c30:	f7fe fdb2 	bl	8006798 <tcp_listen_input>
      pbuf_free(p);
 8007c34:	4620      	mov	r0, r4
 8007c36:	f7fd fb3d 	bl	80052b4 <pbuf_free>
      return;
 8007c3a:	e686      	b.n	800794a <tcp_input+0x96>
          tcp_send_empty_ack(pcb);
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 fab9 	bl	80081b4 <tcp_send_empty_ack>
 8007c42:	e759      	b.n	8007af8 <tcp_input+0x244>
    tcp_input_pcb = pcb;
 8007c44:	4b5e      	ldr	r3, [pc, #376]	; (8007dc0 <tcp_input+0x50c>)
 8007c46:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f7ff fb97 	bl	800737c <tcp_process>
    if (err != ERR_ABRT) {
 8007c4e:	f110 0f0d 	cmn.w	r0, #13
 8007c52:	f43f af51 	beq.w	8007af8 <tcp_input+0x244>
      if (recv_flags & TF_RESET) {
 8007c56:	4b5b      	ldr	r3, [pc, #364]	; (8007dc4 <tcp_input+0x510>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f013 0f08 	tst.w	r3, #8
 8007c5e:	d00f      	beq.n	8007c80 <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007c60:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8007c64:	b11b      	cbz	r3, 8007c6e <tcp_input+0x3ba>
 8007c66:	f06f 010d 	mvn.w	r1, #13
 8007c6a:	6928      	ldr	r0, [r5, #16]
 8007c6c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4855      	ldr	r0, [pc, #340]	; (8007dc8 <tcp_input+0x514>)
 8007c72:	f7fe f973 	bl	8005f5c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007c76:	4629      	mov	r1, r5
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f7fd f947 	bl	8004f0c <memp_free>
 8007c7e:	e73b      	b.n	8007af8 <tcp_input+0x244>
        if (recv_acked > 0) {
 8007c80:	4b52      	ldr	r3, [pc, #328]	; (8007dcc <tcp_input+0x518>)
 8007c82:	881a      	ldrh	r2, [r3, #0]
 8007c84:	b162      	cbz	r2, 8007ca0 <tcp_input+0x3ec>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007c86:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d048      	beq.n	8007d1e <tcp_input+0x46a>
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	6928      	ldr	r0, [r5, #16]
 8007c90:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8007c92:	f110 0f0d 	cmn.w	r0, #13
 8007c96:	f43f af2f 	beq.w	8007af8 <tcp_input+0x244>
          recv_acked = 0;
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4b4b      	ldr	r3, [pc, #300]	; (8007dcc <tcp_input+0x518>)
 8007c9e:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f7fe fd0f 	bl	80066c4 <tcp_input_delayed_close>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	f47f af26 	bne.w	8007af8 <tcp_input+0x244>
        if (recv_data != NULL) {
 8007cac:	4b48      	ldr	r3, [pc, #288]	; (8007dd0 <tcp_input+0x51c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	b1eb      	cbz	r3, 8007cee <tcp_input+0x43a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007cb2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007cb4:	b133      	cbz	r3, 8007cc4 <tcp_input+0x410>
 8007cb6:	4b3d      	ldr	r3, [pc, #244]	; (8007dac <tcp_input+0x4f8>)
 8007cb8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007cbc:	4945      	ldr	r1, [pc, #276]	; (8007dd4 <tcp_input+0x520>)
 8007cbe:	483d      	ldr	r0, [pc, #244]	; (8007db4 <tcp_input+0x500>)
 8007cc0:	f004 ff3c 	bl	800cb3c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007cc4:	7eab      	ldrb	r3, [r5, #26]
 8007cc6:	f013 0f10 	tst.w	r3, #16
 8007cca:	d12a      	bne.n	8007d22 <tcp_input+0x46e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007ccc:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 8007cd0:	b37c      	cbz	r4, 8007d32 <tcp_input+0x47e>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	4a3e      	ldr	r2, [pc, #248]	; (8007dd0 <tcp_input+0x51c>)
 8007cd6:	6812      	ldr	r2, [r2, #0]
 8007cd8:	4629      	mov	r1, r5
 8007cda:	6928      	ldr	r0, [r5, #16]
 8007cdc:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 8007cde:	f110 0f0d 	cmn.w	r0, #13
 8007ce2:	f43f af09 	beq.w	8007af8 <tcp_input+0x244>
          if (err != ERR_OK) {
 8007ce6:	b110      	cbz	r0, 8007cee <tcp_input+0x43a>
            pcb->refused_data = recv_data;
 8007ce8:	4b39      	ldr	r3, [pc, #228]	; (8007dd0 <tcp_input+0x51c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8007cee:	4b35      	ldr	r3, [pc, #212]	; (8007dc4 <tcp_input+0x510>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	f013 0f20 	tst.w	r3, #32
 8007cf6:	d005      	beq.n	8007d04 <tcp_input+0x450>
          if (pcb->refused_data != NULL) {
 8007cf8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007cfa:	b313      	cbz	r3, 8007d42 <tcp_input+0x48e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007cfc:	7b5a      	ldrb	r2, [r3, #13]
 8007cfe:	f042 0220 	orr.w	r2, r2, #32
 8007d02:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8007d04:	2200      	movs	r2, #0
 8007d06:	4b2e      	ldr	r3, [pc, #184]	; (8007dc0 <tcp_input+0x50c>)
 8007d08:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f7fe fcda 	bl	80066c4 <tcp_input_delayed_close>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	f47f aef1 	bne.w	8007af8 <tcp_input+0x244>
        tcp_output(pcb);
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 fa86 	bl	8008228 <tcp_output>
 8007d1c:	e6ec      	b.n	8007af8 <tcp_input+0x244>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007d1e:	2000      	movs	r0, #0
 8007d20:	e7b7      	b.n	8007c92 <tcp_input+0x3de>
            pbuf_free(recv_data);
 8007d22:	4b2b      	ldr	r3, [pc, #172]	; (8007dd0 <tcp_input+0x51c>)
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	f7fd fac5 	bl	80052b4 <pbuf_free>
            tcp_abort(pcb);
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f7fe fb36 	bl	800639c <tcp_abort>
            goto aborted;
 8007d30:	e6e2      	b.n	8007af8 <tcp_input+0x244>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007d32:	2300      	movs	r3, #0
 8007d34:	4a26      	ldr	r2, [pc, #152]	; (8007dd0 <tcp_input+0x51c>)
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fa16 	bl	800616c <tcp_recv_null>
 8007d40:	e7cd      	b.n	8007cde <tcp_input+0x42a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007d42:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8007d44:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007d48:	d001      	beq.n	8007d4e <tcp_input+0x49a>
              pcb->rcv_wnd++;
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8007d4e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 8007d52:	b144      	cbz	r4, 8007d66 <tcp_input+0x4b2>
 8007d54:	2300      	movs	r3, #0
 8007d56:	461a      	mov	r2, r3
 8007d58:	4629      	mov	r1, r5
 8007d5a:	6928      	ldr	r0, [r5, #16]
 8007d5c:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 8007d5e:	f110 0f0d 	cmn.w	r0, #13
 8007d62:	d1cf      	bne.n	8007d04 <tcp_input+0x450>
 8007d64:	e6c8      	b.n	8007af8 <tcp_input+0x244>
            TCP_EVENT_CLOSED(pcb, err);
 8007d66:	2000      	movs	r0, #0
 8007d68:	e7f9      	b.n	8007d5e <tcp_input+0x4aa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007d6a:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <tcp_input+0x4f4>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	8998      	ldrh	r0, [r3, #12]
 8007d70:	f7fc fde4 	bl	800493c <lwip_htons>
 8007d74:	f010 0f04 	tst.w	r0, #4
 8007d78:	d003      	beq.n	8007d82 <tcp_input+0x4ce>
    pbuf_free(p);
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f7fd fa9a 	bl	80052b4 <pbuf_free>
 8007d80:	e5e3      	b.n	800794a <tcp_input+0x96>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007d82:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <tcp_input+0x4f4>)
 8007d84:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d86:	4a14      	ldr	r2, [pc, #80]	; (8007dd8 <tcp_input+0x524>)
 8007d88:	4914      	ldr	r1, [pc, #80]	; (8007ddc <tcp_input+0x528>)
 8007d8a:	8808      	ldrh	r0, [r1, #0]
 8007d8c:	4914      	ldr	r1, [pc, #80]	; (8007de0 <tcp_input+0x52c>)
 8007d8e:	6809      	ldr	r1, [r1, #0]
 8007d90:	881d      	ldrh	r5, [r3, #0]
 8007d92:	9501      	str	r5, [sp, #4]
 8007d94:	885b      	ldrh	r3, [r3, #2]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	3204      	adds	r2, #4
 8007d9c:	4401      	add	r1, r0
 8007d9e:	4811      	ldr	r0, [pc, #68]	; (8007de4 <tcp_input+0x530>)
 8007da0:	6800      	ldr	r0, [r0, #0]
 8007da2:	f000 fb9d 	bl	80084e0 <tcp_rst>
 8007da6:	e7e8      	b.n	8007d7a <tcp_input+0x4c6>
 8007da8:	20003e64 	.word	0x20003e64
 8007dac:	0800eab0 	.word	0x0800eab0
 8007db0:	0800e9f8 	.word	0x0800e9f8
 8007db4:	0800de6c 	.word	0x0800de6c
 8007db8:	20003fa0 	.word	0x20003fa0
 8007dbc:	200076d8 	.word	0x200076d8
 8007dc0:	200076e4 	.word	0x200076e4
 8007dc4:	20003e58 	.word	0x20003e58
 8007dc8:	200076d0 	.word	0x200076d0
 8007dcc:	20003e50 	.word	0x20003e50
 8007dd0:	20003e54 	.word	0x20003e54
 8007dd4:	0800ea28 	.word	0x0800ea28
 8007dd8:	20003fb0 	.word	0x20003fb0
 8007ddc:	20003e72 	.word	0x20003e72
 8007de0:	20003e5c 	.word	0x20003e5c
 8007de4:	20003e38 	.word	0x20003e38

08007de8 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8007de8:	4a02      	ldr	r2, [pc, #8]	; (8007df4 <tcp_trigger_input_pcb_close+0xc>)
 8007dea:	7813      	ldrb	r3, [r2, #0]
 8007dec:	f043 0310 	orr.w	r3, r3, #16
 8007df0:	7013      	strb	r3, [r2, #0]
 8007df2:	4770      	bx	lr
 8007df4:	20003e58 	.word	0x20003e58

08007df8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8007df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dfc:	4680      	mov	r8, r0
 8007dfe:	460e      	mov	r6, r1
 8007e00:	4617      	mov	r7, r2
 8007e02:	4699      	mov	r9, r3
 8007e04:	f89d a020 	ldrb.w	sl, [sp, #32]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007e08:	f01a 0f01 	tst.w	sl, #1
 8007e0c:	d03c      	beq.n	8007e88 <tcp_create_segment+0x90>
 8007e0e:	2504      	movs	r5, #4

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007e10:	2003      	movs	r0, #3
 8007e12:	f7fd f861 	bl	8004ed8 <memp_malloc>
 8007e16:	4604      	mov	r4, r0
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d037      	beq.n	8007e8c <tcp_create_segment+0x94>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
 8007e1c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	6003      	str	r3, [r0, #0]
  seg->p = p;
 8007e24:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8007e26:	8933      	ldrh	r3, [r6, #8]
 8007e28:	fa1f fa85 	uxth.w	sl, r5
 8007e2c:	4553      	cmp	r3, sl
 8007e2e:	d331      	bcc.n	8007e94 <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 8007e30:	8933      	ldrh	r3, [r6, #8]
 8007e32:	eba3 030a 	sub.w	r3, r3, sl
 8007e36:	8123      	strh	r3, [r4, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8007e38:	2114      	movs	r1, #20
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f7fd fa30 	bl	80052a0 <pbuf_header>
 8007e40:	bb78      	cbnz	r0, 8007ea2 <tcp_create_segment+0xaa>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007e42:	6863      	ldr	r3, [r4, #4]
 8007e44:	685e      	ldr	r6, [r3, #4]
 8007e46:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8007e48:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 8007e4c:	f7fc fd76 	bl	800493c <lwip_htons>
 8007e50:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8007e52:	68e6      	ldr	r6, [r4, #12]
 8007e54:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8007e58:	f7fc fd70 	bl	800493c <lwip_htons>
 8007e5c:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8007e5e:	68e6      	ldr	r6, [r4, #12]
 8007e60:	4648      	mov	r0, r9
 8007e62:	f7fc fd6e 	bl	8004942 <lwip_htonl>
 8007e66:	6070      	str	r0, [r6, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007e68:	68e6      	ldr	r6, [r4, #12]
 8007e6a:	08a8      	lsrs	r0, r5, #2
 8007e6c:	3005      	adds	r0, #5
 8007e6e:	0300      	lsls	r0, r0, #12
 8007e70:	b280      	uxth	r0, r0
 8007e72:	4338      	orrs	r0, r7
 8007e74:	f7fc fd62 	bl	800493c <lwip_htons>
 8007e78:	81b0      	strh	r0, [r6, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8007e7a:	68e3      	ldr	r3, [r4, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	749a      	strb	r2, [r3, #18]
 8007e80:	74da      	strb	r2, [r3, #19]
  return seg;
}
 8007e82:	4620      	mov	r0, r4
 8007e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007e88:	2500      	movs	r5, #0
 8007e8a:	e7c1      	b.n	8007e10 <tcp_create_segment+0x18>
    pbuf_free(p);
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7fd fa11 	bl	80052b4 <pbuf_free>
    return NULL;
 8007e92:	e7f6      	b.n	8007e82 <tcp_create_segment+0x8a>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <tcp_create_segment+0xb4>)
 8007e96:	22ba      	movs	r2, #186	; 0xba
 8007e98:	4905      	ldr	r1, [pc, #20]	; (8007eb0 <tcp_create_segment+0xb8>)
 8007e9a:	4806      	ldr	r0, [pc, #24]	; (8007eb4 <tcp_create_segment+0xbc>)
 8007e9c:	f004 fe4e 	bl	800cb3c <iprintf>
 8007ea0:	e7c6      	b.n	8007e30 <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7fd fe08 	bl	8005ab8 <tcp_seg_free>
    return NULL;
 8007ea8:	2400      	movs	r4, #0
 8007eaa:	e7ea      	b.n	8007e82 <tcp_create_segment+0x8a>
 8007eac:	0800edd0 	.word	0x0800edd0
 8007eb0:	0800ec48 	.word	0x0800ec48
 8007eb4:	0800de6c 	.word	0x0800de6c

08007eb8 <tcp_output_alloc_header>:
{
 8007eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007ec2:	4411      	add	r1, r2
 8007ec4:	b289      	uxth	r1, r1
 8007ec6:	3114      	adds	r1, #20
 8007ec8:	2200      	movs	r2, #0
 8007eca:	b289      	uxth	r1, r1
 8007ecc:	2001      	movs	r0, #1
 8007ece:	f7fd fa5d 	bl	800538c <pbuf_alloc>
  if (p != NULL) {
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	b348      	cbz	r0, 8007f2a <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8007ed6:	8942      	ldrh	r2, [r0, #10]
 8007ed8:	f104 0314 	add.w	r3, r4, #20
 8007edc:	429a      	cmp	r2, r3
 8007ede:	db27      	blt.n	8007f30 <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 8007ee0:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8007ee2:	8af0      	ldrh	r0, [r6, #22]
 8007ee4:	f7fc fd2a 	bl	800493c <lwip_htons>
 8007ee8:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8007eea:	8b30      	ldrh	r0, [r6, #24]
 8007eec:	f7fc fd26 	bl	800493c <lwip_htons>
 8007ef0:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 8007ef2:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8007ef6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8007ef8:	f7fc fd23 	bl	8004942 <lwip_htonl>
 8007efc:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8007efe:	08a0      	lsrs	r0, r4, #2
 8007f00:	3005      	adds	r0, #5
 8007f02:	0300      	lsls	r0, r0, #12
 8007f04:	b280      	uxth	r0, r0
 8007f06:	f040 0010 	orr.w	r0, r0, #16
 8007f0a:	f7fc fd17 	bl	800493c <lwip_htons>
 8007f0e:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007f10:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 8007f12:	f7fc fd13 	bl	800493c <lwip_htons>
 8007f16:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	742b      	strb	r3, [r5, #16]
 8007f1c:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 8007f1e:	74ab      	strb	r3, [r5, #18]
 8007f20:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007f22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007f24:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 8007f26:	4413      	add	r3, r2
 8007f28:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8007f30:	4b03      	ldr	r3, [pc, #12]	; (8007f40 <tcp_output_alloc_header+0x88>)
 8007f32:	2273      	movs	r2, #115	; 0x73
 8007f34:	4903      	ldr	r1, [pc, #12]	; (8007f44 <tcp_output_alloc_header+0x8c>)
 8007f36:	4804      	ldr	r0, [pc, #16]	; (8007f48 <tcp_output_alloc_header+0x90>)
 8007f38:	f004 fe00 	bl	800cb3c <iprintf>
 8007f3c:	e7d0      	b.n	8007ee0 <tcp_output_alloc_header+0x28>
 8007f3e:	bf00      	nop
 8007f40:	0800edd0 	.word	0x0800edd0
 8007f44:	0800eda0 	.word	0x0800eda0
 8007f48:	0800de6c 	.word	0x0800de6c

08007f4c <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8007f4c:	6843      	ldr	r3, [r0, #4]
 8007f4e:	89db      	ldrh	r3, [r3, #14]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d001      	beq.n	8007f58 <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8007f54:	2000      	movs	r0, #0
 8007f56:	4770      	bx	lr
{
 8007f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	460d      	mov	r5, r1
 8007f60:	4604      	mov	r4, r0
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8007f62:	68c7      	ldr	r7, [r0, #12]
 8007f64:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8007f66:	f7fc fcec 	bl	8004942 <lwip_htonl>
 8007f6a:	60b8      	str	r0, [r7, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007f6c:	68e7      	ldr	r7, [r4, #12]
 8007f6e:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8007f70:	f7fc fce4 	bl	800493c <lwip_htons>
 8007f74:	81f8      	strh	r0, [r7, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f78:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8007f7a:	4413      	add	r3, r2
 8007f7c:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8007f7e:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8007f80:	7aa3      	ldrb	r3, [r4, #10]
 8007f82:	f013 0f01 	tst.w	r3, #1
 8007f86:	d126      	bne.n	8007fd6 <tcp_output_segment+0x8a>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8007f88:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	db2d      	blt.n	8007fec <tcp_output_segment+0xa0>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
 8007f90:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d02d      	beq.n	8007ff2 <tcp_output_segment+0xa6>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8007f96:	68e3      	ldr	r3, [r4, #12]
 8007f98:	6862      	ldr	r2, [r4, #4]
 8007f9a:	6851      	ldr	r1, [r2, #4]
 8007f9c:	1a5b      	subs	r3, r3, r1
 8007f9e:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8007fa0:	8951      	ldrh	r1, [r2, #10]
 8007fa2:	1ac9      	subs	r1, r1, r3
 8007fa4:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 8007fa6:	6861      	ldr	r1, [r4, #4]
 8007fa8:	890a      	ldrh	r2, [r1, #8]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 8007fae:	6863      	ldr	r3, [r4, #4]
 8007fb0:	68e2      	ldr	r2, [r4, #12]
 8007fb2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8007fb4:	68e3      	ldr	r3, [r4, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	741a      	strb	r2, [r3, #16]
 8007fba:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8007fbc:	6860      	ldr	r0, [r4, #4]
 8007fbe:	7aab      	ldrb	r3, [r5, #10]
 8007fc0:	7a6a      	ldrb	r2, [r5, #9]
 8007fc2:	9602      	str	r6, [sp, #8]
 8007fc4:	2106      	movs	r1, #6
 8007fc6:	9101      	str	r1, [sp, #4]
 8007fc8:	9200      	str	r2, [sp, #0]
 8007fca:	1d2a      	adds	r2, r5, #4
 8007fcc:	4629      	mov	r1, r5
 8007fce:	f003 f91d 	bl	800b20c <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 8007fd2:	b005      	add	sp, #20
 8007fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8007fd6:	1d29      	adds	r1, r5, #4
 8007fd8:	f44f 7006 	mov.w	r0, #536	; 0x218
 8007fdc:	f7fe facc 	bl	8006578 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8007fe0:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8007fe4:	f7fc fcad 	bl	8004942 <lwip_htonl>
 8007fe8:	6178      	str	r0, [r7, #20]
 8007fea:	e7cd      	b.n	8007f88 <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	862b      	strh	r3, [r5, #48]	; 0x30
 8007ff0:	e7ce      	b.n	8007f90 <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 8007ff2:	4b04      	ldr	r3, [pc, #16]	; (8008004 <tcp_output_segment+0xb8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8007ff8:	68e3      	ldr	r3, [r4, #12]
 8007ffa:	6858      	ldr	r0, [r3, #4]
 8007ffc:	f7fc fca1 	bl	8004942 <lwip_htonl>
 8008000:	63a8      	str	r0, [r5, #56]	; 0x38
 8008002:	e7c8      	b.n	8007f96 <tcp_output_segment+0x4a>
 8008004:	200076d4 	.word	0x200076d4

08008008 <tcp_enqueue_flags>:
{
 8008008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800800c:	b083      	sub	sp, #12
 800800e:	4604      	mov	r4, r0
 8008010:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008012:	f011 0703 	ands.w	r7, r1, #3
 8008016:	d030      	beq.n	800807a <tcp_enqueue_flags+0x72>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008018:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800801c:	2b08      	cmp	r3, #8
 800801e:	d902      	bls.n	8008026 <tcp_enqueue_flags+0x1e>
 8008020:	f015 0f01 	tst.w	r5, #1
 8008024:	d031      	beq.n	800808a <tcp_enqueue_flags+0x82>
  if (flags & TCP_SYN) {
 8008026:	f015 0f02 	tst.w	r5, #2
 800802a:	d135      	bne.n	8008098 <tcp_enqueue_flags+0x90>
  u8_t optflags = 0;
 800802c:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008030:	f1b9 0f00 	cmp.w	r9, #0
 8008034:	d033      	beq.n	800809e <tcp_enqueue_flags+0x96>
 8008036:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008038:	b2b6      	uxth	r6, r6
 800803a:	2200      	movs	r2, #0
 800803c:	4631      	mov	r1, r6
 800803e:	4610      	mov	r0, r2
 8008040:	f7fd f9a4 	bl	800538c <pbuf_alloc>
 8008044:	4680      	mov	r8, r0
 8008046:	b360      	cbz	r0, 80080a2 <tcp_enqueue_flags+0x9a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008048:	8943      	ldrh	r3, [r0, #10]
 800804a:	429e      	cmp	r6, r3
 800804c:	d830      	bhi.n	80080b0 <tcp_enqueue_flags+0xa8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800804e:	f8cd 9000 	str.w	r9, [sp]
 8008052:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008054:	462a      	mov	r2, r5
 8008056:	4641      	mov	r1, r8
 8008058:	4620      	mov	r0, r4
 800805a:	f7ff fecd 	bl	8007df8 <tcp_create_segment>
 800805e:	4606      	mov	r6, r0
 8008060:	b370      	cbz	r0, 80080c0 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008062:	68c3      	ldr	r3, [r0, #12]
 8008064:	f013 0f03 	tst.w	r3, #3
 8008068:	d131      	bne.n	80080ce <tcp_enqueue_flags+0xc6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800806a:	8933      	ldrh	r3, [r6, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d136      	bne.n	80080de <tcp_enqueue_flags+0xd6>
  if (pcb->unsent == NULL) {
 8008070:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008072:	2a00      	cmp	r2, #0
 8008074:	d13c      	bne.n	80080f0 <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 8008076:	66a6      	str	r6, [r4, #104]	; 0x68
 8008078:	e03e      	b.n	80080f8 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800807a:	4b36      	ldr	r3, [pc, #216]	; (8008154 <tcp_enqueue_flags+0x14c>)
 800807c:	f240 321b 	movw	r2, #795	; 0x31b
 8008080:	4935      	ldr	r1, [pc, #212]	; (8008158 <tcp_enqueue_flags+0x150>)
 8008082:	4836      	ldr	r0, [pc, #216]	; (800815c <tcp_enqueue_flags+0x154>)
 8008084:	f004 fd5a 	bl	800cb3c <iprintf>
 8008088:	e7c6      	b.n	8008018 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 800808a:	7ea3      	ldrb	r3, [r4, #26]
 800808c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008090:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 8008092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008096:	e04a      	b.n	800812e <tcp_enqueue_flags+0x126>
    optflags = TF_SEG_OPTS_MSS;
 8008098:	f04f 0901 	mov.w	r9, #1
 800809c:	e7c8      	b.n	8008030 <tcp_enqueue_flags+0x28>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800809e:	2600      	movs	r6, #0
 80080a0:	e7ca      	b.n	8008038 <tcp_enqueue_flags+0x30>
    pcb->flags |= TF_NAGLEMEMERR;
 80080a2:	7ea3      	ldrb	r3, [r4, #26]
 80080a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080a8:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 80080aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ae:	e03e      	b.n	800812e <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80080b0:	4b28      	ldr	r3, [pc, #160]	; (8008154 <tcp_enqueue_flags+0x14c>)
 80080b2:	f240 3241 	movw	r2, #833	; 0x341
 80080b6:	492a      	ldr	r1, [pc, #168]	; (8008160 <tcp_enqueue_flags+0x158>)
 80080b8:	4828      	ldr	r0, [pc, #160]	; (800815c <tcp_enqueue_flags+0x154>)
 80080ba:	f004 fd3f 	bl	800cb3c <iprintf>
 80080be:	e7c6      	b.n	800804e <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 80080c0:	7ea3      	ldrb	r3, [r4, #26]
 80080c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080c6:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080cc:	e02f      	b.n	800812e <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80080ce:	4b21      	ldr	r3, [pc, #132]	; (8008154 <tcp_enqueue_flags+0x14c>)
 80080d0:	f240 3249 	movw	r2, #841	; 0x349
 80080d4:	4923      	ldr	r1, [pc, #140]	; (8008164 <tcp_enqueue_flags+0x15c>)
 80080d6:	4821      	ldr	r0, [pc, #132]	; (800815c <tcp_enqueue_flags+0x154>)
 80080d8:	f004 fd30 	bl	800cb3c <iprintf>
 80080dc:	e7c5      	b.n	800806a <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80080de:	4b1d      	ldr	r3, [pc, #116]	; (8008154 <tcp_enqueue_flags+0x14c>)
 80080e0:	f240 324a 	movw	r2, #842	; 0x34a
 80080e4:	4920      	ldr	r1, [pc, #128]	; (8008168 <tcp_enqueue_flags+0x160>)
 80080e6:	481d      	ldr	r0, [pc, #116]	; (800815c <tcp_enqueue_flags+0x154>)
 80080e8:	f004 fd28 	bl	800cb3c <iprintf>
 80080ec:	e7c0      	b.n	8008070 <tcp_enqueue_flags+0x68>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80080ee:	461a      	mov	r2, r3
 80080f0:	6813      	ldr	r3, [r2, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1fb      	bne.n	80080ee <tcp_enqueue_flags+0xe6>
    useg->next = seg;
 80080f6:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80080fe:	b117      	cbz	r7, 8008106 <tcp_enqueue_flags+0xfe>
    pcb->snd_lbb++;
 8008100:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008102:	3301      	adds	r3, #1
 8008104:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8008106:	f015 0f01 	tst.w	r5, #1
 800810a:	d003      	beq.n	8008114 <tcp_enqueue_flags+0x10c>
    pcb->flags |= TF_FIN;
 800810c:	7ea3      	ldrb	r3, [r4, #26]
 800810e:	f043 0320 	orr.w	r3, r3, #32
 8008112:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008114:	6870      	ldr	r0, [r6, #4]
 8008116:	f7fd fa93 	bl	8005640 <pbuf_clen>
 800811a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800811e:	4418      	add	r0, r3
 8008120:	b280      	uxth	r0, r0
 8008122:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008126:	b190      	cbz	r0, 800814e <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008128:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800812a:	b11b      	cbz	r3, 8008134 <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 800812c:	2000      	movs	r0, #0
}
 800812e:	b003      	add	sp, #12
 8008130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008134:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008136:	b10b      	cbz	r3, 800813c <tcp_enqueue_flags+0x134>
  return ERR_OK;
 8008138:	2000      	movs	r0, #0
 800813a:	e7f8      	b.n	800812e <tcp_enqueue_flags+0x126>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800813c:	4b05      	ldr	r3, [pc, #20]	; (8008154 <tcp_enqueue_flags+0x14c>)
 800813e:	f240 326d 	movw	r2, #877	; 0x36d
 8008142:	490a      	ldr	r1, [pc, #40]	; (800816c <tcp_enqueue_flags+0x164>)
 8008144:	4805      	ldr	r0, [pc, #20]	; (800815c <tcp_enqueue_flags+0x154>)
 8008146:	f004 fcf9 	bl	800cb3c <iprintf>
  return ERR_OK;
 800814a:	2000      	movs	r0, #0
 800814c:	e7ef      	b.n	800812e <tcp_enqueue_flags+0x126>
 800814e:	2000      	movs	r0, #0
 8008150:	e7ed      	b.n	800812e <tcp_enqueue_flags+0x126>
 8008152:	bf00      	nop
 8008154:	0800edd0 	.word	0x0800edd0
 8008158:	0800ec60 	.word	0x0800ec60
 800815c:	0800de6c 	.word	0x0800de6c
 8008160:	0800ecb8 	.word	0x0800ecb8
 8008164:	0800ecf4 	.word	0x0800ecf4
 8008168:	0800ed0c 	.word	0x0800ed0c
 800816c:	0800ed38 	.word	0x0800ed38

08008170 <tcp_send_fin>:
{
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8008174:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8008176:	b90c      	cbnz	r4, 800817c <tcp_send_fin+0xc>
 8008178:	e00a      	b.n	8008190 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 800817a:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1fb      	bne.n	800817a <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008182:	68e3      	ldr	r3, [r4, #12]
 8008184:	8998      	ldrh	r0, [r3, #12]
 8008186:	f7fc fbd9 	bl	800493c <lwip_htons>
 800818a:	f010 0f07 	tst.w	r0, #7
 800818e:	d004      	beq.n	800819a <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008190:	2101      	movs	r1, #1
 8008192:	4628      	mov	r0, r5
 8008194:	f7ff ff38 	bl	8008008 <tcp_enqueue_flags>
}
 8008198:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800819a:	68e6      	ldr	r6, [r4, #12]
 800819c:	89b4      	ldrh	r4, [r6, #12]
 800819e:	2001      	movs	r0, #1
 80081a0:	f7fc fbcc 	bl	800493c <lwip_htons>
 80081a4:	4320      	orrs	r0, r4
 80081a6:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 80081a8:	7eab      	ldrb	r3, [r5, #26]
 80081aa:	f043 0320 	orr.w	r3, r3, #32
 80081ae:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 80081b0:	2000      	movs	r0, #0
 80081b2:	bd70      	pop	{r4, r5, r6, pc}

080081b4 <tcp_send_empty_ack>:
{
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80081ba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80081bc:	f7fc fbc1 	bl	8004942 <lwip_htonl>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2200      	movs	r2, #0
 80081c4:	4611      	mov	r1, r2
 80081c6:	4620      	mov	r0, r4
 80081c8:	f7ff fe76 	bl	8007eb8 <tcp_output_alloc_header>
  if (p == NULL) {
 80081cc:	b1e0      	cbz	r0, 8008208 <tcp_send_empty_ack+0x54>
 80081ce:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80081d0:	1d25      	adds	r5, r4, #4
 80081d2:	4628      	mov	r0, r5
 80081d4:	f002 fe5e 	bl	800ae94 <ip4_route>
  if (netif == NULL) {
 80081d8:	b1e8      	cbz	r0, 8008216 <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80081da:	7aa3      	ldrb	r3, [r4, #10]
 80081dc:	7a61      	ldrb	r1, [r4, #9]
 80081de:	9002      	str	r0, [sp, #8]
 80081e0:	2206      	movs	r2, #6
 80081e2:	9201      	str	r2, [sp, #4]
 80081e4:	9100      	str	r1, [sp, #0]
 80081e6:	462a      	mov	r2, r5
 80081e8:	4621      	mov	r1, r4
 80081ea:	4630      	mov	r0, r6
 80081ec:	f003 f80e 	bl	800b20c <ip4_output_if>
 80081f0:	4605      	mov	r5, r0
  pbuf_free(p);
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7fd f85e 	bl	80052b4 <pbuf_free>
  if (err != ERR_OK) {
 80081f8:	b985      	cbnz	r5, 800821c <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80081fa:	7ea3      	ldrb	r3, [r4, #26]
 80081fc:	f023 0303 	bic.w	r3, r3, #3
 8008200:	76a3      	strb	r3, [r4, #26]
}
 8008202:	4628      	mov	r0, r5
 8008204:	b004      	add	sp, #16
 8008206:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008208:	7ea3      	ldrb	r3, [r4, #26]
 800820a:	f043 0303 	orr.w	r3, r3, #3
 800820e:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 8008210:	f06f 0501 	mvn.w	r5, #1
 8008214:	e7f5      	b.n	8008202 <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 8008216:	f06f 0503 	mvn.w	r5, #3
 800821a:	e7ea      	b.n	80081f2 <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800821c:	7ea3      	ldrb	r3, [r4, #26]
 800821e:	f043 0303 	orr.w	r3, r3, #3
 8008222:	76a3      	strb	r3, [r4, #26]
 8008224:	e7ed      	b.n	8008202 <tcp_send_empty_ack+0x4e>
	...

08008228 <tcp_output>:
{
 8008228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800822e:	7d03      	ldrb	r3, [r0, #20]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d01e      	beq.n	8008272 <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 8008234:	4ba5      	ldr	r3, [pc, #660]	; (80084cc <tcp_output+0x2a4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	429d      	cmp	r5, r3
 800823a:	f000 813e 	beq.w	80084ba <tcp_output+0x292>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800823e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8008242:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 8008246:	42bb      	cmp	r3, r7
 8008248:	d200      	bcs.n	800824c <tcp_output+0x24>
 800824a:	461f      	mov	r7, r3
  seg = pcb->unsent;
 800824c:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 800824e:	7eab      	ldrb	r3, [r5, #26]
 8008250:	f013 0f02 	tst.w	r3, #2
 8008254:	d00a      	beq.n	800826c <tcp_output+0x44>
 8008256:	b1a4      	cbz	r4, 8008282 <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8008258:	68e3      	ldr	r3, [r4, #12]
 800825a:	6858      	ldr	r0, [r3, #4]
 800825c:	f7fc fb71 	bl	8004942 <lwip_htonl>
 8008260:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008262:	1ac3      	subs	r3, r0, r3
 8008264:	8920      	ldrh	r0, [r4, #8]
 8008266:	4403      	add	r3, r0
     (seg == NULL ||
 8008268:	429f      	cmp	r7, r3
 800826a:	d30a      	bcc.n	8008282 <tcp_output+0x5a>
  useg = pcb->unacked;
 800826c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 800826e:	b976      	cbnz	r6, 800828e <tcp_output+0x66>
 8008270:	e010      	b.n	8008294 <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008272:	4b97      	ldr	r3, [pc, #604]	; (80084d0 <tcp_output+0x2a8>)
 8008274:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8008278:	4996      	ldr	r1, [pc, #600]	; (80084d4 <tcp_output+0x2ac>)
 800827a:	4897      	ldr	r0, [pc, #604]	; (80084d8 <tcp_output+0x2b0>)
 800827c:	f004 fc5e 	bl	800cb3c <iprintf>
 8008280:	e7d8      	b.n	8008234 <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 8008282:	4628      	mov	r0, r5
 8008284:	f7ff ff96 	bl	80081b4 <tcp_send_empty_ack>
 8008288:	4603      	mov	r3, r0
 800828a:	e03f      	b.n	800830c <tcp_output+0xe4>
    for (; useg->next != NULL; useg = useg->next);
 800828c:	461e      	mov	r6, r3
 800828e:	6833      	ldr	r3, [r6, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1fb      	bne.n	800828c <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008294:	1d28      	adds	r0, r5, #4
 8008296:	f002 fdfd 	bl	800ae94 <ip4_route>
  if (netif == NULL) {
 800829a:	4680      	mov	r8, r0
 800829c:	2800      	cmp	r0, #0
 800829e:	f000 810e 	beq.w	80084be <tcp_output+0x296>
  if (ip_addr_isany(&pcb->local_ip)) {
 80082a2:	b10d      	cbz	r5, 80082a8 <tcp_output+0x80>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	b933      	cbnz	r3, 80082b6 <tcp_output+0x8e>
    if (local_ip == NULL) {
 80082a8:	f118 0f04 	cmn.w	r8, #4
 80082ac:	f000 810a 	beq.w	80084c4 <tcp_output+0x29c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80082b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80082b4:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 80082b6:	2c00      	cmp	r4, #0
 80082b8:	f000 80a2 	beq.w	8008400 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80082bc:	68e3      	ldr	r3, [r4, #12]
 80082be:	6858      	ldr	r0, [r3, #4]
 80082c0:	f7fc fb3f 	bl	8004942 <lwip_htonl>
 80082c4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80082c6:	1ac3      	subs	r3, r0, r3
 80082c8:	8920      	ldrh	r0, [r4, #8]
 80082ca:	4403      	add	r3, r0
  if (seg != NULL &&
 80082cc:	429f      	cmp	r7, r3
 80082ce:	f080 8097 	bcs.w	8008400 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80082d2:	2f00      	cmp	r7, #0
 80082d4:	f000 8094 	beq.w	8008400 <tcp_output+0x1d8>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80082d8:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 80082dc:	429f      	cmp	r7, r3
 80082de:	f040 808f 	bne.w	8008400 <tcp_output+0x1d8>
 80082e2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f040 808b 	bne.w	8008400 <tcp_output+0x1d8>
    if (pcb->persist_backoff == 0) {
 80082ea:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 80082ee:	b923      	cbnz	r3, 80082fa <tcp_output+0xd2>
      pcb->persist_cnt = 0;
 80082f0:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 80082f4:	2301      	movs	r3, #1
 80082f6:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  if (pcb->unsent == NULL) {
 80082fa:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 80d9 	beq.w	80084b4 <tcp_output+0x28c>
  pcb->flags &= ~TF_NAGLEMEMERR;
 8008302:	7eab      	ldrb	r3, [r5, #26]
 8008304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008308:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("RST not expected here!",
 8008312:	4b6f      	ldr	r3, [pc, #444]	; (80084d0 <tcp_output+0x2a8>)
 8008314:	f240 4246 	movw	r2, #1094	; 0x446
 8008318:	4970      	ldr	r1, [pc, #448]	; (80084dc <tcp_output+0x2b4>)
 800831a:	486f      	ldr	r0, [pc, #444]	; (80084d8 <tcp_output+0x2b0>)
 800831c:	f004 fc0e 	bl	800cb3c <iprintf>
 8008320:	e084      	b.n	800842c <tcp_output+0x204>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008322:	891a      	ldrh	r2, [r3, #8]
 8008324:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8008326:	429a      	cmp	r2, r3
 8008328:	f080 8091 	bcs.w	800844e <tcp_output+0x226>
 800832c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 808e 	beq.w	8008452 <tcp_output+0x22a>
 8008336:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800833a:	2b08      	cmp	r3, #8
 800833c:	f240 808b 	bls.w	8008456 <tcp_output+0x22e>
 8008340:	2301      	movs	r3, #1
 8008342:	e002      	b.n	800834a <tcp_output+0x122>
 8008344:	2301      	movs	r3, #1
 8008346:	e000      	b.n	800834a <tcp_output+0x122>
 8008348:	2301      	movs	r3, #1
 800834a:	b91b      	cbnz	r3, 8008354 <tcp_output+0x12c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800834c:	7eab      	ldrb	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800834e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8008352:	d0d2      	beq.n	80082fa <tcp_output+0xd2>
    if (pcb->state != SYN_SENT) {
 8008354:	7d2b      	ldrb	r3, [r5, #20]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d00a      	beq.n	8008370 <tcp_output+0x148>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800835a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800835e:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8008362:	2010      	movs	r0, #16
 8008364:	f7fc faea 	bl	800493c <lwip_htons>
 8008368:	ea49 0000 	orr.w	r0, r9, r0
 800836c:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 8008370:	4642      	mov	r2, r8
 8008372:	4629      	mov	r1, r5
 8008374:	4620      	mov	r0, r4
 8008376:	f7ff fde9 	bl	8007f4c <tcp_output_segment>
    if (err != ERR_OK) {
 800837a:	4603      	mov	r3, r0
 800837c:	2800      	cmp	r0, #0
 800837e:	d16c      	bne.n	800845a <tcp_output+0x232>
    pcb->unsent = seg->next;
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8008384:	7d2b      	ldrb	r3, [r5, #20]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d003      	beq.n	8008392 <tcp_output+0x16a>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800838a:	7eab      	ldrb	r3, [r5, #26]
 800838c:	f023 0303 	bic.w	r3, r3, #3
 8008390:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008392:	68e3      	ldr	r3, [r4, #12]
 8008394:	6858      	ldr	r0, [r3, #4]
 8008396:	f7fc fad4 	bl	8004942 <lwip_htonl>
 800839a:	4681      	mov	r9, r0
 800839c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 80083a0:	68e3      	ldr	r3, [r4, #12]
 80083a2:	8998      	ldrh	r0, [r3, #12]
 80083a4:	f7fc faca 	bl	800493c <lwip_htons>
 80083a8:	f010 0f03 	tst.w	r0, #3
 80083ac:	d05a      	beq.n	8008464 <tcp_output+0x23c>
 80083ae:	2001      	movs	r0, #1
 80083b0:	4450      	add	r0, sl
 80083b2:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80083b4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80083b6:	1a1b      	subs	r3, r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	db55      	blt.n	8008468 <tcp_output+0x240>
    if (TCP_TCPLEN(seg) > 0) {
 80083bc:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 80083c0:	68e3      	ldr	r3, [r4, #12]
 80083c2:	8998      	ldrh	r0, [r3, #12]
 80083c4:	f7fc faba 	bl	800493c <lwip_htons>
 80083c8:	f010 0f03 	tst.w	r0, #3
 80083cc:	d04e      	beq.n	800846c <tcp_output+0x244>
 80083ce:	2301      	movs	r3, #1
 80083d0:	eb13 0f09 	cmn.w	r3, r9
 80083d4:	d06a      	beq.n	80084ac <tcp_output+0x284>
      seg->next = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 80083da:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d047      	beq.n	8008470 <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80083e0:	68e3      	ldr	r3, [r4, #12]
 80083e2:	6858      	ldr	r0, [r3, #4]
 80083e4:	f7fc faad 	bl	8004942 <lwip_htonl>
 80083e8:	4681      	mov	r9, r0
 80083ea:	68f3      	ldr	r3, [r6, #12]
 80083ec:	6858      	ldr	r0, [r3, #4]
 80083ee:	f7fc faa8 	bl	8004942 <lwip_htonl>
 80083f2:	eba9 0000 	sub.w	r0, r9, r0
 80083f6:	2800      	cmp	r0, #0
 80083f8:	db3d      	blt.n	8008476 <tcp_output+0x24e>
          useg->next = seg;
 80083fa:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 80083fc:	4626      	mov	r6, r4
    seg = pcb->unsent;
 80083fe:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 8008400:	2c00      	cmp	r4, #0
 8008402:	f43f af7a 	beq.w	80082fa <tcp_output+0xd2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008406:	68e3      	ldr	r3, [r4, #12]
 8008408:	6858      	ldr	r0, [r3, #4]
 800840a:	f7fc fa9a 	bl	8004942 <lwip_htonl>
 800840e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008410:	1ac0      	subs	r0, r0, r3
 8008412:	8923      	ldrh	r3, [r4, #8]
 8008414:	4418      	add	r0, r3
  while (seg != NULL &&
 8008416:	4287      	cmp	r7, r0
 8008418:	f4ff af6f 	bcc.w	80082fa <tcp_output+0xd2>
    LWIP_ASSERT("RST not expected here!",
 800841c:	68e3      	ldr	r3, [r4, #12]
 800841e:	8998      	ldrh	r0, [r3, #12]
 8008420:	f7fc fa8c 	bl	800493c <lwip_htons>
 8008424:	f010 0f04 	tst.w	r0, #4
 8008428:	f47f af73 	bne.w	8008312 <tcp_output+0xea>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800842c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d088      	beq.n	8008344 <tcp_output+0x11c>
 8008432:	7eab      	ldrb	r3, [r5, #26]
 8008434:	f013 0f44 	tst.w	r3, #68	; 0x44
 8008438:	d186      	bne.n	8008348 <tcp_output+0x120>
 800843a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800843c:	2b00      	cmp	r3, #0
 800843e:	f43f af75 	beq.w	800832c <tcp_output+0x104>
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	2a00      	cmp	r2, #0
 8008446:	f43f af6c 	beq.w	8008322 <tcp_output+0xfa>
 800844a:	2301      	movs	r3, #1
 800844c:	e77d      	b.n	800834a <tcp_output+0x122>
 800844e:	2301      	movs	r3, #1
 8008450:	e77b      	b.n	800834a <tcp_output+0x122>
 8008452:	2301      	movs	r3, #1
 8008454:	e779      	b.n	800834a <tcp_output+0x122>
 8008456:	2300      	movs	r3, #0
 8008458:	e777      	b.n	800834a <tcp_output+0x122>
      pcb->flags |= TF_NAGLEMEMERR;
 800845a:	7eaa      	ldrb	r2, [r5, #26]
 800845c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008460:	76aa      	strb	r2, [r5, #26]
      return err;
 8008462:	e753      	b.n	800830c <tcp_output+0xe4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008464:	2000      	movs	r0, #0
 8008466:	e7a3      	b.n	80083b0 <tcp_output+0x188>
      pcb->snd_nxt = snd_nxt;
 8008468:	64e8      	str	r0, [r5, #76]	; 0x4c
 800846a:	e7a7      	b.n	80083bc <tcp_output+0x194>
    if (TCP_TCPLEN(seg) > 0) {
 800846c:	2300      	movs	r3, #0
 800846e:	e7af      	b.n	80083d0 <tcp_output+0x1a8>
        pcb->unacked = seg;
 8008470:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 8008472:	4626      	mov	r6, r4
 8008474:	e7c3      	b.n	80083fe <tcp_output+0x1d6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008476:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 800847a:	e001      	b.n	8008480 <tcp_output+0x258>
              cur_seg = &((*cur_seg)->next );
 800847c:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 8008480:	f8da 3000 	ldr.w	r3, [sl]
 8008484:	b163      	cbz	r3, 80084a0 <tcp_output+0x278>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	6858      	ldr	r0, [r3, #4]
 800848a:	f7fc fa5a 	bl	8004942 <lwip_htonl>
 800848e:	4681      	mov	r9, r0
 8008490:	68e3      	ldr	r3, [r4, #12]
 8008492:	6858      	ldr	r0, [r3, #4]
 8008494:	f7fc fa55 	bl	8004942 <lwip_htonl>
 8008498:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 800849c:	2800      	cmp	r0, #0
 800849e:	dbed      	blt.n	800847c <tcp_output+0x254>
          seg->next = (*cur_seg);
 80084a0:	f8da 3000 	ldr.w	r3, [sl]
 80084a4:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 80084a6:	f8ca 4000 	str.w	r4, [sl]
 80084aa:	e7a8      	b.n	80083fe <tcp_output+0x1d6>
      tcp_seg_free(seg);
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7fd fb03 	bl	8005ab8 <tcp_seg_free>
 80084b2:	e7a4      	b.n	80083fe <tcp_output+0x1d6>
    pcb->unsent_oversize = 0;
 80084b4:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 80084b8:	e723      	b.n	8008302 <tcp_output+0xda>
    return ERR_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	e726      	b.n	800830c <tcp_output+0xe4>
    return ERR_RTE;
 80084be:	f06f 0303 	mvn.w	r3, #3
 80084c2:	e723      	b.n	800830c <tcp_output+0xe4>
      return ERR_RTE;
 80084c4:	f06f 0303 	mvn.w	r3, #3
 80084c8:	e720      	b.n	800830c <tcp_output+0xe4>
 80084ca:	bf00      	nop
 80084cc:	200076e4 	.word	0x200076e4
 80084d0:	0800edd0 	.word	0x0800edd0
 80084d4:	0800ed60 	.word	0x0800ed60
 80084d8:	0800de6c 	.word	0x0800de6c
 80084dc:	0800ed88 	.word	0x0800ed88

080084e0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80084e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084e4:	b085      	sub	sp, #20
 80084e6:	4680      	mov	r8, r0
 80084e8:	460f      	mov	r7, r1
 80084ea:	4691      	mov	r9, r2
 80084ec:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80084ee:	2200      	movs	r2, #0
 80084f0:	2114      	movs	r1, #20
 80084f2:	2001      	movs	r0, #1
 80084f4:	f7fc ff4a 	bl	800538c <pbuf_alloc>
  if (p == NULL) {
 80084f8:	b3b0      	cbz	r0, 8008568 <tcp_rst+0x88>
 80084fa:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80084fc:	8943      	ldrh	r3, [r0, #10]
 80084fe:	2b13      	cmp	r3, #19
 8008500:	d935      	bls.n	800856e <tcp_rst+0x8e>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8008502:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8008504:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8008508:	f7fc fa18 	bl	800493c <lwip_htons>
 800850c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800850e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8008512:	f7fc fa13 	bl	800493c <lwip_htons>
 8008516:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8008518:	4640      	mov	r0, r8
 800851a:	f7fc fa12 	bl	8004942 <lwip_htonl>
 800851e:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8008520:	4638      	mov	r0, r7
 8008522:	f7fc fa0e 	bl	8004942 <lwip_htonl>
 8008526:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8008528:	f245 0014 	movw	r0, #20500	; 0x5014
 800852c:	f7fc fa06 	bl	800493c <lwip_htons>
 8008530:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008532:	2300      	movs	r3, #0
 8008534:	2208      	movs	r2, #8
 8008536:	73a2      	strb	r2, [r4, #14]
 8008538:	2260      	movs	r2, #96	; 0x60
 800853a:	73e2      	strb	r2, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800853c:	7423      	strb	r3, [r4, #16]
 800853e:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 8008540:	74a3      	strb	r3, [r4, #18]
 8008542:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8008544:	4630      	mov	r0, r6
 8008546:	f002 fca5 	bl	800ae94 <ip4_route>
  if (netif != NULL) {
 800854a:	b150      	cbz	r0, 8008562 <tcp_rst+0x82>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800854c:	9002      	str	r0, [sp, #8]
 800854e:	2306      	movs	r3, #6
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	2300      	movs	r3, #0
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	23ff      	movs	r3, #255	; 0xff
 8008558:	4632      	mov	r2, r6
 800855a:	4649      	mov	r1, r9
 800855c:	4628      	mov	r0, r5
 800855e:	f002 fe55 	bl	800b20c <ip4_output_if>
  }
  pbuf_free(p);
 8008562:	4628      	mov	r0, r5
 8008564:	f7fc fea6 	bl	80052b4 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8008568:	b005      	add	sp, #20
 800856a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800856e:	4b04      	ldr	r3, [pc, #16]	; (8008580 <tcp_rst+0xa0>)
 8008570:	f240 524d 	movw	r2, #1357	; 0x54d
 8008574:	4903      	ldr	r1, [pc, #12]	; (8008584 <tcp_rst+0xa4>)
 8008576:	4804      	ldr	r0, [pc, #16]	; (8008588 <tcp_rst+0xa8>)
 8008578:	f004 fae0 	bl	800cb3c <iprintf>
 800857c:	e7c1      	b.n	8008502 <tcp_rst+0x22>
 800857e:	bf00      	nop
 8008580:	0800edd0 	.word	0x0800edd0
 8008584:	0800eda0 	.word	0x0800eda0
 8008588:	0800de6c 	.word	0x0800de6c

0800858c <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800858c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800858e:	b10a      	cbz	r2, 8008594 <tcp_rexmit_rto+0x8>
{
 8008590:	b508      	push	{r3, lr}
 8008592:	e001      	b.n	8008598 <tcp_rexmit_rto+0xc>
 8008594:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8008596:	461a      	mov	r2, r3
 8008598:	6813      	ldr	r3, [r2, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1fb      	bne.n	8008596 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800859e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80085a0:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80085a2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80085a4:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80085aa:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80085ae:	2bff      	cmp	r3, #255	; 0xff
 80085b0:	d002      	beq.n	80085b8 <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 80085b2:	3301      	adds	r3, #1
 80085b4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80085bc:	f7ff fe34 	bl	8008228 <tcp_output>
 80085c0:	bd08      	pop	{r3, pc}

080085c2 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80085c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80085c4:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 80085c6:	b316      	cbz	r6, 800860e <tcp_rexmit+0x4c>
 80085c8:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 80085ca:	6833      	ldr	r3, [r6, #0]
 80085cc:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80085ce:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 80085d2:	e000      	b.n	80085d6 <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80085d4:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 80085d6:	682b      	ldr	r3, [r5, #0]
 80085d8:	b15b      	cbz	r3, 80085f2 <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	6858      	ldr	r0, [r3, #4]
 80085de:	f7fc f9b0 	bl	8004942 <lwip_htonl>
 80085e2:	4604      	mov	r4, r0
 80085e4:	68f3      	ldr	r3, [r6, #12]
 80085e6:	6858      	ldr	r0, [r3, #4]
 80085e8:	f7fc f9ab 	bl	8004942 <lwip_htonl>
 80085ec:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 80085ee:	2800      	cmp	r0, #0
 80085f0:	dbf0      	blt.n	80085d4 <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 80085f2:	682b      	ldr	r3, [r5, #0]
 80085f4:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 80085f6:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80085f8:	6833      	ldr	r3, [r6, #0]
 80085fa:	b14b      	cbz	r3, 8008610 <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80085fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008600:	2bff      	cmp	r3, #255	; 0xff
 8008602:	d002      	beq.n	800860a <tcp_rexmit+0x48>
    ++pcb->nrtx;
 8008604:	3301      	adds	r3, #1
 8008606:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	637b      	str	r3, [r7, #52]	; 0x34
 800860e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 8008610:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008614:	e7f2      	b.n	80085fc <tcp_rexmit+0x3a>

08008616 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8008616:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008618:	b11b      	cbz	r3, 8008622 <tcp_rexmit_fast+0xc>
 800861a:	7e83      	ldrb	r3, [r0, #26]
 800861c:	f013 0f04 	tst.w	r3, #4
 8008620:	d000      	beq.n	8008624 <tcp_rexmit_fast+0xe>
 8008622:	4770      	bx	lr
{
 8008624:	b510      	push	{r4, lr}
 8008626:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8008628:	f7ff ffcb 	bl	80085c2 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800862c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008630:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8008634:	4293      	cmp	r3, r2
 8008636:	d219      	bcs.n	800866c <tcp_rexmit_fast+0x56>
 8008638:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800863c:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8008640:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008642:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8008646:	d202      	bcs.n	800864e <tcp_rexmit_fast+0x38>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8008648:	005a      	lsls	r2, r3, #1
 800864a:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800864e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008652:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008656:	fa12 f383 	uxtah	r3, r2, r3
 800865a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800865e:	7ea3      	ldrb	r3, [r4, #26]
 8008660:	f043 0304 	orr.w	r3, r3, #4
 8008664:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	8623      	strh	r3, [r4, #48]	; 0x30
 800866a:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800866c:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8008670:	e7e4      	b.n	800863c <tcp_rexmit_fast+0x26>

08008672 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008672:	b570      	push	{r4, r5, r6, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8008678:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800867a:	3801      	subs	r0, #1
 800867c:	f7fc f961 	bl	8004942 <lwip_htonl>
 8008680:	4603      	mov	r3, r0
 8008682:	2200      	movs	r2, #0
 8008684:	4611      	mov	r1, r2
 8008686:	4620      	mov	r0, r4
 8008688:	f7ff fc16 	bl	8007eb8 <tcp_output_alloc_header>
  if (p == NULL) {
 800868c:	b1d0      	cbz	r0, 80086c4 <tcp_keepalive+0x52>
 800868e:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008690:	1d26      	adds	r6, r4, #4
 8008692:	4630      	mov	r0, r6
 8008694:	f002 fbfe 	bl	800ae94 <ip4_route>
  if (netif == NULL) {
 8008698:	b188      	cbz	r0, 80086be <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800869a:	7aa3      	ldrb	r3, [r4, #10]
 800869c:	9002      	str	r0, [sp, #8]
 800869e:	2206      	movs	r2, #6
 80086a0:	9201      	str	r2, [sp, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	9200      	str	r2, [sp, #0]
 80086a6:	4632      	mov	r2, r6
 80086a8:	4621      	mov	r1, r4
 80086aa:	4628      	mov	r0, r5
 80086ac:	f002 fdae 	bl	800b20c <ip4_output_if>
 80086b0:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80086b2:	4628      	mov	r0, r5
 80086b4:	f7fc fdfe 	bl	80052b4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80086b8:	4620      	mov	r0, r4
 80086ba:	b004      	add	sp, #16
 80086bc:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 80086be:	f06f 0403 	mvn.w	r4, #3
 80086c2:	e7f6      	b.n	80086b2 <tcp_keepalive+0x40>
    return ERR_MEM;
 80086c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086c8:	e7f6      	b.n	80086b8 <tcp_keepalive+0x46>

080086ca <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80086ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ce:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80086d0:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 80086d2:	b175      	cbz	r5, 80086f2 <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	d05d      	beq.n	8008794 <tcp_zero_window_probe+0xca>
 80086d8:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80086da:	68eb      	ldr	r3, [r5, #12]
 80086dc:	8998      	ldrh	r0, [r3, #12]
 80086de:	f7fc f92d 	bl	800493c <lwip_htons>
 80086e2:	f010 0f01 	tst.w	r0, #1
 80086e6:	d006      	beq.n	80086f6 <tcp_zero_window_probe+0x2c>
 80086e8:	892b      	ldrh	r3, [r5, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d040      	beq.n	8008770 <tcp_zero_window_probe+0xa6>
 80086ee:	2200      	movs	r2, #0
 80086f0:	e002      	b.n	80086f8 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 80086f2:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80086f4:	e7ee      	b.n	80086d4 <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80086f6:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80086f8:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80086fc:	68eb      	ldr	r3, [r5, #12]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f082 0201 	eor.w	r2, r2, #1
 8008704:	2100      	movs	r1, #0
 8008706:	4620      	mov	r0, r4
 8008708:	f7ff fbd6 	bl	8007eb8 <tcp_output_alloc_header>
  if (p == NULL) {
 800870c:	4607      	mov	r7, r0
 800870e:	2800      	cmp	r0, #0
 8008710:	d042      	beq.n	8008798 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8008712:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8008716:	b36e      	cbz	r6, 8008774 <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008718:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 800871c:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8008720:	b2b6      	uxth	r6, r6
 8008722:	2011      	movs	r0, #17
 8008724:	f7fc f90a 	bl	800493c <lwip_htons>
 8008728:	4330      	orrs	r0, r6
 800872a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800872e:	68eb      	ldr	r3, [r5, #12]
 8008730:	6858      	ldr	r0, [r3, #4]
 8008732:	f7fc f906 	bl	8004942 <lwip_htonl>
 8008736:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008738:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800873a:	1a1b      	subs	r3, r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	db24      	blt.n	800878a <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008740:	1d25      	adds	r5, r4, #4
 8008742:	4628      	mov	r0, r5
 8008744:	f002 fba6 	bl	800ae94 <ip4_route>
  if (netif == NULL) {
 8008748:	b308      	cbz	r0, 800878e <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800874a:	7aa3      	ldrb	r3, [r4, #10]
 800874c:	9002      	str	r0, [sp, #8]
 800874e:	2206      	movs	r2, #6
 8008750:	9201      	str	r2, [sp, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	9200      	str	r2, [sp, #0]
 8008756:	462a      	mov	r2, r5
 8008758:	4621      	mov	r1, r4
 800875a:	4638      	mov	r0, r7
 800875c:	f002 fd56 	bl	800b20c <ip4_output_if>
 8008760:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8008762:	4638      	mov	r0, r7
 8008764:	f7fc fda6 	bl	80052b4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008768:	4620      	mov	r0, r4
 800876a:	b004      	add	sp, #16
 800876c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008770:	2201      	movs	r2, #1
 8008772:	e7c1      	b.n	80086f8 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8008774:	6868      	ldr	r0, [r5, #4]
 8008776:	8903      	ldrh	r3, [r0, #8]
 8008778:	892a      	ldrh	r2, [r5, #8]
 800877a:	1a9b      	subs	r3, r3, r2
 800877c:	b29b      	uxth	r3, r3
 800877e:	2201      	movs	r2, #1
 8008780:	f108 0114 	add.w	r1, r8, #20
 8008784:	f7fd f866 	bl	8005854 <pbuf_copy_partial>
 8008788:	e7d1      	b.n	800872e <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 800878a:	64e0      	str	r0, [r4, #76]	; 0x4c
 800878c:	e7d8      	b.n	8008740 <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 800878e:	f06f 0403 	mvn.w	r4, #3
 8008792:	e7e6      	b.n	8008762 <tcp_zero_window_probe+0x98>
    return ERR_OK;
 8008794:	2400      	movs	r4, #0
 8008796:	e7e7      	b.n	8008768 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 8008798:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800879c:	e7e4      	b.n	8008768 <tcp_zero_window_probe+0x9e>
	...

080087a0 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80087a0:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 80087a2:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <sys_timeouts_sleeptime+0x2c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	b15b      	cbz	r3, 80087c0 <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 80087a8:	f003 fca4 	bl	800c0f4 <sys_now>
 80087ac:	4b08      	ldr	r3, [pc, #32]	; (80087d0 <sys_timeouts_sleeptime+0x30>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 80087b2:	4b06      	ldr	r3, [pc, #24]	; (80087cc <sys_timeouts_sleeptime+0x2c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	4298      	cmp	r0, r3
 80087ba:	d804      	bhi.n	80087c6 <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 80087bc:	1a18      	subs	r0, r3, r0
 80087be:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087c4:	bd08      	pop	{r3, pc}
    return 0;
 80087c6:	2000      	movs	r0, #0
  }
}
 80087c8:	bd08      	pop	{r3, pc}
 80087ca:	bf00      	nop
 80087cc:	20003e74 	.word	0x20003e74
 80087d0:	20003e7c 	.word	0x20003e7c

080087d4 <sys_check_timeouts>:
{
 80087d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (next_timeout) {
 80087d6:	4b18      	ldr	r3, [pc, #96]	; (8008838 <sys_check_timeouts+0x64>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	b363      	cbz	r3, 8008836 <sys_check_timeouts+0x62>
    now = sys_now();
 80087dc:	f003 fc8a 	bl	800c0f4 <sys_now>
    diff = now - timeouts_last_time;
 80087e0:	4b16      	ldr	r3, [pc, #88]	; (800883c <sys_check_timeouts+0x68>)
 80087e2:	681c      	ldr	r4, [r3, #0]
 80087e4:	1b04      	subs	r4, r0, r4
 80087e6:	e005      	b.n	80087f4 <sys_check_timeouts+0x20>
      had_one = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	e002      	b.n	80087f2 <sys_check_timeouts+0x1e>
 80087ec:	2300      	movs	r3, #0
 80087ee:	e000      	b.n	80087f2 <sys_check_timeouts+0x1e>
        had_one = 1;
 80087f0:	2301      	movs	r3, #1
    } while (had_one);
 80087f2:	b303      	cbz	r3, 8008836 <sys_check_timeouts+0x62>
      tmptimeout = next_timeout;
 80087f4:	4b10      	ldr	r3, [pc, #64]	; (8008838 <sys_check_timeouts+0x64>)
 80087f6:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80087f8:	2900      	cmp	r1, #0
 80087fa:	d0f5      	beq.n	80087e8 <sys_check_timeouts+0x14>
 80087fc:	684b      	ldr	r3, [r1, #4]
 80087fe:	429c      	cmp	r4, r3
 8008800:	d3f4      	bcc.n	80087ec <sys_check_timeouts+0x18>
        timeouts_last_time += tmptimeout->time;
 8008802:	480e      	ldr	r0, [pc, #56]	; (800883c <sys_check_timeouts+0x68>)
 8008804:	6802      	ldr	r2, [r0, #0]
 8008806:	441a      	add	r2, r3
 8008808:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 800880a:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 800880c:	680a      	ldr	r2, [r1, #0]
 800880e:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <sys_check_timeouts+0x64>)
 8008810:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 8008812:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 8008814:	68cf      	ldr	r7, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008816:	200a      	movs	r0, #10
 8008818:	f7fc fb78 	bl	8004f0c <memp_free>
        if (handler != NULL) {
 800881c:	2d00      	cmp	r5, #0
 800881e:	d0e7      	beq.n	80087f0 <sys_check_timeouts+0x1c>
          LOCK_TCPIP_CORE();
 8008820:	4e07      	ldr	r6, [pc, #28]	; (8008840 <sys_check_timeouts+0x6c>)
 8008822:	4630      	mov	r0, r6
 8008824:	f003 fa27 	bl	800bc76 <sys_mutex_lock>
          handler(arg);
 8008828:	4638      	mov	r0, r7
 800882a:	47a8      	blx	r5
          UNLOCK_TCPIP_CORE();
 800882c:	4630      	mov	r0, r6
 800882e:	f003 fa29 	bl	800bc84 <sys_mutex_unlock>
        had_one = 1;
 8008832:	2301      	movs	r3, #1
 8008834:	e7dd      	b.n	80087f2 <sys_check_timeouts+0x1e>
 8008836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008838:	20003e74 	.word	0x20003e74
 800883c:	20003e7c 	.word	0x20003e7c
 8008840:	20003f9c 	.word	0x20003f9c

08008844 <sys_timeout>:
{
 8008844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008848:	4605      	mov	r5, r0
 800884a:	4688      	mov	r8, r1
 800884c:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800884e:	200a      	movs	r0, #10
 8008850:	f7fc fb42 	bl	8004ed8 <memp_malloc>
  if (timeout == NULL) {
 8008854:	b308      	cbz	r0, 800889a <sys_timeout+0x56>
 8008856:	4604      	mov	r4, r0
  now = sys_now();
 8008858:	f003 fc4c 	bl	800c0f4 <sys_now>
  if (next_timeout == NULL) {
 800885c:	4b23      	ldr	r3, [pc, #140]	; (80088ec <sys_timeout+0xa8>)
 800885e:	681e      	ldr	r6, [r3, #0]
 8008860:	b31e      	cbz	r6, 80088aa <sys_timeout+0x66>
    diff = now - timeouts_last_time;
 8008862:	4b23      	ldr	r3, [pc, #140]	; (80088f0 <sys_timeout+0xac>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 8008868:	2300      	movs	r3, #0
 800886a:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 800886c:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 8008870:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 8008872:	4428      	add	r0, r5
 8008874:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8008876:	b1e6      	cbz	r6, 80088b2 <sys_timeout+0x6e>
  if (next_timeout->time > msecs) {
 8008878:	6873      	ldr	r3, [r6, #4]
 800887a:	429d      	cmp	r5, r3
 800887c:	d31d      	bcc.n	80088ba <sys_timeout+0x76>
 800887e:	4632      	mov	r2, r6
    for (t = next_timeout; t != NULL; t = t->next) {
 8008880:	2a00      	cmp	r2, #0
 8008882:	d030      	beq.n	80088e6 <sys_timeout+0xa2>
      timeout->time -= t->time;
 8008884:	6851      	ldr	r1, [r2, #4]
 8008886:	6863      	ldr	r3, [r4, #4]
 8008888:	1a5b      	subs	r3, r3, r1
 800888a:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800888c:	6811      	ldr	r1, [r2, #0]
 800888e:	b1d9      	cbz	r1, 80088c8 <sys_timeout+0x84>
 8008890:	6848      	ldr	r0, [r1, #4]
 8008892:	4283      	cmp	r3, r0
 8008894:	d318      	bcc.n	80088c8 <sys_timeout+0x84>
    for (t = next_timeout; t != NULL; t = t->next) {
 8008896:	460a      	mov	r2, r1
 8008898:	e7f2      	b.n	8008880 <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800889a:	4b16      	ldr	r3, [pc, #88]	; (80088f4 <sys_timeout+0xb0>)
 800889c:	22d4      	movs	r2, #212	; 0xd4
 800889e:	4916      	ldr	r1, [pc, #88]	; (80088f8 <sys_timeout+0xb4>)
 80088a0:	4816      	ldr	r0, [pc, #88]	; (80088fc <sys_timeout+0xb8>)
 80088a2:	f004 f94b 	bl	800cb3c <iprintf>
 80088a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 80088aa:	4b11      	ldr	r3, [pc, #68]	; (80088f0 <sys_timeout+0xac>)
 80088ac:	6018      	str	r0, [r3, #0]
    diff = 0;
 80088ae:	2000      	movs	r0, #0
 80088b0:	e7da      	b.n	8008868 <sys_timeout+0x24>
    next_timeout = timeout;
 80088b2:	4b0e      	ldr	r3, [pc, #56]	; (80088ec <sys_timeout+0xa8>)
 80088b4:	601c      	str	r4, [r3, #0]
    return;
 80088b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 80088ba:	1b5d      	subs	r5, r3, r5
 80088bc:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 80088be:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 80088c0:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <sys_timeout+0xa8>)
 80088c2:	601c      	str	r4, [r3, #0]
 80088c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (t->next != NULL) {
 80088c8:	b139      	cbz	r1, 80088da <sys_timeout+0x96>
          t->next->time -= timeout->time;
 80088ca:	6848      	ldr	r0, [r1, #4]
 80088cc:	1ac3      	subs	r3, r0, r3
 80088ce:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 80088d0:	6813      	ldr	r3, [r2, #0]
 80088d2:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 80088d4:	6014      	str	r4, [r2, #0]
        break;
 80088d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if (timeout->time > msecs) {
 80088da:	429d      	cmp	r5, r3
 80088dc:	d2f8      	bcs.n	80088d0 <sys_timeout+0x8c>
          timeout->time = msecs + next_timeout->time;
 80088de:	6873      	ldr	r3, [r6, #4]
 80088e0:	441d      	add	r5, r3
 80088e2:	6065      	str	r5, [r4, #4]
 80088e4:	e7f4      	b.n	80088d0 <sys_timeout+0x8c>
 80088e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ea:	bf00      	nop
 80088ec:	20003e74 	.word	0x20003e74
 80088f0:	20003e7c 	.word	0x20003e7c
 80088f4:	0800ee9c 	.word	0x0800ee9c
 80088f8:	0800eed0 	.word	0x0800eed0
 80088fc:	0800de6c 	.word	0x0800de6c

08008900 <tcp_timer_needed>:
{
 8008900:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008902:	4b0a      	ldr	r3, [pc, #40]	; (800892c <tcp_timer_needed+0x2c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	b953      	cbnz	r3, 800891e <tcp_timer_needed+0x1e>
 8008908:	4b09      	ldr	r3, [pc, #36]	; (8008930 <tcp_timer_needed+0x30>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	b143      	cbz	r3, 8008920 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800890e:	2201      	movs	r2, #1
 8008910:	4b06      	ldr	r3, [pc, #24]	; (800892c <tcp_timer_needed+0x2c>)
 8008912:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008914:	2200      	movs	r2, #0
 8008916:	4907      	ldr	r1, [pc, #28]	; (8008934 <tcp_timer_needed+0x34>)
 8008918:	20fa      	movs	r0, #250	; 0xfa
 800891a:	f7ff ff93 	bl	8008844 <sys_timeout>
 800891e:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008920:	4b05      	ldr	r3, [pc, #20]	; (8008938 <tcp_timer_needed+0x38>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1f2      	bne.n	800890e <tcp_timer_needed+0xe>
 8008928:	e7f9      	b.n	800891e <tcp_timer_needed+0x1e>
 800892a:	bf00      	nop
 800892c:	20003e78 	.word	0x20003e78
 8008930:	200076d0 	.word	0x200076d0
 8008934:	0800893d 	.word	0x0800893d
 8008938:	200076e0 	.word	0x200076e0

0800893c <tcpip_tcp_timer>:
{
 800893c:	b508      	push	{r3, lr}
  tcp_tmr();
 800893e:	f7fd fc9f 	bl	8006280 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008942:	4b08      	ldr	r3, [pc, #32]	; (8008964 <tcpip_tcp_timer+0x28>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	b12b      	cbz	r3, 8008954 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008948:	2200      	movs	r2, #0
 800894a:	4907      	ldr	r1, [pc, #28]	; (8008968 <tcpip_tcp_timer+0x2c>)
 800894c:	20fa      	movs	r0, #250	; 0xfa
 800894e:	f7ff ff79 	bl	8008844 <sys_timeout>
 8008952:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <tcpip_tcp_timer+0x30>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f5      	bne.n	8008948 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800895c:	2200      	movs	r2, #0
 800895e:	4b04      	ldr	r3, [pc, #16]	; (8008970 <tcpip_tcp_timer+0x34>)
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	bd08      	pop	{r3, pc}
 8008964:	200076d0 	.word	0x200076d0
 8008968:	0800893d 	.word	0x0800893d
 800896c:	200076e0 	.word	0x200076e0
 8008970:	20003e78 	.word	0x20003e78

08008974 <sys_timeouts_init>:
{
 8008974:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008976:	2401      	movs	r4, #1
 8008978:	e008      	b.n	800898c <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800897a:	4b08      	ldr	r3, [pc, #32]	; (800899c <sys_timeouts_init+0x28>)
 800897c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 8008980:	4907      	ldr	r1, [pc, #28]	; (80089a0 <sys_timeouts_init+0x2c>)
 8008982:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8008986:	f7ff ff5d 	bl	8008844 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800898a:	3401      	adds	r4, #1
 800898c:	2c04      	cmp	r4, #4
 800898e:	d9f4      	bls.n	800897a <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 8008990:	f003 fbb0 	bl	800c0f4 <sys_now>
 8008994:	4b03      	ldr	r3, [pc, #12]	; (80089a4 <sys_timeouts_init+0x30>)
 8008996:	6018      	str	r0, [r3, #0]
 8008998:	bd10      	pop	{r4, pc}
 800899a:	bf00      	nop
 800899c:	0800ee74 	.word	0x0800ee74
 80089a0:	080089a9 	.word	0x080089a9
 80089a4:	20003e7c 	.word	0x20003e7c

080089a8 <cyclic_timer>:
{
 80089a8:	b510      	push	{r4, lr}
 80089aa:	4604      	mov	r4, r0
  cyclic->handler();
 80089ac:	6843      	ldr	r3, [r0, #4]
 80089ae:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80089b0:	4622      	mov	r2, r4
 80089b2:	4902      	ldr	r1, [pc, #8]	; (80089bc <cyclic_timer+0x14>)
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	f7ff ff45 	bl	8008844 <sys_timeout>
 80089ba:	bd10      	pop	{r4, pc}
 80089bc:	080089a9 	.word	0x080089a9

080089c0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4604      	mov	r4, r0
 80089c4:	460d      	mov	r5, r1
 80089c6:	e007      	b.n	80089d8 <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 80089c8:	2200      	movs	r2, #0
 80089ca:	4629      	mov	r1, r5
 80089cc:	4620      	mov	r0, r4
 80089ce:	f003 f903 	bl	800bbd8 <sys_arch_mbox_fetch>
    return;
 80089d2:	bd38      	pop	{r3, r4, r5, pc}

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80089d4:	f7ff fefe 	bl	80087d4 <sys_check_timeouts>
  if (!next_timeout) {
 80089d8:	4b08      	ldr	r3, [pc, #32]	; (80089fc <sys_timeouts_mbox_fetch+0x3c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f3      	beq.n	80089c8 <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 80089e0:	f7ff fede 	bl	80087a0 <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80089e4:	4602      	mov	r2, r0
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d0f4      	beq.n	80089d4 <sys_timeouts_mbox_fetch+0x14>
 80089ea:	4629      	mov	r1, r5
 80089ec:	4620      	mov	r0, r4
 80089ee:	f003 f8f3 	bl	800bbd8 <sys_arch_mbox_fetch>
 80089f2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80089f6:	d0ed      	beq.n	80089d4 <sys_timeouts_mbox_fetch+0x14>
 80089f8:	bd38      	pop	{r3, r4, r5, pc}
 80089fa:	bf00      	nop
 80089fc:	20003e74 	.word	0x20003e74

08008a00 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 8008a00:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8008a02:	4a10      	ldr	r2, [pc, #64]	; (8008a44 <udp_new_port+0x44>)
 8008a04:	8813      	ldrh	r3, [r2, #0]
 8008a06:	1c59      	adds	r1, r3, #1
 8008a08:	8011      	strh	r1, [r2, #0]
 8008a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d009      	beq.n	8008a26 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a12:	4b0d      	ldr	r3, [pc, #52]	; (8008a48 <udp_new_port+0x48>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	b193      	cbz	r3, 8008a3e <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 8008a18:	8a59      	ldrh	r1, [r3, #18]
 8008a1a:	4a0a      	ldr	r2, [pc, #40]	; (8008a44 <udp_new_port+0x44>)
 8008a1c:	8812      	ldrh	r2, [r2, #0]
 8008a1e:	4291      	cmp	r1, r2
 8008a20:	d006      	beq.n	8008a30 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	e7f7      	b.n	8008a16 <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8008a26:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008a2a:	4b06      	ldr	r3, [pc, #24]	; (8008a44 <udp_new_port+0x44>)
 8008a2c:	801a      	strh	r2, [r3, #0]
 8008a2e:	e7f0      	b.n	8008a12 <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8008a30:	3001      	adds	r0, #1
 8008a32:	b280      	uxth	r0, r0
 8008a34:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8008a38:	d3e3      	bcc.n	8008a02 <udp_new_port+0x2>
        return 0;
 8008a3a:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 8008a3c:	4770      	bx	lr
  return udp_port;
 8008a3e:	4b01      	ldr	r3, [pc, #4]	; (8008a44 <udp_new_port+0x44>)
 8008a40:	8818      	ldrh	r0, [r3, #0]
 8008a42:	4770      	bx	lr
 8008a44:	2000000c 	.word	0x2000000c
 8008a48:	200076e8 	.word	0x200076e8

08008a4c <udp_input_local_match>:
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8008a4c:	b16a      	cbz	r2, 8008a6a <udp_input_local_match+0x1e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008a4e:	b1a8      	cbz	r0, 8008a7c <udp_input_local_match+0x30>
 8008a50:	6803      	ldr	r3, [r0, #0]
 8008a52:	b1ab      	cbz	r3, 8008a80 <udp_input_local_match+0x34>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008a54:	4a10      	ldr	r2, [pc, #64]	; (8008a98 <udp_input_local_match+0x4c>)
 8008a56:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008a58:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008a5c:	d012      	beq.n	8008a84 <udp_input_local_match+0x38>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8008a5e:	6889      	ldr	r1, [r1, #8]
 8008a60:	4053      	eors	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008a62:	420b      	tst	r3, r1
 8008a64:	d010      	beq.n	8008a88 <udp_input_local_match+0x3c>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      return 1;
    }
  }

  return 0;
 8008a66:	2000      	movs	r0, #0
 8008a68:	4770      	bx	lr
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008a6a:	b178      	cbz	r0, 8008a8c <udp_input_local_match+0x40>
 8008a6c:	6803      	ldr	r3, [r0, #0]
 8008a6e:	b17b      	cbz	r3, 8008a90 <udp_input_local_match+0x44>
 8008a70:	4a09      	ldr	r2, [pc, #36]	; (8008a98 <udp_input_local_match+0x4c>)
 8008a72:	6952      	ldr	r2, [r2, #20]
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00d      	beq.n	8008a94 <udp_input_local_match+0x48>
  return 0;
 8008a78:	2000      	movs	r0, #0
 8008a7a:	4770      	bx	lr
          return 1;
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	4770      	bx	lr
 8008a80:	2001      	movs	r0, #1
 8008a82:	4770      	bx	lr
 8008a84:	2001      	movs	r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	2001      	movs	r0, #1
 8008a8a:	4770      	bx	lr
      return 1;
 8008a8c:	2001      	movs	r0, #1
 8008a8e:	4770      	bx	lr
 8008a90:	2001      	movs	r0, #1
 8008a92:	4770      	bx	lr
 8008a94:	2001      	movs	r0, #1
}
 8008a96:	4770      	bx	lr
 8008a98:	20003fa0 	.word	0x20003fa0

08008a9c <udp_init>:
{
 8008a9c:	4770      	bx	lr
	...

08008aa0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	b085      	sub	sp, #20
 8008aa6:	4681      	mov	r9, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8008aa8:	8943      	ldrh	r3, [r0, #10]
 8008aaa:	2b07      	cmp	r3, #7
 8008aac:	d917      	bls.n	8008ade <udp_input+0x3e>
 8008aae:	460f      	mov	r7, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 8008ab0:	6844      	ldr	r4, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008ab2:	4b46      	ldr	r3, [pc, #280]	; (8008bcc <udp_input+0x12c>)
 8008ab4:	6819      	ldr	r1, [r3, #0]
 8008ab6:	6958      	ldr	r0, [r3, #20]
 8008ab8:	f002 fbbd 	bl	800b236 <ip4_addr_isbroadcast_u32>
 8008abc:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8008abe:	8820      	ldrh	r0, [r4, #0]
 8008ac0:	f7fb ff3c 	bl	800493c <lwip_htons>
 8008ac4:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 8008ac6:	8860      	ldrh	r0, [r4, #2]
 8008ac8:	f7fb ff38 	bl	800493c <lwip_htons>
 8008acc:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ace:	4b40      	ldr	r3, [pc, #256]	; (8008bd0 <udp_input+0x130>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	9303      	str	r3, [sp, #12]
 8008ad4:	461c      	mov	r4, r3
  uncon_pcb = NULL;
 8008ad6:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 8008ada:	465d      	mov	r5, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008adc:	e009      	b.n	8008af2 <udp_input+0x52>
    pbuf_free(p);
 8008ade:	f7fc fbe9 	bl	80052b4 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8008ae2:	b005      	add	sp, #20
 8008ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((pcb->remote_port == src) &&
 8008ae8:	8aa3      	ldrh	r3, [r4, #20]
 8008aea:	459a      	cmp	sl, r3
 8008aec:	d015      	beq.n	8008b1a <udp_input+0x7a>
    prev = pcb;
 8008aee:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008af0:	68e4      	ldr	r4, [r4, #12]
 8008af2:	b1fc      	cbz	r4, 8008b34 <udp_input+0x94>
    if ((pcb->local_port == dest) &&
 8008af4:	8a63      	ldrh	r3, [r4, #18]
 8008af6:	429e      	cmp	r6, r3
 8008af8:	d1f9      	bne.n	8008aee <udp_input+0x4e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8008afa:	4642      	mov	r2, r8
 8008afc:	4639      	mov	r1, r7
 8008afe:	4620      	mov	r0, r4
 8008b00:	f7ff ffa4 	bl	8008a4c <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d0f2      	beq.n	8008aee <udp_input+0x4e>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8008b08:	7c23      	ldrb	r3, [r4, #16]
 8008b0a:	f013 0f04 	tst.w	r3, #4
 8008b0e:	d1eb      	bne.n	8008ae8 <udp_input+0x48>
 8008b10:	f1bb 0f00 	cmp.w	fp, #0
 8008b14:	d1e8      	bne.n	8008ae8 <udp_input+0x48>
        uncon_pcb = pcb;
 8008b16:	46a3      	mov	fp, r4
 8008b18:	e7e6      	b.n	8008ae8 <udp_input+0x48>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008b1a:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 8008b1c:	b11b      	cbz	r3, 8008b26 <udp_input+0x86>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8008b1e:	4a2b      	ldr	r2, [pc, #172]	; (8008bcc <udp_input+0x12c>)
 8008b20:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d1e3      	bne.n	8008aee <udp_input+0x4e>
        if (prev != NULL) {
 8008b26:	b12d      	cbz	r5, 8008b34 <udp_input+0x94>
          prev->next = pcb->next;
 8008b28:	68e3      	ldr	r3, [r4, #12]
 8008b2a:	60eb      	str	r3, [r5, #12]
          pcb->next = udp_pcbs;
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 8008b30:	4b27      	ldr	r3, [pc, #156]	; (8008bd0 <udp_input+0x130>)
 8008b32:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 8008b34:	b1a4      	cbz	r4, 8008b60 <udp_input+0xc0>
  if (pcb != NULL) {
 8008b36:	b1ac      	cbz	r4, 8008b64 <udp_input+0xc4>
    for_us = 1;
 8008b38:	2301      	movs	r3, #1
  if (for_us) {
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d041      	beq.n	8008bc2 <udp_input+0x122>
    if (pbuf_header(p, -UDP_HLEN)) {
 8008b3e:	f06f 0107 	mvn.w	r1, #7
 8008b42:	4648      	mov	r0, r9
 8008b44:	f7fc fbac 	bl	80052a0 <pbuf_header>
 8008b48:	b9a0      	cbnz	r0, 8008b74 <udp_input+0xd4>
    if (pcb != NULL) {
 8008b4a:	b314      	cbz	r4, 8008b92 <udp_input+0xf2>
      if (pcb->recv != NULL) {
 8008b4c:	69a5      	ldr	r5, [r4, #24]
 8008b4e:	b1e5      	cbz	r5, 8008b8a <udp_input+0xea>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8008b50:	69e0      	ldr	r0, [r4, #28]
 8008b52:	f8cd a000 	str.w	sl, [sp]
 8008b56:	4b1f      	ldr	r3, [pc, #124]	; (8008bd4 <udp_input+0x134>)
 8008b58:	464a      	mov	r2, r9
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	47a8      	blx	r5
 8008b5e:	e7c0      	b.n	8008ae2 <udp_input+0x42>
    pcb = uncon_pcb;
 8008b60:	465c      	mov	r4, fp
 8008b62:	e7e8      	b.n	8008b36 <udp_input+0x96>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a19      	ldr	r2, [pc, #100]	; (8008bcc <udp_input+0x12c>)
 8008b68:	6952      	ldr	r2, [r2, #20]
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	bf14      	ite	ne
 8008b6e:	2300      	movne	r3, #0
 8008b70:	2301      	moveq	r3, #1
 8008b72:	e7e2      	b.n	8008b3a <udp_input+0x9a>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8008b74:	4b18      	ldr	r3, [pc, #96]	; (8008bd8 <udp_input+0x138>)
 8008b76:	f240 1255 	movw	r2, #341	; 0x155
 8008b7a:	4918      	ldr	r1, [pc, #96]	; (8008bdc <udp_input+0x13c>)
 8008b7c:	4818      	ldr	r0, [pc, #96]	; (8008be0 <udp_input+0x140>)
 8008b7e:	f003 ffdd 	bl	800cb3c <iprintf>
      pbuf_free(p);
 8008b82:	4648      	mov	r0, r9
 8008b84:	f7fc fb96 	bl	80052b4 <pbuf_free>
      goto end;
 8008b88:	e7ab      	b.n	8008ae2 <udp_input+0x42>
        pbuf_free(p);
 8008b8a:	4648      	mov	r0, r9
 8008b8c:	f7fc fb92 	bl	80052b4 <pbuf_free>
        goto end;
 8008b90:	e7a7      	b.n	8008ae2 <udp_input+0x42>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8008b92:	f1b8 0f00 	cmp.w	r8, #0
 8008b96:	d110      	bne.n	8008bba <udp_input+0x11a>
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <udp_input+0x12c>)
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ba0:	2be0      	cmp	r3, #224	; 0xe0
 8008ba2:	d00a      	beq.n	8008bba <udp_input+0x11a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8008ba4:	4b09      	ldr	r3, [pc, #36]	; (8008bcc <udp_input+0x12c>)
 8008ba6:	8999      	ldrh	r1, [r3, #12]
 8008ba8:	3108      	adds	r1, #8
 8008baa:	b209      	sxth	r1, r1
 8008bac:	4648      	mov	r0, r9
 8008bae:	f7fc fb7c 	bl	80052aa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8008bb2:	2103      	movs	r1, #3
 8008bb4:	4648      	mov	r0, r9
 8008bb6:	f002 f961 	bl	800ae7c <icmp_dest_unreach>
      pbuf_free(p);
 8008bba:	4648      	mov	r0, r9
 8008bbc:	f7fc fb7a 	bl	80052b4 <pbuf_free>
 8008bc0:	e78f      	b.n	8008ae2 <udp_input+0x42>
    pbuf_free(p);
 8008bc2:	4648      	mov	r0, r9
 8008bc4:	f7fc fb76 	bl	80052b4 <pbuf_free>
  return;
 8008bc8:	e78b      	b.n	8008ae2 <udp_input+0x42>
 8008bca:	bf00      	nop
 8008bcc:	20003fa0 	.word	0x20003fa0
 8008bd0:	200076e8 	.word	0x200076e8
 8008bd4:	20003fb0 	.word	0x20003fb0
 8008bd8:	0800ef10 	.word	0x0800ef10
 8008bdc:	0800ef40 	.word	0x0800ef40
 8008be0:	0800de6c 	.word	0x0800de6c

08008be4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	4604      	mov	r4, r0
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008be8:	460d      	mov	r5, r1
 8008bea:	b159      	cbz	r1, 8008c04 <udp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8008bec:	2d00      	cmp	r5, #0
 8008bee:	bf18      	it	ne
 8008bf0:	2c00      	cmpne	r4, #0
 8008bf2:	d02d      	beq.n	8008c50 <udp_bind+0x6c>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008bf4:	4b1a      	ldr	r3, [pc, #104]	; (8008c60 <udp_bind+0x7c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	b129      	cbz	r1, 8008c08 <udp_bind+0x24>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8008bfc:	42a1      	cmp	r1, r4
 8008bfe:	d014      	beq.n	8008c2a <udp_bind+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008c00:	68c9      	ldr	r1, [r1, #12]
 8008c02:	e7fa      	b.n	8008bfa <udp_bind+0x16>
    ipaddr = IP4_ADDR_ANY;
 8008c04:	4d17      	ldr	r5, [pc, #92]	; (8008c64 <udp_bind+0x80>)
 8008c06:	e7f1      	b.n	8008bec <udp_bind+0x8>
  rebind = 0;
 8008c08:	2600      	movs	r6, #0
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8008c0a:	b98a      	cbnz	r2, 8008c30 <udp_bind+0x4c>
    port = udp_new_port();
 8008c0c:	f7ff fef8 	bl	8008a00 <udp_new_port>
    if (port == 0) {
 8008c10:	4602      	mov	r2, r0
 8008c12:	b300      	cbz	r0, 8008c56 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8008c14:	b1d5      	cbz	r5, 8008c4c <udp_bind+0x68>
 8008c16:	682b      	ldr	r3, [r5, #0]
 8008c18:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 8008c1a:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8008c1c:	b9f6      	cbnz	r6, 8008c5c <udp_bind+0x78>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8008c1e:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <udp_bind+0x7c>)
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 8008c24:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8008c26:	2000      	movs	r0, #0
 8008c28:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 8008c2a:	2601      	movs	r6, #1
 8008c2c:	e7ed      	b.n	8008c0a <udp_bind+0x26>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0ef      	beq.n	8008c14 <udp_bind+0x30>
      if (pcb != ipcb) {
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d0fa      	beq.n	8008c2e <udp_bind+0x4a>
          if ((ipcb->local_port == port) &&
 8008c38:	8a59      	ldrh	r1, [r3, #18]
 8008c3a:	428a      	cmp	r2, r1
 8008c3c:	d1f7      	bne.n	8008c2e <udp_bind+0x4a>
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8008c3e:	6818      	ldr	r0, [r3, #0]
 8008c40:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 8008c42:	4288      	cmp	r0, r1
 8008c44:	d1f3      	bne.n	8008c2e <udp_bind+0x4a>
            return ERR_USE;
 8008c46:	f06f 0007 	mvn.w	r0, #7
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e7e3      	b.n	8008c18 <udp_bind+0x34>
    return ERR_VAL;
 8008c50:	f06f 0005 	mvn.w	r0, #5
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_USE;
 8008c56:	f06f 0007 	mvn.w	r0, #7
 8008c5a:	bd70      	pop	{r4, r5, r6, pc}
  return ERR_OK;
 8008c5c:	2000      	movs	r0, #0
}
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	200076e8 	.word	0x200076e8
 8008c64:	0800f76c 	.word	0x0800f76c

08008c68 <udp_sendto_if_src>:
{
 8008c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c6c:	b085      	sub	sp, #20
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8008c6e:	2a00      	cmp	r2, #0
 8008c70:	bf18      	it	ne
 8008c72:	2800      	cmpne	r0, #0
 8008c74:	d04f      	beq.n	8008d16 <udp_sendto_if_src+0xae>
 8008c76:	4604      	mov	r4, r0
 8008c78:	4690      	mov	r8, r2
 8008c7a:	4699      	mov	r9, r3
 8008c7c:	460d      	mov	r5, r1
  if (pcb->local_port == 0) {
 8008c7e:	8a42      	ldrh	r2, [r0, #18]
 8008c80:	b922      	cbnz	r2, 8008c8c <udp_sendto_if_src+0x24>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008c82:	4601      	mov	r1, r0
 8008c84:	f7ff ffae 	bl	8008be4 <udp_bind>
    if (err != ERR_OK) {
 8008c88:	4607      	mov	r7, r0
 8008c8a:	bb50      	cbnz	r0, 8008ce2 <udp_sendto_if_src+0x7a>
  if (pbuf_header(p, UDP_HLEN)) {
 8008c8c:	2108      	movs	r1, #8
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f7fc fb06 	bl	80052a0 <pbuf_header>
 8008c94:	bb48      	cbnz	r0, 8008cea <udp_sendto_if_src+0x82>
    q = p;
 8008c96:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8008c98:	8973      	ldrh	r3, [r6, #10]
 8008c9a:	2b07      	cmp	r3, #7
 8008c9c:	d933      	bls.n	8008d06 <udp_sendto_if_src+0x9e>
  udphdr = (struct udp_hdr *)q->payload;
 8008c9e:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8008ca0:	8a60      	ldrh	r0, [r4, #18]
 8008ca2:	f7fb fe4b 	bl	800493c <lwip_htons>
 8008ca6:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 8008ca8:	4648      	mov	r0, r9
 8008caa:	f7fb fe47 	bl	800493c <lwip_htons>
 8008cae:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	71bb      	strb	r3, [r7, #6]
 8008cb4:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8008cb6:	8930      	ldrh	r0, [r6, #8]
 8008cb8:	f7fb fe40 	bl	800493c <lwip_htons>
 8008cbc:	80b8      	strh	r0, [r7, #4]
  ttl = pcb->ttl;
 8008cbe:	7aa3      	ldrb	r3, [r4, #10]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008cc0:	7a62      	ldrb	r2, [r4, #9]
 8008cc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cc4:	9102      	str	r1, [sp, #8]
 8008cc6:	2111      	movs	r1, #17
 8008cc8:	9101      	str	r1, [sp, #4]
 8008cca:	9200      	str	r2, [sp, #0]
 8008ccc:	4642      	mov	r2, r8
 8008cce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f002 fa21 	bl	800b118 <ip4_output_if_src>
 8008cd6:	4607      	mov	r7, r0
  if (q != p) {
 8008cd8:	42ae      	cmp	r6, r5
 8008cda:	d002      	beq.n	8008ce2 <udp_sendto_if_src+0x7a>
    pbuf_free(q);
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f7fc fae9 	bl	80052b4 <pbuf_free>
}
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	b005      	add	sp, #20
 8008ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8008cea:	2200      	movs	r2, #0
 8008cec:	2108      	movs	r1, #8
 8008cee:	2001      	movs	r0, #1
 8008cf0:	f7fc fb4c 	bl	800538c <pbuf_alloc>
    if (q == NULL) {
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	b188      	cbz	r0, 8008d1c <udp_sendto_if_src+0xb4>
    if (p->tot_len != 0) {
 8008cf8:	892b      	ldrh	r3, [r5, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0cc      	beq.n	8008c98 <udp_sendto_if_src+0x30>
      pbuf_chain(q, p);
 8008cfe:	4629      	mov	r1, r5
 8008d00:	f7fc fd00 	bl	8005704 <pbuf_chain>
 8008d04:	e7c8      	b.n	8008c98 <udp_sendto_if_src+0x30>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8008d06:	4b07      	ldr	r3, [pc, #28]	; (8008d24 <udp_sendto_if_src+0xbc>)
 8008d08:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008d0c:	4906      	ldr	r1, [pc, #24]	; (8008d28 <udp_sendto_if_src+0xc0>)
 8008d0e:	4807      	ldr	r0, [pc, #28]	; (8008d2c <udp_sendto_if_src+0xc4>)
 8008d10:	f003 ff14 	bl	800cb3c <iprintf>
 8008d14:	e7c3      	b.n	8008c9e <udp_sendto_if_src+0x36>
    return ERR_VAL;
 8008d16:	f06f 0705 	mvn.w	r7, #5
 8008d1a:	e7e2      	b.n	8008ce2 <udp_sendto_if_src+0x7a>
      return ERR_MEM;
 8008d1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008d20:	e7df      	b.n	8008ce2 <udp_sendto_if_src+0x7a>
 8008d22:	bf00      	nop
 8008d24:	0800ef10 	.word	0x0800ef10
 8008d28:	0800ef54 	.word	0x0800ef54
 8008d2c:	0800de6c 	.word	0x0800de6c

08008d30 <udp_sendto_if>:
{
 8008d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d32:	b083      	sub	sp, #12
 8008d34:	9e08      	ldr	r6, [sp, #32]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8008d36:	2a00      	cmp	r2, #0
 8008d38:	bf18      	it	ne
 8008d3a:	2800      	cmpne	r0, #0
 8008d3c:	d016      	beq.n	8008d6c <udp_sendto_if+0x3c>
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4615      	mov	r5, r2
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008d42:	b150      	cbz	r0, 8008d5a <udp_sendto_if+0x2a>
 8008d44:	6802      	ldr	r2, [r0, #0]
 8008d46:	b142      	cbz	r2, 8008d5a <udp_sendto_if+0x2a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8008d48:	f002 00f0 	and.w	r0, r2, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008d4c:	28e0      	cmp	r0, #224	; 0xe0
 8008d4e:	d004      	beq.n	8008d5a <udp_sendto_if+0x2a>
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8008d50:	6870      	ldr	r0, [r6, #4]
 8008d52:	4282      	cmp	r2, r0
 8008d54:	d10d      	bne.n	8008d72 <udp_sendto_if+0x42>
    src_ip = &pcb->local_ip;
 8008d56:	4627      	mov	r7, r4
 8008d58:	e000      	b.n	8008d5c <udp_sendto_if+0x2c>
    src_ip = netif_ip_addr4(netif);
 8008d5a:	1d37      	adds	r7, r6, #4
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	4620      	mov	r0, r4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8008d60:	9701      	str	r7, [sp, #4]
 8008d62:	9600      	str	r6, [sp, #0]
 8008d64:	f7ff ff80 	bl	8008c68 <udp_sendto_if_src>
}
 8008d68:	b003      	add	sp, #12
 8008d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8008d6c:	f06f 0005 	mvn.w	r0, #5
 8008d70:	e7fa      	b.n	8008d68 <udp_sendto_if+0x38>
      return ERR_RTE;
 8008d72:	f06f 0003 	mvn.w	r0, #3
 8008d76:	e7f7      	b.n	8008d68 <udp_sendto_if+0x38>

08008d78 <udp_connect>:
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8008d78:	2900      	cmp	r1, #0
 8008d7a:	bf18      	it	ne
 8008d7c:	2800      	cmpne	r0, #0
 8008d7e:	d024      	beq.n	8008dca <udp_connect+0x52>
{
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	4604      	mov	r4, r0
 8008d84:	460d      	mov	r5, r1
 8008d86:	4616      	mov	r6, r2
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 8008d88:	8a42      	ldrh	r2, [r0, #18]
 8008d8a:	b17a      	cbz	r2, 8008dac <udp_connect+0x34>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8008d8c:	b1ad      	cbz	r5, 8008dba <udp_connect+0x42>
 8008d8e:	682b      	ldr	r3, [r5, #0]
 8008d90:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 8008d92:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8008d94:	7c23      	ldrb	r3, [r4, #16]
 8008d96:	f043 0304 	orr.w	r3, r3, #4
 8008d9a:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008d9c:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <udp_connect+0x60>)
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	4613      	mov	r3, r2
 8008da2:	b163      	cbz	r3, 8008dbe <udp_connect+0x46>
    if (pcb == ipcb) {
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	d014      	beq.n	8008dd2 <udp_connect+0x5a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	e7fa      	b.n	8008da2 <udp_connect+0x2a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008dac:	4601      	mov	r1, r0
 8008dae:	f7ff ff19 	bl	8008be4 <udp_bind>
    if (err != ERR_OK) {
 8008db2:	4603      	mov	r3, r0
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d0e9      	beq.n	8008d8c <udp_connect+0x14>
 8008db8:	e005      	b.n	8008dc6 <udp_connect+0x4e>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e7e8      	b.n	8008d90 <udp_connect+0x18>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8008dbe:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8008dc0:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <udp_connect+0x60>)
 8008dc2:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8008dca:	f06f 0305 	mvn.w	r3, #5
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	4770      	bx	lr
      return ERR_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e7f7      	b.n	8008dc6 <udp_connect+0x4e>
 8008dd6:	bf00      	nop
 8008dd8:	200076e8 	.word	0x200076e8

08008ddc <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8008ddc:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 8008dde:	61c2      	str	r2, [r0, #28]
 8008de0:	4770      	bx	lr
	...

08008de4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8008de4:	b508      	push	{r3, lr}
 8008de6:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8008de8:	4b0b      	ldr	r3, [pc, #44]	; (8008e18 <udp_remove+0x34>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	4282      	cmp	r2, r0
 8008dee:	d109      	bne.n	8008e04 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8008df0:	68d2      	ldr	r2, [r2, #12]
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	e001      	b.n	8008dfa <udp_remove+0x16>
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8008df6:	68cb      	ldr	r3, [r1, #12]
 8008df8:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	f7fc f886 	bl	8004f0c <memp_free>
 8008e00:	bd08      	pop	{r3, pc}
 8008e02:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8008e04:	2a00      	cmp	r2, #0
 8008e06:	d0f8      	beq.n	8008dfa <udp_remove+0x16>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8008e08:	68d3      	ldr	r3, [r2, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0f9      	beq.n	8008e02 <udp_remove+0x1e>
 8008e0e:	4299      	cmp	r1, r3
 8008e10:	d0f1      	beq.n	8008df6 <udp_remove+0x12>
 8008e12:	461a      	mov	r2, r3
 8008e14:	e7f6      	b.n	8008e04 <udp_remove+0x20>
 8008e16:	bf00      	nop
 8008e18:	200076e8 	.word	0x200076e8

08008e1c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8008e1c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8008e1e:	2000      	movs	r0, #0
 8008e20:	f7fc f85a 	bl	8004ed8 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8008e24:	4604      	mov	r4, r0
 8008e26:	b128      	cbz	r0, 8008e34 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8008e28:	2220      	movs	r2, #32
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	f003 fe7e 	bl	800cb2c <memset>
    pcb->ttl = UDP_TTL;
 8008e30:	23ff      	movs	r3, #255	; 0xff
 8008e32:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 8008e34:	4620      	mov	r0, r4
 8008e36:	bd10      	pop	{r4, pc}

08008e38 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008e38:	b1a0      	cbz	r0, 8008e64 <udp_netif_ip_addr_changed+0x2c>
{
 8008e3a:	b410      	push	{r4}
 8008e3c:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008e3e:	6803      	ldr	r3, [r0, #0]
 8008e40:	b173      	cbz	r3, 8008e60 <udp_netif_ip_addr_changed+0x28>
 8008e42:	b169      	cbz	r1, 8008e60 <udp_netif_ip_addr_changed+0x28>
 8008e44:	680b      	ldr	r3, [r1, #0]
 8008e46:	b15b      	cbz	r3, 8008e60 <udp_netif_ip_addr_changed+0x28>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008e48:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <udp_netif_ip_addr_changed+0x30>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	e000      	b.n	8008e50 <udp_netif_ip_addr_changed+0x18>
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	b133      	cbz	r3, 8008e60 <udp_netif_ip_addr_changed+0x28>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	6822      	ldr	r2, [r4, #0]
 8008e56:	4290      	cmp	r0, r2
 8008e58:	d1f9      	bne.n	8008e4e <udp_netif_ip_addr_changed+0x16>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008e5a:	680a      	ldr	r2, [r1, #0]
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	e7f6      	b.n	8008e4e <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 8008e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	200076e8 	.word	0x200076e8

08008e6c <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8008e6c:	7a43      	ldrb	r3, [r0, #9]
 8008e6e:	428b      	cmp	r3, r1
 8008e70:	d003      	beq.n	8008e7a <dhcp_set_state+0xe>
    dhcp->state = new_state;
 8008e72:	7241      	strb	r1, [r0, #9]
    dhcp->tries = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	7283      	strb	r3, [r0, #10]
    dhcp->request_timeout = 0;
 8008e78:	82c3      	strh	r3, [r0, #22]
 8008e7a:	4770      	bx	lr

08008e7c <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4604      	mov	r4, r0
 8008e80:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8008e82:	8a83      	ldrh	r3, [r0, #20]
 8008e84:	3302      	adds	r3, #2
 8008e86:	2b44      	cmp	r3, #68	; 0x44
 8008e88:	d80f      	bhi.n	8008eaa <dhcp_option_short+0x2e>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	8aa2      	ldrh	r2, [r4, #20]
 8008e8e:	1c51      	adds	r1, r2, #1
 8008e90:	82a1      	strh	r1, [r4, #20]
 8008e92:	0a29      	lsrs	r1, r5, #8
 8008e94:	4413      	add	r3, r2
 8008e96:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	8aa2      	ldrh	r2, [r4, #20]
 8008e9e:	1c51      	adds	r1, r2, #1
 8008ea0:	82a1      	strh	r1, [r4, #20]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 8008ea8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8008eaa:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <dhcp_option_short+0x40>)
 8008eac:	f240 5282 	movw	r2, #1410	; 0x582
 8008eb0:	4903      	ldr	r1, [pc, #12]	; (8008ec0 <dhcp_option_short+0x44>)
 8008eb2:	4804      	ldr	r0, [pc, #16]	; (8008ec4 <dhcp_option_short+0x48>)
 8008eb4:	f003 fe42 	bl	800cb3c <iprintf>
 8008eb8:	e7e7      	b.n	8008e8a <dhcp_option_short+0xe>
 8008eba:	bf00      	nop
 8008ebc:	0800f20c 	.word	0x0800f20c
 8008ec0:	0800f244 	.word	0x0800f244
 8008ec4:	0800de6c 	.word	0x0800de6c

08008ec8 <dhcp_option>:
{
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4604      	mov	r4, r0
 8008ecc:	460e      	mov	r6, r1
 8008ece:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8008ed0:	8a83      	ldrh	r3, [r0, #20]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	3302      	adds	r3, #2
 8008ed6:	2b44      	cmp	r3, #68	; 0x44
 8008ed8:	d80e      	bhi.n	8008ef8 <dhcp_option+0x30>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	8aa2      	ldrh	r2, [r4, #20]
 8008ede:	1c51      	adds	r1, r2, #1
 8008ee0:	82a1      	strh	r1, [r4, #20]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f883 60f0 	strb.w	r6, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	8aa2      	ldrh	r2, [r4, #20]
 8008eec:	1c51      	adds	r1, r2, #1
 8008eee:	82a1      	strh	r1, [r4, #20]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8008ef8:	4b03      	ldr	r3, [pc, #12]	; (8008f08 <dhcp_option+0x40>)
 8008efa:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8008efe:	4903      	ldr	r1, [pc, #12]	; (8008f0c <dhcp_option+0x44>)
 8008f00:	4803      	ldr	r0, [pc, #12]	; (8008f10 <dhcp_option+0x48>)
 8008f02:	f003 fe1b 	bl	800cb3c <iprintf>
 8008f06:	e7e8      	b.n	8008eda <dhcp_option+0x12>
 8008f08:	0800f20c 	.word	0x0800f20c
 8008f0c:	0800f148 	.word	0x0800f148
 8008f10:	0800de6c 	.word	0x0800de6c

08008f14 <dhcp_option_byte>:
{
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4604      	mov	r4, r0
 8008f18:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8008f1a:	8a83      	ldrh	r3, [r0, #20]
 8008f1c:	2b43      	cmp	r3, #67	; 0x43
 8008f1e:	d807      	bhi.n	8008f30 <dhcp_option_byte+0x1c>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	8aa2      	ldrh	r2, [r4, #20]
 8008f24:	1c51      	adds	r1, r2, #1
 8008f26:	82a1      	strh	r1, [r4, #20]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8008f30:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <dhcp_option_byte+0x2c>)
 8008f32:	f240 527b 	movw	r2, #1403	; 0x57b
 8008f36:	4903      	ldr	r1, [pc, #12]	; (8008f44 <dhcp_option_byte+0x30>)
 8008f38:	4803      	ldr	r0, [pc, #12]	; (8008f48 <dhcp_option_byte+0x34>)
 8008f3a:	f003 fdff 	bl	800cb3c <iprintf>
 8008f3e:	e7ef      	b.n	8008f20 <dhcp_option_byte+0xc>
 8008f40:	0800f20c 	.word	0x0800f20c
 8008f44:	0800f190 	.word	0x0800f190
 8008f48:	0800de6c 	.word	0x0800de6c

08008f4c <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8008f4c:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8008f4e:	b170      	cbz	r0, 8008f6e <dhcp_option_trailer+0x22>
 8008f50:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8008f52:	6903      	ldr	r3, [r0, #16]
 8008f54:	b19b      	cbz	r3, 8008f7e <dhcp_option_trailer+0x32>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8008f56:	8aa3      	ldrh	r3, [r4, #20]
 8008f58:	2b43      	cmp	r3, #67	; 0x43
 8008f5a:	d818      	bhi.n	8008f8e <dhcp_option_trailer+0x42>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	8aa2      	ldrh	r2, [r4, #20]
 8008f60:	1c51      	adds	r1, r2, #1
 8008f62:	82a1      	strh	r1, [r4, #20]
 8008f64:	4413      	add	r3, r2
 8008f66:	22ff      	movs	r2, #255	; 0xff
 8008f68:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8008f6c:	e020      	b.n	8008fb0 <dhcp_option_trailer+0x64>
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8008f6e:	4b14      	ldr	r3, [pc, #80]	; (8008fc0 <dhcp_option_trailer+0x74>)
 8008f70:	f240 7282 	movw	r2, #1922	; 0x782
 8008f74:	4913      	ldr	r1, [pc, #76]	; (8008fc4 <dhcp_option_trailer+0x78>)
 8008f76:	4814      	ldr	r0, [pc, #80]	; (8008fc8 <dhcp_option_trailer+0x7c>)
 8008f78:	f003 fde0 	bl	800cb3c <iprintf>
 8008f7c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8008f7e:	4b10      	ldr	r3, [pc, #64]	; (8008fc0 <dhcp_option_trailer+0x74>)
 8008f80:	f240 7283 	movw	r2, #1923	; 0x783
 8008f84:	4911      	ldr	r1, [pc, #68]	; (8008fcc <dhcp_option_trailer+0x80>)
 8008f86:	4810      	ldr	r0, [pc, #64]	; (8008fc8 <dhcp_option_trailer+0x7c>)
 8008f88:	f003 fdd8 	bl	800cb3c <iprintf>
 8008f8c:	e7e3      	b.n	8008f56 <dhcp_option_trailer+0xa>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <dhcp_option_trailer+0x74>)
 8008f90:	f240 7284 	movw	r2, #1924	; 0x784
 8008f94:	490e      	ldr	r1, [pc, #56]	; (8008fd0 <dhcp_option_trailer+0x84>)
 8008f96:	480c      	ldr	r0, [pc, #48]	; (8008fc8 <dhcp_option_trailer+0x7c>)
 8008f98:	f003 fdd0 	bl	800cb3c <iprintf>
 8008f9c:	e7de      	b.n	8008f5c <dhcp_option_trailer+0x10>
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8008f9e:	2b43      	cmp	r3, #67	; 0x43
 8008fa0:	d80c      	bhi.n	8008fbc <dhcp_option_trailer+0x70>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8008fa2:	6922      	ldr	r2, [r4, #16]
 8008fa4:	1c59      	adds	r1, r3, #1
 8008fa6:	82a1      	strh	r1, [r4, #20]
 8008fa8:	4413      	add	r3, r2
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8008fb0:	8aa3      	ldrh	r3, [r4, #20]
 8008fb2:	2b43      	cmp	r3, #67	; 0x43
 8008fb4:	d9f3      	bls.n	8008f9e <dhcp_option_trailer+0x52>
 8008fb6:	f013 0f03 	tst.w	r3, #3
 8008fba:	d1f0      	bne.n	8008f9e <dhcp_option_trailer+0x52>
 8008fbc:	bd10      	pop	{r4, pc}
 8008fbe:	bf00      	nop
 8008fc0:	0800f20c 	.word	0x0800f20c
 8008fc4:	0800f288 	.word	0x0800f288
 8008fc8:	0800de6c 	.word	0x0800de6c
 8008fcc:	0800f2ac 	.word	0x0800f2ac
 8008fd0:	0800f2d8 	.word	0x0800f2d8

08008fd4 <dhcp_option_long>:
{
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8008fda:	8a83      	ldrh	r3, [r0, #20]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	2b44      	cmp	r3, #68	; 0x44
 8008fe0:	d821      	bhi.n	8009026 <dhcp_option_long+0x52>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	8aa2      	ldrh	r2, [r4, #20]
 8008fe6:	1c51      	adds	r1, r2, #1
 8008fe8:	82a1      	strh	r1, [r4, #20]
 8008fea:	0e29      	lsrs	r1, r5, #24
 8008fec:	4413      	add	r3, r2
 8008fee:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8008ff2:	6923      	ldr	r3, [r4, #16]
 8008ff4:	8aa2      	ldrh	r2, [r4, #20]
 8008ff6:	1c51      	adds	r1, r2, #1
 8008ff8:	82a1      	strh	r1, [r4, #20]
 8008ffa:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8008ffe:	4413      	add	r3, r2
 8009000:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	8aa2      	ldrh	r2, [r4, #20]
 8009008:	1c51      	adds	r1, r2, #1
 800900a:	82a1      	strh	r1, [r4, #20]
 800900c:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8009010:	4413      	add	r3, r2
 8009012:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8009016:	6923      	ldr	r3, [r4, #16]
 8009018:	8aa2      	ldrh	r2, [r4, #20]
 800901a:	1c51      	adds	r1, r2, #1
 800901c:	82a1      	strh	r1, [r4, #20]
 800901e:	4413      	add	r3, r2
 8009020:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 8009024:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8009026:	4b04      	ldr	r3, [pc, #16]	; (8009038 <dhcp_option_long+0x64>)
 8009028:	f240 528a 	movw	r2, #1418	; 0x58a
 800902c:	4903      	ldr	r1, [pc, #12]	; (800903c <dhcp_option_long+0x68>)
 800902e:	4804      	ldr	r0, [pc, #16]	; (8009040 <dhcp_option_long+0x6c>)
 8009030:	f003 fd84 	bl	800cb3c <iprintf>
 8009034:	e7d5      	b.n	8008fe2 <dhcp_option_long+0xe>
 8009036:	bf00      	nop
 8009038:	0800f20c 	.word	0x0800f20c
 800903c:	0800f1cc 	.word	0x0800f1cc
 8009040:	0800de6c 	.word	0x0800de6c

08009044 <dhcp_create_msg>:
{
 8009044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8009048:	2800      	cmp	r0, #0
 800904a:	d06d      	beq.n	8009128 <dhcp_create_msg+0xe4>
 800904c:	460c      	mov	r4, r1
 800904e:	4615      	mov	r5, r2
 8009050:	4606      	mov	r6, r0
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8009052:	2900      	cmp	r1, #0
 8009054:	d073      	beq.n	800913e <dhcp_create_msg+0xfa>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8009056:	68cb      	ldr	r3, [r1, #12]
 8009058:	b133      	cbz	r3, 8009068 <dhcp_create_msg+0x24>
 800905a:	4b70      	ldr	r3, [pc, #448]	; (800921c <dhcp_create_msg+0x1d8>)
 800905c:	f240 721f 	movw	r2, #1823	; 0x71f
 8009060:	496f      	ldr	r1, [pc, #444]	; (8009220 <dhcp_create_msg+0x1dc>)
 8009062:	4870      	ldr	r0, [pc, #448]	; (8009224 <dhcp_create_msg+0x1e0>)
 8009064:	f003 fd6a 	bl	800cb3c <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	b133      	cbz	r3, 800907a <dhcp_create_msg+0x36>
 800906c:	4b6b      	ldr	r3, [pc, #428]	; (800921c <dhcp_create_msg+0x1d8>)
 800906e:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8009072:	496d      	ldr	r1, [pc, #436]	; (8009228 <dhcp_create_msg+0x1e4>)
 8009074:	486b      	ldr	r0, [pc, #428]	; (8009224 <dhcp_create_msg+0x1e0>)
 8009076:	f003 fd61 	bl	800cb3c <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800907a:	2200      	movs	r2, #0
 800907c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8009080:	4610      	mov	r0, r2
 8009082:	f7fc f983 	bl	800538c <pbuf_alloc>
 8009086:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 8009088:	2800      	cmp	r0, #0
 800908a:	f000 80c3 	beq.w	8009214 <dhcp_create_msg+0x1d0>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800908e:	8943      	ldrh	r3, [r0, #10]
 8009090:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8009094:	d35e      	bcc.n	8009154 <dhcp_create_msg+0x110>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8009096:	2d03      	cmp	r5, #3
 8009098:	d064      	beq.n	8009164 <dhcp_create_msg+0x120>
    if (dhcp->tries == 0) {
 800909a:	7aa3      	ldrb	r3, [r4, #10]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d065      	beq.n	800916c <dhcp_create_msg+0x128>
    dhcp->xid = xid;
 80090a0:	4b62      	ldr	r3, [pc, #392]	; (800922c <dhcp_create_msg+0x1e8>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6023      	str	r3, [r4, #0]
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	6122      	str	r2, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 80090ac:	2301      	movs	r3, #1
 80090ae:	7013      	strb	r3, [r2, #0]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 80090b0:	6922      	ldr	r2, [r4, #16]
 80090b2:	7053      	strb	r3, [r2, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 80090ba:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	2700      	movs	r7, #0
 80090c0:	70df      	strb	r7, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80090c2:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80090c6:	6820      	ldr	r0, [r4, #0]
 80090c8:	f7fb fc3b 	bl	8004942 <lwip_htonl>
 80090cc:	f8c8 0004 	str.w	r0, [r8, #4]
  dhcp->msg_out->secs = 0;
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	721f      	strb	r7, [r3, #8]
 80090d4:	725f      	strb	r7, [r3, #9]
  dhcp->msg_out->flags = 0;
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	729f      	strb	r7, [r3, #10]
 80090da:	72df      	strb	r7, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	731f      	strb	r7, [r3, #12]
 80090e0:	735f      	strb	r7, [r3, #13]
 80090e2:	739f      	strb	r7, [r3, #14]
 80090e4:	73df      	strb	r7, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80090e6:	2d04      	cmp	r5, #4
 80090e8:	bf18      	it	ne
 80090ea:	2d08      	cmpne	r5, #8
 80090ec:	d008      	beq.n	8009100 <dhcp_create_msg+0xbc>
 80090ee:	2d07      	cmp	r5, #7
 80090f0:	d006      	beq.n	8009100 <dhcp_create_msg+0xbc>
 80090f2:	2d03      	cmp	r5, #3
 80090f4:	d107      	bne.n	8009106 <dhcp_create_msg+0xc2>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 80090f6:	7a63      	ldrb	r3, [r4, #9]
 80090f8:	3b04      	subs	r3, #4
 80090fa:	b2db      	uxtb	r3, r3
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d802      	bhi.n	8009106 <dhcp_create_msg+0xc2>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8009100:	6923      	ldr	r3, [r4, #16]
 8009102:	6872      	ldr	r2, [r6, #4]
 8009104:	60da      	str	r2, [r3, #12]
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8009106:	6922      	ldr	r2, [r4, #16]
 8009108:	2300      	movs	r3, #0
 800910a:	7413      	strb	r3, [r2, #16]
 800910c:	7453      	strb	r3, [r2, #17]
 800910e:	7493      	strb	r3, [r2, #18]
 8009110:	74d3      	strb	r3, [r2, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8009112:	6922      	ldr	r2, [r4, #16]
 8009114:	7513      	strb	r3, [r2, #20]
 8009116:	7553      	strb	r3, [r2, #21]
 8009118:	7593      	strb	r3, [r2, #22]
 800911a:	75d3      	strb	r3, [r2, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800911c:	6922      	ldr	r2, [r4, #16]
 800911e:	7613      	strb	r3, [r2, #24]
 8009120:	7653      	strb	r3, [r2, #25]
 8009122:	7693      	strb	r3, [r2, #26]
 8009124:	76d3      	strb	r3, [r2, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8009126:	e02f      	b.n	8009188 <dhcp_create_msg+0x144>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8009128:	4b3c      	ldr	r3, [pc, #240]	; (800921c <dhcp_create_msg+0x1d8>)
 800912a:	f240 721d 	movw	r2, #1821	; 0x71d
 800912e:	4940      	ldr	r1, [pc, #256]	; (8009230 <dhcp_create_msg+0x1ec>)
 8009130:	483c      	ldr	r0, [pc, #240]	; (8009224 <dhcp_create_msg+0x1e0>)
 8009132:	f003 fd03 	bl	800cb3c <iprintf>
 8009136:	f06f 000f 	mvn.w	r0, #15
 800913a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800913e:	4b37      	ldr	r3, [pc, #220]	; (800921c <dhcp_create_msg+0x1d8>)
 8009140:	f240 721e 	movw	r2, #1822	; 0x71e
 8009144:	493b      	ldr	r1, [pc, #236]	; (8009234 <dhcp_create_msg+0x1f0>)
 8009146:	4837      	ldr	r0, [pc, #220]	; (8009224 <dhcp_create_msg+0x1e0>)
 8009148:	f003 fcf8 	bl	800cb3c <iprintf>
 800914c:	f06f 0005 	mvn.w	r0, #5
 8009150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8009154:	4b31      	ldr	r3, [pc, #196]	; (800921c <dhcp_create_msg+0x1d8>)
 8009156:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800915a:	4937      	ldr	r1, [pc, #220]	; (8009238 <dhcp_create_msg+0x1f4>)
 800915c:	4831      	ldr	r0, [pc, #196]	; (8009224 <dhcp_create_msg+0x1e0>)
 800915e:	f003 fced 	bl	800cb3c <iprintf>
 8009162:	e798      	b.n	8009096 <dhcp_create_msg+0x52>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8009164:	7a63      	ldrb	r3, [r4, #9]
 8009166:	2b03      	cmp	r3, #3
 8009168:	d19d      	bne.n	80090a6 <dhcp_create_msg+0x62>
 800916a:	e796      	b.n	800909a <dhcp_create_msg+0x56>
      xid = LWIP_RAND();
 800916c:	f003 fcfe 	bl	800cb6c <rand>
 8009170:	4b2e      	ldr	r3, [pc, #184]	; (800922c <dhcp_create_msg+0x1e8>)
 8009172:	6018      	str	r0, [r3, #0]
 8009174:	e794      	b.n	80090a0 <dhcp_create_msg+0x5c>
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8009176:	18f0      	adds	r0, r6, r3
 8009178:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800917c:	e000      	b.n	8009180 <dhcp_create_msg+0x13c>
 800917e:	2000      	movs	r0, #0
 8009180:	440a      	add	r2, r1
 8009182:	7710      	strb	r0, [r2, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8009184:	3301      	adds	r3, #1
 8009186:	b29b      	uxth	r3, r3
 8009188:	2b0f      	cmp	r3, #15
 800918a:	d809      	bhi.n	80091a0 <dhcp_create_msg+0x15c>
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800918c:	6922      	ldr	r2, [r4, #16]
 800918e:	4619      	mov	r1, r3
 8009190:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
 8009194:	4283      	cmp	r3, r0
 8009196:	d2f2      	bcs.n	800917e <dhcp_create_msg+0x13a>
 8009198:	2b05      	cmp	r3, #5
 800919a:	d9ec      	bls.n	8009176 <dhcp_create_msg+0x132>
 800919c:	2000      	movs	r0, #0
 800919e:	e7ef      	b.n	8009180 <dhcp_create_msg+0x13c>
 80091a0:	2300      	movs	r3, #0
 80091a2:	e006      	b.n	80091b2 <dhcp_create_msg+0x16e>
    dhcp->msg_out->sname[i] = 0;
 80091a4:	6922      	ldr	r2, [r4, #16]
 80091a6:	441a      	add	r2, r3
 80091a8:	2100      	movs	r1, #0
 80091aa:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80091ae:	3301      	adds	r3, #1
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	2b3f      	cmp	r3, #63	; 0x3f
 80091b4:	d9f6      	bls.n	80091a4 <dhcp_create_msg+0x160>
 80091b6:	2300      	movs	r3, #0
 80091b8:	e006      	b.n	80091c8 <dhcp_create_msg+0x184>
    dhcp->msg_out->file[i] = 0;
 80091ba:	6922      	ldr	r2, [r4, #16]
 80091bc:	441a      	add	r2, r3
 80091be:	2100      	movs	r1, #0
 80091c0:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80091c4:	3301      	adds	r3, #1
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b7f      	cmp	r3, #127	; 0x7f
 80091ca:	d9f6      	bls.n	80091ba <dhcp_create_msg+0x176>
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80091cc:	6922      	ldr	r2, [r4, #16]
 80091ce:	2300      	movs	r3, #0
 80091d0:	2163      	movs	r1, #99	; 0x63
 80091d2:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
 80091d6:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80091da:	f882 00ed 	strb.w	r0, [r2, #237]	; 0xed
 80091de:	2053      	movs	r0, #83	; 0x53
 80091e0:	f882 00ee 	strb.w	r0, [r2, #238]	; 0xee
 80091e4:	f882 10ef 	strb.w	r1, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
 80091e8:	82a3      	strh	r3, [r4, #20]
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80091ea:	e005      	b.n	80091f8 <dhcp_create_msg+0x1b4>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	441a      	add	r2, r3
 80091f0:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80091f4:	3301      	adds	r3, #1
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	2b43      	cmp	r3, #67	; 0x43
 80091fa:	d9f7      	bls.n	80091ec <dhcp_create_msg+0x1a8>
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80091fc:	2201      	movs	r2, #1
 80091fe:	2135      	movs	r1, #53	; 0x35
 8009200:	4620      	mov	r0, r4
 8009202:	f7ff fe61 	bl	8008ec8 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8009206:	4629      	mov	r1, r5
 8009208:	4620      	mov	r0, r4
 800920a:	f7ff fe83 	bl	8008f14 <dhcp_option_byte>
  return ERR_OK;
 800920e:	2000      	movs	r0, #0
 8009210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 8009214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800921c:	0800f20c 	.word	0x0800f20c
 8009220:	0800eff8 	.word	0x0800eff8
 8009224:	0800de6c 	.word	0x0800de6c
 8009228:	0800f020 	.word	0x0800f020
 800922c:	20003e88 	.word	0x20003e88
 8009230:	0800efb8 	.word	0x0800efb8
 8009234:	0800efd8 	.word	0x0800efd8
 8009238:	0800f048 	.word	0x0800f048

0800923c <dhcp_handle_ack>:
{
 800923c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800923e:	6a04      	ldr	r4, [r0, #32]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009240:	2300      	movs	r3, #0
 8009242:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8009244:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8009246:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <dhcp_handle_ack+0x74>)
 8009248:	78db      	ldrb	r3, [r3, #3]
 800924a:	b113      	cbz	r3, 8009252 <dhcp_handle_ack+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800924c:	4b19      	ldr	r3, [pc, #100]	; (80092b4 <dhcp_handle_ack+0x78>)
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	6363      	str	r3, [r4, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8009252:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <dhcp_handle_ack+0x74>)
 8009254:	791b      	ldrb	r3, [r3, #4]
 8009256:	b1f3      	cbz	r3, 8009296 <dhcp_handle_ack+0x5a>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8009258:	4b16      	ldr	r3, [pc, #88]	; (80092b4 <dhcp_handle_ack+0x78>)
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800925e:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <dhcp_handle_ack+0x74>)
 8009260:	795b      	ldrb	r3, [r3, #5]
 8009262:	b1e3      	cbz	r3, 800929e <dhcp_handle_ack+0x62>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8009264:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <dhcp_handle_ack+0x78>)
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8009270:	4b0f      	ldr	r3, [pc, #60]	; (80092b0 <dhcp_handle_ack+0x74>)
 8009272:	799b      	ldrb	r3, [r3, #6]
 8009274:	b1cb      	cbz	r3, 80092aa <dhcp_handle_ack+0x6e>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8009276:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <dhcp_handle_ack+0x78>)
 8009278:	6998      	ldr	r0, [r3, #24]
 800927a:	f7fb fb62 	bl	8004942 <lwip_htonl>
 800927e:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8009280:	2301      	movs	r3, #1
 8009282:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8009284:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <dhcp_handle_ack+0x74>)
 8009286:	79db      	ldrb	r3, [r3, #7]
 8009288:	b123      	cbz	r3, 8009294 <dhcp_handle_ack+0x58>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800928a:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <dhcp_handle_ack+0x78>)
 800928c:	69d8      	ldr	r0, [r3, #28]
 800928e:	f7fb fb58 	bl	8004942 <lwip_htonl>
 8009292:	6320      	str	r0, [r4, #48]	; 0x30
 8009294:	bd10      	pop	{r4, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8009296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009298:	085b      	lsrs	r3, r3, #1
 800929a:	63a3      	str	r3, [r4, #56]	; 0x38
 800929c:	e7df      	b.n	800925e <dhcp_handle_ack+0x22>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800929e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80092a4:	08db      	lsrs	r3, r3, #3
 80092a6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80092a8:	e7df      	b.n	800926a <dhcp_handle_ack+0x2e>
    dhcp->subnet_mask_given = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	72e3      	strb	r3, [r4, #11]
 80092ae:	e7e9      	b.n	8009284 <dhcp_handle_ack+0x48>
 80092b0:	200076ec 	.word	0x200076ec
 80092b4:	200076f4 	.word	0x200076f4

080092b8 <dhcp_delete_msg>:
{
 80092b8:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80092ba:	b160      	cbz	r0, 80092d6 <dhcp_delete_msg+0x1e>
 80092bc:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 80092be:	68c3      	ldr	r3, [r0, #12]
 80092c0:	b18b      	cbz	r3, 80092e6 <dhcp_delete_msg+0x2e>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	b1bb      	cbz	r3, 80092f6 <dhcp_delete_msg+0x3e>
  if (dhcp->p_out != NULL) {
 80092c6:	68e0      	ldr	r0, [r4, #12]
 80092c8:	b108      	cbz	r0, 80092ce <dhcp_delete_msg+0x16>
    pbuf_free(dhcp->p_out);
 80092ca:	f7fb fff3 	bl	80052b4 <pbuf_free>
  dhcp->p_out = NULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60e3      	str	r3, [r4, #12]
  dhcp->msg_out = NULL;
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <dhcp_delete_msg+0x50>)
 80092d8:	f240 726d 	movw	r2, #1901	; 0x76d
 80092dc:	490b      	ldr	r1, [pc, #44]	; (800930c <dhcp_delete_msg+0x54>)
 80092de:	480c      	ldr	r0, [pc, #48]	; (8009310 <dhcp_delete_msg+0x58>)
 80092e0:	f003 fc2c 	bl	800cb3c <iprintf>
 80092e4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 80092e6:	4b08      	ldr	r3, [pc, #32]	; (8009308 <dhcp_delete_msg+0x50>)
 80092e8:	f240 726e 	movw	r2, #1902	; 0x76e
 80092ec:	4909      	ldr	r1, [pc, #36]	; (8009314 <dhcp_delete_msg+0x5c>)
 80092ee:	4808      	ldr	r0, [pc, #32]	; (8009310 <dhcp_delete_msg+0x58>)
 80092f0:	f003 fc24 	bl	800cb3c <iprintf>
 80092f4:	e7e5      	b.n	80092c2 <dhcp_delete_msg+0xa>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80092f6:	4b04      	ldr	r3, [pc, #16]	; (8009308 <dhcp_delete_msg+0x50>)
 80092f8:	f240 726f 	movw	r2, #1903	; 0x76f
 80092fc:	4906      	ldr	r1, [pc, #24]	; (8009318 <dhcp_delete_msg+0x60>)
 80092fe:	4804      	ldr	r0, [pc, #16]	; (8009310 <dhcp_delete_msg+0x58>)
 8009300:	f003 fc1c 	bl	800cb3c <iprintf>
 8009304:	e7df      	b.n	80092c6 <dhcp_delete_msg+0xe>
 8009306:	bf00      	nop
 8009308:	0800f20c 	.word	0x0800f20c
 800930c:	0800f0ac 	.word	0x0800f0ac
 8009310:	0800de6c 	.word	0x0800de6c
 8009314:	0800f0cc 	.word	0x0800f0cc
 8009318:	0800f0f4 	.word	0x0800f0f4

0800931c <dhcp_discover>:
{
 800931c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800931e:	b083      	sub	sp, #12
 8009320:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009322:	6a04      	ldr	r4, [r0, #32]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8009324:	2300      	movs	r3, #0
 8009326:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8009328:	2106      	movs	r1, #6
 800932a:	4620      	mov	r0, r4
 800932c:	f7ff fd9e 	bl	8008e6c <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8009330:	2201      	movs	r2, #1
 8009332:	4621      	mov	r1, r4
 8009334:	4638      	mov	r0, r7
 8009336:	f7ff fe85 	bl	8009044 <dhcp_create_msg>
  if (result == ERR_OK) {
 800933a:	4605      	mov	r5, r0
 800933c:	b1b8      	cbz	r0, 800936e <dhcp_discover+0x52>
  if (dhcp->tries < 255) {
 800933e:	7aa3      	ldrb	r3, [r4, #10]
 8009340:	2bff      	cmp	r3, #255	; 0xff
 8009342:	d001      	beq.n	8009348 <dhcp_discover+0x2c>
    dhcp->tries++;
 8009344:	3301      	adds	r3, #1
 8009346:	72a3      	strb	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009348:	7aa2      	ldrb	r2, [r4, #10]
 800934a:	2a05      	cmp	r2, #5
 800934c:	d83f      	bhi.n	80093ce <dhcp_discover+0xb2>
 800934e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009352:	4093      	lsls	r3, r2
 8009354:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009356:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800935a:	4a1e      	ldr	r2, [pc, #120]	; (80093d4 <dhcp_discover+0xb8>)
 800935c:	fb82 1203 	smull	r1, r2, r2, r3
 8009360:	17db      	asrs	r3, r3, #31
 8009362:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8009366:	82e3      	strh	r3, [r4, #22]
}
 8009368:	4628      	mov	r0, r5
 800936a:	b003      	add	sp, #12
 800936c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800936e:	2202      	movs	r2, #2
 8009370:	2139      	movs	r1, #57	; 0x39
 8009372:	4620      	mov	r0, r4
 8009374:	f7ff fda8 	bl	8008ec8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009378:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800937a:	4620      	mov	r0, r4
 800937c:	f7ff fd7e 	bl	8008e7c <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009380:	2203      	movs	r2, #3
 8009382:	2137      	movs	r1, #55	; 0x37
 8009384:	4620      	mov	r0, r4
 8009386:	f7ff fd9f 	bl	8008ec8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800938a:	2600      	movs	r6, #0
 800938c:	e006      	b.n	800939c <dhcp_discover+0x80>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <dhcp_discover+0xbc>)
 8009390:	5d99      	ldrb	r1, [r3, r6]
 8009392:	4620      	mov	r0, r4
 8009394:	f7ff fdbe 	bl	8008f14 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009398:	3601      	adds	r6, #1
 800939a:	b2f6      	uxtb	r6, r6
 800939c:	2e02      	cmp	r6, #2
 800939e:	d9f6      	bls.n	800938e <dhcp_discover+0x72>
    dhcp_option_trailer(dhcp);
 80093a0:	4620      	mov	r0, r4
 80093a2:	f7ff fdd3 	bl	8008f4c <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80093a6:	8aa1      	ldrh	r1, [r4, #20]
 80093a8:	31f0      	adds	r1, #240	; 0xf0
 80093aa:	b289      	uxth	r1, r1
 80093ac:	68e0      	ldr	r0, [r4, #12]
 80093ae:	f7fc f8d5 	bl	800555c <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80093b2:	68e1      	ldr	r1, [r4, #12]
 80093b4:	4b09      	ldr	r3, [pc, #36]	; (80093dc <dhcp_discover+0xc0>)
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <dhcp_discover+0xc4>)
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	9700      	str	r7, [sp, #0]
 80093be:	2343      	movs	r3, #67	; 0x43
 80093c0:	4a08      	ldr	r2, [pc, #32]	; (80093e4 <dhcp_discover+0xc8>)
 80093c2:	f7ff fc51 	bl	8008c68 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7ff ff76 	bl	80092b8 <dhcp_delete_msg>
 80093cc:	e7b7      	b.n	800933e <dhcp_discover+0x22>
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80093ce:	f64e 2360 	movw	r3, #60000	; 0xea60
 80093d2:	e7c0      	b.n	8009356 <dhcp_discover+0x3a>
 80093d4:	10624dd3 	.word	0x10624dd3
 80093d8:	0800f11c 	.word	0x0800f11c
 80093dc:	20003e80 	.word	0x20003e80
 80093e0:	0800f76c 	.word	0x0800f76c
 80093e4:	0800f770 	.word	0x0800f770

080093e8 <dhcp_select>:
{
 80093e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ea:	b083      	sub	sp, #12
 80093ec:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80093ee:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80093f0:	2101      	movs	r1, #1
 80093f2:	4620      	mov	r0, r4
 80093f4:	f7ff fd3a 	bl	8008e6c <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80093f8:	2203      	movs	r2, #3
 80093fa:	4621      	mov	r1, r4
 80093fc:	4638      	mov	r0, r7
 80093fe:	f7ff fe21 	bl	8009044 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009402:	4605      	mov	r5, r0
 8009404:	b1b8      	cbz	r0, 8009436 <dhcp_select+0x4e>
  if (dhcp->tries < 255) {
 8009406:	7aa3      	ldrb	r3, [r4, #10]
 8009408:	2bff      	cmp	r3, #255	; 0xff
 800940a:	d001      	beq.n	8009410 <dhcp_select+0x28>
    dhcp->tries++;
 800940c:	3301      	adds	r3, #1
 800940e:	72a3      	strb	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009410:	7aa2      	ldrb	r2, [r4, #10]
 8009412:	2a05      	cmp	r2, #5
 8009414:	d857      	bhi.n	80094c6 <dhcp_select+0xde>
 8009416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800941a:	4093      	lsls	r3, r2
 800941c:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800941e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009422:	4a2a      	ldr	r2, [pc, #168]	; (80094cc <dhcp_select+0xe4>)
 8009424:	fb82 1203 	smull	r1, r2, r2, r3
 8009428:	17db      	asrs	r3, r3, #31
 800942a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800942e:	82e3      	strh	r3, [r4, #22]
}
 8009430:	4628      	mov	r0, r5
 8009432:	b003      	add	sp, #12
 8009434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009436:	2202      	movs	r2, #2
 8009438:	2139      	movs	r1, #57	; 0x39
 800943a:	4620      	mov	r0, r4
 800943c:	f7ff fd44 	bl	8008ec8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009440:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8009442:	4620      	mov	r0, r4
 8009444:	f7ff fd1a 	bl	8008e7c <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009448:	2204      	movs	r2, #4
 800944a:	2132      	movs	r1, #50	; 0x32
 800944c:	4620      	mov	r0, r4
 800944e:	f7ff fd3b 	bl	8008ec8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009452:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009454:	f7fb fa75 	bl	8004942 <lwip_htonl>
 8009458:	4601      	mov	r1, r0
 800945a:	4620      	mov	r0, r4
 800945c:	f7ff fdba 	bl	8008fd4 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8009460:	2204      	movs	r2, #4
 8009462:	2136      	movs	r1, #54	; 0x36
 8009464:	4620      	mov	r0, r4
 8009466:	f7ff fd2f 	bl	8008ec8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800946a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800946c:	f7fb fa69 	bl	8004942 <lwip_htonl>
 8009470:	4601      	mov	r1, r0
 8009472:	4620      	mov	r0, r4
 8009474:	f7ff fdae 	bl	8008fd4 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009478:	2203      	movs	r2, #3
 800947a:	2137      	movs	r1, #55	; 0x37
 800947c:	4620      	mov	r0, r4
 800947e:	f7ff fd23 	bl	8008ec8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009482:	2600      	movs	r6, #0
 8009484:	e006      	b.n	8009494 <dhcp_select+0xac>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009486:	4b12      	ldr	r3, [pc, #72]	; (80094d0 <dhcp_select+0xe8>)
 8009488:	5d99      	ldrb	r1, [r3, r6]
 800948a:	4620      	mov	r0, r4
 800948c:	f7ff fd42 	bl	8008f14 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009490:	3601      	adds	r6, #1
 8009492:	b2f6      	uxtb	r6, r6
 8009494:	2e02      	cmp	r6, #2
 8009496:	d9f6      	bls.n	8009486 <dhcp_select+0x9e>
    dhcp_option_trailer(dhcp);
 8009498:	4620      	mov	r0, r4
 800949a:	f7ff fd57 	bl	8008f4c <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800949e:	8aa1      	ldrh	r1, [r4, #20]
 80094a0:	31f0      	adds	r1, #240	; 0xf0
 80094a2:	b289      	uxth	r1, r1
 80094a4:	68e0      	ldr	r0, [r4, #12]
 80094a6:	f7fc f859 	bl	800555c <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80094aa:	68e1      	ldr	r1, [r4, #12]
 80094ac:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <dhcp_select+0xec>)
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	4b09      	ldr	r3, [pc, #36]	; (80094d8 <dhcp_select+0xf0>)
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	9700      	str	r7, [sp, #0]
 80094b6:	2343      	movs	r3, #67	; 0x43
 80094b8:	4a08      	ldr	r2, [pc, #32]	; (80094dc <dhcp_select+0xf4>)
 80094ba:	f7ff fbd5 	bl	8008c68 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80094be:	4620      	mov	r0, r4
 80094c0:	f7ff fefa 	bl	80092b8 <dhcp_delete_msg>
 80094c4:	e79f      	b.n	8009406 <dhcp_select+0x1e>
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80094c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80094ca:	e7a8      	b.n	800941e <dhcp_select+0x36>
 80094cc:	10624dd3 	.word	0x10624dd3
 80094d0:	0800f11c 	.word	0x0800f11c
 80094d4:	20003e80 	.word	0x20003e80
 80094d8:	0800f76c 	.word	0x0800f76c
 80094dc:	0800f770 	.word	0x0800f770

080094e0 <dhcp_handle_offer>:
{
 80094e0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80094e2:	6a05      	ldr	r5, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80094e4:	4b07      	ldr	r3, [pc, #28]	; (8009504 <dhcp_handle_offer+0x24>)
 80094e6:	789b      	ldrb	r3, [r3, #2]
 80094e8:	b15b      	cbz	r3, 8009502 <dhcp_handle_offer+0x22>
 80094ea:	4604      	mov	r4, r0
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80094ec:	4b06      	ldr	r3, [pc, #24]	; (8009508 <dhcp_handle_offer+0x28>)
 80094ee:	6898      	ldr	r0, [r3, #8]
 80094f0:	f7fb fa27 	bl	8004942 <lwip_htonl>
 80094f4:	6268      	str	r0, [r5, #36]	; 0x24
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80094f6:	686b      	ldr	r3, [r5, #4]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	62ab      	str	r3, [r5, #40]	; 0x28
    dhcp_select(netif);
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7ff ff73 	bl	80093e8 <dhcp_select>
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	200076ec 	.word	0x200076ec
 8009508:	200076f4 	.word	0x200076f4

0800950c <dhcp_decline>:
{
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009512:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009514:	210c      	movs	r1, #12
 8009516:	4620      	mov	r0, r4
 8009518:	f7ff fca8 	bl	8008e6c <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800951c:	2204      	movs	r2, #4
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	f7ff fd8f 	bl	8009044 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009526:	4606      	mov	r6, r0
 8009528:	b148      	cbz	r0, 800953e <dhcp_decline+0x32>
  if (dhcp->tries < 255) {
 800952a:	7aa3      	ldrb	r3, [r4, #10]
 800952c:	2bff      	cmp	r3, #255	; 0xff
 800952e:	d001      	beq.n	8009534 <dhcp_decline+0x28>
    dhcp->tries++;
 8009530:	3301      	adds	r3, #1
 8009532:	72a3      	strb	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009534:	2314      	movs	r3, #20
 8009536:	82e3      	strh	r3, [r4, #22]
}
 8009538:	4630      	mov	r0, r6
 800953a:	b002      	add	sp, #8
 800953c:	bd70      	pop	{r4, r5, r6, pc}
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800953e:	2204      	movs	r2, #4
 8009540:	2132      	movs	r1, #50	; 0x32
 8009542:	4620      	mov	r0, r4
 8009544:	f7ff fcc0 	bl	8008ec8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009548:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800954a:	f7fb f9fa 	bl	8004942 <lwip_htonl>
 800954e:	4601      	mov	r1, r0
 8009550:	4620      	mov	r0, r4
 8009552:	f7ff fd3f 	bl	8008fd4 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 8009556:	4620      	mov	r0, r4
 8009558:	f7ff fcf8 	bl	8008f4c <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800955c:	8aa1      	ldrh	r1, [r4, #20]
 800955e:	31f0      	adds	r1, #240	; 0xf0
 8009560:	b289      	uxth	r1, r1
 8009562:	68e0      	ldr	r0, [r4, #12]
 8009564:	f7fb fffa 	bl	800555c <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8009568:	68e1      	ldr	r1, [r4, #12]
 800956a:	4b06      	ldr	r3, [pc, #24]	; (8009584 <dhcp_decline+0x78>)
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	4b06      	ldr	r3, [pc, #24]	; (8009588 <dhcp_decline+0x7c>)
 8009570:	9301      	str	r3, [sp, #4]
 8009572:	9500      	str	r5, [sp, #0]
 8009574:	2343      	movs	r3, #67	; 0x43
 8009576:	4a05      	ldr	r2, [pc, #20]	; (800958c <dhcp_decline+0x80>)
 8009578:	f7ff fb76 	bl	8008c68 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800957c:	4620      	mov	r0, r4
 800957e:	f7ff fe9b 	bl	80092b8 <dhcp_delete_msg>
 8009582:	e7d2      	b.n	800952a <dhcp_decline+0x1e>
 8009584:	20003e80 	.word	0x20003e80
 8009588:	0800f76c 	.word	0x0800f76c
 800958c:	0800f770 	.word	0x0800f770

08009590 <dhcp_rebind>:
{
 8009590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009592:	b083      	sub	sp, #12
 8009594:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009596:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8009598:	2104      	movs	r1, #4
 800959a:	4620      	mov	r0, r4
 800959c:	f7ff fc66 	bl	8008e6c <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80095a0:	2203      	movs	r2, #3
 80095a2:	4621      	mov	r1, r4
 80095a4:	4638      	mov	r0, r7
 80095a6:	f7ff fd4d 	bl	8009044 <dhcp_create_msg>
  if (result == ERR_OK) {
 80095aa:	4605      	mov	r5, r0
 80095ac:	b1d0      	cbz	r0, 80095e4 <dhcp_rebind+0x54>
  if (dhcp->tries < 255) {
 80095ae:	7aa3      	ldrb	r3, [r4, #10]
 80095b0:	2bff      	cmp	r3, #255	; 0xff
 80095b2:	d001      	beq.n	80095b8 <dhcp_rebind+0x28>
    dhcp->tries++;
 80095b4:	3301      	adds	r3, #1
 80095b6:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80095b8:	7aa3      	ldrb	r3, [r4, #10]
 80095ba:	2b09      	cmp	r3, #9
 80095bc:	d840      	bhi.n	8009640 <dhcp_rebind+0xb0>
 80095be:	b29b      	uxth	r3, r3
 80095c0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80095c4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80095c8:	00d3      	lsls	r3, r2, #3
 80095ca:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80095cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80095d0:	4a1d      	ldr	r2, [pc, #116]	; (8009648 <dhcp_rebind+0xb8>)
 80095d2:	fb82 1203 	smull	r1, r2, r2, r3
 80095d6:	17db      	asrs	r3, r3, #31
 80095d8:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80095dc:	82e3      	strh	r3, [r4, #22]
}
 80095de:	4628      	mov	r0, r5
 80095e0:	b003      	add	sp, #12
 80095e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80095e4:	2202      	movs	r2, #2
 80095e6:	2139      	movs	r1, #57	; 0x39
 80095e8:	4620      	mov	r0, r4
 80095ea:	f7ff fc6d 	bl	8008ec8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80095ee:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80095f0:	4620      	mov	r0, r4
 80095f2:	f7ff fc43 	bl	8008e7c <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80095f6:	2203      	movs	r2, #3
 80095f8:	2137      	movs	r1, #55	; 0x37
 80095fa:	4620      	mov	r0, r4
 80095fc:	f7ff fc64 	bl	8008ec8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009600:	2600      	movs	r6, #0
 8009602:	e006      	b.n	8009612 <dhcp_rebind+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009604:	4b11      	ldr	r3, [pc, #68]	; (800964c <dhcp_rebind+0xbc>)
 8009606:	5d99      	ldrb	r1, [r3, r6]
 8009608:	4620      	mov	r0, r4
 800960a:	f7ff fc83 	bl	8008f14 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800960e:	3601      	adds	r6, #1
 8009610:	b2f6      	uxtb	r6, r6
 8009612:	2e02      	cmp	r6, #2
 8009614:	d9f6      	bls.n	8009604 <dhcp_rebind+0x74>
    dhcp_option_trailer(dhcp);
 8009616:	4620      	mov	r0, r4
 8009618:	f7ff fc98 	bl	8008f4c <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800961c:	8aa1      	ldrh	r1, [r4, #20]
 800961e:	31f0      	adds	r1, #240	; 0xf0
 8009620:	b289      	uxth	r1, r1
 8009622:	68e0      	ldr	r0, [r4, #12]
 8009624:	f7fb ff9a 	bl	800555c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8009628:	68e1      	ldr	r1, [r4, #12]
 800962a:	4b09      	ldr	r3, [pc, #36]	; (8009650 <dhcp_rebind+0xc0>)
 800962c:	6818      	ldr	r0, [r3, #0]
 800962e:	9700      	str	r7, [sp, #0]
 8009630:	2343      	movs	r3, #67	; 0x43
 8009632:	4a08      	ldr	r2, [pc, #32]	; (8009654 <dhcp_rebind+0xc4>)
 8009634:	f7ff fb7c 	bl	8008d30 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8009638:	4620      	mov	r0, r4
 800963a:	f7ff fe3d 	bl	80092b8 <dhcp_delete_msg>
 800963e:	e7b6      	b.n	80095ae <dhcp_rebind+0x1e>
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8009640:	f242 7310 	movw	r3, #10000	; 0x2710
 8009644:	e7c2      	b.n	80095cc <dhcp_rebind+0x3c>
 8009646:	bf00      	nop
 8009648:	10624dd3 	.word	0x10624dd3
 800964c:	0800f11c 	.word	0x0800f11c
 8009650:	20003e80 	.word	0x20003e80
 8009654:	0800f770 	.word	0x0800f770

08009658 <dhcp_t2_timeout>:
{
 8009658:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800965a:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800965c:	7a63      	ldrb	r3, [r4, #9]
 800965e:	2b0a      	cmp	r3, #10
 8009660:	bf18      	it	ne
 8009662:	2b01      	cmpne	r3, #1
 8009664:	d003      	beq.n	800966e <dhcp_t2_timeout+0x16>
 8009666:	2b05      	cmp	r3, #5
 8009668:	d001      	beq.n	800966e <dhcp_t2_timeout+0x16>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800966a:	2b04      	cmp	r3, #4
 800966c:	d10b      	bne.n	8009686 <dhcp_t2_timeout+0x2e>
    dhcp_rebind(netif);
 800966e:	f7ff ff8f 	bl	8009590 <dhcp_rebind>
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8009672:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8009674:	8c22      	ldrh	r2, [r4, #32]
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	2b01      	cmp	r3, #1
 800967a:	dd04      	ble.n	8009686 <dhcp_t2_timeout+0x2e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800967c:	461a      	mov	r2, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	db02      	blt.n	8009688 <dhcp_t2_timeout+0x30>
 8009682:	1052      	asrs	r2, r2, #1
 8009684:	83e2      	strh	r2, [r4, #30]
 8009686:	bd10      	pop	{r4, pc}
 8009688:	1c5a      	adds	r2, r3, #1
 800968a:	e7fa      	b.n	8009682 <dhcp_t2_timeout+0x2a>

0800968c <dhcp_reboot>:
{
 800968c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800968e:	b083      	sub	sp, #12
 8009690:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009692:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8009694:	2103      	movs	r1, #3
 8009696:	4620      	mov	r0, r4
 8009698:	f7ff fbe8 	bl	8008e6c <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800969c:	2203      	movs	r2, #3
 800969e:	4621      	mov	r1, r4
 80096a0:	4638      	mov	r0, r7
 80096a2:	f7ff fccf 	bl	8009044 <dhcp_create_msg>
  if (result == ERR_OK) {
 80096a6:	4605      	mov	r5, r0
 80096a8:	b1d0      	cbz	r0, 80096e0 <dhcp_reboot+0x54>
  if (dhcp->tries < 255) {
 80096aa:	7aa3      	ldrb	r3, [r4, #10]
 80096ac:	2bff      	cmp	r3, #255	; 0xff
 80096ae:	d001      	beq.n	80096b4 <dhcp_reboot+0x28>
    dhcp->tries++;
 80096b0:	3301      	adds	r3, #1
 80096b2:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80096b4:	7aa3      	ldrb	r3, [r4, #10]
 80096b6:	2b09      	cmp	r3, #9
 80096b8:	d84d      	bhi.n	8009756 <dhcp_reboot+0xca>
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80096c0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80096c4:	00d3      	lsls	r3, r2, #3
 80096c6:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80096c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80096cc:	4a23      	ldr	r2, [pc, #140]	; (800975c <dhcp_reboot+0xd0>)
 80096ce:	fb82 1203 	smull	r1, r2, r2, r3
 80096d2:	17db      	asrs	r3, r3, #31
 80096d4:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80096d8:	82e3      	strh	r3, [r4, #22]
}
 80096da:	4628      	mov	r0, r5
 80096dc:	b003      	add	sp, #12
 80096de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80096e0:	2202      	movs	r2, #2
 80096e2:	2139      	movs	r1, #57	; 0x39
 80096e4:	4620      	mov	r0, r4
 80096e6:	f7ff fbef 	bl	8008ec8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80096ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7ff fbc4 	bl	8008e7c <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80096f4:	2204      	movs	r2, #4
 80096f6:	2132      	movs	r1, #50	; 0x32
 80096f8:	4620      	mov	r0, r4
 80096fa:	f7ff fbe5 	bl	8008ec8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80096fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009700:	f7fb f91f 	bl	8004942 <lwip_htonl>
 8009704:	4601      	mov	r1, r0
 8009706:	4620      	mov	r0, r4
 8009708:	f7ff fc64 	bl	8008fd4 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800970c:	2203      	movs	r2, #3
 800970e:	2137      	movs	r1, #55	; 0x37
 8009710:	4620      	mov	r0, r4
 8009712:	f7ff fbd9 	bl	8008ec8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009716:	2600      	movs	r6, #0
 8009718:	e006      	b.n	8009728 <dhcp_reboot+0x9c>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800971a:	4b11      	ldr	r3, [pc, #68]	; (8009760 <dhcp_reboot+0xd4>)
 800971c:	5d99      	ldrb	r1, [r3, r6]
 800971e:	4620      	mov	r0, r4
 8009720:	f7ff fbf8 	bl	8008f14 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009724:	3601      	adds	r6, #1
 8009726:	b2f6      	uxtb	r6, r6
 8009728:	2e02      	cmp	r6, #2
 800972a:	d9f6      	bls.n	800971a <dhcp_reboot+0x8e>
    dhcp_option_trailer(dhcp);
 800972c:	4620      	mov	r0, r4
 800972e:	f7ff fc0d 	bl	8008f4c <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009732:	8aa1      	ldrh	r1, [r4, #20]
 8009734:	31f0      	adds	r1, #240	; 0xf0
 8009736:	b289      	uxth	r1, r1
 8009738:	68e0      	ldr	r0, [r4, #12]
 800973a:	f7fb ff0f 	bl	800555c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800973e:	68e1      	ldr	r1, [r4, #12]
 8009740:	4b08      	ldr	r3, [pc, #32]	; (8009764 <dhcp_reboot+0xd8>)
 8009742:	6818      	ldr	r0, [r3, #0]
 8009744:	9700      	str	r7, [sp, #0]
 8009746:	2343      	movs	r3, #67	; 0x43
 8009748:	4a07      	ldr	r2, [pc, #28]	; (8009768 <dhcp_reboot+0xdc>)
 800974a:	f7ff faf1 	bl	8008d30 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800974e:	4620      	mov	r0, r4
 8009750:	f7ff fdb2 	bl	80092b8 <dhcp_delete_msg>
 8009754:	e7a9      	b.n	80096aa <dhcp_reboot+0x1e>
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8009756:	f242 7310 	movw	r3, #10000	; 0x2710
 800975a:	e7b5      	b.n	80096c8 <dhcp_reboot+0x3c>
 800975c:	10624dd3 	.word	0x10624dd3
 8009760:	0800f11c 	.word	0x0800f11c
 8009764:	20003e80 	.word	0x20003e80
 8009768:	0800f770 	.word	0x0800f770

0800976c <dhcp_check>:
{
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009770:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8009772:	2108      	movs	r1, #8
 8009774:	4620      	mov	r0, r4
 8009776:	f7ff fb79 	bl	8008e6c <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800977a:	2200      	movs	r2, #0
 800977c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8009780:	4628      	mov	r0, r5
 8009782:	f001 f901 	bl	800a988 <etharp_query>
  if (dhcp->tries < 255) {
 8009786:	7aa3      	ldrb	r3, [r4, #10]
 8009788:	2bff      	cmp	r3, #255	; 0xff
 800978a:	d001      	beq.n	8009790 <dhcp_check+0x24>
    dhcp->tries++;
 800978c:	3301      	adds	r3, #1
 800978e:	72a3      	strb	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009790:	2301      	movs	r3, #1
 8009792:	82e3      	strh	r3, [r4, #22]
 8009794:	bd38      	pop	{r3, r4, r5, pc}
	...

08009798 <dhcp_bind>:
{
 8009798:	b530      	push	{r4, r5, lr}
 800979a:	b083      	sub	sp, #12
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800979c:	2800      	cmp	r0, #0
 800979e:	d063      	beq.n	8009868 <dhcp_bind+0xd0>
 80097a0:	4605      	mov	r5, r0
  dhcp = netif_dhcp_data(netif);
 80097a2:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80097a4:	2c00      	cmp	r4, #0
 80097a6:	d067      	beq.n	8009878 <dhcp_bind+0xe0>
  dhcp->lease_used = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	8423      	strh	r3, [r4, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80097ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097b2:	d00e      	beq.n	80097d2 <dhcp_bind+0x3a>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80097b4:	331e      	adds	r3, #30
 80097b6:	4a3d      	ldr	r2, [pc, #244]	; (80098ac <dhcp_bind+0x114>)
 80097b8:	fba2 2303 	umull	r2, r3, r2, r3
 80097bc:	095b      	lsrs	r3, r3, #5
     if (timeout > 0xffff) {
 80097be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c2:	d301      	bcc.n	80097c8 <dhcp_bind+0x30>
       timeout = 0xffff;
 80097c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
     dhcp->t0_timeout = (u16_t)timeout;
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	8463      	strh	r3, [r4, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 80097cc:	b90b      	cbnz	r3, 80097d2 <dhcp_bind+0x3a>
       dhcp->t0_timeout = 1;
 80097ce:	2301      	movs	r3, #1
 80097d0:	8463      	strh	r3, [r4, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80097d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80097d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097d8:	d010      	beq.n	80097fc <dhcp_bind+0x64>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80097da:	331e      	adds	r3, #30
 80097dc:	4a33      	ldr	r2, [pc, #204]	; (80098ac <dhcp_bind+0x114>)
 80097de:	fba2 2303 	umull	r2, r3, r2, r3
 80097e2:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 80097e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e8:	d301      	bcc.n	80097ee <dhcp_bind+0x56>
      timeout = 0xffff;
 80097ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t1_timeout = (u16_t)timeout;
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	8323      	strh	r3, [r4, #24]
    if (dhcp->t1_timeout == 0) {
 80097f2:	b90b      	cbnz	r3, 80097f8 <dhcp_bind+0x60>
      dhcp->t1_timeout = 1;
 80097f4:	2301      	movs	r3, #1
 80097f6:	8323      	strh	r3, [r4, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80097f8:	8b23      	ldrh	r3, [r4, #24]
 80097fa:	83a3      	strh	r3, [r4, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80097fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80097fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009802:	d010      	beq.n	8009826 <dhcp_bind+0x8e>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009804:	331e      	adds	r3, #30
 8009806:	4a29      	ldr	r2, [pc, #164]	; (80098ac <dhcp_bind+0x114>)
 8009808:	fba2 2303 	umull	r2, r3, r2, r3
 800980c:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800980e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009812:	d301      	bcc.n	8009818 <dhcp_bind+0x80>
      timeout = 0xffff;
 8009814:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t2_timeout = (u16_t)timeout;
 8009818:	b29b      	uxth	r3, r3
 800981a:	8363      	strh	r3, [r4, #26]
    if (dhcp->t2_timeout == 0) {
 800981c:	b90b      	cbnz	r3, 8009822 <dhcp_bind+0x8a>
      dhcp->t2_timeout = 1;
 800981e:	2301      	movs	r3, #1
 8009820:	8363      	strh	r3, [r4, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8009822:	8b63      	ldrh	r3, [r4, #26]
 8009824:	83e3      	strh	r3, [r4, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8009826:	8b22      	ldrh	r2, [r4, #24]
 8009828:	8b63      	ldrh	r3, [r4, #26]
 800982a:	429a      	cmp	r2, r3
 800982c:	d302      	bcc.n	8009834 <dhcp_bind+0x9c>
 800982e:	b10b      	cbz	r3, 8009834 <dhcp_bind+0x9c>
    dhcp->t1_timeout = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	8323      	strh	r3, [r4, #24]
  if (dhcp->subnet_mask_given) {
 8009834:	7ae3      	ldrb	r3, [r4, #11]
 8009836:	b33b      	cbz	r3, 8009888 <dhcp_bind+0xf0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8009838:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800983a:	9301      	str	r3, [sp, #4]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800983c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800983e:	9300      	str	r3, [sp, #0]
  if (ip4_addr_isany_val(gw_addr)) {
 8009840:	b92b      	cbnz	r3, 800984e <dhcp_bind+0xb6>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8009842:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009844:	9a01      	ldr	r2, [sp, #4]
 8009846:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8009848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800984c:	9300      	str	r3, [sp, #0]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800984e:	210a      	movs	r1, #10
 8009850:	4620      	mov	r0, r4
 8009852:	f7ff fb0b 	bl	8008e6c <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8009856:	466b      	mov	r3, sp
 8009858:	aa01      	add	r2, sp, #4
 800985a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800985e:	4628      	mov	r0, r5
 8009860:	f7fb fbb2 	bl	8004fc8 <netif_set_addr>
}
 8009864:	b003      	add	sp, #12
 8009866:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8009868:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <dhcp_bind+0x118>)
 800986a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800986e:	4911      	ldr	r1, [pc, #68]	; (80098b4 <dhcp_bind+0x11c>)
 8009870:	4811      	ldr	r0, [pc, #68]	; (80098b8 <dhcp_bind+0x120>)
 8009872:	f003 f963 	bl	800cb3c <iprintf>
 8009876:	e7f5      	b.n	8009864 <dhcp_bind+0xcc>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8009878:	4b0d      	ldr	r3, [pc, #52]	; (80098b0 <dhcp_bind+0x118>)
 800987a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800987e:	490f      	ldr	r1, [pc, #60]	; (80098bc <dhcp_bind+0x124>)
 8009880:	480d      	ldr	r0, [pc, #52]	; (80098b8 <dhcp_bind+0x120>)
 8009882:	f003 f95b 	bl	800cb3c <iprintf>
 8009886:	e7ed      	b.n	8009864 <dhcp_bind+0xcc>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8009888:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (first_octet <= 127) {
 800988c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009890:	d102      	bne.n	8009898 <dhcp_bind+0x100>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8009892:	23ff      	movs	r3, #255	; 0xff
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	e7d1      	b.n	800983c <dhcp_bind+0xa4>
    } else if (first_octet >= 192) {
 8009898:	2bbf      	cmp	r3, #191	; 0xbf
 800989a:	d903      	bls.n	80098a4 <dhcp_bind+0x10c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800989c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	e7cb      	b.n	800983c <dhcp_bind+0xa4>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80098a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	e7c7      	b.n	800983c <dhcp_bind+0xa4>
 80098ac:	88888889 	.word	0x88888889
 80098b0:	0800f20c 	.word	0x0800f20c
 80098b4:	0800ef84 	.word	0x0800ef84
 80098b8:	0800de6c 	.word	0x0800de6c
 80098bc:	0800efa0 	.word	0x0800efa0

080098c0 <dhcp_handle_nak>:
{
 80098c0:	b510      	push	{r4, lr}
 80098c2:	4604      	mov	r4, r0
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80098c4:	210c      	movs	r1, #12
 80098c6:	6a00      	ldr	r0, [r0, #32]
 80098c8:	f7ff fad0 	bl	8008e6c <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80098cc:	4904      	ldr	r1, [pc, #16]	; (80098e0 <dhcp_handle_nak+0x20>)
 80098ce:	460b      	mov	r3, r1
 80098d0:	460a      	mov	r2, r1
 80098d2:	4620      	mov	r0, r4
 80098d4:	f7fb fb78 	bl	8004fc8 <netif_set_addr>
  dhcp_discover(netif);
 80098d8:	4620      	mov	r0, r4
 80098da:	f7ff fd1f 	bl	800931c <dhcp_discover>
 80098de:	bd10      	pop	{r4, pc}
 80098e0:	0800f76c 	.word	0x0800f76c

080098e4 <dhcp_dec_pcb_refcount>:
{
 80098e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80098e6:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <dhcp_dec_pcb_refcount+0x34>)
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	b133      	cbz	r3, 80098fa <dhcp_dec_pcb_refcount+0x16>
  dhcp_pcb_refcount--;
 80098ec:	4a0a      	ldr	r2, [pc, #40]	; (8009918 <dhcp_dec_pcb_refcount+0x34>)
 80098ee:	7813      	ldrb	r3, [r2, #0]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	7013      	strb	r3, [r2, #0]
  if (dhcp_pcb_refcount == 0) {
 80098f6:	b13b      	cbz	r3, 8009908 <dhcp_dec_pcb_refcount+0x24>
 80098f8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80098fa:	4b08      	ldr	r3, [pc, #32]	; (800991c <dhcp_dec_pcb_refcount+0x38>)
 80098fc:	22f3      	movs	r2, #243	; 0xf3
 80098fe:	4908      	ldr	r1, [pc, #32]	; (8009920 <dhcp_dec_pcb_refcount+0x3c>)
 8009900:	4808      	ldr	r0, [pc, #32]	; (8009924 <dhcp_dec_pcb_refcount+0x40>)
 8009902:	f003 f91b 	bl	800cb3c <iprintf>
 8009906:	e7f1      	b.n	80098ec <dhcp_dec_pcb_refcount+0x8>
    udp_remove(dhcp_pcb);
 8009908:	4c07      	ldr	r4, [pc, #28]	; (8009928 <dhcp_dec_pcb_refcount+0x44>)
 800990a:	6820      	ldr	r0, [r4, #0]
 800990c:	f7ff fa6a 	bl	8008de4 <udp_remove>
    dhcp_pcb = NULL;
 8009910:	2300      	movs	r3, #0
 8009912:	6023      	str	r3, [r4, #0]
}
 8009914:	e7f0      	b.n	80098f8 <dhcp_dec_pcb_refcount+0x14>
 8009916:	bf00      	nop
 8009918:	20003e84 	.word	0x20003e84
 800991c:	0800f20c 	.word	0x0800f20c
 8009920:	0800f088 	.word	0x0800f088
 8009924:	0800de6c 	.word	0x0800de6c
 8009928:	20003e80 	.word	0x20003e80

0800992c <dhcp_inc_pcb_refcount>:
{
 800992c:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800992e:	4b17      	ldr	r3, [pc, #92]	; (800998c <dhcp_inc_pcb_refcount+0x60>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	bb0b      	cbnz	r3, 8009978 <dhcp_inc_pcb_refcount+0x4c>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8009934:	4b16      	ldr	r3, [pc, #88]	; (8009990 <dhcp_inc_pcb_refcount+0x64>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	b12b      	cbz	r3, 8009946 <dhcp_inc_pcb_refcount+0x1a>
 800993a:	4b16      	ldr	r3, [pc, #88]	; (8009994 <dhcp_inc_pcb_refcount+0x68>)
 800993c:	22d9      	movs	r2, #217	; 0xd9
 800993e:	4916      	ldr	r1, [pc, #88]	; (8009998 <dhcp_inc_pcb_refcount+0x6c>)
 8009940:	4816      	ldr	r0, [pc, #88]	; (800999c <dhcp_inc_pcb_refcount+0x70>)
 8009942:	f003 f8fb 	bl	800cb3c <iprintf>
    dhcp_pcb = udp_new();
 8009946:	f7ff fa69 	bl	8008e1c <udp_new>
 800994a:	4b11      	ldr	r3, [pc, #68]	; (8009990 <dhcp_inc_pcb_refcount+0x64>)
 800994c:	6018      	str	r0, [r3, #0]
    if (dhcp_pcb == NULL) {
 800994e:	b1c8      	cbz	r0, 8009984 <dhcp_inc_pcb_refcount+0x58>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8009950:	7a03      	ldrb	r3, [r0, #8]
 8009952:	f043 0320 	orr.w	r3, r3, #32
 8009956:	7203      	strb	r3, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8009958:	4d11      	ldr	r5, [pc, #68]	; (80099a0 <dhcp_inc_pcb_refcount+0x74>)
 800995a:	2244      	movs	r2, #68	; 0x44
 800995c:	4629      	mov	r1, r5
 800995e:	f7ff f941 	bl	8008be4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8009962:	4c0b      	ldr	r4, [pc, #44]	; (8009990 <dhcp_inc_pcb_refcount+0x64>)
 8009964:	2243      	movs	r2, #67	; 0x43
 8009966:	4629      	mov	r1, r5
 8009968:	6820      	ldr	r0, [r4, #0]
 800996a:	f7ff fa05 	bl	8008d78 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800996e:	2200      	movs	r2, #0
 8009970:	490c      	ldr	r1, [pc, #48]	; (80099a4 <dhcp_inc_pcb_refcount+0x78>)
 8009972:	6820      	ldr	r0, [r4, #0]
 8009974:	f7ff fa32 	bl	8008ddc <udp_recv>
  dhcp_pcb_refcount++;
 8009978:	4a04      	ldr	r2, [pc, #16]	; (800998c <dhcp_inc_pcb_refcount+0x60>)
 800997a:	7813      	ldrb	r3, [r2, #0]
 800997c:	3301      	adds	r3, #1
 800997e:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 8009980:	2000      	movs	r0, #0
 8009982:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 8009984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009988:	bd38      	pop	{r3, r4, r5, pc}
 800998a:	bf00      	nop
 800998c:	20003e84 	.word	0x20003e84
 8009990:	20003e80 	.word	0x20003e80
 8009994:	0800f20c 	.word	0x0800f20c
 8009998:	0800f120 	.word	0x0800f120
 800999c:	0800de6c 	.word	0x0800de6c
 80099a0:	0800f76c 	.word	0x0800f76c
 80099a4:	08009e21 	.word	0x08009e21

080099a8 <dhcp_parse_reply>:
  dhcp_clear_all_options(dhcp);
 80099a8:	4b88      	ldr	r3, [pc, #544]	; (8009bcc <dhcp_parse_reply+0x224>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 80099b0:	894b      	ldrh	r3, [r1, #10]
 80099b2:	2b2b      	cmp	r3, #43	; 0x2b
 80099b4:	f240 8221 	bls.w	8009dfa <dhcp_parse_reply+0x452>
{
 80099b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	b087      	sub	sp, #28
 80099be:	9101      	str	r1, [sp, #4]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 80099c0:	684b      	ldr	r3, [r1, #4]
 80099c2:	6043      	str	r3, [r0, #4]
  options_idx_max = p->tot_len;
 80099c4:	f8b1 b008 	ldrh.w	fp, [r1, #8]
  int parse_sname_as_options = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	9303      	str	r3, [sp, #12]
  int parse_file_as_options = 0;
 80099cc:	9302      	str	r3, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 80099ce:	f04f 09f0 	mov.w	r9, #240	; 0xf0
  q = p;
 80099d2:	9f01      	ldr	r7, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 80099d4:	b19f      	cbz	r7, 80099fe <dhcp_parse_reply+0x56>
 80099d6:	897b      	ldrh	r3, [r7, #10]
 80099d8:	4599      	cmp	r9, r3
 80099da:	d310      	bcc.n	80099fe <dhcp_parse_reply+0x56>
    options_idx -= q->len;
 80099dc:	eba9 0903 	sub.w	r9, r9, r3
 80099e0:	fa1f f989 	uxth.w	r9, r9
    options_idx_max -= q->len;
 80099e4:	ebab 0b03 	sub.w	fp, fp, r3
 80099e8:	fa1f fb8b 	uxth.w	fp, fp
    q = q->next;
 80099ec:	683f      	ldr	r7, [r7, #0]
 80099ee:	e7f1      	b.n	80099d4 <dhcp_parse_reply+0x2c>
    parse_file_as_options = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	9302      	str	r3, [sp, #8]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80099f4:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 80099f8:	f04f 096c 	mov.w	r9, #108	; 0x6c
 80099fc:	e7e9      	b.n	80099d2 <dhcp_parse_reply+0x2a>
  if (q == NULL) {
 80099fe:	2f00      	cmp	r7, #0
 8009a00:	f000 81fe 	beq.w	8009e00 <dhcp_parse_reply+0x458>
  options = (u8_t*)q->payload;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	9300      	str	r3, [sp, #0]
  offset = options_idx;
 8009a08:	46c8      	mov	r8, r9
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8009a0a:	e11a      	b.n	8009c42 <dhcp_parse_reply+0x29a>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	b113      	cbz	r3, 8009a16 <dhcp_parse_reply+0x6e>
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	e12d      	b.n	8009c72 <dhcp_parse_reply+0x2ca>
 8009a16:	2300      	movs	r3, #0
 8009a18:	e12b      	b.n	8009c72 <dhcp_parse_reply+0x2ca>
        offset--;
 8009a1a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009a1e:	fa1f f888 	uxth.w	r8, r8
    int decode_idx = -1;
 8009a22:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        decode_len = len = 0;
 8009a26:	2400      	movs	r4, #0
 8009a28:	4623      	mov	r3, r4
    offset += len + 2;
 8009a2a:	4498      	add	r8, r3
 8009a2c:	fa1f f888 	uxth.w	r8, r8
 8009a30:	f108 0802 	add.w	r8, r8, #2
 8009a34:	fa1f f888 	uxth.w	r8, r8
    if (decode_len > 0) {
 8009a38:	2c00      	cmp	r4, #0
 8009a3a:	f000 80eb 	beq.w	8009c14 <dhcp_parse_reply+0x26c>
      u32_t value = 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9305      	str	r3, [sp, #20]
 8009a42:	e0ae      	b.n	8009ba2 <dhcp_parse_reply+0x1fa>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d102      	bne.n	8009a4e <dhcp_parse_reply+0xa6>
    decode_len = len;
 8009a48:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8009a4a:	2506      	movs	r5, #6
 8009a4c:	e7ed      	b.n	8009a2a <dhcp_parse_reply+0x82>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009a4e:	4b60      	ldr	r3, [pc, #384]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009a50:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8009a54:	495f      	ldr	r1, [pc, #380]	; (8009bd4 <dhcp_parse_reply+0x22c>)
 8009a56:	4860      	ldr	r0, [pc, #384]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009a58:	f003 f870 	bl	800cb3c <iprintf>
 8009a5c:	f06f 0005 	mvn.w	r0, #5
 8009a60:	e197      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d902      	bls.n	8009a6c <dhcp_parse_reply+0xc4>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8009a66:	2507      	movs	r5, #7
        decode_len = 4; /* only copy the first given router */
 8009a68:	2404      	movs	r4, #4
 8009a6a:	e7de      	b.n	8009a2a <dhcp_parse_reply+0x82>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8009a6c:	4b58      	ldr	r3, [pc, #352]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009a6e:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8009a72:	495a      	ldr	r1, [pc, #360]	; (8009bdc <dhcp_parse_reply+0x234>)
 8009a74:	4858      	ldr	r0, [pc, #352]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009a76:	f003 f861 	bl	800cb3c <iprintf>
 8009a7a:	f06f 0005 	mvn.w	r0, #5
 8009a7e:	e188      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	d102      	bne.n	8009a8a <dhcp_parse_reply+0xe2>
    decode_len = len;
 8009a84:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8009a86:	2503      	movs	r5, #3
 8009a88:	e7cf      	b.n	8009a2a <dhcp_parse_reply+0x82>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009a8a:	4b51      	ldr	r3, [pc, #324]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009a8c:	f240 6209 	movw	r2, #1545	; 0x609
 8009a90:	4950      	ldr	r1, [pc, #320]	; (8009bd4 <dhcp_parse_reply+0x22c>)
 8009a92:	4851      	ldr	r0, [pc, #324]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009a94:	f003 f852 	bl	800cb3c <iprintf>
 8009a98:	f06f 0005 	mvn.w	r0, #5
 8009a9c:	e179      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d105      	bne.n	8009aae <dhcp_parse_reply+0x106>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8009aa2:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 8009aa6:	d10c      	bne.n	8009ac2 <dhcp_parse_reply+0x11a>
    decode_len = len;
 8009aa8:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8009aaa:	2500      	movs	r5, #0
 8009aac:	e7bd      	b.n	8009a2a <dhcp_parse_reply+0x82>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009aae:	4b48      	ldr	r3, [pc, #288]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009ab0:	f240 6217 	movw	r2, #1559	; 0x617
 8009ab4:	494a      	ldr	r1, [pc, #296]	; (8009be0 <dhcp_parse_reply+0x238>)
 8009ab6:	4848      	ldr	r0, [pc, #288]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009ab8:	f003 f840 	bl	800cb3c <iprintf>
 8009abc:	f06f 0005 	mvn.w	r0, #5
 8009ac0:	e167      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8009ac2:	4b43      	ldr	r3, [pc, #268]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009ac4:	f240 6219 	movw	r2, #1561	; 0x619
 8009ac8:	4946      	ldr	r1, [pc, #280]	; (8009be4 <dhcp_parse_reply+0x23c>)
 8009aca:	4843      	ldr	r0, [pc, #268]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009acc:	f003 f836 	bl	800cb3c <iprintf>
 8009ad0:	f06f 0005 	mvn.w	r0, #5
 8009ad4:	e15d      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d102      	bne.n	8009ae0 <dhcp_parse_reply+0x138>
    decode_len = len;
 8009ada:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8009adc:	2501      	movs	r5, #1
 8009ade:	e7a4      	b.n	8009a2a <dhcp_parse_reply+0x82>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009ae0:	4b3b      	ldr	r3, [pc, #236]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009ae2:	f240 621d 	movw	r2, #1565	; 0x61d
 8009ae6:	493e      	ldr	r1, [pc, #248]	; (8009be0 <dhcp_parse_reply+0x238>)
 8009ae8:	483b      	ldr	r0, [pc, #236]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009aea:	f003 f827 	bl	800cb3c <iprintf>
 8009aee:	f06f 0005 	mvn.w	r0, #5
 8009af2:	e14e      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009af4:	2b04      	cmp	r3, #4
 8009af6:	d102      	bne.n	8009afe <dhcp_parse_reply+0x156>
    decode_len = len;
 8009af8:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8009afa:	2502      	movs	r5, #2
 8009afc:	e795      	b.n	8009a2a <dhcp_parse_reply+0x82>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009afe:	4b34      	ldr	r3, [pc, #208]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009b00:	f240 6221 	movw	r2, #1569	; 0x621
 8009b04:	4933      	ldr	r1, [pc, #204]	; (8009bd4 <dhcp_parse_reply+0x22c>)
 8009b06:	4834      	ldr	r0, [pc, #208]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009b08:	f003 f818 	bl	800cb3c <iprintf>
 8009b0c:	f06f 0005 	mvn.w	r0, #5
 8009b10:	e13f      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d102      	bne.n	8009b1c <dhcp_parse_reply+0x174>
    decode_len = len;
 8009b16:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8009b18:	2504      	movs	r5, #4
 8009b1a:	e786      	b.n	8009a2a <dhcp_parse_reply+0x82>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b1c:	4b2c      	ldr	r3, [pc, #176]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009b1e:	f240 6225 	movw	r2, #1573	; 0x625
 8009b22:	492c      	ldr	r1, [pc, #176]	; (8009bd4 <dhcp_parse_reply+0x22c>)
 8009b24:	482c      	ldr	r0, [pc, #176]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009b26:	f003 f809 	bl	800cb3c <iprintf>
 8009b2a:	f06f 0005 	mvn.w	r0, #5
 8009b2e:	e130      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b30:	2b04      	cmp	r3, #4
 8009b32:	d102      	bne.n	8009b3a <dhcp_parse_reply+0x192>
    decode_len = len;
 8009b34:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8009b36:	2505      	movs	r5, #5
 8009b38:	e777      	b.n	8009a2a <dhcp_parse_reply+0x82>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b3a:	4b25      	ldr	r3, [pc, #148]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009b3c:	f240 6229 	movw	r2, #1577	; 0x629
 8009b40:	4924      	ldr	r1, [pc, #144]	; (8009bd4 <dhcp_parse_reply+0x22c>)
 8009b42:	4825      	ldr	r0, [pc, #148]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009b44:	f002 fffa 	bl	800cb3c <iprintf>
 8009b48:	f06f 0005 	mvn.w	r0, #5
 8009b4c:	e121      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
    int decode_idx = -1;
 8009b4e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        decode_len = 0;
 8009b52:	2400      	movs	r4, #0
 8009b54:	e769      	b.n	8009a2a <dhcp_parse_reply+0x82>
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8009b56:	4b1e      	ldr	r3, [pc, #120]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009b58:	f240 6236 	movw	r2, #1590	; 0x636
 8009b5c:	4922      	ldr	r1, [pc, #136]	; (8009be8 <dhcp_parse_reply+0x240>)
 8009b5e:	481e      	ldr	r0, [pc, #120]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009b60:	f002 ffec 	bl	800cb3c <iprintf>
 8009b64:	e01f      	b.n	8009ba6 <dhcp_parse_reply+0x1fe>
        copy_len = LWIP_MIN(decode_len, 4);
 8009b66:	f04f 0a04 	mov.w	sl, #4
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8009b6a:	4633      	mov	r3, r6
 8009b6c:	4652      	mov	r2, sl
 8009b6e:	a905      	add	r1, sp, #20
 8009b70:	4638      	mov	r0, r7
 8009b72:	f7fb fe6f 	bl	8005854 <pbuf_copy_partial>
 8009b76:	4582      	cmp	sl, r0
 8009b78:	f040 8109 	bne.w	8009d8e <dhcp_parse_reply+0x3e6>
        if (decode_len > 4) {
 8009b7c:	2c04      	cmp	r4, #4
 8009b7e:	d939      	bls.n	8009bf4 <dhcp_parse_reply+0x24c>
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8009b80:	f014 0f03 	tst.w	r4, #3
 8009b84:	d117      	bne.n	8009bb6 <dhcp_parse_reply+0x20e>
          dhcp_got_option(dhcp, decode_idx);
 8009b86:	2201      	movs	r2, #1
 8009b88:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <dhcp_parse_reply+0x224>)
 8009b8a:	555a      	strb	r2, [r3, r5]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8009b8c:	9805      	ldr	r0, [sp, #20]
 8009b8e:	f7fa fed8 	bl	8004942 <lwip_htonl>
 8009b92:	4b16      	ldr	r3, [pc, #88]	; (8009bec <dhcp_parse_reply+0x244>)
 8009b94:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
          decode_len -= 4;
 8009b98:	3c04      	subs	r4, #4
 8009b9a:	b2e4      	uxtb	r4, r4
          val_offset += 4;
 8009b9c:	3604      	adds	r6, #4
 8009b9e:	b2b6      	uxth	r6, r6
          decode_idx++;
 8009ba0:	3501      	adds	r5, #1
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8009ba2:	2d07      	cmp	r5, #7
 8009ba4:	d8d7      	bhi.n	8009b56 <dhcp_parse_reply+0x1ae>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <dhcp_parse_reply+0x224>)
 8009ba8:	5d5b      	ldrb	r3, [r3, r5]
 8009baa:	bb9b      	cbnz	r3, 8009c14 <dhcp_parse_reply+0x26c>
        copy_len = LWIP_MIN(decode_len, 4);
 8009bac:	2c03      	cmp	r4, #3
 8009bae:	d8da      	bhi.n	8009b66 <dhcp_parse_reply+0x1be>
 8009bb0:	fa1f fa84 	uxth.w	sl, r4
 8009bb4:	e7d9      	b.n	8009b6a <dhcp_parse_reply+0x1c2>
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8009bb6:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <dhcp_parse_reply+0x228>)
 8009bb8:	f240 623e 	movw	r2, #1598	; 0x63e
 8009bbc:	490c      	ldr	r1, [pc, #48]	; (8009bf0 <dhcp_parse_reply+0x248>)
 8009bbe:	4806      	ldr	r0, [pc, #24]	; (8009bd8 <dhcp_parse_reply+0x230>)
 8009bc0:	f002 ffbc 	bl	800cb3c <iprintf>
 8009bc4:	f06f 0005 	mvn.w	r0, #5
 8009bc8:	e0e3      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
 8009bca:	bf00      	nop
 8009bcc:	200076ec 	.word	0x200076ec
 8009bd0:	0800f20c 	.word	0x0800f20c
 8009bd4:	0800f318 	.word	0x0800f318
 8009bd8:	0800de6c 	.word	0x0800de6c
 8009bdc:	0800f324 	.word	0x0800f324
 8009be0:	0800f338 	.word	0x0800f338
 8009be4:	0800f344 	.word	0x0800f344
 8009be8:	0800f35c 	.word	0x0800f35c
 8009bec:	200076f4 	.word	0x200076f4
 8009bf0:	0800f370 	.word	0x0800f370
        } else if (decode_len == 4) {
 8009bf4:	2c04      	cmp	r4, #4
 8009bf6:	f000 80bb 	beq.w	8009d70 <dhcp_parse_reply+0x3c8>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8009bfa:	2c01      	cmp	r4, #1
 8009bfc:	f040 80bd 	bne.w	8009d7a <dhcp_parse_reply+0x3d2>
          value = ((u8_t*)&value)[0];
 8009c00:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009c04:	9305      	str	r3, [sp, #20]
        dhcp_got_option(dhcp, decode_idx);
 8009c06:	2201      	movs	r2, #1
 8009c08:	4b7f      	ldr	r3, [pc, #508]	; (8009e08 <dhcp_parse_reply+0x460>)
 8009c0a:	555a      	strb	r2, [r3, r5]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8009c0c:	9a05      	ldr	r2, [sp, #20]
 8009c0e:	4b7f      	ldr	r3, [pc, #508]	; (8009e0c <dhcp_parse_reply+0x464>)
 8009c10:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    if (offset >= q->len) {
 8009c14:	897b      	ldrh	r3, [r7, #10]
 8009c16:	4598      	cmp	r8, r3
 8009c18:	d313      	bcc.n	8009c42 <dhcp_parse_reply+0x29a>
      offset -= q->len;
 8009c1a:	eba8 0803 	sub.w	r8, r8, r3
 8009c1e:	fa1f f888 	uxth.w	r8, r8
      offset_max -= q->len;
 8009c22:	ebab 0b03 	sub.w	fp, fp, r3
 8009c26:	fa1f fb8b 	uxth.w	fp, fp
      if ((offset < offset_max) && offset_max) {
 8009c2a:	f1bb 0f00 	cmp.w	fp, #0
 8009c2e:	bf18      	it	ne
 8009c30:	45d8      	cmpne	r8, fp
 8009c32:	f080 80bb 	bcs.w	8009dac <dhcp_parse_reply+0x404>
        q = q->next;
 8009c36:	683f      	ldr	r7, [r7, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8009c38:	2f00      	cmp	r7, #0
 8009c3a:	f000 80ad 	beq.w	8009d98 <dhcp_parse_reply+0x3f0>
        options = (u8_t*)q->payload;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	9300      	str	r3, [sp, #0]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8009c42:	2f00      	cmp	r7, #0
 8009c44:	bf18      	it	ne
 8009c46:	45d8      	cmpne	r8, fp
 8009c48:	f080 80b0 	bcs.w	8009dac <dhcp_parse_reply+0x404>
 8009c4c:	4641      	mov	r1, r8
 8009c4e:	9b00      	ldr	r3, [sp, #0]
 8009c50:	f813 2008 	ldrb.w	r2, [r3, r8]
 8009c54:	2aff      	cmp	r2, #255	; 0xff
 8009c56:	f000 80a9 	beq.w	8009dac <dhcp_parse_reply+0x404>
    u16_t val_offset = offset + 2;
 8009c5a:	f108 0602 	add.w	r6, r8, #2
 8009c5e:	b2b6      	uxth	r6, r6
    if ((offset + 1) < q->len) {
 8009c60:	f108 0301 	add.w	r3, r8, #1
 8009c64:	8978      	ldrh	r0, [r7, #10]
 8009c66:	4283      	cmp	r3, r0
 8009c68:	f6bf aed0 	bge.w	8009a0c <dhcp_parse_reply+0x64>
      len = options[offset + 1];
 8009c6c:	3101      	adds	r1, #1
 8009c6e:	9b00      	ldr	r3, [sp, #0]
 8009c70:	5c5b      	ldrb	r3, [r3, r1]
    switch(op) {
 8009c72:	2a3b      	cmp	r2, #59	; 0x3b
 8009c74:	f63f af6b 	bhi.w	8009b4e <dhcp_parse_reply+0x1a6>
 8009c78:	a101      	add	r1, pc, #4	; (adr r1, 8009c80 <dhcp_parse_reply+0x2d8>)
 8009c7a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009a1b 	.word	0x08009a1b
 8009c84:	08009a45 	.word	0x08009a45
 8009c88:	08009b4f 	.word	0x08009b4f
 8009c8c:	08009a63 	.word	0x08009a63
 8009c90:	08009b4f 	.word	0x08009b4f
 8009c94:	08009b4f 	.word	0x08009b4f
 8009c98:	08009b4f 	.word	0x08009b4f
 8009c9c:	08009b4f 	.word	0x08009b4f
 8009ca0:	08009b4f 	.word	0x08009b4f
 8009ca4:	08009b4f 	.word	0x08009b4f
 8009ca8:	08009b4f 	.word	0x08009b4f
 8009cac:	08009b4f 	.word	0x08009b4f
 8009cb0:	08009b4f 	.word	0x08009b4f
 8009cb4:	08009b4f 	.word	0x08009b4f
 8009cb8:	08009b4f 	.word	0x08009b4f
 8009cbc:	08009b4f 	.word	0x08009b4f
 8009cc0:	08009b4f 	.word	0x08009b4f
 8009cc4:	08009b4f 	.word	0x08009b4f
 8009cc8:	08009b4f 	.word	0x08009b4f
 8009ccc:	08009b4f 	.word	0x08009b4f
 8009cd0:	08009b4f 	.word	0x08009b4f
 8009cd4:	08009b4f 	.word	0x08009b4f
 8009cd8:	08009b4f 	.word	0x08009b4f
 8009cdc:	08009b4f 	.word	0x08009b4f
 8009ce0:	08009b4f 	.word	0x08009b4f
 8009ce4:	08009b4f 	.word	0x08009b4f
 8009ce8:	08009b4f 	.word	0x08009b4f
 8009cec:	08009b4f 	.word	0x08009b4f
 8009cf0:	08009b4f 	.word	0x08009b4f
 8009cf4:	08009b4f 	.word	0x08009b4f
 8009cf8:	08009b4f 	.word	0x08009b4f
 8009cfc:	08009b4f 	.word	0x08009b4f
 8009d00:	08009b4f 	.word	0x08009b4f
 8009d04:	08009b4f 	.word	0x08009b4f
 8009d08:	08009b4f 	.word	0x08009b4f
 8009d0c:	08009b4f 	.word	0x08009b4f
 8009d10:	08009b4f 	.word	0x08009b4f
 8009d14:	08009b4f 	.word	0x08009b4f
 8009d18:	08009b4f 	.word	0x08009b4f
 8009d1c:	08009b4f 	.word	0x08009b4f
 8009d20:	08009b4f 	.word	0x08009b4f
 8009d24:	08009b4f 	.word	0x08009b4f
 8009d28:	08009b4f 	.word	0x08009b4f
 8009d2c:	08009b4f 	.word	0x08009b4f
 8009d30:	08009b4f 	.word	0x08009b4f
 8009d34:	08009b4f 	.word	0x08009b4f
 8009d38:	08009b4f 	.word	0x08009b4f
 8009d3c:	08009b4f 	.word	0x08009b4f
 8009d40:	08009b4f 	.word	0x08009b4f
 8009d44:	08009b4f 	.word	0x08009b4f
 8009d48:	08009b4f 	.word	0x08009b4f
 8009d4c:	08009a81 	.word	0x08009a81
 8009d50:	08009a9f 	.word	0x08009a9f
 8009d54:	08009ad7 	.word	0x08009ad7
 8009d58:	08009af5 	.word	0x08009af5
 8009d5c:	08009b4f 	.word	0x08009b4f
 8009d60:	08009b4f 	.word	0x08009b4f
 8009d64:	08009b4f 	.word	0x08009b4f
 8009d68:	08009b13 	.word	0x08009b13
 8009d6c:	08009b31 	.word	0x08009b31
          value = lwip_ntohl(value);
 8009d70:	9805      	ldr	r0, [sp, #20]
 8009d72:	f7fa fde6 	bl	8004942 <lwip_htonl>
 8009d76:	9005      	str	r0, [sp, #20]
 8009d78:	e745      	b.n	8009c06 <dhcp_parse_reply+0x25e>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8009d7a:	4b25      	ldr	r3, [pc, #148]	; (8009e10 <dhcp_parse_reply+0x468>)
 8009d7c:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8009d80:	4924      	ldr	r1, [pc, #144]	; (8009e14 <dhcp_parse_reply+0x46c>)
 8009d82:	4825      	ldr	r0, [pc, #148]	; (8009e18 <dhcp_parse_reply+0x470>)
 8009d84:	f002 feda 	bl	800cb3c <iprintf>
 8009d88:	f06f 0005 	mvn.w	r0, #5
 8009d8c:	e001      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
          return ERR_BUF;
 8009d8e:	f06f 0001 	mvn.w	r0, #1
}
 8009d92:	b007      	add	sp, #28
 8009d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8009d98:	4b1d      	ldr	r3, [pc, #116]	; (8009e10 <dhcp_parse_reply+0x468>)
 8009d9a:	f240 6254 	movw	r2, #1620	; 0x654
 8009d9e:	491f      	ldr	r1, [pc, #124]	; (8009e1c <dhcp_parse_reply+0x474>)
 8009da0:	481d      	ldr	r0, [pc, #116]	; (8009e18 <dhcp_parse_reply+0x470>)
 8009da2:	f002 fecb 	bl	800cb3c <iprintf>
 8009da6:	f06f 0005 	mvn.w	r0, #5
 8009daa:	e7f2      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8009dac:	4b16      	ldr	r3, [pc, #88]	; (8009e08 <dhcp_parse_reply+0x460>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	b153      	cbz	r3, 8009dc8 <dhcp_parse_reply+0x420>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009db2:	4b16      	ldr	r3, [pc, #88]	; (8009e0c <dhcp_parse_reply+0x464>)
 8009db4:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009db6:	2100      	movs	r1, #0
 8009db8:	4a13      	ldr	r2, [pc, #76]	; (8009e08 <dhcp_parse_reply+0x460>)
 8009dba:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d010      	beq.n	8009de2 <dhcp_parse_reply+0x43a>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d011      	beq.n	8009de8 <dhcp_parse_reply+0x440>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d012      	beq.n	8009dee <dhcp_parse_reply+0x446>
  if (parse_file_as_options) {
 8009dc8:	9b02      	ldr	r3, [sp, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f47f ae10 	bne.w	80099f0 <dhcp_parse_reply+0x48>
  } else if (parse_sname_as_options) {
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	b183      	cbz	r3, 8009df6 <dhcp_parse_reply+0x44e>
    parse_sname_as_options = 0;
 8009dd4:	9b02      	ldr	r3, [sp, #8]
 8009dd6:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8009dd8:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8009ddc:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8009de0:	e5f7      	b.n	80099d2 <dhcp_parse_reply+0x2a>
      parse_file_as_options = 1;
 8009de2:	2301      	movs	r3, #1
 8009de4:	9302      	str	r3, [sp, #8]
 8009de6:	e7ef      	b.n	8009dc8 <dhcp_parse_reply+0x420>
      parse_sname_as_options = 1;
 8009de8:	2301      	movs	r3, #1
 8009dea:	9303      	str	r3, [sp, #12]
 8009dec:	e7ec      	b.n	8009dc8 <dhcp_parse_reply+0x420>
      parse_sname_as_options = 1;
 8009dee:	2301      	movs	r3, #1
 8009df0:	9303      	str	r3, [sp, #12]
      parse_file_as_options = 1;
 8009df2:	9302      	str	r3, [sp, #8]
 8009df4:	e7e8      	b.n	8009dc8 <dhcp_parse_reply+0x420>
  return ERR_OK;
 8009df6:	2000      	movs	r0, #0
 8009df8:	e7cb      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
    return ERR_BUF;
 8009dfa:	f06f 0001 	mvn.w	r0, #1
 8009dfe:	4770      	bx	lr
    return ERR_BUF;
 8009e00:	f06f 0001 	mvn.w	r0, #1
 8009e04:	e7c5      	b.n	8009d92 <dhcp_parse_reply+0x3ea>
 8009e06:	bf00      	nop
 8009e08:	200076ec 	.word	0x200076ec
 8009e0c:	200076f4 	.word	0x200076f4
 8009e10:	0800f20c 	.word	0x0800f20c
 8009e14:	0800f388 	.word	0x0800f388
 8009e18:	0800de6c 	.word	0x0800de6c
 8009e1c:	0800f39c 	.word	0x0800f39c

08009e20 <dhcp_recv>:
{
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	4615      	mov	r5, r2
  struct netif *netif = ip_current_input_netif();
 8009e24:	4b3c      	ldr	r3, [pc, #240]	; (8009f18 <dhcp_recv+0xf8>)
 8009e26:	685e      	ldr	r6, [r3, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009e28:	6a34      	ldr	r4, [r6, #32]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8009e2a:	6857      	ldr	r7, [r2, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8009e2c:	b184      	cbz	r4, 8009e50 <dhcp_recv+0x30>
 8009e2e:	7a23      	ldrb	r3, [r4, #8]
 8009e30:	b173      	cbz	r3, 8009e50 <dhcp_recv+0x30>
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8009e32:	6863      	ldr	r3, [r4, #4]
 8009e34:	b133      	cbz	r3, 8009e44 <dhcp_recv+0x24>
 8009e36:	4b39      	ldr	r3, [pc, #228]	; (8009f1c <dhcp_recv+0xfc>)
 8009e38:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8009e3c:	4938      	ldr	r1, [pc, #224]	; (8009f20 <dhcp_recv+0x100>)
 8009e3e:	4839      	ldr	r0, [pc, #228]	; (8009f24 <dhcp_recv+0x104>)
 8009e40:	f002 fe7c 	bl	800cb3c <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8009e44:	896b      	ldrh	r3, [r5, #10]
 8009e46:	2b2b      	cmp	r3, #43	; 0x2b
 8009e48:	d902      	bls.n	8009e50 <dhcp_recv+0x30>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8009e4a:	783b      	ldrb	r3, [r7, #0]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d006      	beq.n	8009e5e <dhcp_recv+0x3e>
  if (dhcp != NULL) {
 8009e50:	b10c      	cbz	r4, 8009e56 <dhcp_recv+0x36>
    dhcp->msg_in = NULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	6063      	str	r3, [r4, #4]
  pbuf_free(p);
 8009e56:	4628      	mov	r0, r5
 8009e58:	f7fb fa2c 	bl	80052b4 <pbuf_free>
 8009e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e5e:	2300      	movs	r3, #0
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8009e60:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d20b      	bcs.n	8009e80 <dhcp_recv+0x60>
 8009e68:	2b05      	cmp	r3, #5
 8009e6a:	d809      	bhi.n	8009e80 <dhcp_recv+0x60>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8009e6c:	18f2      	adds	r2, r6, r3
 8009e6e:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 8009e72:	18fa      	adds	r2, r7, r3
 8009e74:	7f12      	ldrb	r2, [r2, #28]
 8009e76:	4291      	cmp	r1, r2
 8009e78:	d1ea      	bne.n	8009e50 <dhcp_recv+0x30>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	e7ef      	b.n	8009e60 <dhcp_recv+0x40>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7fa fd5e 	bl	8004942 <lwip_htonl>
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	4298      	cmp	r0, r3
 8009e8a:	d1e1      	bne.n	8009e50 <dhcp_recv+0x30>
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7ff fd8a 	bl	80099a8 <dhcp_parse_reply>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d1db      	bne.n	8009e50 <dhcp_recv+0x30>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8009e98:	4b23      	ldr	r3, [pc, #140]	; (8009f28 <dhcp_recv+0x108>)
 8009e9a:	785b      	ldrb	r3, [r3, #1]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d0d7      	beq.n	8009e50 <dhcp_recv+0x30>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8009ea0:	4b22      	ldr	r3, [pc, #136]	; (8009f2c <dhcp_recv+0x10c>)
 8009ea2:	791a      	ldrb	r2, [r3, #4]
  if (msg_type == DHCP_ACK) {
 8009ea4:	2a05      	cmp	r2, #5
 8009ea6:	d00c      	beq.n	8009ec2 <dhcp_recv+0xa2>
  else if ((msg_type == DHCP_NAK) &&
 8009ea8:	2a06      	cmp	r2, #6
 8009eaa:	d028      	beq.n	8009efe <dhcp_recv+0xde>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8009eac:	2a02      	cmp	r2, #2
 8009eae:	d1cf      	bne.n	8009e50 <dhcp_recv+0x30>
 8009eb0:	7a63      	ldrb	r3, [r4, #9]
 8009eb2:	2b06      	cmp	r3, #6
 8009eb4:	d1cc      	bne.n	8009e50 <dhcp_recv+0x30>
    dhcp->request_timeout = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	82e3      	strh	r3, [r4, #22]
    dhcp_handle_offer(netif);
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff fb10 	bl	80094e0 <dhcp_handle_offer>
 8009ec0:	e7c6      	b.n	8009e50 <dhcp_recv+0x30>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009ec2:	7a63      	ldrb	r3, [r4, #9]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d00a      	beq.n	8009ede <dhcp_recv+0xbe>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8009ec8:	3b03      	subs	r3, #3
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d8bf      	bhi.n	8009e50 <dhcp_recv+0x30>
      dhcp_handle_ack(netif);
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff f9b3 	bl	800923c <dhcp_handle_ack>
      dhcp_bind(netif);
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7ff fc5e 	bl	8009798 <dhcp_bind>
 8009edc:	e7b8      	b.n	8009e50 <dhcp_recv+0x30>
      dhcp_handle_ack(netif);
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f7ff f9ac 	bl	800923c <dhcp_handle_ack>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8009ee4:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 8009ee8:	f013 0f08 	tst.w	r3, #8
 8009eec:	d003      	beq.n	8009ef6 <dhcp_recv+0xd6>
        dhcp_check(netif);
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff fc3c 	bl	800976c <dhcp_check>
 8009ef4:	e7ac      	b.n	8009e50 <dhcp_recv+0x30>
        dhcp_bind(netif);
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7ff fc4e 	bl	8009798 <dhcp_bind>
 8009efc:	e7a8      	b.n	8009e50 <dhcp_recv+0x30>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009efe:	7a63      	ldrb	r3, [r4, #9]
  else if ((msg_type == DHCP_NAK) &&
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	bf18      	it	ne
 8009f04:	2b03      	cmpne	r3, #3
 8009f06:	d003      	beq.n	8009f10 <dhcp_recv+0xf0>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d001      	beq.n	8009f10 <dhcp_recv+0xf0>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8009f0c:	2b05      	cmp	r3, #5
 8009f0e:	d1cd      	bne.n	8009eac <dhcp_recv+0x8c>
    dhcp_handle_nak(netif);
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff fcd5 	bl	80098c0 <dhcp_handle_nak>
 8009f16:	e79b      	b.n	8009e50 <dhcp_recv+0x30>
 8009f18:	20003fa0 	.word	0x20003fa0
 8009f1c:	0800f20c 	.word	0x0800f20c
 8009f20:	0800f3b0 	.word	0x0800f3b0
 8009f24:	0800de6c 	.word	0x0800de6c
 8009f28:	200076ec 	.word	0x200076ec
 8009f2c:	200076f4 	.word	0x200076f4

08009f30 <dhcp_arp_reply>:
{
 8009f30:	b508      	push	{r3, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009f32:	b130      	cbz	r0, 8009f42 <dhcp_arp_reply+0x12>
 8009f34:	4602      	mov	r2, r0
  dhcp = netif_dhcp_data(netif);
 8009f36:	6a03      	ldr	r3, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8009f38:	b113      	cbz	r3, 8009f40 <dhcp_arp_reply+0x10>
 8009f3a:	7a58      	ldrb	r0, [r3, #9]
 8009f3c:	2808      	cmp	r0, #8
 8009f3e:	d008      	beq.n	8009f52 <dhcp_arp_reply+0x22>
 8009f40:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009f42:	4b08      	ldr	r3, [pc, #32]	; (8009f64 <dhcp_arp_reply+0x34>)
 8009f44:	f240 327b 	movw	r2, #891	; 0x37b
 8009f48:	4907      	ldr	r1, [pc, #28]	; (8009f68 <dhcp_arp_reply+0x38>)
 8009f4a:	4808      	ldr	r0, [pc, #32]	; (8009f6c <dhcp_arp_reply+0x3c>)
 8009f4c:	f002 fdf6 	bl	800cb3c <iprintf>
 8009f50:	bd08      	pop	{r3, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8009f52:	6809      	ldr	r1, [r1, #0]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	4299      	cmp	r1, r3
 8009f58:	d1f2      	bne.n	8009f40 <dhcp_arp_reply+0x10>
      dhcp_decline(netif);
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f7ff fad6 	bl	800950c <dhcp_decline>
 8009f60:	e7ee      	b.n	8009f40 <dhcp_arp_reply+0x10>
 8009f62:	bf00      	nop
 8009f64:	0800f20c 	.word	0x0800f20c
 8009f68:	0800f3c4 	.word	0x0800f3c4
 8009f6c:	0800de6c 	.word	0x0800de6c

08009f70 <dhcp_renew>:
{
 8009f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f72:	b083      	sub	sp, #12
 8009f74:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009f76:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8009f78:	2105      	movs	r1, #5
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7fe ff76 	bl	8008e6c <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009f80:	2203      	movs	r2, #3
 8009f82:	4621      	mov	r1, r4
 8009f84:	4638      	mov	r0, r7
 8009f86:	f7ff f85d 	bl	8009044 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	b1d0      	cbz	r0, 8009fc4 <dhcp_renew+0x54>
  if (dhcp->tries < 255) {
 8009f8e:	7aa3      	ldrb	r3, [r4, #10]
 8009f90:	2bff      	cmp	r3, #255	; 0xff
 8009f92:	d001      	beq.n	8009f98 <dhcp_renew+0x28>
    dhcp->tries++;
 8009f94:	3301      	adds	r3, #1
 8009f96:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8009f98:	7aa3      	ldrb	r3, [r4, #10]
 8009f9a:	2b09      	cmp	r3, #9
 8009f9c:	d841      	bhi.n	800a022 <dhcp_renew+0xb2>
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8009fa4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009fa8:	0113      	lsls	r3, r2, #4
 8009faa:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009fac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009fb0:	4a1d      	ldr	r2, [pc, #116]	; (800a028 <dhcp_renew+0xb8>)
 8009fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8009fb6:	17db      	asrs	r3, r3, #31
 8009fb8:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8009fbc:	82e3      	strh	r3, [r4, #22]
}
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	b003      	add	sp, #12
 8009fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	2139      	movs	r1, #57	; 0x39
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f7fe ff7d 	bl	8008ec8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009fce:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f7fe ff53 	bl	8008e7c <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009fd6:	2203      	movs	r2, #3
 8009fd8:	2137      	movs	r1, #55	; 0x37
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f7fe ff74 	bl	8008ec8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009fe0:	2600      	movs	r6, #0
 8009fe2:	e006      	b.n	8009ff2 <dhcp_renew+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009fe4:	4b11      	ldr	r3, [pc, #68]	; (800a02c <dhcp_renew+0xbc>)
 8009fe6:	5d99      	ldrb	r1, [r3, r6]
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f7fe ff93 	bl	8008f14 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009fee:	3601      	adds	r6, #1
 8009ff0:	b2f6      	uxtb	r6, r6
 8009ff2:	2e02      	cmp	r6, #2
 8009ff4:	d9f6      	bls.n	8009fe4 <dhcp_renew+0x74>
    dhcp_option_trailer(dhcp);
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f7fe ffa8 	bl	8008f4c <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009ffc:	8aa1      	ldrh	r1, [r4, #20]
 8009ffe:	31f0      	adds	r1, #240	; 0xf0
 800a000:	b289      	uxth	r1, r1
 800a002:	68e0      	ldr	r0, [r4, #12]
 800a004:	f7fb faaa 	bl	800555c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800a008:	68e1      	ldr	r1, [r4, #12]
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <dhcp_renew+0xc0>)
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	9700      	str	r7, [sp, #0]
 800a010:	2343      	movs	r3, #67	; 0x43
 800a012:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800a016:	f7fe fe8b 	bl	8008d30 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a01a:	4620      	mov	r0, r4
 800a01c:	f7ff f94c 	bl	80092b8 <dhcp_delete_msg>
 800a020:	e7b5      	b.n	8009f8e <dhcp_renew+0x1e>
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800a022:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a026:	e7c1      	b.n	8009fac <dhcp_renew+0x3c>
 800a028:	10624dd3 	.word	0x10624dd3
 800a02c:	0800f11c 	.word	0x0800f11c
 800a030:	20003e80 	.word	0x20003e80

0800a034 <dhcp_t1_timeout>:
{
 800a034:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a036:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a038:	7a63      	ldrb	r3, [r4, #9]
 800a03a:	2b0a      	cmp	r3, #10
 800a03c:	bf18      	it	ne
 800a03e:	2b01      	cmpne	r3, #1
 800a040:	d001      	beq.n	800a046 <dhcp_t1_timeout+0x12>
 800a042:	2b05      	cmp	r3, #5
 800a044:	d10b      	bne.n	800a05e <dhcp_t1_timeout+0x2a>
    dhcp_renew(netif);
 800a046:	f7ff ff93 	bl	8009f70 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a04a:	8b63      	ldrh	r3, [r4, #26]
 800a04c:	8c22      	ldrh	r2, [r4, #32]
 800a04e:	1a9b      	subs	r3, r3, r2
 800a050:	2b01      	cmp	r3, #1
 800a052:	dd04      	ble.n	800a05e <dhcp_t1_timeout+0x2a>
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800a054:	461a      	mov	r2, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	db02      	blt.n	800a060 <dhcp_t1_timeout+0x2c>
 800a05a:	1052      	asrs	r2, r2, #1
 800a05c:	83a2      	strh	r2, [r4, #28]
 800a05e:	bd10      	pop	{r4, pc}
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	e7fa      	b.n	800a05a <dhcp_t1_timeout+0x26>

0800a064 <dhcp_stop>:
{
 800a064:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800a066:	b188      	cbz	r0, 800a08c <dhcp_stop+0x28>
  dhcp = netif_dhcp_data(netif);
 800a068:	6a04      	ldr	r4, [r0, #32]
  if (dhcp != NULL) {
 800a06a:	b174      	cbz	r4, 800a08a <dhcp_stop+0x26>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800a06c:	6863      	ldr	r3, [r4, #4]
 800a06e:	b133      	cbz	r3, 800a07e <dhcp_stop+0x1a>
 800a070:	4b0d      	ldr	r3, [pc, #52]	; (800a0a8 <dhcp_stop+0x44>)
 800a072:	f240 524f 	movw	r2, #1359	; 0x54f
 800a076:	490d      	ldr	r1, [pc, #52]	; (800a0ac <dhcp_stop+0x48>)
 800a078:	480d      	ldr	r0, [pc, #52]	; (800a0b0 <dhcp_stop+0x4c>)
 800a07a:	f002 fd5f 	bl	800cb3c <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a07e:	2100      	movs	r1, #0
 800a080:	4620      	mov	r0, r4
 800a082:	f7fe fef3 	bl	8008e6c <dhcp_set_state>
    if (dhcp->pcb_allocated != 0) {
 800a086:	7a23      	ldrb	r3, [r4, #8]
 800a088:	b943      	cbnz	r3, 800a09c <dhcp_stop+0x38>
 800a08a:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800a08c:	4b06      	ldr	r3, [pc, #24]	; (800a0a8 <dhcp_stop+0x44>)
 800a08e:	f240 5242 	movw	r2, #1346	; 0x542
 800a092:	4908      	ldr	r1, [pc, #32]	; (800a0b4 <dhcp_stop+0x50>)
 800a094:	4806      	ldr	r0, [pc, #24]	; (800a0b0 <dhcp_stop+0x4c>)
 800a096:	f002 fd51 	bl	800cb3c <iprintf>
 800a09a:	bd10      	pop	{r4, pc}
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a09c:	f7ff fc22 	bl	80098e4 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	7223      	strb	r3, [r4, #8]
 800a0a4:	e7f1      	b.n	800a08a <dhcp_stop+0x26>
 800a0a6:	bf00      	nop
 800a0a8:	0800f20c 	.word	0x0800f20c
 800a0ac:	0800f3b0 	.word	0x0800f3b0
 800a0b0:	0800de6c 	.word	0x0800de6c
 800a0b4:	0800f444 	.word	0x0800f444

0800a0b8 <dhcp_start>:
{
 800a0b8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a0ba:	b388      	cbz	r0, 800a120 <dhcp_start+0x68>
 800a0bc:	4605      	mov	r5, r0
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800a0be:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800a0c2:	f013 0f01 	tst.w	r3, #1
 800a0c6:	d035      	beq.n	800a134 <dhcp_start+0x7c>
  dhcp = netif_dhcp_data(netif);
 800a0c8:	6a04      	ldr	r4, [r0, #32]
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800a0ca:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800a0cc:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800a0d0:	d34a      	bcc.n	800a168 <dhcp_start+0xb0>
  if (dhcp == NULL) {
 800a0d2:	2c00      	cmp	r4, #0
 800a0d4:	d038      	beq.n	800a148 <dhcp_start+0x90>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800a0d6:	68e3      	ldr	r3, [r4, #12]
 800a0d8:	b133      	cbz	r3, 800a0e8 <dhcp_start+0x30>
 800a0da:	4b28      	ldr	r3, [pc, #160]	; (800a17c <dhcp_start+0xc4>)
 800a0dc:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800a0e0:	4927      	ldr	r1, [pc, #156]	; (800a180 <dhcp_start+0xc8>)
 800a0e2:	4828      	ldr	r0, [pc, #160]	; (800a184 <dhcp_start+0xcc>)
 800a0e4:	f002 fd2a 	bl	800cb3c <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800a0e8:	6863      	ldr	r3, [r4, #4]
 800a0ea:	b133      	cbz	r3, 800a0fa <dhcp_start+0x42>
 800a0ec:	4b23      	ldr	r3, [pc, #140]	; (800a17c <dhcp_start+0xc4>)
 800a0ee:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a0f2:	4925      	ldr	r1, [pc, #148]	; (800a188 <dhcp_start+0xd0>)
 800a0f4:	4823      	ldr	r0, [pc, #140]	; (800a184 <dhcp_start+0xcc>)
 800a0f6:	f002 fd21 	bl	800cb3c <iprintf>
    if (dhcp->pcb_allocated != 0) {
 800a0fa:	7a23      	ldrb	r3, [r4, #8]
 800a0fc:	bb5b      	cbnz	r3, 800a156 <dhcp_start+0x9e>
  memset(dhcp, 0, sizeof(struct dhcp));
 800a0fe:	2240      	movs	r2, #64	; 0x40
 800a100:	2100      	movs	r1, #0
 800a102:	4620      	mov	r0, r4
 800a104:	f002 fd12 	bl	800cb2c <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800a108:	f7ff fc10 	bl	800992c <dhcp_inc_pcb_refcount>
 800a10c:	bb90      	cbnz	r0, 800a174 <dhcp_start+0xbc>
  dhcp->pcb_allocated = 1;
 800a10e:	2301      	movs	r3, #1
 800a110:	7223      	strb	r3, [r4, #8]
  result = dhcp_discover(netif);
 800a112:	4628      	mov	r0, r5
 800a114:	f7ff f902 	bl	800931c <dhcp_discover>
  if (result != ERR_OK) {
 800a118:	4603      	mov	r3, r0
 800a11a:	b9f8      	cbnz	r0, 800a15c <dhcp_start+0xa4>
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a120:	4b16      	ldr	r3, [pc, #88]	; (800a17c <dhcp_start+0xc4>)
 800a122:	f240 22d6 	movw	r2, #726	; 0x2d6
 800a126:	4919      	ldr	r1, [pc, #100]	; (800a18c <dhcp_start+0xd4>)
 800a128:	4816      	ldr	r0, [pc, #88]	; (800a184 <dhcp_start+0xcc>)
 800a12a:	f002 fd07 	bl	800cb3c <iprintf>
 800a12e:	f06f 030f 	mvn.w	r3, #15
 800a132:	e7f3      	b.n	800a11c <dhcp_start+0x64>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800a134:	4b11      	ldr	r3, [pc, #68]	; (800a17c <dhcp_start+0xc4>)
 800a136:	f240 22d7 	movw	r2, #727	; 0x2d7
 800a13a:	4915      	ldr	r1, [pc, #84]	; (800a190 <dhcp_start+0xd8>)
 800a13c:	4811      	ldr	r0, [pc, #68]	; (800a184 <dhcp_start+0xcc>)
 800a13e:	f002 fcfd 	bl	800cb3c <iprintf>
 800a142:	f06f 030f 	mvn.w	r3, #15
 800a146:	e7e9      	b.n	800a11c <dhcp_start+0x64>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800a148:	2040      	movs	r0, #64	; 0x40
 800a14a:	f7fa fdb5 	bl	8004cb8 <mem_malloc>
    if (dhcp == NULL) {
 800a14e:	4604      	mov	r4, r0
 800a150:	b168      	cbz	r0, 800a16e <dhcp_start+0xb6>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800a152:	6228      	str	r0, [r5, #32]
 800a154:	e7d3      	b.n	800a0fe <dhcp_start+0x46>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a156:	f7ff fbc5 	bl	80098e4 <dhcp_dec_pcb_refcount>
 800a15a:	e7d0      	b.n	800a0fe <dhcp_start+0x46>
    dhcp_stop(netif);
 800a15c:	4628      	mov	r0, r5
 800a15e:	f7ff ff81 	bl	800a064 <dhcp_stop>
    return ERR_MEM;
 800a162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a166:	e7d9      	b.n	800a11c <dhcp_start+0x64>
    return ERR_MEM;
 800a168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a16c:	e7d6      	b.n	800a11c <dhcp_start+0x64>
      return ERR_MEM;
 800a16e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a172:	e7d3      	b.n	800a11c <dhcp_start+0x64>
    return ERR_MEM;
 800a174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a178:	e7d0      	b.n	800a11c <dhcp_start+0x64>
 800a17a:	bf00      	nop
 800a17c:	0800f20c 	.word	0x0800f20c
 800a180:	0800f42c 	.word	0x0800f42c
 800a184:	0800de6c 	.word	0x0800de6c
 800a188:	0800f3b0 	.word	0x0800f3b0
 800a18c:	0800f3c4 	.word	0x0800f3c4
 800a190:	0800f408 	.word	0x0800f408

0800a194 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800a194:	b178      	cbz	r0, 800a1b6 <dhcp_supplied_address+0x22>
 800a196:	6a03      	ldr	r3, [r0, #32]
 800a198:	b17b      	cbz	r3, 800a1ba <dhcp_supplied_address+0x26>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800a19a:	7a5b      	ldrb	r3, [r3, #9]
 800a19c:	2b05      	cmp	r3, #5
 800a19e:	bf18      	it	ne
 800a1a0:	2b0a      	cmpne	r3, #10
 800a1a2:	d005      	beq.n	800a1b0 <dhcp_supplied_address+0x1c>
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	d001      	beq.n	800a1ac <dhcp_supplied_address+0x18>
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	e002      	b.n	800a1b2 <dhcp_supplied_address+0x1e>
 800a1ac:	2001      	movs	r0, #1
 800a1ae:	e000      	b.n	800a1b2 <dhcp_supplied_address+0x1e>
 800a1b0:	2001      	movs	r0, #1
 800a1b2:	b2c0      	uxtb	r0, r0
 800a1b4:	4770      	bx	lr
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	4770      	bx	lr
 800a1ba:	2000      	movs	r0, #0
}
 800a1bc:	4770      	bx	lr
	...

0800a1c0 <dhcp_release>:
{
 800a1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1c2:	b085      	sub	sp, #20
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a1c4:	6a04      	ldr	r4, [r0, #32]
  if (dhcp == NULL) {
 800a1c6:	2c00      	cmp	r4, #0
 800a1c8:	d04b      	beq.n	800a262 <dhcp_release+0xa2>
 800a1ca:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800a1cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1ce:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800a1d0:	f7ff ffe0 	bl	800a194 <dhcp_supplied_address>
 800a1d4:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f7fe fe47 	bl	8008e6c <dhcp_set_state>
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800a1de:	2300      	movs	r3, #0
 800a1e0:	6263      	str	r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800a1e2:	62a3      	str	r3, [r4, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a1e4:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a1e6:	6323      	str	r3, [r4, #48]	; 0x30
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800a1e8:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a1ea:	63a3      	str	r3, [r4, #56]	; 0x38
 800a1ec:	6363      	str	r3, [r4, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800a1ee:	8463      	strh	r3, [r4, #34]	; 0x22
 800a1f0:	8423      	strh	r3, [r4, #32]
 800a1f2:	83e3      	strh	r3, [r4, #30]
 800a1f4:	83a3      	strh	r3, [r4, #28]
  if (!is_dhcp_supplied_address) {
 800a1f6:	b91e      	cbnz	r6, 800a200 <dhcp_release+0x40>
    return ERR_OK;
 800a1f8:	2600      	movs	r6, #0
}
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	b005      	add	sp, #20
 800a1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800a200:	2207      	movs	r2, #7
 800a202:	4621      	mov	r1, r4
 800a204:	4628      	mov	r0, r5
 800a206:	f7fe ff1d 	bl	8009044 <dhcp_create_msg>
  if (result == ERR_OK) {
 800a20a:	4606      	mov	r6, r0
 800a20c:	b130      	cbz	r0, 800a21c <dhcp_release+0x5c>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800a20e:	4916      	ldr	r1, [pc, #88]	; (800a268 <dhcp_release+0xa8>)
 800a210:	460b      	mov	r3, r1
 800a212:	460a      	mov	r2, r1
 800a214:	4628      	mov	r0, r5
 800a216:	f7fa fed7 	bl	8004fc8 <netif_set_addr>
  return result;
 800a21a:	e7ee      	b.n	800a1fa <dhcp_release+0x3a>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800a21c:	2204      	movs	r2, #4
 800a21e:	2136      	movs	r1, #54	; 0x36
 800a220:	4620      	mov	r0, r4
 800a222:	f7fe fe51 	bl	8008ec8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a226:	af04      	add	r7, sp, #16
 800a228:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 800a22c:	f7fa fb89 	bl	8004942 <lwip_htonl>
 800a230:	4601      	mov	r1, r0
 800a232:	4620      	mov	r0, r4
 800a234:	f7fe fece 	bl	8008fd4 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 800a238:	4620      	mov	r0, r4
 800a23a:	f7fe fe87 	bl	8008f4c <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a23e:	8aa1      	ldrh	r1, [r4, #20]
 800a240:	31f0      	adds	r1, #240	; 0xf0
 800a242:	b289      	uxth	r1, r1
 800a244:	68e0      	ldr	r0, [r4, #12]
 800a246:	f7fb f989 	bl	800555c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800a24a:	68e1      	ldr	r1, [r4, #12]
 800a24c:	4b07      	ldr	r3, [pc, #28]	; (800a26c <dhcp_release+0xac>)
 800a24e:	6818      	ldr	r0, [r3, #0]
 800a250:	9500      	str	r5, [sp, #0]
 800a252:	2343      	movs	r3, #67	; 0x43
 800a254:	463a      	mov	r2, r7
 800a256:	f7fe fd6b 	bl	8008d30 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7ff f82c 	bl	80092b8 <dhcp_delete_msg>
 800a260:	e7d5      	b.n	800a20e <dhcp_release+0x4e>
    return ERR_ARG;
 800a262:	f06f 060f 	mvn.w	r6, #15
 800a266:	e7c8      	b.n	800a1fa <dhcp_release+0x3a>
 800a268:	0800f76c 	.word	0x0800f76c
 800a26c:	20003e80 	.word	0x20003e80

0800a270 <dhcp_coarse_tmr>:
{
 800a270:	b510      	push	{r4, lr}
  struct netif *netif = netif_list;
 800a272:	4b17      	ldr	r3, [pc, #92]	; (800a2d0 <dhcp_coarse_tmr+0x60>)
 800a274:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 800a276:	e006      	b.n	800a286 <dhcp_coarse_tmr+0x16>
        dhcp_release(netif);
 800a278:	4620      	mov	r0, r4
 800a27a:	f7ff ffa1 	bl	800a1c0 <dhcp_release>
        dhcp_discover(netif);
 800a27e:	4620      	mov	r0, r4
 800a280:	f7ff f84c 	bl	800931c <dhcp_discover>
    netif = netif->next;
 800a284:	6824      	ldr	r4, [r4, #0]
  while (netif != NULL) {
 800a286:	b314      	cbz	r4, 800a2ce <dhcp_coarse_tmr+0x5e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a288:	6a23      	ldr	r3, [r4, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0fa      	beq.n	800a284 <dhcp_coarse_tmr+0x14>
 800a28e:	7a5a      	ldrb	r2, [r3, #9]
 800a290:	2a00      	cmp	r2, #0
 800a292:	d0f7      	beq.n	800a284 <dhcp_coarse_tmr+0x14>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800a294:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800a296:	b129      	cbz	r1, 800a2a4 <dhcp_coarse_tmr+0x34>
 800a298:	8c1a      	ldrh	r2, [r3, #32]
 800a29a:	3201      	adds	r2, #1
 800a29c:	b292      	uxth	r2, r2
 800a29e:	841a      	strh	r2, [r3, #32]
 800a2a0:	4291      	cmp	r1, r2
 800a2a2:	d0e9      	beq.n	800a278 <dhcp_coarse_tmr+0x8>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800a2a4:	8bda      	ldrh	r2, [r3, #30]
 800a2a6:	b11a      	cbz	r2, 800a2b0 <dhcp_coarse_tmr+0x40>
 800a2a8:	1e51      	subs	r1, r2, #1
 800a2aa:	83d9      	strh	r1, [r3, #30]
 800a2ac:	2a01      	cmp	r2, #1
 800a2ae:	d00a      	beq.n	800a2c6 <dhcp_coarse_tmr+0x56>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800a2b0:	8b9a      	ldrh	r2, [r3, #28]
 800a2b2:	2a00      	cmp	r2, #0
 800a2b4:	d0e6      	beq.n	800a284 <dhcp_coarse_tmr+0x14>
 800a2b6:	1e51      	subs	r1, r2, #1
 800a2b8:	8399      	strh	r1, [r3, #28]
 800a2ba:	2a01      	cmp	r2, #1
 800a2bc:	d1e2      	bne.n	800a284 <dhcp_coarse_tmr+0x14>
        dhcp_t1_timeout(netif);
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f7ff feb8 	bl	800a034 <dhcp_t1_timeout>
 800a2c4:	e7de      	b.n	800a284 <dhcp_coarse_tmr+0x14>
        dhcp_t2_timeout(netif);
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f7ff f9c6 	bl	8009658 <dhcp_t2_timeout>
 800a2cc:	e7da      	b.n	800a284 <dhcp_coarse_tmr+0x14>
}
 800a2ce:	bd10      	pop	{r4, pc}
 800a2d0:	200076c0 	.word	0x200076c0

0800a2d4 <dhcp_timeout>:
{
 800a2d4:	b510      	push	{r4, lr}
 800a2d6:	4604      	mov	r4, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a2d8:	6a02      	ldr	r2, [r0, #32]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a2da:	7a53      	ldrb	r3, [r2, #9]
 800a2dc:	2b06      	cmp	r3, #6
 800a2de:	bf18      	it	ne
 800a2e0:	2b0c      	cmpne	r3, #12
 800a2e2:	d006      	beq.n	800a2f2 <dhcp_timeout+0x1e>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d007      	beq.n	800a2f8 <dhcp_timeout+0x24>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800a2e8:	2b08      	cmp	r3, #8
 800a2ea:	d011      	beq.n	800a310 <dhcp_timeout+0x3c>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d018      	beq.n	800a322 <dhcp_timeout+0x4e>
 800a2f0:	bd10      	pop	{r4, pc}
    dhcp_discover(netif);
 800a2f2:	f7ff f813 	bl	800931c <dhcp_discover>
 800a2f6:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 5) {
 800a2f8:	7a93      	ldrb	r3, [r2, #10]
 800a2fa:	2b05      	cmp	r3, #5
 800a2fc:	d802      	bhi.n	800a304 <dhcp_timeout+0x30>
      dhcp_select(netif);
 800a2fe:	f7ff f873 	bl	80093e8 <dhcp_select>
 800a302:	bd10      	pop	{r4, pc}
      dhcp_release(netif);
 800a304:	f7ff ff5c 	bl	800a1c0 <dhcp_release>
      dhcp_discover(netif);
 800a308:	4620      	mov	r0, r4
 800a30a:	f7ff f807 	bl	800931c <dhcp_discover>
 800a30e:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 1) {
 800a310:	7a93      	ldrb	r3, [r2, #10]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d902      	bls.n	800a31c <dhcp_timeout+0x48>
      dhcp_bind(netif);
 800a316:	f7ff fa3f 	bl	8009798 <dhcp_bind>
 800a31a:	bd10      	pop	{r4, pc}
      dhcp_check(netif);
 800a31c:	f7ff fa26 	bl	800976c <dhcp_check>
 800a320:	bd10      	pop	{r4, pc}
    if (dhcp->tries < REBOOT_TRIES) {
 800a322:	7a93      	ldrb	r3, [r2, #10]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d902      	bls.n	800a32e <dhcp_timeout+0x5a>
      dhcp_discover(netif);
 800a328:	f7fe fff8 	bl	800931c <dhcp_discover>
}
 800a32c:	e7e0      	b.n	800a2f0 <dhcp_timeout+0x1c>
      dhcp_reboot(netif);
 800a32e:	f7ff f9ad 	bl	800968c <dhcp_reboot>
 800a332:	bd10      	pop	{r4, pc}

0800a334 <dhcp_fine_tmr>:
{
 800a334:	b510      	push	{r4, lr}
  struct netif *netif = netif_list;
 800a336:	4b0b      	ldr	r3, [pc, #44]	; (800a364 <dhcp_fine_tmr+0x30>)
 800a338:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 800a33a:	e002      	b.n	800a342 <dhcp_fine_tmr+0xe>
      else if (dhcp->request_timeout == 1) {
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d00a      	beq.n	800a356 <dhcp_fine_tmr+0x22>
    netif = netif->next;
 800a340:	6824      	ldr	r4, [r4, #0]
  while (netif != NULL) {
 800a342:	b174      	cbz	r4, 800a362 <dhcp_fine_tmr+0x2e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a344:	6a22      	ldr	r2, [r4, #32]
    if (dhcp != NULL) {
 800a346:	2a00      	cmp	r2, #0
 800a348:	d0fa      	beq.n	800a340 <dhcp_fine_tmr+0xc>
      if (dhcp->request_timeout > 1) {
 800a34a:	8ad3      	ldrh	r3, [r2, #22]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d9f5      	bls.n	800a33c <dhcp_fine_tmr+0x8>
        dhcp->request_timeout--;
 800a350:	3b01      	subs	r3, #1
 800a352:	82d3      	strh	r3, [r2, #22]
 800a354:	e7f4      	b.n	800a340 <dhcp_fine_tmr+0xc>
        dhcp->request_timeout--;
 800a356:	3b01      	subs	r3, #1
 800a358:	82d3      	strh	r3, [r2, #22]
        dhcp_timeout(netif);
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7ff ffba 	bl	800a2d4 <dhcp_timeout>
 800a360:	e7ee      	b.n	800a340 <dhcp_fine_tmr+0xc>
}
 800a362:	bd10      	pop	{r4, pc}
 800a364:	200076c0 	.word	0x200076c0

0800a368 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a368:	b510      	push	{r4, lr}
 800a36a:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a36c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800a370:	00d3      	lsls	r3, r2, #3
 800a372:	4a09      	ldr	r2, [pc, #36]	; (800a398 <etharp_free_entry+0x30>)
 800a374:	58d0      	ldr	r0, [r2, r3]
 800a376:	b138      	cbz	r0, 800a388 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a378:	f7fa ff9c 	bl	80052b4 <pbuf_free>
    arp_table[i].q = NULL;
 800a37c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a380:	00d3      	lsls	r3, r2, #3
 800a382:	2100      	movs	r1, #0
 800a384:	4a04      	ldr	r2, [pc, #16]	; (800a398 <etharp_free_entry+0x30>)
 800a386:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a388:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a38c:	00e2      	lsls	r2, r4, #3
 800a38e:	4b02      	ldr	r3, [pc, #8]	; (800a398 <etharp_free_entry+0x30>)
 800a390:	4413      	add	r3, r2
 800a392:	2200      	movs	r2, #0
 800a394:	751a      	strb	r2, [r3, #20]
 800a396:	bd10      	pop	{r4, pc}
 800a398:	20003e8c 	.word	0x20003e8c

0800a39c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800a39c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a3a0:	f04f 0e00 	mov.w	lr, #0
 800a3a4:	46f3      	mov	fp, lr
 800a3a6:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 800a3a8:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a3ac:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 800a3ae:	4665      	mov	r5, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a3b0:	46e0      	mov	r8, ip
 800a3b2:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a3b4:	e01b      	b.n	800a3ee <etharp_find_entry+0x52>
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 800a3b6:	b1c2      	cbz	r2, 800a3ea <etharp_find_entry+0x4e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a3b8:	b140      	cbz	r0, 800a3cc <etharp_find_entry+0x30>
 800a3ba:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800a3be:	00f7      	lsls	r7, r6, #3
 800a3c0:	4e5b      	ldr	r6, [pc, #364]	; (800a530 <etharp_find_entry+0x194>)
 800a3c2:	443e      	add	r6, r7
 800a3c4:	6876      	ldr	r6, [r6, #4]
 800a3c6:	6807      	ldr	r7, [r0, #0]
 800a3c8:	42b7      	cmp	r7, r6
 800a3ca:	d01f      	beq.n	800a40c <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a3cc:	2a01      	cmp	r2, #1
 800a3ce:	d020      	beq.n	800a412 <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a3d0:	2a01      	cmp	r2, #1
 800a3d2:	d90a      	bls.n	800a3ea <etharp_find_entry+0x4e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a3d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a3d8:	00e6      	lsls	r6, r4, #3
 800a3da:	4a55      	ldr	r2, [pc, #340]	; (800a530 <etharp_find_entry+0x194>)
 800a3dc:	4432      	add	r2, r6
 800a3de:	8a52      	ldrh	r2, [r2, #18]
 800a3e0:	4596      	cmp	lr, r2
 800a3e2:	d802      	bhi.n	800a3ea <etharp_find_entry+0x4e>
            old_stable = i;
 800a3e4:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 800a3e8:	4696      	mov	lr, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d82d      	bhi.n	800a44e <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 800a3f2:	461c      	mov	r4, r3
 800a3f4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a3f8:	00d6      	lsls	r6, r2, #3
 800a3fa:	4a4d      	ldr	r2, [pc, #308]	; (800a530 <etharp_find_entry+0x194>)
 800a3fc:	4432      	add	r2, r6
 800a3fe:	7d12      	ldrb	r2, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a400:	2d0a      	cmp	r5, #10
 800a402:	bf08      	it	eq
 800a404:	2a00      	cmpeq	r2, #0
 800a406:	d1d6      	bne.n	800a3b6 <etharp_find_entry+0x1a>
      empty = i;
 800a408:	b25d      	sxtb	r5, r3
 800a40a:	e7ee      	b.n	800a3ea <etharp_find_entry+0x4e>
        return i;
 800a40c:	b258      	sxtb	r0, r3
 800a40e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 800a412:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800a416:	00f2      	lsls	r2, r6, #3
 800a418:	4e45      	ldr	r6, [pc, #276]	; (800a530 <etharp_find_entry+0x194>)
 800a41a:	58b2      	ldr	r2, [r6, r2]
 800a41c:	b15a      	cbz	r2, 800a436 <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 800a41e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a422:	00e6      	lsls	r6, r4, #3
 800a424:	4a42      	ldr	r2, [pc, #264]	; (800a530 <etharp_find_entry+0x194>)
 800a426:	4432      	add	r2, r6
 800a428:	8a52      	ldrh	r2, [r2, #18]
 800a42a:	4591      	cmp	r9, r2
 800a42c:	d8dd      	bhi.n	800a3ea <etharp_find_entry+0x4e>
            old_queue = i;
 800a42e:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 800a432:	4691      	mov	r9, r2
 800a434:	e7d9      	b.n	800a3ea <etharp_find_entry+0x4e>
          if (arp_table[i].ctime >= age_pending) {
 800a436:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a43a:	00e6      	lsls	r6, r4, #3
 800a43c:	4a3c      	ldr	r2, [pc, #240]	; (800a530 <etharp_find_entry+0x194>)
 800a43e:	4432      	add	r2, r6
 800a440:	8a52      	ldrh	r2, [r2, #18]
 800a442:	4593      	cmp	fp, r2
 800a444:	d8d1      	bhi.n	800a3ea <etharp_find_entry+0x4e>
            old_pending = i;
 800a446:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 800a44a:	4693      	mov	fp, r2
 800a44c:	e7cd      	b.n	800a3ea <etharp_find_entry+0x4e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a44e:	f011 0f02 	tst.w	r1, #2
 800a452:	d165      	bne.n	800a520 <etharp_find_entry+0x184>
 800a454:	2d0a      	cmp	r5, #10
 800a456:	d020      	beq.n	800a49a <etharp_find_entry+0xfe>
 800a458:	4606      	mov	r6, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a45a:	2d09      	cmp	r5, #9
 800a45c:	dc24      	bgt.n	800a4a8 <etharp_find_entry+0x10c>
    i = empty;
 800a45e:	b2ed      	uxtb	r5, r5
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a460:	2d09      	cmp	r5, #9
 800a462:	d84d      	bhi.n	800a500 <etharp_find_entry+0x164>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a464:	462c      	mov	r4, r5
 800a466:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800a46a:	00da      	lsls	r2, r3, #3
 800a46c:	4b30      	ldr	r3, [pc, #192]	; (800a530 <etharp_find_entry+0x194>)
 800a46e:	4413      	add	r3, r2
 800a470:	7d1b      	ldrb	r3, [r3, #20]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d14c      	bne.n	800a510 <etharp_find_entry+0x174>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a476:	b136      	cbz	r6, 800a486 <etharp_find_entry+0xea>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a478:	6831      	ldr	r1, [r6, #0]
 800a47a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a47e:	00da      	lsls	r2, r3, #3
 800a480:	4b2b      	ldr	r3, [pc, #172]	; (800a530 <etharp_find_entry+0x194>)
 800a482:	4413      	add	r3, r2
 800a484:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800a486:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a48a:	00e2      	lsls	r2, r4, #3
 800a48c:	4b28      	ldr	r3, [pc, #160]	; (800a530 <etharp_find_entry+0x194>)
 800a48e:	4413      	add	r3, r2
 800a490:	2200      	movs	r2, #0
 800a492:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800a494:	b268      	sxtb	r0, r5
 800a496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a49a:	f011 0f01 	tst.w	r1, #1
 800a49e:	d1db      	bne.n	800a458 <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 800a4a8:	f1b8 0f09 	cmp.w	r8, #9
 800a4ac:	dc14      	bgt.n	800a4d8 <etharp_find_entry+0x13c>
      i = old_stable;
 800a4ae:	fa5f f588 	uxtb.w	r5, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a4b2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800a4b6:	00d3      	lsls	r3, r2, #3
 800a4b8:	4a1d      	ldr	r2, [pc, #116]	; (800a530 <etharp_find_entry+0x194>)
 800a4ba:	58d3      	ldr	r3, [r2, r3]
 800a4bc:	b133      	cbz	r3, 800a4cc <etharp_find_entry+0x130>
 800a4be:	4b1d      	ldr	r3, [pc, #116]	; (800a534 <etharp_find_entry+0x198>)
 800a4c0:	f240 126f 	movw	r2, #367	; 0x16f
 800a4c4:	491c      	ldr	r1, [pc, #112]	; (800a538 <etharp_find_entry+0x19c>)
 800a4c6:	481d      	ldr	r0, [pc, #116]	; (800a53c <etharp_find_entry+0x1a0>)
 800a4c8:	f002 fb38 	bl	800cb3c <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a4cc:	2d09      	cmp	r5, #9
 800a4ce:	d80f      	bhi.n	800a4f0 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f7ff ff49 	bl	800a368 <etharp_free_entry>
 800a4d6:	e7c3      	b.n	800a460 <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a4d8:	f1ba 0f09 	cmp.w	sl, #9
 800a4dc:	dc02      	bgt.n	800a4e4 <etharp_find_entry+0x148>
      i = old_pending;
 800a4de:	fa5f f58a 	uxtb.w	r5, sl
 800a4e2:	e7f3      	b.n	800a4cc <etharp_find_entry+0x130>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a4e4:	f1bc 0f09 	cmp.w	ip, #9
 800a4e8:	dc1e      	bgt.n	800a528 <etharp_find_entry+0x18c>
      i = old_queue;
 800a4ea:	fa5f f58c 	uxtb.w	r5, ip
 800a4ee:	e7ed      	b.n	800a4cc <etharp_find_entry+0x130>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a4f0:	4b10      	ldr	r3, [pc, #64]	; (800a534 <etharp_find_entry+0x198>)
 800a4f2:	f240 1281 	movw	r2, #385	; 0x181
 800a4f6:	4912      	ldr	r1, [pc, #72]	; (800a540 <etharp_find_entry+0x1a4>)
 800a4f8:	4810      	ldr	r0, [pc, #64]	; (800a53c <etharp_find_entry+0x1a0>)
 800a4fa:	f002 fb1f 	bl	800cb3c <iprintf>
 800a4fe:	e7e7      	b.n	800a4d0 <etharp_find_entry+0x134>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a500:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <etharp_find_entry+0x198>)
 800a502:	f240 1285 	movw	r2, #389	; 0x185
 800a506:	490e      	ldr	r1, [pc, #56]	; (800a540 <etharp_find_entry+0x1a4>)
 800a508:	480c      	ldr	r0, [pc, #48]	; (800a53c <etharp_find_entry+0x1a0>)
 800a50a:	f002 fb17 	bl	800cb3c <iprintf>
 800a50e:	e7a9      	b.n	800a464 <etharp_find_entry+0xc8>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a510:	4b08      	ldr	r3, [pc, #32]	; (800a534 <etharp_find_entry+0x198>)
 800a512:	f240 1287 	movw	r2, #391	; 0x187
 800a516:	490b      	ldr	r1, [pc, #44]	; (800a544 <etharp_find_entry+0x1a8>)
 800a518:	4808      	ldr	r0, [pc, #32]	; (800a53c <etharp_find_entry+0x1a0>)
 800a51a:	f002 fb0f 	bl	800cb3c <iprintf>
 800a51e:	e7aa      	b.n	800a476 <etharp_find_entry+0xda>
    return (s8_t)ERR_MEM;
 800a520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 800a528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a52c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a530:	20003e8c 	.word	0x20003e8c
 800a534:	0800f460 	.word	0x0800f460
 800a538:	0800f498 	.word	0x0800f498
 800a53c:	0800de6c 	.word	0x0800de6c
 800a540:	0800f4b0 	.word	0x0800f4b0
 800a544:	0800f4c4 	.word	0x0800f4c4

0800a548 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a54a:	b083      	sub	sp, #12
 800a54c:	4604      	mov	r4, r0
 800a54e:	460d      	mov	r5, r1
 800a550:	4616      	mov	r6, r2
 800a552:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a554:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800a558:	2b06      	cmp	r3, #6
 800a55a:	d006      	beq.n	800a56a <etharp_update_arp_entry+0x22>
 800a55c:	4b28      	ldr	r3, [pc, #160]	; (800a600 <etharp_update_arp_entry+0xb8>)
 800a55e:	f240 12ab 	movw	r2, #427	; 0x1ab
 800a562:	4928      	ldr	r1, [pc, #160]	; (800a604 <etharp_update_arp_entry+0xbc>)
 800a564:	4828      	ldr	r0, [pc, #160]	; (800a608 <etharp_update_arp_entry+0xc0>)
 800a566:	f002 fae9 	bl	800cb3c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a56a:	2d00      	cmp	r5, #0
 800a56c:	d039      	beq.n	800a5e2 <etharp_update_arp_entry+0x9a>
 800a56e:	6828      	ldr	r0, [r5, #0]
 800a570:	2800      	cmp	r0, #0
 800a572:	d039      	beq.n	800a5e8 <etharp_update_arp_entry+0xa0>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a574:	4621      	mov	r1, r4
 800a576:	f000 fe5e 	bl	800b236 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d137      	bne.n	800a5ee <etharp_update_arp_entry+0xa6>
      ip4_addr_ismulticast(ipaddr)) {
 800a57e:	682b      	ldr	r3, [r5, #0]
 800a580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a584:	2be0      	cmp	r3, #224	; 0xe0
 800a586:	d035      	beq.n	800a5f4 <etharp_update_arp_entry+0xac>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a588:	4622      	mov	r2, r4
 800a58a:	4639      	mov	r1, r7
 800a58c:	4628      	mov	r0, r5
 800a58e:	f7ff ff05 	bl	800a39c <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800a592:	2800      	cmp	r0, #0
 800a594:	db23      	blt.n	800a5de <etharp_update_arp_entry+0x96>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a596:	4d1d      	ldr	r5, [pc, #116]	; (800a60c <etharp_update_arp_entry+0xc4>)
 800a598:	0042      	lsls	r2, r0, #1
 800a59a:	1813      	adds	r3, r2, r0
 800a59c:	00d9      	lsls	r1, r3, #3
 800a59e:	186f      	adds	r7, r5, r1
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a5a4:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	3308      	adds	r3, #8
 800a5aa:	442b      	add	r3, r5
 800a5ac:	6832      	ldr	r2, [r6, #0]
 800a5ae:	605a      	str	r2, [r3, #4]
 800a5b0:	88b2      	ldrh	r2, [r6, #4]
 800a5b2:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a5b8:	586d      	ldr	r5, [r5, r1]
 800a5ba:	b1f5      	cbz	r5, 800a5fa <etharp_update_arp_entry+0xb2>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800a5bc:	2700      	movs	r7, #0
 800a5be:	4a13      	ldr	r2, [pc, #76]	; (800a60c <etharp_update_arp_entry+0xc4>)
 800a5c0:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a5c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	4633      	mov	r3, r6
 800a5ca:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f001 faa1 	bl	800bb18 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f7fa fe6c 	bl	80052b4 <pbuf_free>
  }
  return ERR_OK;
 800a5dc:	4638      	mov	r0, r7
}
 800a5de:	b003      	add	sp, #12
 800a5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 800a5e2:	f06f 000f 	mvn.w	r0, #15
 800a5e6:	e7fa      	b.n	800a5de <etharp_update_arp_entry+0x96>
 800a5e8:	f06f 000f 	mvn.w	r0, #15
 800a5ec:	e7f7      	b.n	800a5de <etharp_update_arp_entry+0x96>
 800a5ee:	f06f 000f 	mvn.w	r0, #15
 800a5f2:	e7f4      	b.n	800a5de <etharp_update_arp_entry+0x96>
 800a5f4:	f06f 000f 	mvn.w	r0, #15
 800a5f8:	e7f1      	b.n	800a5de <etharp_update_arp_entry+0x96>
  return ERR_OK;
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e7ef      	b.n	800a5de <etharp_update_arp_entry+0x96>
 800a5fe:	bf00      	nop
 800a600:	0800f460 	.word	0x0800f460
 800a604:	0800f608 	.word	0x0800f608
 800a608:	0800de6c 	.word	0x0800de6c
 800a60c:	20003e8c 	.word	0x20003e8c

0800a610 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	4689      	mov	r9, r1
 800a618:	4692      	mov	sl, r2
 800a61a:	4698      	mov	r8, r3
 800a61c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a61e:	4607      	mov	r7, r0
 800a620:	2800      	cmp	r0, #0
 800a622:	d048      	beq.n	800a6b6 <etharp_raw+0xa6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800a624:	2200      	movs	r2, #0
 800a626:	211c      	movs	r1, #28
 800a628:	2002      	movs	r0, #2
 800a62a:	f7fa feaf 	bl	800538c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800a62e:	4606      	mov	r6, r0
 800a630:	2800      	cmp	r0, #0
 800a632:	d050      	beq.n	800a6d6 <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a634:	8943      	ldrh	r3, [r0, #10]
 800a636:	2b1b      	cmp	r3, #27
 800a638:	d945      	bls.n	800a6c6 <etharp_raw+0xb6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800a63a:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800a63c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800a640:	f7fa f97c 	bl	800493c <lwip_htons>
 800a644:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800a646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a64a:	2b06      	cmp	r3, #6
 800a64c:	d006      	beq.n	800a65c <etharp_raw+0x4c>
 800a64e:	4b23      	ldr	r3, [pc, #140]	; (800a6dc <etharp_raw+0xcc>)
 800a650:	f240 426b 	movw	r2, #1131	; 0x46b
 800a654:	4922      	ldr	r1, [pc, #136]	; (800a6e0 <etharp_raw+0xd0>)
 800a656:	4823      	ldr	r0, [pc, #140]	; (800a6e4 <etharp_raw+0xd4>)
 800a658:	f002 fa70 	bl	800cb3c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800a65c:	f8d8 3000 	ldr.w	r3, [r8]
 800a660:	60a3      	str	r3, [r4, #8]
 800a662:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800a666:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	f8c4 3012 	str.w	r3, [r4, #18]
 800a66e:	88ab      	ldrh	r3, [r5, #4]
 800a670:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800a672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800a67a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800a680:	2500      	movs	r5, #0
 800a682:	7025      	strb	r5, [r4, #0]
 800a684:	2301      	movs	r3, #1
 800a686:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a688:	2308      	movs	r3, #8
 800a68a:	70a3      	strb	r3, [r4, #2]
 800a68c:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800a68e:	2306      	movs	r3, #6
 800a690:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800a692:	2304      	movs	r3, #4
 800a694:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800a696:	f640 0306 	movw	r3, #2054	; 0x806
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	4653      	mov	r3, sl
 800a69e:	464a      	mov	r2, r9
 800a6a0:	4631      	mov	r1, r6
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	f001 fa38 	bl	800bb18 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7fa fe03 	bl	80052b4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800a6ae:	4628      	mov	r0, r5
}
 800a6b0:	b002      	add	sp, #8
 800a6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a6b6:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <etharp_raw+0xcc>)
 800a6b8:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800a6bc:	490a      	ldr	r1, [pc, #40]	; (800a6e8 <etharp_raw+0xd8>)
 800a6be:	4809      	ldr	r0, [pc, #36]	; (800a6e4 <etharp_raw+0xd4>)
 800a6c0:	f002 fa3c 	bl	800cb3c <iprintf>
 800a6c4:	e7ae      	b.n	800a624 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a6c6:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <etharp_raw+0xcc>)
 800a6c8:	f240 4264 	movw	r2, #1124	; 0x464
 800a6cc:	4907      	ldr	r1, [pc, #28]	; (800a6ec <etharp_raw+0xdc>)
 800a6ce:	4805      	ldr	r0, [pc, #20]	; (800a6e4 <etharp_raw+0xd4>)
 800a6d0:	f002 fa34 	bl	800cb3c <iprintf>
 800a6d4:	e7b1      	b.n	800a63a <etharp_raw+0x2a>
    return ERR_MEM;
 800a6d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6da:	e7e9      	b.n	800a6b0 <etharp_raw+0xa0>
 800a6dc:	0800f460 	.word	0x0800f460
 800a6e0:	0800f5c4 	.word	0x0800f5c4
 800a6e4:	0800de6c 	.word	0x0800de6c
 800a6e8:	0800f3c4 	.word	0x0800f3c4
 800a6ec:	0800f590 	.word	0x0800f590

0800a6f0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800a6f0:	b530      	push	{r4, r5, lr}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a6f6:	f100 0429 	add.w	r4, r0, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a6fa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a6fc:	2501      	movs	r5, #1
 800a6fe:	9503      	str	r5, [sp, #12]
 800a700:	9102      	str	r1, [sp, #8]
 800a702:	4904      	ldr	r1, [pc, #16]	; (800a714 <etharp_request_dst+0x24>)
 800a704:	9101      	str	r1, [sp, #4]
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	4623      	mov	r3, r4
 800a70a:	4621      	mov	r1, r4
 800a70c:	f7ff ff80 	bl	800a610 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800a710:	b005      	add	sp, #20
 800a712:	bd30      	pop	{r4, r5, pc}
 800a714:	0800f998 	.word	0x0800f998

0800a718 <etharp_cleanup_netif>:
{
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a71c:	2400      	movs	r4, #0
 800a71e:	e001      	b.n	800a724 <etharp_cleanup_netif+0xc>
 800a720:	3401      	adds	r4, #1
 800a722:	b2e4      	uxtb	r4, r4
 800a724:	2c09      	cmp	r4, #9
 800a726:	d810      	bhi.n	800a74a <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 800a728:	4620      	mov	r0, r4
 800a72a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a72e:	00da      	lsls	r2, r3, #3
 800a730:	4b06      	ldr	r3, [pc, #24]	; (800a74c <etharp_cleanup_netif+0x34>)
 800a732:	4413      	add	r3, r2
 800a734:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a736:	2b00      	cmp	r3, #0
 800a738:	d0f2      	beq.n	800a720 <etharp_cleanup_netif+0x8>
 800a73a:	4b04      	ldr	r3, [pc, #16]	; (800a74c <etharp_cleanup_netif+0x34>)
 800a73c:	4413      	add	r3, r2
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	42ab      	cmp	r3, r5
 800a742:	d1ed      	bne.n	800a720 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800a744:	f7ff fe10 	bl	800a368 <etharp_free_entry>
 800a748:	e7ea      	b.n	800a720 <etharp_cleanup_netif+0x8>
}
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	20003e8c 	.word	0x20003e8c

0800a750 <etharp_input>:
{
 800a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a754:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a756:	b161      	cbz	r1, 800a772 <etharp_input+0x22>
 800a758:	4604      	mov	r4, r0
 800a75a:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800a75c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a75e:	882b      	ldrh	r3, [r5, #0]
 800a760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a764:	d00d      	beq.n	800a782 <etharp_input+0x32>
    pbuf_free(p);
 800a766:	4620      	mov	r0, r4
 800a768:	f7fa fda4 	bl	80052b4 <pbuf_free>
}
 800a76c:	b006      	add	sp, #24
 800a76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a772:	4b25      	ldr	r3, [pc, #148]	; (800a808 <etharp_input+0xb8>)
 800a774:	f44f 7222 	mov.w	r2, #648	; 0x288
 800a778:	4924      	ldr	r1, [pc, #144]	; (800a80c <etharp_input+0xbc>)
 800a77a:	4825      	ldr	r0, [pc, #148]	; (800a810 <etharp_input+0xc0>)
 800a77c:	f002 f9de 	bl	800cb3c <iprintf>
 800a780:	e7f4      	b.n	800a76c <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a782:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a784:	2b06      	cmp	r3, #6
 800a786:	d1ee      	bne.n	800a766 <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a788:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d1eb      	bne.n	800a766 <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a78e:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a790:	2b08      	cmp	r3, #8
 800a792:	d1e8      	bne.n	800a766 <etharp_input+0x16>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800a794:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800a798:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800a79a:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a79c:	684b      	ldr	r3, [r1, #4]
 800a79e:	b1bb      	cbz	r3, 800a7d0 <etharp_input+0x80>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a7a0:	429f      	cmp	r7, r3
 800a7a2:	bf14      	ite	ne
 800a7a4:	2700      	movne	r7, #0
 800a7a6:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a7a8:	f105 0808 	add.w	r8, r5, #8
 800a7ac:	b197      	cbz	r7, 800a7d4 <etharp_input+0x84>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	4642      	mov	r2, r8
 800a7b2:	a905      	add	r1, sp, #20
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f7ff fec7 	bl	800a548 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 800a7ba:	88eb      	ldrh	r3, [r5, #6]
 800a7bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7c0:	d00a      	beq.n	800a7d8 <etharp_input+0x88>
 800a7c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7c6:	d019      	beq.n	800a7fc <etharp_input+0xac>
  pbuf_free(p);
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f7fa fd73 	bl	80052b4 <pbuf_free>
 800a7ce:	e7cd      	b.n	800a76c <etharp_input+0x1c>
    for_us = 0;
 800a7d0:	2700      	movs	r7, #0
 800a7d2:	e7e9      	b.n	800a7a8 <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	e7eb      	b.n	800a7b0 <etharp_input+0x60>
    if (for_us) {
 800a7d8:	2f00      	cmp	r7, #0
 800a7da:	d0f5      	beq.n	800a7c8 <etharp_input+0x78>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a7dc:	f106 0129 	add.w	r1, r6, #41	; 0x29
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a7e0:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	9203      	str	r2, [sp, #12]
 800a7e6:	aa05      	add	r2, sp, #20
 800a7e8:	9202      	str	r2, [sp, #8]
 800a7ea:	f8cd 8004 	str.w	r8, [sp, #4]
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4642      	mov	r2, r8
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7ff ff0b 	bl	800a610 <etharp_raw>
 800a7fa:	e7e5      	b.n	800a7c8 <etharp_input+0x78>
    dhcp_arp_reply(netif, &sipaddr);
 800a7fc:	a905      	add	r1, sp, #20
 800a7fe:	4630      	mov	r0, r6
 800a800:	f7ff fb96 	bl	8009f30 <dhcp_arp_reply>
    break;
 800a804:	e7e0      	b.n	800a7c8 <etharp_input+0x78>
 800a806:	bf00      	nop
 800a808:	0800f460 	.word	0x0800f460
 800a80c:	0800f3c4 	.word	0x0800f3c4
 800a810:	0800de6c 	.word	0x0800de6c

0800a814 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a814:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800a816:	4a02      	ldr	r2, [pc, #8]	; (800a820 <etharp_request+0xc>)
 800a818:	f7ff ff6a 	bl	800a6f0 <etharp_request_dst>
}
 800a81c:	bd08      	pop	{r3, pc}
 800a81e:	bf00      	nop
 800a820:	0800f924 	.word	0x0800f924

0800a824 <etharp_tmr>:
{
 800a824:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a826:	2400      	movs	r4, #0
 800a828:	e005      	b.n	800a836 <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d91d      	bls.n	800a86a <etharp_tmr+0x46>
        etharp_free_entry(i);
 800a82e:	f7ff fd9b 	bl	800a368 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a832:	3401      	adds	r4, #1
 800a834:	b2e4      	uxtb	r4, r4
 800a836:	2c09      	cmp	r4, #9
 800a838:	d838      	bhi.n	800a8ac <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 800a83a:	4620      	mov	r0, r4
 800a83c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a840:	00da      	lsls	r2, r3, #3
 800a842:	4b1b      	ldr	r3, [pc, #108]	; (800a8b0 <etharp_tmr+0x8c>)
 800a844:	4413      	add	r3, r2
 800a846:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d0f2      	beq.n	800a832 <etharp_tmr+0xe>
      arp_table[i].ctime++;
 800a84c:	4611      	mov	r1, r2
 800a84e:	4a18      	ldr	r2, [pc, #96]	; (800a8b0 <etharp_tmr+0x8c>)
 800a850:	440a      	add	r2, r1
 800a852:	8a53      	ldrh	r3, [r2, #18]
 800a854:	3301      	adds	r3, #1
 800a856:	b29b      	uxth	r3, r3
 800a858:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a85a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a85e:	d2e6      	bcs.n	800a82e <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a860:	4a13      	ldr	r2, [pc, #76]	; (800a8b0 <etharp_tmr+0x8c>)
 800a862:	440a      	add	r2, r1
 800a864:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a866:	2a01      	cmp	r2, #1
 800a868:	d0df      	beq.n	800a82a <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a86a:	2a03      	cmp	r2, #3
 800a86c:	d00e      	beq.n	800a88c <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a86e:	2a04      	cmp	r2, #4
 800a870:	d014      	beq.n	800a89c <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a872:	2a01      	cmp	r2, #1
 800a874:	d1dd      	bne.n	800a832 <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a876:	4a0e      	ldr	r2, [pc, #56]	; (800a8b0 <etharp_tmr+0x8c>)
 800a878:	0043      	lsls	r3, r0, #1
 800a87a:	181d      	adds	r5, r3, r0
 800a87c:	00e9      	lsls	r1, r5, #3
 800a87e:	4411      	add	r1, r2
 800a880:	460a      	mov	r2, r1
 800a882:	3104      	adds	r1, #4
 800a884:	6890      	ldr	r0, [r2, #8]
 800a886:	f7ff ffc5 	bl	800a814 <etharp_request>
 800a88a:	e7d2      	b.n	800a832 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a88c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a890:	00c2      	lsls	r2, r0, #3
 800a892:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <etharp_tmr+0x8c>)
 800a894:	4413      	add	r3, r2
 800a896:	2204      	movs	r2, #4
 800a898:	751a      	strb	r2, [r3, #20]
 800a89a:	e7ca      	b.n	800a832 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a89c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a8a0:	00c2      	lsls	r2, r0, #3
 800a8a2:	4b03      	ldr	r3, [pc, #12]	; (800a8b0 <etharp_tmr+0x8c>)
 800a8a4:	4413      	add	r3, r2
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	751a      	strb	r2, [r3, #20]
 800a8aa:	e7c2      	b.n	800a832 <etharp_tmr+0xe>
}
 800a8ac:	bd38      	pop	{r3, r4, r5, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20003e8c 	.word	0x20003e8c

0800a8b4 <etharp_output_to_arp_index>:
{
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	460e      	mov	r6, r1
 800a8bc:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a8be:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800a8c2:	00da      	lsls	r2, r3, #3
 800a8c4:	4b2c      	ldr	r3, [pc, #176]	; (800a978 <etharp_output_to_arp_index+0xc4>)
 800a8c6:	4413      	add	r3, r2
 800a8c8:	7d1b      	ldrb	r3, [r3, #20]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d919      	bls.n	800a902 <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a8ce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a8d2:	00da      	lsls	r2, r3, #3
 800a8d4:	4b28      	ldr	r3, [pc, #160]	; (800a978 <etharp_output_to_arp_index+0xc4>)
 800a8d6:	4413      	add	r3, r2
 800a8d8:	7d1b      	ldrb	r3, [r3, #20]
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d019      	beq.n	800a912 <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a8de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a8e2:	00e3      	lsls	r3, r4, #3
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	4a24      	ldr	r2, [pc, #144]	; (800a978 <etharp_output_to_arp_index+0xc4>)
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8ee:	9200      	str	r2, [sp, #0]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	f105 0229 	add.w	r2, r5, #41	; 0x29
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f001 f90d 	bl	800bb18 <ethernet_output>
}
 800a8fe:	b002      	add	sp, #8
 800a900:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a902:	4b1e      	ldr	r3, [pc, #120]	; (800a97c <etharp_output_to_arp_index+0xc8>)
 800a904:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a908:	491d      	ldr	r1, [pc, #116]	; (800a980 <etharp_output_to_arp_index+0xcc>)
 800a90a:	481e      	ldr	r0, [pc, #120]	; (800a984 <etharp_output_to_arp_index+0xd0>)
 800a90c:	f002 f916 	bl	800cb3c <iprintf>
 800a910:	e7dd      	b.n	800a8ce <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a912:	4b19      	ldr	r3, [pc, #100]	; (800a978 <etharp_output_to_arp_index+0xc4>)
 800a914:	4413      	add	r3, r2
 800a916:	8a5b      	ldrh	r3, [r3, #18]
 800a918:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a91c:	d819      	bhi.n	800a952 <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a91e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a922:	d3dc      	bcc.n	800a8de <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a924:	4a14      	ldr	r2, [pc, #80]	; (800a978 <etharp_output_to_arp_index+0xc4>)
 800a926:	0063      	lsls	r3, r4, #1
 800a928:	1918      	adds	r0, r3, r4
 800a92a:	00c1      	lsls	r1, r0, #3
 800a92c:	4608      	mov	r0, r1
 800a92e:	4411      	add	r1, r2
 800a930:	3008      	adds	r0, #8
 800a932:	4402      	add	r2, r0
 800a934:	3204      	adds	r2, #4
 800a936:	3104      	adds	r1, #4
 800a938:	4628      	mov	r0, r5
 800a93a:	f7ff fed9 	bl	800a6f0 <etharp_request_dst>
 800a93e:	2800      	cmp	r0, #0
 800a940:	d1cd      	bne.n	800a8de <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a942:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a946:	00da      	lsls	r2, r3, #3
 800a948:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <etharp_output_to_arp_index+0xc4>)
 800a94a:	4413      	add	r3, r2
 800a94c:	2203      	movs	r2, #3
 800a94e:	751a      	strb	r2, [r3, #20]
 800a950:	e7c5      	b.n	800a8de <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a952:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a956:	00d3      	lsls	r3, r2, #3
 800a958:	4907      	ldr	r1, [pc, #28]	; (800a978 <etharp_output_to_arp_index+0xc4>)
 800a95a:	4419      	add	r1, r3
 800a95c:	3104      	adds	r1, #4
 800a95e:	4628      	mov	r0, r5
 800a960:	f7ff ff58 	bl	800a814 <etharp_request>
 800a964:	2800      	cmp	r0, #0
 800a966:	d1ba      	bne.n	800a8de <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a968:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a96c:	00da      	lsls	r2, r3, #3
 800a96e:	4b02      	ldr	r3, [pc, #8]	; (800a978 <etharp_output_to_arp_index+0xc4>)
 800a970:	4413      	add	r3, r2
 800a972:	2203      	movs	r2, #3
 800a974:	751a      	strb	r2, [r3, #20]
 800a976:	e7b2      	b.n	800a8de <etharp_output_to_arp_index+0x2a>
 800a978:	20003e8c 	.word	0x20003e8c
 800a97c:	0800f460 	.word	0x0800f460
 800a980:	0800f510 	.word	0x0800f510
 800a984:	0800de6c 	.word	0x0800de6c

0800a988 <etharp_query>:
{
 800a988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a98c:	b083      	sub	sp, #12
 800a98e:	4606      	mov	r6, r0
 800a990:	460c      	mov	r4, r1
 800a992:	4690      	mov	r8, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800a994:	f100 0929 	add.w	r9, r0, #41	; 0x29
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a998:	4601      	mov	r1, r0
 800a99a:	6820      	ldr	r0, [r4, #0]
 800a99c:	f000 fc4b 	bl	800b236 <ip4_addr_isbroadcast_u32>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	f040 80ac 	bne.w	800aafe <etharp_query+0x176>
      ip4_addr_ismulticast(ipaddr) ||
 800a9a6:	6823      	ldr	r3, [r4, #0]
 800a9a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a9ac:	2ae0      	cmp	r2, #224	; 0xe0
 800a9ae:	f000 80a9 	beq.w	800ab04 <etharp_query+0x17c>
      ip4_addr_ismulticast(ipaddr) ||
 800a9b2:	2c00      	cmp	r4, #0
 800a9b4:	f000 80a9 	beq.w	800ab0a <etharp_query+0x182>
      ip4_addr_isany(ipaddr)) {
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 80a9 	beq.w	800ab10 <etharp_query+0x188>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a9be:	4632      	mov	r2, r6
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f7ff fcea 	bl	800a39c <etharp_find_entry>
  if (i < 0) {
 800a9c8:	1e05      	subs	r5, r0, #0
 800a9ca:	f2c0 80a4 	blt.w	800ab16 <etharp_query+0x18e>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a9ce:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800a9d2:	00da      	lsls	r2, r3, #3
 800a9d4:	4b52      	ldr	r3, [pc, #328]	; (800ab20 <etharp_query+0x198>)
 800a9d6:	4413      	add	r3, r2
 800a9d8:	7d1b      	ldrb	r3, [r3, #20]
 800a9da:	bb2b      	cbnz	r3, 800aa28 <etharp_query+0xa0>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a9dc:	006a      	lsls	r2, r5, #1
 800a9de:	442a      	add	r2, r5
 800a9e0:	00d1      	lsls	r1, r2, #3
 800a9e2:	4b4f      	ldr	r3, [pc, #316]	; (800ab20 <etharp_query+0x198>)
 800a9e4:	440b      	add	r3, r1
 800a9e6:	2701      	movs	r7, #1
 800a9e8:	751f      	strb	r7, [r3, #20]
    arp_table[i].netif = netif;
 800a9ea:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a9ec:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800a9f0:	00da      	lsls	r2, r3, #3
 800a9f2:	4b4b      	ldr	r3, [pc, #300]	; (800ab20 <etharp_query+0x198>)
 800a9f4:	4413      	add	r3, r2
 800a9f6:	7d1b      	ldrb	r3, [r3, #20]
 800a9f8:	b1c3      	cbz	r3, 800aa2c <etharp_query+0xa4>
  if (is_new_entry || (q == NULL)) {
 800a9fa:	f1b8 0f00 	cmp.w	r8, #0
 800a9fe:	bf08      	it	eq
 800aa00:	f047 0701 	orreq.w	r7, r7, #1
 800aa04:	b9d7      	cbnz	r7, 800aa3c <etharp_query+0xb4>
  err_t result = ERR_MEM;
 800aa06:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  LWIP_ASSERT("q != NULL", q != NULL);
 800aa0a:	f1b8 0f00 	cmp.w	r8, #0
 800aa0e:	d01e      	beq.n	800aa4e <etharp_query+0xc6>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800aa10:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800aa14:	00da      	lsls	r2, r3, #3
 800aa16:	4b42      	ldr	r3, [pc, #264]	; (800ab20 <etharp_query+0x198>)
 800aa18:	4413      	add	r3, r2
 800aa1a:	7d1b      	ldrb	r3, [r3, #20]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d81e      	bhi.n	800aa5e <etharp_query+0xd6>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d12c      	bne.n	800aa7e <etharp_query+0xf6>
 800aa24:	4644      	mov	r4, r8
 800aa26:	e032      	b.n	800aa8e <etharp_query+0x106>
  int is_new_entry = 0;
 800aa28:	2700      	movs	r7, #0
 800aa2a:	e7df      	b.n	800a9ec <etharp_query+0x64>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800aa2c:	4b3d      	ldr	r3, [pc, #244]	; (800ab24 <etharp_query+0x19c>)
 800aa2e:	f240 32c9 	movw	r2, #969	; 0x3c9
 800aa32:	493d      	ldr	r1, [pc, #244]	; (800ab28 <etharp_query+0x1a0>)
 800aa34:	483d      	ldr	r0, [pc, #244]	; (800ab2c <etharp_query+0x1a4>)
 800aa36:	f002 f881 	bl	800cb3c <iprintf>
 800aa3a:	e7de      	b.n	800a9fa <etharp_query+0x72>
    result = etharp_request(netif, ipaddr);
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f7ff fee8 	bl	800a814 <etharp_request>
 800aa44:	4604      	mov	r4, r0
    if (q == NULL) {
 800aa46:	f1b8 0f00 	cmp.w	r8, #0
 800aa4a:	d1de      	bne.n	800aa0a <etharp_query+0x82>
 800aa4c:	e017      	b.n	800aa7e <etharp_query+0xf6>
  LWIP_ASSERT("q != NULL", q != NULL);
 800aa4e:	4b35      	ldr	r3, [pc, #212]	; (800ab24 <etharp_query+0x19c>)
 800aa50:	f240 32db 	movw	r2, #987	; 0x3db
 800aa54:	4936      	ldr	r1, [pc, #216]	; (800ab30 <etharp_query+0x1a8>)
 800aa56:	4835      	ldr	r0, [pc, #212]	; (800ab2c <etharp_query+0x1a4>)
 800aa58:	f002 f870 	bl	800cb3c <iprintf>
 800aa5c:	e7d8      	b.n	800aa10 <etharp_query+0x88>
    ETHARP_SET_HINT(netif, i);
 800aa5e:	4b35      	ldr	r3, [pc, #212]	; (800ab34 <etharp_query+0x1ac>)
 800aa60:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800aa62:	4613      	mov	r3, r2
 800aa64:	3308      	adds	r3, #8
 800aa66:	4a2e      	ldr	r2, [pc, #184]	; (800ab20 <etharp_query+0x198>)
 800aa68:	4413      	add	r3, r2
 800aa6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa6e:	9200      	str	r2, [sp, #0]
 800aa70:	3304      	adds	r3, #4
 800aa72:	464a      	mov	r2, r9
 800aa74:	4641      	mov	r1, r8
 800aa76:	4630      	mov	r0, r6
 800aa78:	f001 f84e 	bl	800bb18 <ethernet_output>
 800aa7c:	4604      	mov	r4, r0
}
 800aa7e:	4620      	mov	r0, r4
 800aa80:	b003      	add	sp, #12
 800aa82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (p->type != PBUF_ROM) {
 800aa86:	7b23      	ldrb	r3, [r4, #12]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d122      	bne.n	800aad2 <etharp_query+0x14a>
      p = p->next;
 800aa8c:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800aa8e:	b174      	cbz	r4, 800aaae <etharp_query+0x126>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800aa90:	8962      	ldrh	r2, [r4, #10]
 800aa92:	8923      	ldrh	r3, [r4, #8]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d1f6      	bne.n	800aa86 <etharp_query+0xfe>
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d0f3      	beq.n	800aa86 <etharp_query+0xfe>
 800aa9e:	4b21      	ldr	r3, [pc, #132]	; (800ab24 <etharp_query+0x19c>)
 800aaa0:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800aaa4:	4924      	ldr	r1, [pc, #144]	; (800ab38 <etharp_query+0x1b0>)
 800aaa6:	4821      	ldr	r0, [pc, #132]	; (800ab2c <etharp_query+0x1a4>)
 800aaa8:	f002 f848 	bl	800cb3c <iprintf>
 800aaac:	e7eb      	b.n	800aa86 <etharp_query+0xfe>
    int copy_needed = 0;
 800aaae:	2300      	movs	r3, #0
    if (copy_needed) {
 800aab0:	b18b      	cbz	r3, 800aad6 <etharp_query+0x14e>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800aab2:	2200      	movs	r2, #0
 800aab4:	8921      	ldrh	r1, [r4, #8]
 800aab6:	2002      	movs	r0, #2
 800aab8:	f7fa fc68 	bl	800538c <pbuf_alloc>
      if (p != NULL) {
 800aabc:	4604      	mov	r4, r0
 800aabe:	b170      	cbz	r0, 800aade <etharp_query+0x156>
        if (pbuf_copy(p, q) != ERR_OK) {
 800aac0:	4641      	mov	r1, r8
 800aac2:	f7fa fe27 	bl	8005714 <pbuf_copy>
 800aac6:	b150      	cbz	r0, 800aade <etharp_query+0x156>
          pbuf_free(p);
 800aac8:	4620      	mov	r0, r4
 800aaca:	f7fa fbf3 	bl	80052b4 <pbuf_free>
          p = NULL;
 800aace:	2400      	movs	r4, #0
 800aad0:	e005      	b.n	800aade <etharp_query+0x156>
        copy_needed = 1;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e7ec      	b.n	800aab0 <etharp_query+0x128>
      pbuf_ref(p);
 800aad6:	4640      	mov	r0, r8
 800aad8:	f7fa fdbc 	bl	8005654 <pbuf_ref>
      p = q;
 800aadc:	4644      	mov	r4, r8
    if (p != NULL) {
 800aade:	b1e4      	cbz	r4, 800ab1a <etharp_query+0x192>
      if (arp_table[i].q != NULL) {
 800aae0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800aae4:	00d3      	lsls	r3, r2, #3
 800aae6:	4a0e      	ldr	r2, [pc, #56]	; (800ab20 <etharp_query+0x198>)
 800aae8:	58d0      	ldr	r0, [r2, r3]
 800aaea:	b108      	cbz	r0, 800aaf0 <etharp_query+0x168>
        pbuf_free(arp_table[i].q);
 800aaec:	f7fa fbe2 	bl	80052b4 <pbuf_free>
      arp_table[i].q = p;
 800aaf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaf4:	00eb      	lsls	r3, r5, #3
 800aaf6:	4a0a      	ldr	r2, [pc, #40]	; (800ab20 <etharp_query+0x198>)
 800aaf8:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 800aafa:	2400      	movs	r4, #0
 800aafc:	e7bf      	b.n	800aa7e <etharp_query+0xf6>
    return ERR_ARG;
 800aafe:	f06f 040f 	mvn.w	r4, #15
 800ab02:	e7bc      	b.n	800aa7e <etharp_query+0xf6>
 800ab04:	f06f 040f 	mvn.w	r4, #15
 800ab08:	e7b9      	b.n	800aa7e <etharp_query+0xf6>
 800ab0a:	f06f 040f 	mvn.w	r4, #15
 800ab0e:	e7b6      	b.n	800aa7e <etharp_query+0xf6>
 800ab10:	f06f 040f 	mvn.w	r4, #15
 800ab14:	e7b3      	b.n	800aa7e <etharp_query+0xf6>
    return (err_t)i;
 800ab16:	462c      	mov	r4, r5
 800ab18:	e7b1      	b.n	800aa7e <etharp_query+0xf6>
      result = ERR_MEM;
 800ab1a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ab1e:	e7ae      	b.n	800aa7e <etharp_query+0xf6>
 800ab20:	20003e8c 	.word	0x20003e8c
 800ab24:	0800f460 	.word	0x0800f460
 800ab28:	0800f540 	.word	0x0800f540
 800ab2c:	0800de6c 	.word	0x0800de6c
 800ab30:	0800f568 	.word	0x0800f568
 800ab34:	20003f7c 	.word	0x20003f7c
 800ab38:	0800f574 	.word	0x0800f574

0800ab3c <etharp_output>:
{
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	460e      	mov	r6, r1
 800ab42:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ab44:	4605      	mov	r5, r0
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d02f      	beq.n	800abaa <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ab4a:	2e00      	cmp	r6, #0
 800ab4c:	d035      	beq.n	800abba <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ab4e:	2c00      	cmp	r4, #0
 800ab50:	d03b      	beq.n	800abca <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ab52:	4629      	mov	r1, r5
 800ab54:	6820      	ldr	r0, [r4, #0]
 800ab56:	f000 fb6e 	bl	800b236 <ip4_addr_isbroadcast_u32>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d17a      	bne.n	800ac54 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ab64:	2ae0      	cmp	r2, #224	; 0xe0
 800ab66:	d038      	beq.n	800abda <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ab68:	686a      	ldr	r2, [r5, #4]
 800ab6a:	68a9      	ldr	r1, [r5, #8]
 800ab6c:	405a      	eors	r2, r3
 800ab6e:	420a      	tst	r2, r1
 800ab70:	d009      	beq.n	800ab86 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 800ab72:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ab74:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d004      	beq.n	800ab86 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ab7c:	68eb      	ldr	r3, [r5, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d074      	beq.n	800ac6c <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 800ab82:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ab86:	4b3b      	ldr	r3, [pc, #236]	; (800ac74 <etharp_output+0x138>)
 800ab88:	781a      	ldrb	r2, [r3, #0]
 800ab8a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800ab8e:	00d9      	lsls	r1, r3, #3
 800ab90:	4b39      	ldr	r3, [pc, #228]	; (800ac78 <etharp_output+0x13c>)
 800ab92:	440b      	add	r3, r1
 800ab94:	7d1b      	ldrb	r3, [r3, #20]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d954      	bls.n	800ac44 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ab9a:	6820      	ldr	r0, [r4, #0]
 800ab9c:	4b36      	ldr	r3, [pc, #216]	; (800ac78 <etharp_output+0x13c>)
 800ab9e:	440b      	add	r3, r1
 800aba0:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800aba2:	4298      	cmp	r0, r3
 800aba4:	d02f      	beq.n	800ac06 <etharp_output+0xca>
 800aba6:	2200      	movs	r2, #0
 800aba8:	e034      	b.n	800ac14 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800abaa:	4b34      	ldr	r3, [pc, #208]	; (800ac7c <etharp_output+0x140>)
 800abac:	f240 321b 	movw	r2, #795	; 0x31b
 800abb0:	4933      	ldr	r1, [pc, #204]	; (800ac80 <etharp_output+0x144>)
 800abb2:	4834      	ldr	r0, [pc, #208]	; (800ac84 <etharp_output+0x148>)
 800abb4:	f001 ffc2 	bl	800cb3c <iprintf>
 800abb8:	e7c7      	b.n	800ab4a <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800abba:	4b30      	ldr	r3, [pc, #192]	; (800ac7c <etharp_output+0x140>)
 800abbc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800abc0:	4931      	ldr	r1, [pc, #196]	; (800ac88 <etharp_output+0x14c>)
 800abc2:	4830      	ldr	r0, [pc, #192]	; (800ac84 <etharp_output+0x148>)
 800abc4:	f001 ffba 	bl	800cb3c <iprintf>
 800abc8:	e7c1      	b.n	800ab4e <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800abca:	4b2c      	ldr	r3, [pc, #176]	; (800ac7c <etharp_output+0x140>)
 800abcc:	f240 321d 	movw	r2, #797	; 0x31d
 800abd0:	492e      	ldr	r1, [pc, #184]	; (800ac8c <etharp_output+0x150>)
 800abd2:	482c      	ldr	r0, [pc, #176]	; (800ac84 <etharp_output+0x148>)
 800abd4:	f001 ffb2 	bl	800cb3c <iprintf>
 800abd8:	e7bb      	b.n	800ab52 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800abda:	2301      	movs	r3, #1
 800abdc:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800abe0:	2300      	movs	r3, #0
 800abe2:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800abe6:	235e      	movs	r3, #94	; 0x5e
 800abe8:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800abec:	7863      	ldrb	r3, [r4, #1]
 800abee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf2:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800abf6:	78a3      	ldrb	r3, [r4, #2]
 800abf8:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800abfc:	78e3      	ldrb	r3, [r4, #3]
 800abfe:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800ac02:	ab02      	add	r3, sp, #8
 800ac04:	e027      	b.n	800ac56 <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ac06:	4631      	mov	r1, r6
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f7ff fe53 	bl	800a8b4 <etharp_output_to_arp_index>
 800ac0e:	e02b      	b.n	800ac68 <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ac10:	3201      	adds	r2, #1
 800ac12:	b252      	sxtb	r2, r2
 800ac14:	2a09      	cmp	r2, #9
 800ac16:	dc17      	bgt.n	800ac48 <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ac18:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800ac1c:	00d9      	lsls	r1, r3, #3
 800ac1e:	4b16      	ldr	r3, [pc, #88]	; (800ac78 <etharp_output+0x13c>)
 800ac20:	440b      	add	r3, r1
 800ac22:	7d1b      	ldrb	r3, [r3, #20]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d9f3      	bls.n	800ac10 <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ac28:	6820      	ldr	r0, [r4, #0]
 800ac2a:	4b13      	ldr	r3, [pc, #76]	; (800ac78 <etharp_output+0x13c>)
 800ac2c:	440b      	add	r3, r1
 800ac2e:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ac30:	4298      	cmp	r0, r3
 800ac32:	d1ed      	bne.n	800ac10 <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 800ac34:	b2d2      	uxtb	r2, r2
 800ac36:	4b0f      	ldr	r3, [pc, #60]	; (800ac74 <etharp_output+0x138>)
 800ac38:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	f7ff fe39 	bl	800a8b4 <etharp_output_to_arp_index>
 800ac42:	e011      	b.n	800ac68 <etharp_output+0x12c>
 800ac44:	2200      	movs	r2, #0
 800ac46:	e7e5      	b.n	800ac14 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 800ac48:	4632      	mov	r2, r6
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f7ff fe9b 	bl	800a988 <etharp_query>
 800ac52:	e009      	b.n	800ac68 <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800ac54:	4b0e      	ldr	r3, [pc, #56]	; (800ac90 <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800ac56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac5a:	9200      	str	r2, [sp, #0]
 800ac5c:	f105 0229 	add.w	r2, r5, #41	; 0x29
 800ac60:	4631      	mov	r1, r6
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 ff58 	bl	800bb18 <ethernet_output>
}
 800ac68:	b004      	add	sp, #16
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 800ac6c:	f06f 0003 	mvn.w	r0, #3
 800ac70:	e7fa      	b.n	800ac68 <etharp_output+0x12c>
 800ac72:	bf00      	nop
 800ac74:	20003f7c 	.word	0x20003f7c
 800ac78:	20003e8c 	.word	0x20003e8c
 800ac7c:	0800f460 	.word	0x0800f460
 800ac80:	0800f3c4 	.word	0x0800f3c4
 800ac84:	0800de6c 	.word	0x0800de6c
 800ac88:	0800f568 	.word	0x0800f568
 800ac8c:	0800f4f0 	.word	0x0800f4f0
 800ac90:	0800f924 	.word	0x0800f924

0800ac94 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	b086      	sub	sp, #24
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	4688      	mov	r8, r1
 800ac9e:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800aca0:	2200      	movs	r2, #0
 800aca2:	2124      	movs	r1, #36	; 0x24
 800aca4:	2001      	movs	r0, #1
 800aca6:	f7fa fb71 	bl	800538c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800acaa:	2800      	cmp	r0, #0
 800acac:	d037      	beq.n	800ad1e <icmp_send_response+0x8a>
 800acae:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800acb0:	8943      	ldrh	r3, [r0, #10]
 800acb2:	2b23      	cmp	r3, #35	; 0x23
 800acb4:	d936      	bls.n	800ad24 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800acb6:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800acba:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800acbc:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800acc0:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	7123      	strb	r3, [r4, #4]
 800acc6:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800acc8:	71a3      	strb	r3, [r4, #6]
 800acca:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800accc:	686f      	ldr	r7, [r5, #4]
 800acce:	6873      	ldr	r3, [r6, #4]
 800acd0:	681e      	ldr	r6, [r3, #0]
 800acd2:	6858      	ldr	r0, [r3, #4]
 800acd4:	6899      	ldr	r1, [r3, #8]
 800acd6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800acda:	60be      	str	r6, [r7, #8]
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	6139      	str	r1, [r7, #16]
 800ace0:	f8c7 c014 	str.w	ip, [r7, #20]
 800ace4:	691e      	ldr	r6, [r3, #16]
 800ace6:	6958      	ldr	r0, [r3, #20]
 800ace8:	6999      	ldr	r1, [r3, #24]
 800acea:	61be      	str	r6, [r7, #24]
 800acec:	61f8      	str	r0, [r7, #28]
 800acee:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800acf0:	f8de 300c 	ldr.w	r3, [lr, #12]
 800acf4:	a806      	add	r0, sp, #24
 800acf6:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800acfa:	f000 f8cb 	bl	800ae94 <ip4_route>
#endif
  if (netif != NULL) {
 800acfe:	b158      	cbz	r0, 800ad18 <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ad00:	2100      	movs	r1, #0
 800ad02:	70a1      	strb	r1, [r4, #2]
 800ad04:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ad06:	9002      	str	r0, [sp, #8]
 800ad08:	2301      	movs	r3, #1
 800ad0a:	9301      	str	r3, [sp, #4]
 800ad0c:	9100      	str	r1, [sp, #0]
 800ad0e:	23ff      	movs	r3, #255	; 0xff
 800ad10:	aa05      	add	r2, sp, #20
 800ad12:	4628      	mov	r0, r5
 800ad14:	f000 fa7a 	bl	800b20c <ip4_output_if>
  }
  pbuf_free(q);
 800ad18:	4628      	mov	r0, r5
 800ad1a:	f7fa facb 	bl	80052b4 <pbuf_free>
}
 800ad1e:	b006      	add	sp, #24
 800ad20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ad24:	4b03      	ldr	r3, [pc, #12]	; (800ad34 <icmp_send_response+0xa0>)
 800ad26:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800ad2a:	4903      	ldr	r1, [pc, #12]	; (800ad38 <icmp_send_response+0xa4>)
 800ad2c:	4803      	ldr	r0, [pc, #12]	; (800ad3c <icmp_send_response+0xa8>)
 800ad2e:	f001 ff05 	bl	800cb3c <iprintf>
 800ad32:	e7c0      	b.n	800acb6 <icmp_send_response+0x22>
 800ad34:	0800f698 	.word	0x0800f698
 800ad38:	0800f6d0 	.word	0x0800f6d0
 800ad3c:	0800de6c 	.word	0x0800de6c

0800ad40 <icmp_input>:
{
 800ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800ad48:	4b47      	ldr	r3, [pc, #284]	; (800ae68 <icmp_input+0x128>)
 800ad4a:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 800ad4c:	7834      	ldrb	r4, [r6, #0]
 800ad4e:	f004 040f 	and.w	r4, r4, #15
 800ad52:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800ad54:	2c13      	cmp	r4, #19
 800ad56:	d915      	bls.n	800ad84 <icmp_input+0x44>
 800ad58:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 800ad5a:	8943      	ldrh	r3, [r0, #10]
 800ad5c:	2b03      	cmp	r3, #3
 800ad5e:	d911      	bls.n	800ad84 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800ad60:	6843      	ldr	r3, [r0, #4]
 800ad62:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 800ad64:	2b08      	cmp	r3, #8
 800ad66:	d15d      	bne.n	800ae24 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ad68:	4b3f      	ldr	r3, [pc, #252]	; (800ae68 <icmp_input+0x128>)
 800ad6a:	6958      	ldr	r0, [r3, #20]
 800ad6c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800ad70:	2be0      	cmp	r3, #224	; 0xe0
 800ad72:	d023      	beq.n	800adbc <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ad74:	4b3c      	ldr	r3, [pc, #240]	; (800ae68 <icmp_input+0x128>)
 800ad76:	6819      	ldr	r1, [r3, #0]
 800ad78:	f000 fa5d 	bl	800b236 <ip4_addr_isbroadcast_u32>
 800ad7c:	b9f0      	cbnz	r0, 800adbc <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ad7e:	892b      	ldrh	r3, [r5, #8]
 800ad80:	2b07      	cmp	r3, #7
 800ad82:	d805      	bhi.n	800ad90 <icmp_input+0x50>
  pbuf_free(p);
 800ad84:	4628      	mov	r0, r5
 800ad86:	f7fa fa95 	bl	80052b4 <pbuf_free>
}
 800ad8a:	b004      	add	sp, #16
 800ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800ad90:	f104 010e 	add.w	r1, r4, #14
 800ad94:	4628      	mov	r0, r5
 800ad96:	f7fa fa83 	bl	80052a0 <pbuf_header>
 800ad9a:	b3a8      	cbz	r0, 800ae08 <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800ad9c:	8929      	ldrh	r1, [r5, #8]
 800ad9e:	4421      	add	r1, r4
 800ada0:	2200      	movs	r2, #0
 800ada2:	b289      	uxth	r1, r1
 800ada4:	2002      	movs	r0, #2
 800ada6:	f7fa faf1 	bl	800538c <pbuf_alloc>
      if (r == NULL) {
 800adaa:	4680      	mov	r8, r0
 800adac:	b130      	cbz	r0, 800adbc <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800adae:	8942      	ldrh	r2, [r0, #10]
 800adb0:	f104 0308 	add.w	r3, r4, #8
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d205      	bcs.n	800adc4 <icmp_input+0x84>
        pbuf_free(r);
 800adb8:	f7fa fa7c 	bl	80052b4 <pbuf_free>
  pbuf_free(p);
 800adbc:	4628      	mov	r0, r5
 800adbe:	f7fa fa79 	bl	80052b4 <pbuf_free>
  return;
 800adc2:	e7e2      	b.n	800ad8a <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 800adc4:	4622      	mov	r2, r4
 800adc6:	4631      	mov	r1, r6
 800adc8:	6840      	ldr	r0, [r0, #4]
 800adca:	f001 fea4 	bl	800cb16 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800adce:	4261      	negs	r1, r4
 800add0:	4640      	mov	r0, r8
 800add2:	f7fa fa65 	bl	80052a0 <pbuf_header>
 800add6:	b148      	cbz	r0, 800adec <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800add8:	4b24      	ldr	r3, [pc, #144]	; (800ae6c <icmp_input+0x12c>)
 800adda:	22af      	movs	r2, #175	; 0xaf
 800addc:	4924      	ldr	r1, [pc, #144]	; (800ae70 <icmp_input+0x130>)
 800adde:	4825      	ldr	r0, [pc, #148]	; (800ae74 <icmp_input+0x134>)
 800ade0:	f001 feac 	bl	800cb3c <iprintf>
        pbuf_free(r);
 800ade4:	4640      	mov	r0, r8
 800ade6:	f7fa fa65 	bl	80052b4 <pbuf_free>
        goto icmperr;
 800adea:	e7e7      	b.n	800adbc <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 800adec:	4629      	mov	r1, r5
 800adee:	4640      	mov	r0, r8
 800adf0:	f7fa fc90 	bl	8005714 <pbuf_copy>
 800adf4:	b118      	cbz	r0, 800adfe <icmp_input+0xbe>
        pbuf_free(r);
 800adf6:	4640      	mov	r0, r8
 800adf8:	f7fa fa5c 	bl	80052b4 <pbuf_free>
        goto icmperr;
 800adfc:	e7de      	b.n	800adbc <icmp_input+0x7c>
      pbuf_free(p);
 800adfe:	4628      	mov	r0, r5
 800ae00:	f7fa fa58 	bl	80052b4 <pbuf_free>
      p = r;
 800ae04:	4645      	mov	r5, r8
 800ae06:	e007      	b.n	800ae18 <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800ae08:	f64f 71f2 	movw	r1, #65522	; 0xfff2
 800ae0c:	1b09      	subs	r1, r1, r4
 800ae0e:	b209      	sxth	r1, r1
 800ae10:	4628      	mov	r0, r5
 800ae12:	f7fa fa45 	bl	80052a0 <pbuf_header>
 800ae16:	b948      	cbnz	r0, 800ae2c <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 800ae18:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	f7fa fa3f 	bl	80052a0 <pbuf_header>
 800ae22:	b150      	cbz	r0, 800ae3a <icmp_input+0xfa>
  pbuf_free(p);
 800ae24:	4628      	mov	r0, r5
 800ae26:	f7fa fa45 	bl	80052b4 <pbuf_free>
  return;
 800ae2a:	e7ae      	b.n	800ad8a <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ae2c:	4b0f      	ldr	r3, [pc, #60]	; (800ae6c <icmp_input+0x12c>)
 800ae2e:	22c0      	movs	r2, #192	; 0xc0
 800ae30:	4911      	ldr	r1, [pc, #68]	; (800ae78 <icmp_input+0x138>)
 800ae32:	4810      	ldr	r0, [pc, #64]	; (800ae74 <icmp_input+0x134>)
 800ae34:	f001 fe82 	bl	800cb3c <iprintf>
        goto icmperr;
 800ae38:	e7c0      	b.n	800adbc <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800ae3a:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 800ae3c:	490a      	ldr	r1, [pc, #40]	; (800ae68 <icmp_input+0x128>)
 800ae3e:	694b      	ldr	r3, [r1, #20]
 800ae40:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ae42:	690b      	ldr	r3, [r1, #16]
 800ae44:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ae46:	2200      	movs	r2, #0
 800ae48:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 800ae4a:	70b2      	strb	r2, [r6, #2]
 800ae4c:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800ae4e:	23ff      	movs	r3, #255	; 0xff
 800ae50:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800ae52:	7282      	strb	r2, [r0, #10]
 800ae54:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ae56:	9702      	str	r7, [sp, #8]
 800ae58:	2001      	movs	r0, #1
 800ae5a:	9001      	str	r0, [sp, #4]
 800ae5c:	9200      	str	r2, [sp, #0]
 800ae5e:	3114      	adds	r1, #20
 800ae60:	4628      	mov	r0, r5
 800ae62:	f000 f9d3 	bl	800b20c <ip4_output_if>
 800ae66:	e7dd      	b.n	800ae24 <icmp_input+0xe4>
 800ae68:	20003fa0 	.word	0x20003fa0
 800ae6c:	0800f698 	.word	0x0800f698
 800ae70:	0800f62c 	.word	0x0800f62c
 800ae74:	0800de6c 	.word	0x0800de6c
 800ae78:	0800f664 	.word	0x0800f664

0800ae7c <icmp_dest_unreach>:
{
 800ae7c:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 800ae7e:	460a      	mov	r2, r1
 800ae80:	2103      	movs	r1, #3
 800ae82:	f7ff ff07 	bl	800ac94 <icmp_send_response>
 800ae86:	bd08      	pop	{r3, pc}

0800ae88 <icmp_time_exceeded>:
{
 800ae88:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 800ae8a:	460a      	mov	r2, r1
 800ae8c:	210b      	movs	r1, #11
 800ae8e:	f7ff ff01 	bl	800ac94 <icmp_send_response>
 800ae92:	bd08      	pop	{r3, pc}

0800ae94 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ae94:	4b25      	ldr	r3, [pc, #148]	; (800af2c <ip4_route+0x98>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	e02b      	b.n	800aef2 <ip4_route+0x5e>
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	b1ab      	cbz	r3, 800aeca <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ae9e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800aea2:	f002 0105 	and.w	r1, r2, #5
 800aea6:	2905      	cmp	r1, #5
 800aea8:	d1f7      	bne.n	800ae9a <ip4_route+0x6>
 800aeaa:	6859      	ldr	r1, [r3, #4]
 800aeac:	2900      	cmp	r1, #0
 800aeae:	d0f4      	beq.n	800ae9a <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800aeb0:	6804      	ldr	r4, [r0, #0]
 800aeb2:	689d      	ldr	r5, [r3, #8]
 800aeb4:	4061      	eors	r1, r4
 800aeb6:	4229      	tst	r1, r5
 800aeb8:	d016      	beq.n	800aee8 <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800aeba:	f012 0f02 	tst.w	r2, #2
 800aebe:	d1ec      	bne.n	800ae9a <ip4_route+0x6>
 800aec0:	68da      	ldr	r2, [r3, #12]
 800aec2:	4294      	cmp	r4, r2
 800aec4:	d1e9      	bne.n	800ae9a <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 800aec6:	4618      	mov	r0, r3
 800aec8:	e00a      	b.n	800aee0 <ip4_route+0x4c>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800aeca:	4a19      	ldr	r2, [pc, #100]	; (800af30 <ip4_route+0x9c>)
 800aecc:	6810      	ldr	r0, [r2, #0]
 800aece:	b138      	cbz	r0, 800aee0 <ip4_route+0x4c>
 800aed0:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 800aed4:	f002 0205 	and.w	r2, r2, #5
 800aed8:	2a05      	cmp	r2, #5
 800aeda:	d107      	bne.n	800aeec <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800aedc:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800aede:	b10a      	cbz	r2, 800aee4 <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800aee0:	bc30      	pop	{r4, r5}
 800aee2:	4770      	bx	lr
    return NULL;
 800aee4:	4618      	mov	r0, r3
 800aee6:	e7fb      	b.n	800aee0 <ip4_route+0x4c>
        return netif;
 800aee8:	4618      	mov	r0, r3
 800aeea:	e7f9      	b.n	800aee0 <ip4_route+0x4c>
    return NULL;
 800aeec:	4618      	mov	r0, r3
 800aeee:	e7f7      	b.n	800aee0 <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	b153      	cbz	r3, 800af0a <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800aef4:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800aef8:	f002 0105 	and.w	r1, r2, #5
 800aefc:	2905      	cmp	r1, #5
 800aefe:	d1f7      	bne.n	800aef0 <ip4_route+0x5c>
 800af00:	6859      	ldr	r1, [r3, #4]
 800af02:	2900      	cmp	r1, #0
 800af04:	d0f4      	beq.n	800aef0 <ip4_route+0x5c>
{
 800af06:	b430      	push	{r4, r5}
 800af08:	e7d2      	b.n	800aeb0 <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800af0a:	4a09      	ldr	r2, [pc, #36]	; (800af30 <ip4_route+0x9c>)
 800af0c:	6810      	ldr	r0, [r2, #0]
 800af0e:	2800      	cmp	r0, #0
 800af10:	d0e7      	beq.n	800aee2 <ip4_route+0x4e>
 800af12:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 800af16:	f002 0205 	and.w	r2, r2, #5
 800af1a:	2a05      	cmp	r2, #5
 800af1c:	d104      	bne.n	800af28 <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800af1e:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800af20:	2a00      	cmp	r2, #0
 800af22:	d1de      	bne.n	800aee2 <ip4_route+0x4e>
    return NULL;
 800af24:	4618      	mov	r0, r3
 800af26:	4770      	bx	lr
 800af28:	4618      	mov	r0, r3
 800af2a:	4770      	bx	lr
 800af2c:	200076c0 	.word	0x200076c0
 800af30:	200076c4 	.word	0x200076c4

0800af34 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800af34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af38:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800af3a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800af3e:	f898 3000 	ldrb.w	r3, [r8]
 800af42:	091a      	lsrs	r2, r3, #4
 800af44:	2a04      	cmp	r2, #4
 800af46:	d004      	beq.n	800af52 <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800af48:	f7fa f9b4 	bl	80052b4 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800af4c:	2000      	movs	r0, #0
 800af4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af52:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
 800af54:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 800af58:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800af5a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800af5e:	f7f9 fced 	bl	800493c <lwip_htons>
 800af62:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800af64:	892b      	ldrh	r3, [r5, #8]
 800af66:	4298      	cmp	r0, r3
 800af68:	d316      	bcc.n	800af98 <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800af6a:	896b      	ldrh	r3, [r5, #10]
 800af6c:	429e      	cmp	r6, r3
 800af6e:	d818      	bhi.n	800afa2 <ip4_input+0x6e>
 800af70:	892b      	ldrh	r3, [r5, #8]
 800af72:	429c      	cmp	r4, r3
 800af74:	d815      	bhi.n	800afa2 <ip4_input+0x6e>
 800af76:	2e13      	cmp	r6, #19
 800af78:	d913      	bls.n	800afa2 <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800af7a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800af7e:	4a64      	ldr	r2, [pc, #400]	; (800b110 <ip4_input+0x1dc>)
 800af80:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800af82:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800af86:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800af88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af8c:	2be0      	cmp	r3, #224	; 0xe0
 800af8e:	d00c      	beq.n	800afaa <ip4_input+0x76>
 800af90:	463c      	mov	r4, r7
 800af92:	f04f 0901 	mov.w	r9, #1
 800af96:	e015      	b.n	800afc4 <ip4_input+0x90>
    pbuf_realloc(p, iphdr_len);
 800af98:	4601      	mov	r1, r0
 800af9a:	4628      	mov	r0, r5
 800af9c:	f7fa fade 	bl	800555c <pbuf_realloc>
 800afa0:	e7e3      	b.n	800af6a <ip4_input+0x36>
    pbuf_free(p);
 800afa2:	4628      	mov	r0, r5
 800afa4:	f7fa f986 	bl	80052b4 <pbuf_free>
    return ERR_OK;
 800afa8:	e7d0      	b.n	800af4c <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800afaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afae:	f013 0f01 	tst.w	r3, #1
 800afb2:	d024      	beq.n	800affe <ip4_input+0xca>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	bb23      	cbnz	r3, 800b002 <ip4_input+0xce>
      netif = NULL;
 800afb8:	2400      	movs	r4, #0
 800afba:	e025      	b.n	800b008 <ip4_input+0xd4>
        netif = netif->next;
 800afbc:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 800afbe:	42bc      	cmp	r4, r7
 800afc0:	d01b      	beq.n	800affa <ip4_input+0xc6>
    } while (netif != NULL);
 800afc2:	b30c      	cbz	r4, 800b008 <ip4_input+0xd4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800afc4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800afc8:	f013 0f01 	tst.w	r3, #1
 800afcc:	d009      	beq.n	800afe2 <ip4_input+0xae>
 800afce:	6863      	ldr	r3, [r4, #4]
 800afd0:	b13b      	cbz	r3, 800afe2 <ip4_input+0xae>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800afd2:	4a4f      	ldr	r2, [pc, #316]	; (800b110 <ip4_input+0x1dc>)
 800afd4:	6950      	ldr	r0, [r2, #20]
 800afd6:	4283      	cmp	r3, r0
 800afd8:	d016      	beq.n	800b008 <ip4_input+0xd4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800afda:	4621      	mov	r1, r4
 800afdc:	f000 f92b 	bl	800b236 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800afe0:	b990      	cbnz	r0, 800b008 <ip4_input+0xd4>
      if (first) {
 800afe2:	f1b9 0f00 	cmp.w	r9, #0
 800afe6:	d0e9      	beq.n	800afbc <ip4_input+0x88>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800afe8:	4b49      	ldr	r3, [pc, #292]	; (800b110 <ip4_input+0x1dc>)
 800afea:	7d1b      	ldrb	r3, [r3, #20]
 800afec:	2b7f      	cmp	r3, #127	; 0x7f
 800afee:	d00a      	beq.n	800b006 <ip4_input+0xd2>
        netif = netif_list;
 800aff0:	4b48      	ldr	r3, [pc, #288]	; (800b114 <ip4_input+0x1e0>)
 800aff2:	681c      	ldr	r4, [r3, #0]
        first = 0;
 800aff4:	f04f 0900 	mov.w	r9, #0
 800aff8:	e7e1      	b.n	800afbe <ip4_input+0x8a>
        netif = netif->next;
 800affa:	6824      	ldr	r4, [r4, #0]
 800affc:	e7e1      	b.n	800afc2 <ip4_input+0x8e>
      netif = NULL;
 800affe:	2400      	movs	r4, #0
 800b000:	e002      	b.n	800b008 <ip4_input+0xd4>
      netif = inp;
 800b002:	463c      	mov	r4, r7
 800b004:	e000      	b.n	800b008 <ip4_input+0xd4>
          netif = NULL;
 800b006:	2400      	movs	r4, #0
  if (netif == NULL) {
 800b008:	2c00      	cmp	r4, #0
 800b00a:	d046      	beq.n	800b09a <ip4_input+0x166>
  int check_ip_src = 1;
 800b00c:	2301      	movs	r3, #1
  if (check_ip_src
 800b00e:	b11b      	cbz	r3, 800b018 <ip4_input+0xe4>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800b010:	4b3f      	ldr	r3, [pc, #252]	; (800b110 <ip4_input+0x1dc>)
 800b012:	6918      	ldr	r0, [r3, #16]
 800b014:	2800      	cmp	r0, #0
 800b016:	d151      	bne.n	800b0bc <ip4_input+0x188>
  if (netif == NULL) {
 800b018:	2c00      	cmp	r4, #0
 800b01a:	d05d      	beq.n	800b0d8 <ip4_input+0x1a4>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b01c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800b020:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b024:	b29b      	uxth	r3, r3
 800b026:	b13b      	cbz	r3, 800b038 <ip4_input+0x104>
    p = ip4_reass(p);
 800b028:	4628      	mov	r0, r5
 800b02a:	f000 fb57 	bl	800b6dc <ip4_reass>
    if (p == NULL) {
 800b02e:	4605      	mov	r5, r0
 800b030:	2800      	cmp	r0, #0
 800b032:	d08b      	beq.n	800af4c <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 800b034:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800b038:	4a35      	ldr	r2, [pc, #212]	; (800b110 <ip4_input+0x1dc>)
 800b03a:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 800b03c:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b03e:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800b042:	f898 3000 	ldrb.w	r3, [r8]
 800b046:	f003 030f 	and.w	r3, r3, #15
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800b04e:	4271      	negs	r1, r6
 800b050:	4628      	mov	r0, r5
 800b052:	f7fa f925 	bl	80052a0 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800b056:	f898 3009 	ldrb.w	r3, [r8, #9]
 800b05a:	2b06      	cmp	r3, #6
 800b05c:	d04d      	beq.n	800b0fa <ip4_input+0x1c6>
 800b05e:	2b11      	cmp	r3, #17
 800b060:	d03e      	beq.n	800b0e0 <ip4_input+0x1ac>
 800b062:	2b01      	cmp	r3, #1
 800b064:	d04e      	beq.n	800b104 <ip4_input+0x1d0>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b066:	4621      	mov	r1, r4
 800b068:	4b29      	ldr	r3, [pc, #164]	; (800b110 <ip4_input+0x1dc>)
 800b06a:	6958      	ldr	r0, [r3, #20]
 800b06c:	f000 f8e3 	bl	800b236 <ip4_addr_isbroadcast_u32>
 800b070:	b978      	cbnz	r0, 800b092 <ip4_input+0x15e>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b072:	4b27      	ldr	r3, [pc, #156]	; (800b110 <ip4_input+0x1dc>)
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b07a:	2be0      	cmp	r3, #224	; 0xe0
 800b07c:	d009      	beq.n	800b092 <ip4_input+0x15e>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800b07e:	4631      	mov	r1, r6
 800b080:	4628      	mov	r0, r5
 800b082:	f7fa f912 	bl	80052aa <pbuf_header_force>
        p->payload = iphdr;
 800b086:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b08a:	2102      	movs	r1, #2
 800b08c:	4628      	mov	r0, r5
 800b08e:	f7ff fef5 	bl	800ae7c <icmp_dest_unreach>
      pbuf_free(p);
 800b092:	4628      	mov	r0, r5
 800b094:	f7fa f90e 	bl	80052b4 <pbuf_free>
 800b098:	e026      	b.n	800b0e8 <ip4_input+0x1b4>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800b09a:	f898 3009 	ldrb.w	r3, [r8, #9]
 800b09e:	2b11      	cmp	r3, #17
 800b0a0:	d001      	beq.n	800b0a6 <ip4_input+0x172>
  int check_ip_src = 1;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e7b3      	b.n	800b00e <ip4_input+0xda>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800b0a6:	eb08 0306 	add.w	r3, r8, r6
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800b0aa:	885b      	ldrh	r3, [r3, #2]
 800b0ac:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800b0b0:	d001      	beq.n	800b0b6 <ip4_input+0x182>
  int check_ip_src = 1;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e7ab      	b.n	800b00e <ip4_input+0xda>
        netif = inp;
 800b0b6:	463c      	mov	r4, r7
        check_ip_src = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	e7a8      	b.n	800b00e <ip4_input+0xda>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b0bc:	4639      	mov	r1, r7
 800b0be:	f000 f8ba 	bl	800b236 <ip4_addr_isbroadcast_u32>
 800b0c2:	b928      	cbnz	r0, 800b0d0 <ip4_input+0x19c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b0c4:	4b12      	ldr	r3, [pc, #72]	; (800b110 <ip4_input+0x1dc>)
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b0cc:	2be0      	cmp	r3, #224	; 0xe0
 800b0ce:	d1a3      	bne.n	800b018 <ip4_input+0xe4>
      pbuf_free(p);
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f7fa f8ef 	bl	80052b4 <pbuf_free>
      return ERR_OK;
 800b0d6:	e739      	b.n	800af4c <ip4_input+0x18>
    pbuf_free(p);
 800b0d8:	4628      	mov	r0, r5
 800b0da:	f7fa f8eb 	bl	80052b4 <pbuf_free>
    return ERR_OK;
 800b0de:	e735      	b.n	800af4c <ip4_input+0x18>
      udp_input(p, inp);
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f7fd fcdc 	bl	8008aa0 <udp_input>
  ip_data.current_netif = NULL;
 800b0e8:	4b09      	ldr	r3, [pc, #36]	; (800b110 <ip4_input+0x1dc>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b0ee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b0f0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b0f2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b0f4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b0f6:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800b0f8:	e728      	b.n	800af4c <ip4_input+0x18>
      tcp_input(p, inp);
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	f7fc fbd9 	bl	80078b4 <tcp_input>
      break;
 800b102:	e7f1      	b.n	800b0e8 <ip4_input+0x1b4>
      icmp_input(p, inp);
 800b104:	4639      	mov	r1, r7
 800b106:	4628      	mov	r0, r5
 800b108:	f7ff fe1a 	bl	800ad40 <icmp_input>
      break;
 800b10c:	e7ec      	b.n	800b0e8 <ip4_input+0x1b4>
 800b10e:	bf00      	nop
 800b110:	20003fa0 	.word	0x20003fa0
 800b114:	200076c0 	.word	0x200076c0

0800b118 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800b118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b11c:	b083      	sub	sp, #12
 800b11e:	4605      	mov	r5, r0
 800b120:	4689      	mov	r9, r1
 800b122:	4616      	mov	r6, r2
 800b124:	4698      	mov	r8, r3
 800b126:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b128:	89c3      	ldrh	r3, [r0, #14]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d006      	beq.n	800b13c <ip4_output_if_src+0x24>
 800b12e:	4b31      	ldr	r3, [pc, #196]	; (800b1f4 <ip4_output_if_src+0xdc>)
 800b130:	f240 3233 	movw	r2, #819	; 0x333
 800b134:	4930      	ldr	r1, [pc, #192]	; (800b1f8 <ip4_output_if_src+0xe0>)
 800b136:	4831      	ldr	r0, [pc, #196]	; (800b1fc <ip4_output_if_src+0xe4>)
 800b138:	f001 fd00 	bl	800cb3c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b13c:	2e00      	cmp	r6, #0
 800b13e:	d04a      	beq.n	800b1d6 <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800b140:	2114      	movs	r1, #20
 800b142:	4628      	mov	r0, r5
 800b144:	f7fa f8ac 	bl	80052a0 <pbuf_header>
 800b148:	2800      	cmp	r0, #0
 800b14a:	d150      	bne.n	800b1ee <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b14c:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b14e:	896b      	ldrh	r3, [r5, #10]
 800b150:	2b13      	cmp	r3, #19
 800b152:	d934      	bls.n	800b1be <ip4_output_if_src+0xa6>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b154:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b158:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800b15c:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b15e:	6833      	ldr	r3, [r6, #0]
 800b160:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b162:	2345      	movs	r3, #69	; 0x45
 800b164:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800b166:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800b16a:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b16c:	8928      	ldrh	r0, [r5, #8]
 800b16e:	f7f9 fbe5 	bl	800493c <lwip_htons>
 800b172:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b174:	2300      	movs	r3, #0
 800b176:	71a3      	strb	r3, [r4, #6]
 800b178:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b17a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800b208 <ip4_output_if_src+0xf0>
 800b17e:	f8b8 0000 	ldrh.w	r0, [r8]
 800b182:	f7f9 fbdb 	bl	800493c <lwip_htons>
 800b186:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b188:	f8b8 3000 	ldrh.w	r3, [r8]
 800b18c:	3301      	adds	r3, #1
 800b18e:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 800b192:	f1b9 0f00 	cmp.w	r9, #0
 800b196:	d01a      	beq.n	800b1ce <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b198:	f8d9 3000 	ldr.w	r3, [r9]
 800b19c:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b19e:	2300      	movs	r3, #0
 800b1a0:	72a3      	strb	r3, [r4, #10]
 800b1a2:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b1a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1a6:	b113      	cbz	r3, 800b1ae <ip4_output_if_src+0x96>
 800b1a8:	892a      	ldrh	r2, [r5, #8]
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d319      	bcc.n	800b1e2 <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	4632      	mov	r2, r6
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	4798      	blx	r3
}
 800b1b8:	b003      	add	sp, #12
 800b1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b1be:	4b0d      	ldr	r3, [pc, #52]	; (800b1f4 <ip4_output_if_src+0xdc>)
 800b1c0:	f240 3261 	movw	r2, #865	; 0x361
 800b1c4:	490e      	ldr	r1, [pc, #56]	; (800b200 <ip4_output_if_src+0xe8>)
 800b1c6:	480d      	ldr	r0, [pc, #52]	; (800b1fc <ip4_output_if_src+0xe4>)
 800b1c8:	f001 fcb8 	bl	800cb3c <iprintf>
 800b1cc:	e7c2      	b.n	800b154 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <ip4_output_if_src+0xec>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	60e3      	str	r3, [r4, #12]
 800b1d4:	e7e3      	b.n	800b19e <ip4_output_if_src+0x86>
    iphdr = (struct ip_hdr *)p->payload;
 800b1d6:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	ae02      	add	r6, sp, #8
 800b1dc:	f846 3d04 	str.w	r3, [r6, #-4]!
 800b1e0:	e7e0      	b.n	800b1a4 <ip4_output_if_src+0x8c>
    return ip4_frag(p, netif, dest);
 800b1e2:	4632      	mov	r2, r6
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f000 fb4c 	bl	800b884 <ip4_frag>
 800b1ec:	e7e4      	b.n	800b1b8 <ip4_output_if_src+0xa0>
      return ERR_BUF;
 800b1ee:	f06f 0001 	mvn.w	r0, #1
 800b1f2:	e7e1      	b.n	800b1b8 <ip4_output_if_src+0xa0>
 800b1f4:	0800f6fc 	.word	0x0800f6fc
 800b1f8:	0800f730 	.word	0x0800f730
 800b1fc:	0800de6c 	.word	0x0800de6c
 800b200:	0800f73c 	.word	0x0800f73c
 800b204:	0800f76c 	.word	0x0800f76c
 800b208:	20003f7e 	.word	0x20003f7e

0800b20c <ip4_output_if>:
{
 800b20c:	b530      	push	{r4, r5, lr}
 800b20e:	b085      	sub	sp, #20
 800b210:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 800b212:	4615      	mov	r5, r2
 800b214:	b11a      	cbz	r2, 800b21e <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800b216:	b109      	cbz	r1, 800b21c <ip4_output_if+0x10>
 800b218:	680a      	ldr	r2, [r1, #0]
 800b21a:	b902      	cbnz	r2, 800b21e <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800b21c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b21e:	9402      	str	r4, [sp, #8]
 800b220:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800b224:	9201      	str	r2, [sp, #4]
 800b226:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800b22a:	9200      	str	r2, [sp, #0]
 800b22c:	462a      	mov	r2, r5
 800b22e:	f7ff ff73 	bl	800b118 <ip4_output_if_src>
}
 800b232:	b005      	add	sp, #20
 800b234:	bd30      	pop	{r4, r5, pc}

0800b236 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b236:	1e43      	subs	r3, r0, #1
 800b238:	f113 0f03 	cmn.w	r3, #3
 800b23c:	d811      	bhi.n	800b262 <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b23e:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800b242:	f013 0f02 	tst.w	r3, #2
 800b246:	d00e      	beq.n	800b266 <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b248:	684b      	ldr	r3, [r1, #4]
 800b24a:	4298      	cmp	r0, r3
 800b24c:	d00d      	beq.n	800b26a <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b24e:	688a      	ldr	r2, [r1, #8]
 800b250:	4043      	eors	r3, r0
 800b252:	4213      	tst	r3, r2
 800b254:	d10b      	bne.n	800b26e <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b256:	43d2      	mvns	r2, r2
 800b258:	ea32 0300 	bics.w	r3, r2, r0
 800b25c:	d009      	beq.n	800b272 <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800b25e:	2000      	movs	r0, #0
 800b260:	4770      	bx	lr
    return 1;
 800b262:	2001      	movs	r0, #1
 800b264:	4770      	bx	lr
    return 0;
 800b266:	2000      	movs	r0, #0
 800b268:	4770      	bx	lr
    return 0;
 800b26a:	2000      	movs	r0, #0
 800b26c:	4770      	bx	lr
    return 0;
 800b26e:	2000      	movs	r0, #0
 800b270:	4770      	bx	lr
    return 1;
 800b272:	2001      	movs	r0, #1
  }
}
 800b274:	4770      	bx	lr
	...

0800b278 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b27c:	4b0c      	ldr	r3, [pc, #48]	; (800b2b0 <ip_reass_dequeue_datagram+0x38>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4283      	cmp	r3, r0
 800b282:	d008      	beq.n	800b296 <ip_reass_dequeue_datagram+0x1e>
 800b284:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b286:	b151      	cbz	r1, 800b29e <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800b288:	6823      	ldr	r3, [r4, #0]
 800b28a:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800b28c:	4621      	mov	r1, r4
 800b28e:	2004      	movs	r0, #4
 800b290:	f7f9 fe3c 	bl	8004f0c <memp_free>
 800b294:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800b296:	6802      	ldr	r2, [r0, #0]
 800b298:	4b05      	ldr	r3, [pc, #20]	; (800b2b0 <ip_reass_dequeue_datagram+0x38>)
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	e7f6      	b.n	800b28c <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b29e:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <ip_reass_dequeue_datagram+0x3c>)
 800b2a0:	f240 1245 	movw	r2, #325	; 0x145
 800b2a4:	4904      	ldr	r1, [pc, #16]	; (800b2b8 <ip_reass_dequeue_datagram+0x40>)
 800b2a6:	4805      	ldr	r0, [pc, #20]	; (800b2bc <ip_reass_dequeue_datagram+0x44>)
 800b2a8:	f001 fc48 	bl	800cb3c <iprintf>
 800b2ac:	e7ec      	b.n	800b288 <ip_reass_dequeue_datagram+0x10>
 800b2ae:	bf00      	nop
 800b2b0:	20003f84 	.word	0x20003f84
 800b2b4:	0800f864 	.word	0x0800f864
 800b2b8:	0800f8a0 	.word	0x0800f8a0
 800b2bc:	0800de6c 	.word	0x0800de6c

0800b2c0 <ip_reass_free_complete_datagram>:
{
 800b2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b2c8:	4281      	cmp	r1, r0
 800b2ca:	d015      	beq.n	800b2f8 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 800b2cc:	f1b9 0f00 	cmp.w	r9, #0
 800b2d0:	d009      	beq.n	800b2e6 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b2d2:	f8d9 3000 	ldr.w	r3, [r9]
 800b2d6:	4598      	cmp	r8, r3
 800b2d8:	d005      	beq.n	800b2e6 <ip_reass_free_complete_datagram+0x26>
 800b2da:	4b35      	ldr	r3, [pc, #212]	; (800b3b0 <ip_reass_free_complete_datagram+0xf0>)
 800b2dc:	22ad      	movs	r2, #173	; 0xad
 800b2de:	4935      	ldr	r1, [pc, #212]	; (800b3b4 <ip_reass_free_complete_datagram+0xf4>)
 800b2e0:	4835      	ldr	r0, [pc, #212]	; (800b3b8 <ip_reass_free_complete_datagram+0xf8>)
 800b2e2:	f001 fc2b 	bl	800cb3c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b2e6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b2ea:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 800b2ec:	889a      	ldrh	r2, [r3, #4]
 800b2ee:	b152      	cbz	r2, 800b306 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 800b2f0:	2600      	movs	r6, #0
  p = ipr->p;
 800b2f2:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 800b2f6:	e032      	b.n	800b35e <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b2f8:	4b2d      	ldr	r3, [pc, #180]	; (800b3b0 <ip_reass_free_complete_datagram+0xf0>)
 800b2fa:	22ab      	movs	r2, #171	; 0xab
 800b2fc:	492f      	ldr	r1, [pc, #188]	; (800b3bc <ip_reass_free_complete_datagram+0xfc>)
 800b2fe:	482e      	ldr	r0, [pc, #184]	; (800b3b8 <ip_reass_free_complete_datagram+0xf8>)
 800b300:	f001 fc1c 	bl	800cb3c <iprintf>
 800b304:	e7e2      	b.n	800b2cc <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b30c:	4643      	mov	r3, r8
 800b30e:	6862      	ldr	r2, [r4, #4]
 800b310:	f853 1f08 	ldr.w	r1, [r3, #8]!
 800b314:	685e      	ldr	r6, [r3, #4]
 800b316:	689d      	ldr	r5, [r3, #8]
 800b318:	68d8      	ldr	r0, [r3, #12]
 800b31a:	6011      	str	r1, [r2, #0]
 800b31c:	6056      	str	r6, [r2, #4]
 800b31e:	6095      	str	r5, [r2, #8]
 800b320:	60d0      	str	r0, [r2, #12]
 800b322:	6919      	ldr	r1, [r3, #16]
 800b324:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b326:	2101      	movs	r1, #1
 800b328:	4620      	mov	r0, r4
 800b32a:	f7ff fdad 	bl	800ae88 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b32e:	4620      	mov	r0, r4
 800b330:	f7fa f986 	bl	8005640 <pbuf_clen>
 800b334:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b336:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b33a:	da03      	bge.n	800b344 <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7f9 ffb9 	bl	80052b4 <pbuf_free>
 800b342:	e7d6      	b.n	800b2f2 <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b344:	4b1a      	ldr	r3, [pc, #104]	; (800b3b0 <ip_reass_free_complete_datagram+0xf0>)
 800b346:	22bc      	movs	r2, #188	; 0xbc
 800b348:	491d      	ldr	r1, [pc, #116]	; (800b3c0 <ip_reass_free_complete_datagram+0x100>)
 800b34a:	481b      	ldr	r0, [pc, #108]	; (800b3b8 <ip_reass_free_complete_datagram+0xf8>)
 800b34c:	f001 fbf6 	bl	800cb3c <iprintf>
 800b350:	e7f4      	b.n	800b33c <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed += clen;
 800b352:	4435      	add	r5, r6
 800b354:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 800b356:	4620      	mov	r0, r4
 800b358:	f7f9 ffac 	bl	80052b4 <pbuf_free>
    p = iprh->next_pbuf;
 800b35c:	463c      	mov	r4, r7
  while (p != NULL) {
 800b35e:	b184      	cbz	r4, 800b382 <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 800b360:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 800b362:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 800b364:	4620      	mov	r0, r4
 800b366:	f7fa f96b 	bl	8005640 <pbuf_clen>
 800b36a:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b36c:	1833      	adds	r3, r6, r0
 800b36e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b372:	dbee      	blt.n	800b352 <ip_reass_free_complete_datagram+0x92>
 800b374:	4b0e      	ldr	r3, [pc, #56]	; (800b3b0 <ip_reass_free_complete_datagram+0xf0>)
 800b376:	22cc      	movs	r2, #204	; 0xcc
 800b378:	4911      	ldr	r1, [pc, #68]	; (800b3c0 <ip_reass_free_complete_datagram+0x100>)
 800b37a:	480f      	ldr	r0, [pc, #60]	; (800b3b8 <ip_reass_free_complete_datagram+0xf8>)
 800b37c:	f001 fbde 	bl	800cb3c <iprintf>
 800b380:	e7e7      	b.n	800b352 <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 800b382:	4649      	mov	r1, r9
 800b384:	4640      	mov	r0, r8
 800b386:	f7ff ff77 	bl	800b278 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800b38a:	4b0e      	ldr	r3, [pc, #56]	; (800b3c4 <ip_reass_free_complete_datagram+0x104>)
 800b38c:	881b      	ldrh	r3, [r3, #0]
 800b38e:	429e      	cmp	r6, r3
 800b390:	d806      	bhi.n	800b3a0 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount -= pbufs_freed;
 800b392:	4a0c      	ldr	r2, [pc, #48]	; (800b3c4 <ip_reass_free_complete_datagram+0x104>)
 800b394:	8813      	ldrh	r3, [r2, #0]
 800b396:	1b9b      	subs	r3, r3, r6
 800b398:	8013      	strh	r3, [r2, #0]
}
 800b39a:	4630      	mov	r0, r6
 800b39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800b3a0:	4b03      	ldr	r3, [pc, #12]	; (800b3b0 <ip_reass_free_complete_datagram+0xf0>)
 800b3a2:	22d2      	movs	r2, #210	; 0xd2
 800b3a4:	4908      	ldr	r1, [pc, #32]	; (800b3c8 <ip_reass_free_complete_datagram+0x108>)
 800b3a6:	4804      	ldr	r0, [pc, #16]	; (800b3b8 <ip_reass_free_complete_datagram+0xf8>)
 800b3a8:	f001 fbc8 	bl	800cb3c <iprintf>
 800b3ac:	e7f1      	b.n	800b392 <ip_reass_free_complete_datagram+0xd2>
 800b3ae:	bf00      	nop
 800b3b0:	0800f864 	.word	0x0800f864
 800b3b4:	0800f8c8 	.word	0x0800f8c8
 800b3b8:	0800de6c 	.word	0x0800de6c
 800b3bc:	0800f8bc 	.word	0x0800f8bc
 800b3c0:	0800f8dc 	.word	0x0800f8dc
 800b3c4:	20003f80 	.word	0x20003f80
 800b3c8:	0800f8fc 	.word	0x0800f8fc

0800b3cc <ip_reass_remove_oldest_datagram>:
{
 800b3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d0:	4605      	mov	r5, r0
 800b3d2:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800b3d4:	2600      	movs	r6, #0
 800b3d6:	e02e      	b.n	800b436 <ip_reass_remove_oldest_datagram+0x6a>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b3d8:	699a      	ldr	r2, [r3, #24]
 800b3da:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800b3de:	4562      	cmp	r2, ip
 800b3e0:	d110      	bne.n	800b404 <ip_reass_remove_oldest_datagram+0x38>
 800b3e2:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800b3e6:	88aa      	ldrh	r2, [r5, #4]
 800b3e8:	4594      	cmp	ip, r2
 800b3ea:	d10b      	bne.n	800b404 <ip_reass_remove_oldest_datagram+0x38>
 800b3ec:	e001      	b.n	800b3f2 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800b3ee:	4671      	mov	r1, lr
          oldest = r;
 800b3f0:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	b18a      	cbz	r2, 800b41a <ip_reass_remove_oldest_datagram+0x4e>
 800b3f6:	469e      	mov	lr, r3
 800b3f8:	4613      	mov	r3, r2
    while (r != NULL) {
 800b3fa:	b183      	cbz	r3, 800b41e <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b3fc:	68ea      	ldr	r2, [r5, #12]
 800b3fe:	695f      	ldr	r7, [r3, #20]
 800b400:	4297      	cmp	r7, r2
 800b402:	d0e9      	beq.n	800b3d8 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 800b404:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800b406:	2800      	cmp	r0, #0
 800b408:	d0f1      	beq.n	800b3ee <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 800b40a:	f893 c01f 	ldrb.w	ip, [r3, #31]
 800b40e:	7fc2      	ldrb	r2, [r0, #31]
 800b410:	4594      	cmp	ip, r2
 800b412:	d8ee      	bhi.n	800b3f2 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800b414:	4671      	mov	r1, lr
          oldest = r;
 800b416:	4618      	mov	r0, r3
 800b418:	e7eb      	b.n	800b3f2 <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 800b41a:	4673      	mov	r3, lr
 800b41c:	e7eb      	b.n	800b3f6 <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 800b41e:	b110      	cbz	r0, 800b426 <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b420:	f7ff ff4e 	bl	800b2c0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800b424:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b426:	4546      	cmp	r6, r8
 800b428:	bfac      	ite	ge
 800b42a:	2300      	movge	r3, #0
 800b42c:	2301      	movlt	r3, #1
 800b42e:	2c01      	cmp	r4, #1
 800b430:	bfd8      	it	le
 800b432:	2300      	movle	r3, #0
 800b434:	b133      	cbz	r3, 800b444 <ip_reass_remove_oldest_datagram+0x78>
    r = reassdatagrams;
 800b436:	4b05      	ldr	r3, [pc, #20]	; (800b44c <ip_reass_remove_oldest_datagram+0x80>)
 800b438:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 800b43a:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800b43c:	4621      	mov	r1, r4
    prev = NULL;
 800b43e:	46a6      	mov	lr, r4
    oldest = NULL;
 800b440:	4620      	mov	r0, r4
    while (r != NULL) {
 800b442:	e7da      	b.n	800b3fa <ip_reass_remove_oldest_datagram+0x2e>
}
 800b444:	4630      	mov	r0, r6
 800b446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44a:	bf00      	nop
 800b44c:	20003f84 	.word	0x20003f84

0800b450 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800b450:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800b452:	4604      	mov	r4, r0
 800b454:	b120      	cbz	r0, 800b460 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800b456:	4621      	mov	r1, r4
 800b458:	2005      	movs	r0, #5
 800b45a:	f7f9 fd57 	bl	8004f0c <memp_free>
 800b45e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800b460:	4b03      	ldr	r3, [pc, #12]	; (800b470 <ip_frag_free_pbuf_custom_ref+0x20>)
 800b462:	f240 22ae 	movw	r2, #686	; 0x2ae
 800b466:	4903      	ldr	r1, [pc, #12]	; (800b474 <ip_frag_free_pbuf_custom_ref+0x24>)
 800b468:	4803      	ldr	r0, [pc, #12]	; (800b478 <ip_frag_free_pbuf_custom_ref+0x28>)
 800b46a:	f001 fb67 	bl	800cb3c <iprintf>
 800b46e:	e7f2      	b.n	800b456 <ip_frag_free_pbuf_custom_ref+0x6>
 800b470:	0800f864 	.word	0x0800f864
 800b474:	0800efec 	.word	0x0800efec
 800b478:	0800de6c 	.word	0x0800de6c

0800b47c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800b47c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b47e:	4604      	mov	r4, r0
 800b480:	b138      	cbz	r0, 800b492 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800b482:	6960      	ldr	r0, [r4, #20]
 800b484:	b108      	cbz	r0, 800b48a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800b486:	f7f9 ff15 	bl	80052b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800b48a:	4620      	mov	r0, r4
 800b48c:	f7ff ffe0 	bl	800b450 <ip_frag_free_pbuf_custom_ref>
 800b490:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b492:	4b04      	ldr	r3, [pc, #16]	; (800b4a4 <ipfrag_free_pbuf_custom+0x28>)
 800b494:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800b498:	4903      	ldr	r1, [pc, #12]	; (800b4a8 <ipfrag_free_pbuf_custom+0x2c>)
 800b49a:	4804      	ldr	r0, [pc, #16]	; (800b4ac <ipfrag_free_pbuf_custom+0x30>)
 800b49c:	f001 fb4e 	bl	800cb3c <iprintf>
 800b4a0:	e7ef      	b.n	800b482 <ipfrag_free_pbuf_custom+0x6>
 800b4a2:	bf00      	nop
 800b4a4:	0800f864 	.word	0x0800f864
 800b4a8:	0800f918 	.word	0x0800f918
 800b4ac:	0800de6c 	.word	0x0800de6c

0800b4b0 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 800b4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b4:	4680      	mov	r8, r0
 800b4b6:	460f      	mov	r7, r1
 800b4b8:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 800b4ba:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b4bc:	8860      	ldrh	r0, [r4, #2]
 800b4be:	f7f9 fa3d 	bl	800493c <lwip_htons>
 800b4c2:	7826      	ldrb	r6, [r4, #0]
 800b4c4:	f006 060f 	and.w	r6, r6, #15
 800b4c8:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 800b4cc:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b4ce:	88e0      	ldrh	r0, [r4, #6]
 800b4d0:	f7f9 fa34 	bl	800493c <lwip_htons>
 800b4d4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b4d8:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 800b4da:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 800b4dc:	2400      	movs	r4, #0
 800b4de:	702c      	strb	r4, [r5, #0]
 800b4e0:	706c      	strb	r4, [r5, #1]
 800b4e2:	70ac      	strb	r4, [r5, #2]
 800b4e4:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 800b4e6:	80a8      	strh	r0, [r5, #4]
  iprh->end = offset + len;
 800b4e8:	eb06 0e00 	add.w	lr, r6, r0
 800b4ec:	fa1f fe8e 	uxth.w	lr, lr
 800b4f0:	f8a5 e006 	strh.w	lr, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 800b4f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 800b4f8:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 800b4fa:	e033      	b.n	800b564 <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 800b4fc:	6029      	str	r1, [r5, #0]
      if (iprh_prev != NULL) {
 800b4fe:	b34c      	cbz	r4, 800b554 <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800b500:	88e2      	ldrh	r2, [r4, #6]
 800b502:	4290      	cmp	r0, r2
 800b504:	d37e      	bcc.n	800b604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
 800b506:	889b      	ldrh	r3, [r3, #4]
 800b508:	459e      	cmp	lr, r3
 800b50a:	d87b      	bhi.n	800b604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        iprh_prev->next_pbuf = new_p;
 800b50c:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 800b50e:	88ab      	ldrh	r3, [r5, #4]
 800b510:	429a      	cmp	r2, r3
 800b512:	d000      	beq.n	800b516 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 800b514:	2600      	movs	r6, #0
  if (q == NULL) {
 800b516:	2900      	cmp	r1, #0
 800b518:	d036      	beq.n	800b588 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800b51a:	f1b9 0f00 	cmp.w	r9, #0
 800b51e:	d104      	bne.n	800b52a <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 800b520:	f898 301e 	ldrb.w	r3, [r8, #30]
 800b524:	f013 0f01 	tst.w	r3, #1
 800b528:	d07a      	beq.n	800b620 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
    if (valid) {
 800b52a:	2e00      	cmp	r6, #0
 800b52c:	d067      	beq.n	800b5fe <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800b52e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d060      	beq.n	800b5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 800b536:	6858      	ldr	r0, [r3, #4]
 800b538:	8883      	ldrh	r3, [r0, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d15e      	bne.n	800b5fc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 800b53e:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 800b540:	2a00      	cmp	r2, #0
 800b542:	d044      	beq.n	800b5ce <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 800b544:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 800b546:	88e9      	ldrh	r1, [r5, #6]
 800b548:	889a      	ldrh	r2, [r3, #4]
 800b54a:	4291      	cmp	r1, r2
 800b54c:	d13d      	bne.n	800b5ca <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 800b54e:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 800b550:	461d      	mov	r5, r3
 800b552:	e7f5      	b.n	800b540 <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 800b554:	889b      	ldrh	r3, [r3, #4]
 800b556:	459e      	cmp	lr, r3
 800b558:	d854      	bhi.n	800b604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        ipr->p = new_p;
 800b55a:	f8c8 7004 	str.w	r7, [r8, #4]
 800b55e:	e7da      	b.n	800b516 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 800b560:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 800b562:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 800b564:	2900      	cmp	r1, #0
 800b566:	d0d6      	beq.n	800b516 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800b568:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800b56a:	889a      	ldrh	r2, [r3, #4]
 800b56c:	4290      	cmp	r0, r2
 800b56e:	d3c5      	bcc.n	800b4fc <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 800b570:	4290      	cmp	r0, r2
 800b572:	d047      	beq.n	800b604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start < iprh_tmp->end) {
 800b574:	88d9      	ldrh	r1, [r3, #6]
 800b576:	4288      	cmp	r0, r1
 800b578:	d344      	bcc.n	800b604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      if (iprh_prev != NULL) {
 800b57a:	2c00      	cmp	r4, #0
 800b57c:	d0f0      	beq.n	800b560 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 800b57e:	88e1      	ldrh	r1, [r4, #6]
 800b580:	428a      	cmp	r2, r1
 800b582:	d0ed      	beq.n	800b560 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 800b584:	2600      	movs	r6, #0
 800b586:	e7eb      	b.n	800b560 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 800b588:	b194      	cbz	r4, 800b5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b58a:	88e2      	ldrh	r2, [r4, #6]
 800b58c:	88ab      	ldrh	r3, [r5, #4]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d806      	bhi.n	800b5a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 800b592:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 800b594:	88e2      	ldrh	r2, [r4, #6]
 800b596:	88ab      	ldrh	r3, [r5, #4]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d0be      	beq.n	800b51a <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 800b59c:	2600      	movs	r6, #0
 800b59e:	e7bc      	b.n	800b51a <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b5a0:	4b21      	ldr	r3, [pc, #132]	; (800b628 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 800b5a2:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b5a6:	4921      	ldr	r1, [pc, #132]	; (800b62c <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 800b5a8:	4821      	ldr	r0, [pc, #132]	; (800b630 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 800b5aa:	f001 fac7 	bl	800cb3c <iprintf>
 800b5ae:	e7f0      	b.n	800b592 <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800b5b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5b4:	b133      	cbz	r3, 800b5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 800b5b6:	4b1c      	ldr	r3, [pc, #112]	; (800b628 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 800b5b8:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800b5bc:	491d      	ldr	r1, [pc, #116]	; (800b634 <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 800b5be:	481c      	ldr	r0, [pc, #112]	; (800b630 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 800b5c0:	f001 fabc 	bl	800cb3c <iprintf>
      ipr->p = new_p;
 800b5c4:	f8c8 7004 	str.w	r7, [r8, #4]
 800b5c8:	e7a7      	b.n	800b51a <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 800b5ca:	461d      	mov	r5, r3
            valid = 0;
 800b5cc:	2600      	movs	r6, #0
        if (valid) {
 800b5ce:	b1b6      	cbz	r6, 800b5fe <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 800b5d0:	4285      	cmp	r5, r0
 800b5d2:	d009      	beq.n	800b5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b193      	cbz	r3, 800b5fe <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 800b5d8:	4b13      	ldr	r3, [pc, #76]	; (800b628 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 800b5da:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800b5de:	4916      	ldr	r1, [pc, #88]	; (800b638 <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 800b5e0:	4813      	ldr	r0, [pc, #76]	; (800b630 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 800b5e2:	f001 faab 	bl	800cb3c <iprintf>
 800b5e6:	e00a      	b.n	800b5fe <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 800b5e8:	4b0f      	ldr	r3, [pc, #60]	; (800b628 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 800b5ea:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b5ee:	4913      	ldr	r1, [pc, #76]	; (800b63c <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 800b5f0:	480f      	ldr	r0, [pc, #60]	; (800b630 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 800b5f2:	f001 faa3 	bl	800cb3c <iprintf>
 800b5f6:	e7ed      	b.n	800b5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 800b5f8:	2600      	movs	r6, #0
 800b5fa:	e000      	b.n	800b5fe <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 800b5fc:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800b5fe:	4630      	mov	r0, r6
 800b600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800b604:	4638      	mov	r0, r7
 800b606:	f7fa f81b 	bl	8005640 <pbuf_clen>
 800b60a:	4a0d      	ldr	r2, [pc, #52]	; (800b640 <ip_reass_chain_frag_into_datagram_and_validate+0x190>)
 800b60c:	8813      	ldrh	r3, [r2, #0]
 800b60e:	1a18      	subs	r0, r3, r0
 800b610:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 800b612:	4638      	mov	r0, r7
 800b614:	f7f9 fe4e 	bl	80052b4 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b620:	4648      	mov	r0, r9
}
 800b622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b626:	bf00      	nop
 800b628:	0800f864 	.word	0x0800f864
 800b62c:	0800f7d8 	.word	0x0800f7d8
 800b630:	0800de6c 	.word	0x0800de6c
 800b634:	0800f7f8 	.word	0x0800f7f8
 800b638:	0800f840 	.word	0x0800f840
 800b63c:	0800f830 	.word	0x0800f830
 800b640:	20003f80 	.word	0x20003f80

0800b644 <ip_frag_alloc_pbuf_custom_ref>:
{
 800b644:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800b646:	2005      	movs	r0, #5
 800b648:	f7f9 fc46 	bl	8004ed8 <memp_malloc>
}
 800b64c:	bd08      	pop	{r3, pc}
	...

0800b650 <ip_reass_enqueue_new_datagram>:
{
 800b650:	b570      	push	{r4, r5, r6, lr}
 800b652:	4605      	mov	r5, r0
 800b654:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b656:	2004      	movs	r0, #4
 800b658:	f7f9 fc3e 	bl	8004ed8 <memp_malloc>
  if (ipr == NULL) {
 800b65c:	4604      	mov	r4, r0
 800b65e:	b1b0      	cbz	r0, 800b68e <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b660:	2220      	movs	r2, #32
 800b662:	2100      	movs	r1, #0
 800b664:	4620      	mov	r0, r4
 800b666:	f001 fa61 	bl	800cb2c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b66a:	2303      	movs	r3, #3
 800b66c:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800b66e:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <ip_reass_enqueue_new_datagram+0x5c>)
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800b674:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b676:	682a      	ldr	r2, [r5, #0]
 800b678:	686e      	ldr	r6, [r5, #4]
 800b67a:	68a8      	ldr	r0, [r5, #8]
 800b67c:	68e9      	ldr	r1, [r5, #12]
 800b67e:	60a2      	str	r2, [r4, #8]
 800b680:	60e6      	str	r6, [r4, #12]
 800b682:	6120      	str	r0, [r4, #16]
 800b684:	6161      	str	r1, [r4, #20]
 800b686:	692a      	ldr	r2, [r5, #16]
 800b688:	61a2      	str	r2, [r4, #24]
}
 800b68a:	4620      	mov	r0, r4
 800b68c:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b68e:	4631      	mov	r1, r6
 800b690:	4628      	mov	r0, r5
 800b692:	f7ff fe9b 	bl	800b3cc <ip_reass_remove_oldest_datagram>
 800b696:	4286      	cmp	r6, r0
 800b698:	dd02      	ble.n	800b6a0 <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 800b69a:	2c00      	cmp	r4, #0
 800b69c:	d1e0      	bne.n	800b660 <ip_reass_enqueue_new_datagram+0x10>
 800b69e:	e7f4      	b.n	800b68a <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b6a0:	2004      	movs	r0, #4
 800b6a2:	f7f9 fc19 	bl	8004ed8 <memp_malloc>
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	e7f7      	b.n	800b69a <ip_reass_enqueue_new_datagram+0x4a>
 800b6aa:	bf00      	nop
 800b6ac:	20003f84 	.word	0x20003f84

0800b6b0 <ip_reass_tmr>:
{
 800b6b0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800b6b2:	4b09      	ldr	r3, [pc, #36]	; (800b6d8 <ip_reass_tmr+0x28>)
 800b6b4:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800b6b6:	2400      	movs	r4, #0
  while (r != NULL) {
 800b6b8:	e004      	b.n	800b6c4 <ip_reass_tmr+0x14>
      r = r->next;
 800b6ba:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800b6bc:	4621      	mov	r1, r4
 800b6be:	f7ff fdff 	bl	800b2c0 <ip_reass_free_complete_datagram>
      r = r->next;
 800b6c2:	4628      	mov	r0, r5
  while (r != NULL) {
 800b6c4:	b138      	cbz	r0, 800b6d6 <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 800b6c6:	7fc3      	ldrb	r3, [r0, #31]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d0f6      	beq.n	800b6ba <ip_reass_tmr+0xa>
      r->timer--;
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	77c3      	strb	r3, [r0, #31]
      prev = r;
 800b6d0:	4604      	mov	r4, r0
      r = r->next;
 800b6d2:	6800      	ldr	r0, [r0, #0]
 800b6d4:	e7f6      	b.n	800b6c4 <ip_reass_tmr+0x14>
}
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	20003f84 	.word	0x20003f84

0800b6dc <ip4_reass>:
{
 800b6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6e0:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 800b6e2:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800b6e4:	782b      	ldrb	r3, [r5, #0]
 800b6e6:	f003 030f 	and.w	r3, r3, #15
 800b6ea:	2b05      	cmp	r3, #5
 800b6ec:	d124      	bne.n	800b738 <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b6ee:	88e8      	ldrh	r0, [r5, #6]
 800b6f0:	f7f9 f924 	bl	800493c <lwip_htons>
 800b6f4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b6f8:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b6fa:	8868      	ldrh	r0, [r5, #2]
 800b6fc:	f7f9 f91e 	bl	800493c <lwip_htons>
 800b700:	782e      	ldrb	r6, [r5, #0]
 800b702:	f006 060f 	and.w	r6, r6, #15
 800b706:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 800b70a:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 800b70c:	4648      	mov	r0, r9
 800b70e:	f7f9 ff97 	bl	8005640 <pbuf_clen>
 800b712:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b714:	4b59      	ldr	r3, [pc, #356]	; (800b87c <ip4_reass+0x1a0>)
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	4403      	add	r3, r0
 800b71a:	2b0a      	cmp	r3, #10
 800b71c:	dc02      	bgt.n	800b724 <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b71e:	4b58      	ldr	r3, [pc, #352]	; (800b880 <ip4_reass+0x1a4>)
 800b720:	681c      	ldr	r4, [r3, #0]
 800b722:	e00f      	b.n	800b744 <ip4_reass+0x68>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b724:	4601      	mov	r1, r0
 800b726:	4628      	mov	r0, r5
 800b728:	f7ff fe50 	bl	800b3cc <ip_reass_remove_oldest_datagram>
 800b72c:	b120      	cbz	r0, 800b738 <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800b72e:	4b53      	ldr	r3, [pc, #332]	; (800b87c <ip4_reass+0x1a0>)
 800b730:	881b      	ldrh	r3, [r3, #0]
 800b732:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b734:	2b0a      	cmp	r3, #10
 800b736:	ddf2      	ble.n	800b71e <ip4_reass+0x42>
  pbuf_free(p);
 800b738:	4648      	mov	r0, r9
 800b73a:	f7f9 fdbb 	bl	80052b4 <pbuf_free>
  return NULL;
 800b73e:	2700      	movs	r7, #0
 800b740:	e096      	b.n	800b870 <ip4_reass+0x194>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b742:	6824      	ldr	r4, [r4, #0]
 800b744:	b15c      	cbz	r4, 800b75e <ip4_reass+0x82>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800b746:	6962      	ldr	r2, [r4, #20]
 800b748:	68eb      	ldr	r3, [r5, #12]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d1f9      	bne.n	800b742 <ip4_reass+0x66>
 800b74e:	69a2      	ldr	r2, [r4, #24]
 800b750:	692b      	ldr	r3, [r5, #16]
 800b752:	429a      	cmp	r2, r3
 800b754:	d1f5      	bne.n	800b742 <ip4_reass+0x66>
 800b756:	89a2      	ldrh	r2, [r4, #12]
 800b758:	88ab      	ldrh	r3, [r5, #4]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d1f1      	bne.n	800b742 <ip4_reass+0x66>
  if (ipr == NULL) {
 800b75e:	2c00      	cmp	r4, #0
 800b760:	d048      	beq.n	800b7f4 <ip4_reass+0x118>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b762:	88e8      	ldrh	r0, [r5, #6]
 800b764:	f7f9 f8ea 	bl	800493c <lwip_htons>
 800b768:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d049      	beq.n	800b804 <ip4_reass+0x128>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800b770:	88ed      	ldrh	r5, [r5, #6]
 800b772:	f005 0520 	and.w	r5, r5, #32
 800b776:	2d00      	cmp	r5, #0
 800b778:	bf0c      	ite	eq
 800b77a:	2201      	moveq	r2, #1
 800b77c:	2200      	movne	r2, #0
  if (is_last) {
 800b77e:	d107      	bne.n	800b790 <ip4_reass+0xb4>
    u16_t datagram_len = (u16_t)(offset + len);
 800b780:	19bb      	adds	r3, r7, r6
 800b782:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800b784:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 800b788:	428b      	cmp	r3, r1
 800b78a:	bf98      	it	ls
 800b78c:	429f      	cmpls	r7, r3
 800b78e:	d8d3      	bhi.n	800b738 <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800b790:	4649      	mov	r1, r9
 800b792:	4620      	mov	r0, r4
 800b794:	f7ff fe8c 	bl	800b4b0 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800b798:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b79c:	d0cc      	beq.n	800b738 <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800b79e:	4b37      	ldr	r3, [pc, #220]	; (800b87c <ip4_reass+0x1a0>)
 800b7a0:	881a      	ldrh	r2, [r3, #0]
 800b7a2:	4490      	add	r8, r2
 800b7a4:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 800b7a8:	b92d      	cbnz	r5, 800b7b6 <ip4_reass+0xda>
    u16_t datagram_len = (u16_t)(offset + len);
 800b7aa:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 800b7ac:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800b7ae:	7fa3      	ldrb	r3, [r4, #30]
 800b7b0:	f043 0301 	orr.w	r3, r3, #1
 800b7b4:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800b7b6:	2801      	cmp	r0, #1
 800b7b8:	d15d      	bne.n	800b876 <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 800b7ba:	8ba3      	ldrh	r3, [r4, #28]
 800b7bc:	3314      	adds	r3, #20
 800b7be:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800b7c0:	6863      	ldr	r3, [r4, #4]
 800b7c2:	685e      	ldr	r6, [r3, #4]
 800b7c4:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800b7c6:	4623      	mov	r3, r4
 800b7c8:	f853 2f08 	ldr.w	r2, [r3, #8]!
 800b7cc:	685f      	ldr	r7, [r3, #4]
 800b7ce:	6898      	ldr	r0, [r3, #8]
 800b7d0:	68d9      	ldr	r1, [r3, #12]
 800b7d2:	6032      	str	r2, [r6, #0]
 800b7d4:	6077      	str	r7, [r6, #4]
 800b7d6:	60b0      	str	r0, [r6, #8]
 800b7d8:	60f1      	str	r1, [r6, #12]
 800b7da:	691a      	ldr	r2, [r3, #16]
 800b7dc:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800b7de:	8ba0      	ldrh	r0, [r4, #28]
 800b7e0:	f7f9 f8ac 	bl	800493c <lwip_htons>
 800b7e4:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	71b3      	strb	r3, [r6, #6]
 800b7ea:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800b7ec:	72b3      	strb	r3, [r6, #10]
 800b7ee:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800b7f0:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 800b7f2:	e026      	b.n	800b842 <ip4_reass+0x166>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800b7f4:	4641      	mov	r1, r8
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f7ff ff2a 	bl	800b650 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d1b6      	bne.n	800b770 <ip4_reass+0x94>
 800b802:	e799      	b.n	800b738 <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800b804:	89e0      	ldrh	r0, [r4, #14]
 800b806:	f7f9 f899 	bl	800493c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b80a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b80e:	2800      	cmp	r0, #0
 800b810:	d0ae      	beq.n	800b770 <ip4_reass+0x94>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800b812:	682a      	ldr	r2, [r5, #0]
 800b814:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800b818:	68a8      	ldr	r0, [r5, #8]
 800b81a:	68e9      	ldr	r1, [r5, #12]
 800b81c:	60a2      	str	r2, [r4, #8]
 800b81e:	f8c4 e00c 	str.w	lr, [r4, #12]
 800b822:	6120      	str	r0, [r4, #16]
 800b824:	6161      	str	r1, [r4, #20]
 800b826:	692a      	ldr	r2, [r5, #16]
 800b828:	61a2      	str	r2, [r4, #24]
 800b82a:	e7a1      	b.n	800b770 <ip4_reass+0x94>
      iprh = (struct ip_reass_helper*)r->payload;
 800b82c:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 800b82e:	f06f 0113 	mvn.w	r1, #19
 800b832:	4628      	mov	r0, r5
 800b834:	f7f9 fd34 	bl	80052a0 <pbuf_header>
      pbuf_cat(p, r);
 800b838:	4629      	mov	r1, r5
 800b83a:	4638      	mov	r0, r7
 800b83c:	f7f9 ff26 	bl	800568c <pbuf_cat>
      r = iprh->next_pbuf;
 800b840:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 800b842:	2d00      	cmp	r5, #0
 800b844:	d1f2      	bne.n	800b82c <ip4_reass+0x150>
    if (ipr == reassdatagrams) {
 800b846:	4b0e      	ldr	r3, [pc, #56]	; (800b880 <ip4_reass+0x1a4>)
 800b848:	6819      	ldr	r1, [r3, #0]
 800b84a:	428c      	cmp	r4, r1
 800b84c:	d005      	beq.n	800b85a <ip4_reass+0x17e>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b84e:	b129      	cbz	r1, 800b85c <ip4_reass+0x180>
        if (ipr_prev->next == ipr) {
 800b850:	680b      	ldr	r3, [r1, #0]
 800b852:	429c      	cmp	r4, r3
 800b854:	d002      	beq.n	800b85c <ip4_reass+0x180>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b856:	4619      	mov	r1, r3
 800b858:	e7f9      	b.n	800b84e <ip4_reass+0x172>
      ipr_prev = NULL;
 800b85a:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7ff fd0b 	bl	800b278 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800b862:	4638      	mov	r0, r7
 800b864:	f7f9 feec 	bl	8005640 <pbuf_clen>
 800b868:	4a04      	ldr	r2, [pc, #16]	; (800b87c <ip4_reass+0x1a0>)
 800b86a:	8813      	ldrh	r3, [r2, #0]
 800b86c:	1a18      	subs	r0, r3, r0
 800b86e:	8010      	strh	r0, [r2, #0]
}
 800b870:	4638      	mov	r0, r7
 800b872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return NULL;
 800b876:	2700      	movs	r7, #0
 800b878:	e7fa      	b.n	800b870 <ip4_reass+0x194>
 800b87a:	bf00      	nop
 800b87c:	20003f80 	.word	0x20003f80
 800b880:	20003f84 	.word	0x20003f84

0800b884 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800b884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	b08d      	sub	sp, #52	; 0x34
 800b88a:	4605      	mov	r5, r0
 800b88c:	9107      	str	r1, [sp, #28]
 800b88e:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800b890:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
 800b892:	3b14      	subs	r3, #20
 800b894:	d420      	bmi.n	800b8d8 <ip4_frag+0x54>
 800b896:	10db      	asrs	r3, r3, #3
 800b898:	9309      	str	r3, [sp, #36]	; 0x24
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800b89e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800b8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a6:	f003 030f 	and.w	r3, r3, #15
 800b8aa:	2b05      	cmp	r3, #5
 800b8ac:	d116      	bne.n	800b8dc <ip4_frag+0x58>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800b8ae:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800b8b2:	f7f9 f843 	bl	800493c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800b8b6:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800b8ba:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800b8bc:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800b8c0:	d116      	bne.n	800b8f0 <ip4_frag+0x6c>

  left = p->tot_len - IP_HLEN;
 800b8c2:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800b8c6:	f1a9 0914 	sub.w	r9, r9, #20
 800b8ca:	fa1f fb89 	uxth.w	fp, r9
  u16_t poff = IP_HLEN;
 800b8ce:	f04f 0814 	mov.w	r8, #20
  u16_t newpbuflen = 0;
 800b8d2:	2400      	movs	r4, #0
 800b8d4:	46d9      	mov	r9, fp

  while (left) {
 800b8d6:	e08c      	b.n	800b9f2 <ip4_frag+0x16e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800b8d8:	3307      	adds	r3, #7
 800b8da:	e7dc      	b.n	800b896 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800b8dc:	4b5e      	ldr	r3, [pc, #376]	; (800ba58 <ip4_frag+0x1d4>)
 800b8de:	f240 22e1 	movw	r2, #737	; 0x2e1
 800b8e2:	495e      	ldr	r1, [pc, #376]	; (800ba5c <ip4_frag+0x1d8>)
 800b8e4:	485e      	ldr	r0, [pc, #376]	; (800ba60 <ip4_frag+0x1dc>)
 800b8e6:	f001 f929 	bl	800cb3c <iprintf>
 800b8ea:	f06f 0005 	mvn.w	r0, #5
 800b8ee:	e043      	b.n	800b978 <ip4_frag+0xf4>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800b8f0:	4b59      	ldr	r3, [pc, #356]	; (800ba58 <ip4_frag+0x1d4>)
 800b8f2:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b8f6:	495b      	ldr	r1, [pc, #364]	; (800ba64 <ip4_frag+0x1e0>)
 800b8f8:	4859      	ldr	r0, [pc, #356]	; (800ba60 <ip4_frag+0x1dc>)
 800b8fa:	f001 f91f 	bl	800cb3c <iprintf>
 800b8fe:	f06f 0005 	mvn.w	r0, #5
 800b902:	e039      	b.n	800b978 <ip4_frag+0xf4>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b904:	4b54      	ldr	r3, [pc, #336]	; (800ba58 <ip4_frag+0x1d4>)
 800b906:	f240 3209 	movw	r2, #777	; 0x309
 800b90a:	4957      	ldr	r1, [pc, #348]	; (800ba68 <ip4_frag+0x1e4>)
 800b90c:	4854      	ldr	r0, [pc, #336]	; (800ba60 <ip4_frag+0x1dc>)
 800b90e:	f001 f915 	bl	800cb3c <iprintf>
 800b912:	e086      	b.n	800ba22 <ip4_frag+0x19e>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800b914:	f7ff fe96 	bl	800b644 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 800b918:	4607      	mov	r7, r0
 800b91a:	b340      	cbz	r0, 800b96e <ip4_frag+0xea>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 800b91c:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b91e:	4443      	add	r3, r8
 800b920:	9401      	str	r4, [sp, #4]
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	4603      	mov	r3, r0
 800b926:	2202      	movs	r2, #2
 800b928:	4621      	mov	r1, r4
 800b92a:	2004      	movs	r0, #4
 800b92c:	f7f9 fc7c 	bl	8005228 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800b930:	9003      	str	r0, [sp, #12]
 800b932:	b320      	cbz	r0, 800b97e <ip4_frag+0xfa>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800b934:	4628      	mov	r0, r5
 800b936:	f7f9 fe8d 	bl	8005654 <pbuf_ref>
      pcr->original = p;
 800b93a:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b93c:	4b4b      	ldr	r3, [pc, #300]	; (800ba6c <ip4_frag+0x1e8>)
 800b93e:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800b940:	9903      	ldr	r1, [sp, #12]
 800b942:	9804      	ldr	r0, [sp, #16]
 800b944:	f7f9 fea2 	bl	800568c <pbuf_cat>
      left_to_copy -= newpbuflen;
 800b948:	1b36      	subs	r6, r6, r4
 800b94a:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800b94c:	b116      	cbz	r6, 800b954 <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 800b94e:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800b950:	f04f 0800 	mov.w	r8, #0
    while (left_to_copy) {
 800b954:	b1e6      	cbz	r6, 800b990 <ip4_frag+0x10c>
      u16_t plen = p->len - poff;
 800b956:	896c      	ldrh	r4, [r5, #10]
 800b958:	eba4 0408 	sub.w	r4, r4, r8
 800b95c:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b95e:	42b4      	cmp	r4, r6
 800b960:	bf28      	it	cs
 800b962:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 800b964:	2c00      	cmp	r4, #0
 800b966:	d1d5      	bne.n	800b914 <ip4_frag+0x90>
        p = p->next;
 800b968:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800b96a:	46a0      	mov	r8, r4
        continue;
 800b96c:	e7f2      	b.n	800b954 <ip4_frag+0xd0>
        pbuf_free(rambuf);
 800b96e:	9804      	ldr	r0, [sp, #16]
 800b970:	f7f9 fca0 	bl	80052b4 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b978:	b00d      	add	sp, #52	; 0x34
 800b97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800b97e:	4638      	mov	r0, r7
 800b980:	f7ff fd66 	bl	800b450 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800b984:	9804      	ldr	r0, [sp, #16]
 800b986:	f7f9 fc95 	bl	80052b4 <pbuf_free>
  return ERR_MEM;
 800b98a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        goto memerr;
 800b98e:	e7f3      	b.n	800b978 <ip4_frag+0xf4>
    poff += newpbuflen;
 800b990:	44a0      	add	r8, r4
 800b992:	fa1f f888 	uxth.w	r8, r8
    last = (left <= netif->mtu - IP_HLEN);
 800b996:	9b07      	ldr	r3, [sp, #28]
 800b998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b99a:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 800b99c:	9a06      	ldr	r2, [sp, #24]
 800b99e:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 800b9a2:	9a08      	ldr	r2, [sp, #32]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	dd01      	ble.n	800b9ac <ip4_frag+0x128>
      tmp = tmp | IP_MF;
 800b9a8:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b9ac:	f7f8 ffc6 	bl	800493c <lwip_htons>
 800b9b0:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800b9b4:	9e05      	ldr	r6, [sp, #20]
 800b9b6:	f106 0014 	add.w	r0, r6, #20
 800b9ba:	b280      	uxth	r0, r0
 800b9bc:	f7f8 ffbe 	bl	800493c <lwip_htons>
 800b9c0:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f88b 300a 	strb.w	r3, [fp, #10]
 800b9ca:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 800b9ce:	9807      	ldr	r0, [sp, #28]
 800b9d0:	6943      	ldr	r3, [r0, #20]
 800b9d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9d4:	9f04      	ldr	r7, [sp, #16]
 800b9d6:	4639      	mov	r1, r7
 800b9d8:	4798      	blx	r3
    pbuf_free(rambuf);
 800b9da:	4638      	mov	r0, r7
 800b9dc:	f7f9 fc6a 	bl	80052b4 <pbuf_free>
    left -= fragsize;
 800b9e0:	eba9 0306 	sub.w	r3, r9, r6
 800b9e4:	fa1f f983 	uxth.w	r9, r3
    ofo += nfb;
 800b9e8:	9b06      	ldr	r3, [sp, #24]
 800b9ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9ec:	4413      	add	r3, r2
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	9306      	str	r3, [sp, #24]
  while (left) {
 800b9f2:	f1b9 0f00 	cmp.w	r9, #0
 800b9f6:	d029      	beq.n	800ba4c <ip4_frag+0x1c8>
    fragsize = LWIP_MIN(left, nfb * 8);
 800b9f8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b9fc:	00db      	lsls	r3, r3, #3
 800b9fe:	f8cd 9020 	str.w	r9, [sp, #32]
 800ba02:	454b      	cmp	r3, r9
 800ba04:	bfa8      	it	ge
 800ba06:	464b      	movge	r3, r9
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2114      	movs	r1, #20
 800ba10:	2002      	movs	r0, #2
 800ba12:	f7f9 fcbb 	bl	800538c <pbuf_alloc>
    if (rambuf == NULL) {
 800ba16:	9004      	str	r0, [sp, #16]
 800ba18:	b1d0      	cbz	r0, 800ba50 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ba1a:	896b      	ldrh	r3, [r5, #10]
 800ba1c:	2b13      	cmp	r3, #19
 800ba1e:	f67f af71 	bls.w	800b904 <ip4_frag+0x80>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ba22:	9f04      	ldr	r7, [sp, #16]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8da 2000 	ldr.w	r2, [sl]
 800ba2a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800ba2e:	f8da 0008 	ldr.w	r0, [sl, #8]
 800ba32:	f8da 100c 	ldr.w	r1, [sl, #12]
 800ba36:	601a      	str	r2, [r3, #0]
 800ba38:	605e      	str	r6, [r3, #4]
 800ba3a:	6098      	str	r0, [r3, #8]
 800ba3c:	60d9      	str	r1, [r3, #12]
 800ba3e:	f8da 2010 	ldr.w	r2, [sl, #16]
 800ba42:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ba44:	f8d7 b004 	ldr.w	fp, [r7, #4]
    left_to_copy = fragsize;
 800ba48:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 800ba4a:	e783      	b.n	800b954 <ip4_frag+0xd0>
  return ERR_OK;
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e793      	b.n	800b978 <ip4_frag+0xf4>
  return ERR_MEM;
 800ba50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba54:	e790      	b.n	800b978 <ip4_frag+0xf4>
 800ba56:	bf00      	nop
 800ba58:	0800f864 	.word	0x0800f864
 800ba5c:	0800f774 	.word	0x0800f774
 800ba60:	0800de6c 	.word	0x0800de6c
 800ba64:	0800f79c 	.word	0x0800f79c
 800ba68:	0800f7b8 	.word	0x0800f7b8
 800ba6c:	0800b47d 	.word	0x0800b47d

0800ba70 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba72:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800ba74:	8945      	ldrh	r5, [r0, #10]
 800ba76:	2d0e      	cmp	r5, #14
 800ba78:	d916      	bls.n	800baa8 <ethernet_input+0x38>
 800ba7a:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ba7c:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ba7e:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ba80:	7803      	ldrb	r3, [r0, #0]
 800ba82:	f013 0f01 	tst.w	r3, #1
 800ba86:	d00a      	beq.n	800ba9e <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d012      	beq.n	800bab2 <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ba8c:	2206      	movs	r2, #6
 800ba8e:	4921      	ldr	r1, [pc, #132]	; (800bb14 <ethernet_input+0xa4>)
 800ba90:	f001 f832 	bl	800caf8 <memcmp>
 800ba94:	b918      	cbnz	r0, 800ba9e <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ba96:	7b63      	ldrb	r3, [r4, #13]
 800ba98:	f043 0308 	orr.w	r3, r3, #8
 800ba9c:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800ba9e:	2e08      	cmp	r6, #8
 800baa0:	d012      	beq.n	800bac8 <ethernet_input+0x58>
 800baa2:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800baa6:	d022      	beq.n	800baee <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800baa8:	4620      	mov	r0, r4
 800baaa:	f7f9 fc03 	bl	80052b4 <pbuf_free>
  return ERR_OK;
}
 800baae:	2000      	movs	r0, #0
 800bab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800bab2:	7843      	ldrb	r3, [r0, #1]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1f2      	bne.n	800ba9e <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800bab8:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800baba:	2b5e      	cmp	r3, #94	; 0x5e
 800babc:	d1ef      	bne.n	800ba9e <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 800babe:	7b63      	ldrb	r3, [r4, #13]
 800bac0:	f043 0310 	orr.w	r3, r3, #16
 800bac4:	7363      	strb	r3, [r4, #13]
 800bac6:	e7ea      	b.n	800ba9e <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800bac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bacc:	f013 0f08 	tst.w	r3, #8
 800bad0:	d0ea      	beq.n	800baa8 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800bad2:	2d0d      	cmp	r5, #13
 800bad4:	dde8      	ble.n	800baa8 <ethernet_input+0x38>
 800bad6:	f06f 010d 	mvn.w	r1, #13
 800bada:	4620      	mov	r0, r4
 800badc:	f7f9 fbe0 	bl	80052a0 <pbuf_header>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d1e1      	bne.n	800baa8 <ethernet_input+0x38>
        ip4_input(p, netif);
 800bae4:	4639      	mov	r1, r7
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7ff fa24 	bl	800af34 <ip4_input>
      break;
 800baec:	e7df      	b.n	800baae <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800baee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baf2:	f013 0f08 	tst.w	r3, #8
 800baf6:	d0d7      	beq.n	800baa8 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800baf8:	2d0d      	cmp	r5, #13
 800bafa:	ddd5      	ble.n	800baa8 <ethernet_input+0x38>
 800bafc:	f06f 010d 	mvn.w	r1, #13
 800bb00:	4620      	mov	r0, r4
 800bb02:	f7f9 fbcd 	bl	80052a0 <pbuf_header>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d1ce      	bne.n	800baa8 <ethernet_input+0x38>
        etharp_input(p, netif);
 800bb0a:	4639      	mov	r1, r7
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f7fe fe1f 	bl	800a750 <etharp_input>
      break;
 800bb12:	e7cc      	b.n	800baae <ethernet_input+0x3e>
 800bb14:	0800f924 	.word	0x0800f924

0800bb18 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800bb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	460c      	mov	r4, r1
 800bb20:	4616      	mov	r6, r2
 800bb22:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800bb24:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800bb28:	f7f8 ff08 	bl	800493c <lwip_htons>
 800bb2c:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800bb2e:	210e      	movs	r1, #14
 800bb30:	4620      	mov	r0, r4
 800bb32:	f7f9 fbb5 	bl	80052a0 <pbuf_header>
 800bb36:	b9e0      	cbnz	r0, 800bb72 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800bb38:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 800bb3a:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	88ba      	ldrh	r2, [r7, #4]
 800bb44:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800bb46:	6832      	ldr	r2, [r6, #0]
 800bb48:	f8c3 2006 	str.w	r2, [r3, #6]
 800bb4c:	88b2      	ldrh	r2, [r6, #4]
 800bb4e:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800bb50:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800bb54:	2b06      	cmp	r3, #6
 800bb56:	d006      	beq.n	800bb66 <ethernet_output+0x4e>
 800bb58:	4b08      	ldr	r3, [pc, #32]	; (800bb7c <ethernet_output+0x64>)
 800bb5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bb5e:	4908      	ldr	r1, [pc, #32]	; (800bb80 <ethernet_output+0x68>)
 800bb60:	4808      	ldr	r0, [pc, #32]	; (800bb84 <ethernet_output+0x6c>)
 800bb62:	f000 ffeb 	bl	800cb3c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800bb66:	69ab      	ldr	r3, [r5, #24]
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	4798      	blx	r3
 800bb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800bb72:	f06f 0001 	mvn.w	r0, #1
}
 800bb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0800f92c 	.word	0x0800f92c
 800bb80:	0800f964 	.word	0x0800f964
 800bb84:	0800de6c 	.word	0x0800de6c

0800bb88 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800bb88:	b510      	push	{r4, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800bb8e:	9100      	str	r1, [sp, #0]
 800bb90:	2304      	movs	r3, #4
 800bb92:	9301      	str	r3, [sp, #4]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800bb94:	2100      	movs	r1, #0
 800bb96:	4668      	mov	r0, sp
 800bb98:	f7f7 f87e 	bl	8002c98 <osMessageCreate>
 800bb9c:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800bb9e:	b110      	cbz	r0, 800bba6 <sys_mbox_new+0x1e>
  return ERR_MEM;
 
 return ERR_OK;
 800bba0:	2000      	movs	r0, #0
}
 800bba2:	b002      	add	sp, #8
 800bba4:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 800bba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbaa:	e7fa      	b.n	800bba2 <sys_mbox_new+0x1a>

0800bbac <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4605      	mov	r5, r0
 800bbb0:	460c      	mov	r4, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800bbb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	6828      	ldr	r0, [r5, #0]
 800bbba:	f7f7 f875 	bl	8002ca8 <osMessagePut>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	d1f7      	bne.n	800bbb2 <sys_mbox_post+0x6>
}
 800bbc2:	bd38      	pop	{r3, r4, r5, pc}

0800bbc4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800bbc4:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	6800      	ldr	r0, [r0, #0]
 800bbca:	f7f7 f86d 	bl	8002ca8 <osMessagePut>
 800bbce:	b900      	cbnz	r0, 800bbd2 <sys_mbox_trypost+0xe>
#endif /* SYS_STATS */
			
   }

   return result;
}
 800bbd0:	bd08      	pop	{r3, pc}
      result = ERR_MEM;
 800bbd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbd6:	e7fb      	b.n	800bbd0 <sys_mbox_trypost+0xc>

0800bbd8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800bbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbda:	b089      	sub	sp, #36	; 0x24
 800bbdc:	4606      	mov	r6, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	4615      	mov	r5, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800bbe2:	f7f6 ff43 	bl	8002a6c <osKernelSysTick>
 800bbe6:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800bbe8:	b185      	cbz	r5, 800bc0c <sys_arch_mbox_fetch+0x34>
  { 
    event = osMessageGet (*mbox, timeout);
 800bbea:	462a      	mov	r2, r5
 800bbec:	6831      	ldr	r1, [r6, #0]
 800bbee:	a805      	add	r0, sp, #20
 800bbf0:	f7f7 f88e 	bl	8002d10 <osMessageGet>
    
    if(event.status == osEventMessage)
 800bbf4:	9b05      	ldr	r3, [sp, #20]
 800bbf6:	2b10      	cmp	r3, #16
 800bbf8:	d002      	beq.n	800bc00 <sys_arch_mbox_fetch+0x28>
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 800bbfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbfe:	e015      	b.n	800bc2c <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 800bc00:	9b06      	ldr	r3, [sp, #24]
 800bc02:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 800bc04:	f7f6 ff32 	bl	8002a6c <osKernelSysTick>
 800bc08:	1b00      	subs	r0, r0, r4
 800bc0a:	e00f      	b.n	800bc2c <sys_arch_mbox_fetch+0x54>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 800bc0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc10:	6831      	ldr	r1, [r6, #0]
 800bc12:	4668      	mov	r0, sp
 800bc14:	f7f7 f87c 	bl	8002d10 <osMessageGet>
 800bc18:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 800bc1c:	ab08      	add	r3, sp, #32
 800bc1e:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800bc22:	9b06      	ldr	r3, [sp, #24]
 800bc24:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 800bc26:	f7f6 ff21 	bl	8002a6c <osKernelSysTick>
 800bc2a:	1b00      	subs	r0, r0, r4
  }
}
 800bc2c:	b009      	add	sp, #36	; 0x24
 800bc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc30 <sys_mbox_valid>:
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
  if (*mbox == SYS_MBOX_NULL) 
 800bc30:	6803      	ldr	r3, [r0, #0]
 800bc32:	b10b      	cbz	r3, 800bc38 <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 800bc34:	2001      	movs	r0, #1
}                                             
 800bc36:	4770      	bx	lr
    return 0;
 800bc38:	2000      	movs	r0, #0
 800bc3a:	4770      	bx	lr

0800bc3c <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800bc3c:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800bc3e:	4803      	ldr	r0, [pc, #12]	; (800bc4c <sys_init+0x10>)
 800bc40:	f7f6 ff41 	bl	8002ac6 <osMutexCreate>
 800bc44:	4b02      	ldr	r3, [pc, #8]	; (800bc50 <sys_init+0x14>)
 800bc46:	6018      	str	r0, [r3, #0]
 800bc48:	bd08      	pop	{r3, pc}
 800bc4a:	bf00      	nop
 800bc4c:	0800f9a0 	.word	0x0800f9a0
 800bc50:	20007718 	.word	0x20007718

0800bc54 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800bc54:	b510      	push	{r4, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 800bc5a:	a802      	add	r0, sp, #8
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800bc62:	f7f6 ff30 	bl	8002ac6 <osMutexCreate>
 800bc66:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800bc68:	b110      	cbz	r0, 800bc70 <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800bc6a:	2000      	movs	r0, #0
}
 800bc6c:	b002      	add	sp, #8
 800bc6e:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 800bc70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc74:	e7fa      	b.n	800bc6c <sys_mutex_new+0x18>

0800bc76 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800bc76:	b508      	push	{r3, lr}
  osMutexWait (*mutex, osWaitForever);
 800bc78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bc7c:	6800      	ldr	r0, [r0, #0]
 800bc7e:	f7f6 ff27 	bl	8002ad0 <osMutexWait>
 800bc82:	bd08      	pop	{r3, pc}

0800bc84 <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800bc84:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800bc86:	6800      	ldr	r0, [r0, #0]
 800bc88:	f7f6 ff5c 	bl	8002b44 <osMutexRelease>
 800bc8c:	bd08      	pop	{r3, pc}

0800bc8e <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800bc8e:	b500      	push	{lr}
 800bc90:	b087      	sub	sp, #28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800bc92:	9001      	str	r0, [sp, #4]
 800bc94:	9102      	str	r1, [sp, #8]
 800bc96:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800bc9a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800bc9e:	2100      	movs	r1, #0
 800bca0:	9104      	str	r1, [sp, #16]
 800bca2:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800bca4:	4611      	mov	r1, r2
 800bca6:	a801      	add	r0, sp, #4
 800bca8:	f7f6 feea 	bl	8002a80 <osThreadCreate>
}
 800bcac:	b007      	add	sp, #28
 800bcae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800bcb4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800bcb4:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800bcb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bcba:	4b03      	ldr	r3, [pc, #12]	; (800bcc8 <sys_arch_protect+0x14>)
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	f7f6 ff07 	bl	8002ad0 <osMutexWait>
  return (sys_prot_t)1;
}
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	bd08      	pop	{r3, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20007718 	.word	0x20007718

0800bccc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800bccc:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800bcce:	4b02      	ldr	r3, [pc, #8]	; (800bcd8 <sys_arch_unprotect+0xc>)
 800bcd0:	6818      	ldr	r0, [r3, #0]
 800bcd2:	f7f6 ff37 	bl	8002b44 <osMutexRelease>
 800bcd6:	bd08      	pop	{r3, pc}
 800bcd8:	20007718 	.word	0x20007718

0800bcdc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800bce0:	4834      	ldr	r0, [pc, #208]	; (800bdb4 <low_level_input+0xd8>)
 800bce2:	f7f4 ff1f 	bl	8000b24 <HAL_ETH_GetReceivedFrame_IT>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d160      	bne.n	800bdac <low_level_input+0xd0>
    return NULL;
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800bcea:	4b32      	ldr	r3, [pc, #200]	; (800bdb4 <low_level_input+0xd8>)
 800bcec:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800bcee:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
  
  if (len > 0)
 800bcf2:	b949      	cbnz	r1, 800bd08 <low_level_input+0x2c>
  struct pbuf *p = NULL;
 800bcf4:	f04f 0a00 	mov.w	sl, #0
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  }
  
  if (p != NULL)
 800bcf8:	f1ba 0f00 	cmp.w	sl, #0
 800bcfc:	d033      	beq.n	800bd66 <low_level_input+0x8a>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bcfe:	4b2d      	ldr	r3, [pc, #180]	; (800bdb4 <low_level_input+0xd8>)
 800bd00:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 800bd02:	46d1      	mov	r9, sl
    bufferoffset = 0;
 800bd04:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800bd06:	e027      	b.n	800bd58 <low_level_input+0x7c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800bd08:	2203      	movs	r2, #3
 800bd0a:	2004      	movs	r0, #4
 800bd0c:	f7f9 fb3e 	bl	800538c <pbuf_alloc>
 800bd10:	4682      	mov	sl, r0
 800bd12:	e7f1      	b.n	800bcf8 <low_level_input+0x1c>
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800bd14:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800bd18:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bd1c:	1b12      	subs	r2, r2, r4
 800bd1e:	eb08 0104 	add.w	r1, r8, r4
 800bd22:	4430      	add	r0, r6
 800bd24:	f000 fef7 	bl	800cb16 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bd28:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800bd2a:	f8d7 8008 	ldr.w	r8, [r7, #8]
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800bd2e:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800bd32:	1b36      	subs	r6, r6, r4
 800bd34:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 800bd38:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bd3a:	18a5      	adds	r5, r4, r2
 800bd3c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800bd40:	429d      	cmp	r5, r3
 800bd42:	d8e7      	bhi.n	800bd14 <low_level_input+0x38>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800bd44:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800bd48:	eb08 0104 	add.w	r1, r8, r4
 800bd4c:	4430      	add	r0, r6
 800bd4e:	f000 fee2 	bl	800cb16 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800bd52:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 800bd56:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 800bd58:	f1b9 0f00 	cmp.w	r9, #0
 800bd5c:	d003      	beq.n	800bd66 <low_level_input+0x8a>
      byteslefttocopy = q->len;
 800bd5e:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 800bd62:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bd64:	e7e9      	b.n	800bd3a <low_level_input+0x5e>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bd66:	4b13      	ldr	r3, [pc, #76]	; (800bdb4 <low_level_input+0xd8>)
 800bd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	e005      	b.n	800bd7a <low_level_input+0x9e>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800bd74:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bd76:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bd78:	3101      	adds	r1, #1
 800bd7a:	4a0e      	ldr	r2, [pc, #56]	; (800bdb4 <low_level_input+0xd8>)
 800bd7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bd7e:	4291      	cmp	r1, r2
 800bd80:	d3f5      	bcc.n	800bd6e <low_level_input+0x92>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800bd82:	4b0c      	ldr	r3, [pc, #48]	; (800bdb4 <low_level_input+0xd8>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f241 0214 	movw	r2, #4116	; 0x1014
 800bd8e:	589a      	ldr	r2, [r3, r2]
 800bd90:	f012 0f80 	tst.w	r2, #128	; 0x80
 800bd94:	d007      	beq.n	800bda6 <low_level_input+0xca>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800bd96:	2180      	movs	r1, #128	; 0x80
 800bd98:	f241 0214 	movw	r2, #4116	; 0x1014
 800bd9c:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800bd9e:	2100      	movs	r1, #0
 800bda0:	f241 0208 	movw	r2, #4104	; 0x1008
 800bda4:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800bda6:	4650      	mov	r0, sl
 800bda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 800bdac:	f04f 0a00 	mov.w	sl, #0
 800bdb0:	e7f9      	b.n	800bda6 <low_level_input+0xca>
 800bdb2:	bf00      	nop
 800bdb4:	20008fec 	.word	0x20008fec

0800bdb8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4605      	mov	r5, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800bdbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bdc0:	4b0b      	ldr	r3, [pc, #44]	; (800bdf0 <ethernetif_input+0x38>)
 800bdc2:	6818      	ldr	r0, [r3, #0]
 800bdc4:	f7f6 ff00 	bl	8002bc8 <osSemaphoreWait>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d1f7      	bne.n	800bdbc <ethernetif_input+0x4>
 800bdcc:	e001      	b.n	800bdd2 <ethernetif_input+0x1a>
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
      } while(p!=NULL);
 800bdce:	2c00      	cmp	r4, #0
 800bdd0:	d0f4      	beq.n	800bdbc <ethernetif_input+0x4>
        p = low_level_input( netif );
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f7ff ff82 	bl	800bcdc <low_level_input>
        if   (p != NULL)
 800bdd8:	4604      	mov	r4, r0
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d0f7      	beq.n	800bdce <ethernetif_input+0x16>
          if (netif->input( p, netif) != ERR_OK )
 800bdde:	692b      	ldr	r3, [r5, #16]
 800bde0:	4629      	mov	r1, r5
 800bde2:	4798      	blx	r3
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d0f2      	beq.n	800bdce <ethernetif_input+0x16>
            pbuf_free(p);
 800bde8:	4620      	mov	r0, r4
 800bdea:	f7f9 fa63 	bl	80052b4 <pbuf_free>
 800bdee:	e7ee      	b.n	800bdce <ethernetif_input+0x16>
 800bdf0:	20003f88 	.word	0x20003f88

0800bdf4 <low_level_output>:
{
 800bdf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf8:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bdfa:	4b2c      	ldr	r3, [pc, #176]	; (800beac <low_level_output+0xb8>)
 800bdfc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800bdfe:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 800be02:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 800be04:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 800be06:	f1bb 0f00 	cmp.w	fp, #0
 800be0a:	d032      	beq.n	800be72 <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800be0c:	6833      	ldr	r3, [r6, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	db35      	blt.n	800be7e <low_level_output+0x8a>
      byteslefttocopy = q->len;
 800be12:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 800be16:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800be18:	eb04 0809 	add.w	r8, r4, r9
 800be1c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800be20:	4598      	cmp	r8, r3
 800be22:	d919      	bls.n	800be58 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800be24:	f8db 1004 	ldr.w	r1, [fp, #4]
 800be28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800be2c:	1b12      	subs	r2, r2, r4
 800be2e:	4429      	add	r1, r5
 800be30:	eb0a 0004 	add.w	r0, sl, r4
 800be34:	f000 fe6f 	bl	800cb16 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800be38:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800be3a:	6833      	ldr	r3, [r6, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	db21      	blt.n	800be84 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800be40:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800be44:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800be48:	1b2d      	subs	r5, r5, r4
 800be4a:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800be4e:	1b3f      	subs	r7, r7, r4
 800be50:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800be54:	2400      	movs	r4, #0
 800be56:	e7df      	b.n	800be18 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800be58:	f8db 1004 	ldr.w	r1, [fp, #4]
 800be5c:	464a      	mov	r2, r9
 800be5e:	4429      	add	r1, r5
 800be60:	eb0a 0004 	add.w	r0, sl, r4
 800be64:	f000 fe57 	bl	800cb16 <memcpy>
      framelength = framelength + byteslefttocopy;
 800be68:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 800be6a:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 800be6e:	4644      	mov	r4, r8
 800be70:	e7c9      	b.n	800be06 <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800be72:	4639      	mov	r1, r7
 800be74:	480d      	ldr	r0, [pc, #52]	; (800beac <low_level_output+0xb8>)
 800be76:	f7f4 fdc3 	bl	8000a00 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800be7a:	2000      	movs	r0, #0
 800be7c:	e004      	b.n	800be88 <low_level_output+0x94>
        errval = ERR_USE;
 800be7e:	f06f 0007 	mvn.w	r0, #7
 800be82:	e001      	b.n	800be88 <low_level_output+0x94>
          errval = ERR_USE;
 800be84:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800be88:	4b08      	ldr	r3, [pc, #32]	; (800beac <low_level_output+0xb8>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f241 0214 	movw	r2, #4116	; 0x1014
 800be90:	589a      	ldr	r2, [r3, r2]
 800be92:	f012 0f20 	tst.w	r2, #32
 800be96:	d007      	beq.n	800bea8 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800be98:	2120      	movs	r1, #32
 800be9a:	f241 0214 	movw	r2, #4116	; 0x1014
 800be9e:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800bea0:	2100      	movs	r1, #0
 800bea2:	f241 0204 	movw	r2, #4100	; 0x1004
 800bea6:	5099      	str	r1, [r3, r2]
}
 800bea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beac:	20008fec 	.word	0x20008fec

0800beb0 <low_level_init>:
{ 
 800beb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb2:	b08b      	sub	sp, #44	; 0x2c
 800beb4:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	9309      	str	r3, [sp, #36]	; 0x24
  heth.Instance = ETH;
 800beba:	483d      	ldr	r0, [pc, #244]	; (800bfb0 <low_level_init+0x100>)
 800bebc:	4a3d      	ldr	r2, [pc, #244]	; (800bfb4 <low_level_init+0x104>)
 800bebe:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bec0:	2201      	movs	r2, #1
 800bec2:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800bec4:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 800bec6:	f88d 301c 	strb.w	r3, [sp, #28]
  MACAddr[1] = 0x80;
 800beca:	2180      	movs	r1, #128	; 0x80
 800becc:	f88d 101d 	strb.w	r1, [sp, #29]
  MACAddr[2] = 0xE1;
 800bed0:	21e1      	movs	r1, #225	; 0xe1
 800bed2:	f88d 101e 	strb.w	r1, [sp, #30]
  MACAddr[3] = 0x00;
 800bed6:	f88d 301f 	strb.w	r3, [sp, #31]
  MACAddr[4] = 0x00;
 800beda:	f88d 3020 	strb.w	r3, [sp, #32]
  MACAddr[5] = 0x00;
 800bede:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  heth.Init.MACAddr = &MACAddr[0];
 800bee2:	a907      	add	r1, sp, #28
 800bee4:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800bee6:	6182      	str	r2, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bee8:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800beea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800beee:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bef0:	f7f4 ff22 	bl	8000d38 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800bef4:	b928      	cbnz	r0, 800bf02 <low_level_init+0x52>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bef6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800befa:	f043 0304 	orr.w	r3, r3, #4
 800befe:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bf02:	4d2b      	ldr	r5, [pc, #172]	; (800bfb0 <low_level_init+0x100>)
 800bf04:	2304      	movs	r3, #4
 800bf06:	4a2c      	ldr	r2, [pc, #176]	; (800bfb8 <low_level_init+0x108>)
 800bf08:	492c      	ldr	r1, [pc, #176]	; (800bfbc <low_level_init+0x10c>)
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f7f4 fd09 	bl	8000922 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800bf10:	2304      	movs	r3, #4
 800bf12:	4a2b      	ldr	r2, [pc, #172]	; (800bfc0 <low_level_init+0x110>)
 800bf14:	492b      	ldr	r1, [pc, #172]	; (800bfc4 <low_level_init+0x114>)
 800bf16:	4628      	mov	r0, r5
 800bf18:	f7f4 fd3c 	bl	8000994 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bf1c:	2306      	movs	r3, #6
 800bf1e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bf22:	696b      	ldr	r3, [r5, #20]
 800bf24:	781a      	ldrb	r2, [r3, #0]
 800bf26:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bf2a:	785a      	ldrb	r2, [r3, #1]
 800bf2c:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bf30:	789a      	ldrb	r2, [r3, #2]
 800bf32:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bf36:	78da      	ldrb	r2, [r3, #3]
 800bf38:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bf3c:	791a      	ldrb	r2, [r3, #4]
 800bf3e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bf42:	795b      	ldrb	r3, [r3, #5]
 800bf44:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 800bf48:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800bf4c:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bf4e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800bf52:	f043 030a 	orr.w	r3, r3, #10
 800bf56:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  osSemaphoreDef(SEM);
 800bf5a:	a80a      	add	r0, sp, #40	; 0x28
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f840 3d10 	str.w	r3, [r0, #-16]!
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800bf62:	2101      	movs	r1, #1
 800bf64:	f7f6 fe1c 	bl	8002ba0 <osSemaphoreCreate>
 800bf68:	4b17      	ldr	r3, [pc, #92]	; (800bfc8 <low_level_init+0x118>)
 800bf6a:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800bf6c:	ae01      	add	r6, sp, #4
 800bf6e:	4f17      	ldr	r7, [pc, #92]	; (800bfcc <low_level_init+0x11c>)
 800bf70:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bf72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	6033      	str	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 800bf78:	4621      	mov	r1, r4
 800bf7a:	a801      	add	r0, sp, #4
 800bf7c:	f7f6 fd80 	bl	8002a80 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800bf80:	4628      	mov	r0, r5
 800bf82:	f7f5 f803 	bl	8000f8c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800bf86:	aa09      	add	r2, sp, #36	; 0x24
 800bf88:	210b      	movs	r1, #11
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f7f4 fe5e 	bl	8000c4c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800bf90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf92:	f042 020b 	orr.w	r2, r2, #11
 800bf96:	9209      	str	r2, [sp, #36]	; 0x24
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bf98:	210b      	movs	r1, #11
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	f7f4 fe92 	bl	8000cc4 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800bfa0:	aa09      	add	r2, sp, #36	; 0x24
 800bfa2:	210b      	movs	r1, #11
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	f7f4 fe51 	bl	8000c4c <HAL_ETH_ReadPHYRegister>
}
 800bfaa:	b00b      	add	sp, #44	; 0x2c
 800bfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	20008fec 	.word	0x20008fec
 800bfb4:	40028000 	.word	0x40028000
 800bfb8:	20009034 	.word	0x20009034
 800bfbc:	2000771c 	.word	0x2000771c
 800bfc0:	2000779c 	.word	0x2000779c
 800bfc4:	20008f6c 	.word	0x20008f6c
 800bfc8:	20003f88 	.word	0x20003f88
 800bfcc:	0800dd84 	.word	0x0800dd84

0800bfd0 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800bfd0:	6802      	ldr	r2, [r0, #0]
 800bfd2:	4b2d      	ldr	r3, [pc, #180]	; (800c088 <HAL_ETH_MspInit+0xb8>)
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d000      	beq.n	800bfda <HAL_ETH_MspInit+0xa>
 800bfd8:	4770      	bx	lr
{
 800bfda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfdc:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_ETH_CLK_ENABLE();
 800bfde:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800bfe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfe4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800bfe8:	631a      	str	r2, [r3, #48]	; 0x30
 800bfea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfec:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800bff0:	9200      	str	r2, [sp, #0]
 800bff2:	9a00      	ldr	r2, [sp, #0]
 800bff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bff6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bffa:	631a      	str	r2, [r3, #48]	; 0x30
 800bffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bffe:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800c002:	9201      	str	r2, [sp, #4]
 800c004:	9a01      	ldr	r2, [sp, #4]
 800c006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c008:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800c00c:	631a      	str	r2, [r3, #48]	; 0x30
 800c00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c014:	9302      	str	r3, [sp, #8]
 800c016:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c018:	2332      	movs	r3, #50	; 0x32
 800c01a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c01c:	2702      	movs	r7, #2
 800c01e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c020:	2400      	movs	r4, #0
 800c022:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c024:	2603      	movs	r6, #3
 800c026:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c028:	250b      	movs	r5, #11
 800c02a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c02c:	a903      	add	r1, sp, #12
 800c02e:	4817      	ldr	r0, [pc, #92]	; (800c08c <HAL_ETH_MspInit+0xbc>)
 800c030:	f7f4 ffce 	bl	8000fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800c034:	2386      	movs	r3, #134	; 0x86
 800c036:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c038:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c03a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c03c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c03e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c040:	a903      	add	r1, sp, #12
 800c042:	4813      	ldr	r0, [pc, #76]	; (800c090 <HAL_ETH_MspInit+0xc0>)
 800c044:	f7f4 ffc4 	bl	8000fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c04c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c04e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c050:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c052:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c054:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c056:	a903      	add	r1, sp, #12
 800c058:	480e      	ldr	r0, [pc, #56]	; (800c094 <HAL_ETH_MspInit+0xc4>)
 800c05a:	f7f4 ffb9 	bl	8000fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c05e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c062:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c064:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c066:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c068:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c06a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c06c:	a903      	add	r1, sp, #12
 800c06e:	480a      	ldr	r0, [pc, #40]	; (800c098 <HAL_ETH_MspInit+0xc8>)
 800c070:	f7f4 ffae 	bl	8000fd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c074:	4622      	mov	r2, r4
 800c076:	2105      	movs	r1, #5
 800c078:	203d      	movs	r0, #61	; 0x3d
 800c07a:	f7f4 fb0d 	bl	8000698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c07e:	203d      	movs	r0, #61	; 0x3d
 800c080:	f7f4 fb3a 	bl	80006f8 <HAL_NVIC_EnableIRQ>
}
 800c084:	b009      	add	sp, #36	; 0x24
 800c086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c088:	40028000 	.word	0x40028000
 800c08c:	40020800 	.word	0x40020800
 800c090:	40020000 	.word	0x40020000
 800c094:	40020400 	.word	0x40020400
 800c098:	40021800 	.word	0x40021800

0800c09c <HAL_ETH_RxCpltCallback>:
{
 800c09c:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 800c09e:	4b02      	ldr	r3, [pc, #8]	; (800c0a8 <HAL_ETH_RxCpltCallback+0xc>)
 800c0a0:	6818      	ldr	r0, [r3, #0]
 800c0a2:	f7f6 fdcb 	bl	8002c3c <osSemaphoreRelease>
 800c0a6:	bd08      	pop	{r3, pc}
 800c0a8:	20003f88 	.word	0x20003f88

0800c0ac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c0ac:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	b170      	cbz	r0, 800c0d0 <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c0b2:	2373      	movs	r3, #115	; 0x73
 800c0b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800c0b8:	2374      	movs	r3, #116	; 0x74
 800c0ba:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c0be:	4b08      	ldr	r3, [pc, #32]	; (800c0e0 <ethernetif_init+0x34>)
 800c0c0:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c0c2:	4b08      	ldr	r3, [pc, #32]	; (800c0e4 <ethernetif_init+0x38>)
 800c0c4:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f7ff fef2 	bl	800beb0 <low_level_init>

  return ERR_OK;
}
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c0d0:	4b05      	ldr	r3, [pc, #20]	; (800c0e8 <ethernetif_init+0x3c>)
 800c0d2:	f240 2247 	movw	r2, #583	; 0x247
 800c0d6:	4905      	ldr	r1, [pc, #20]	; (800c0ec <ethernetif_init+0x40>)
 800c0d8:	4805      	ldr	r0, [pc, #20]	; (800c0f0 <ethernetif_init+0x44>)
 800c0da:	f000 fd2f 	bl	800cb3c <iprintf>
 800c0de:	e7e8      	b.n	800c0b2 <ethernetif_init+0x6>
 800c0e0:	0800ab3d 	.word	0x0800ab3d
 800c0e4:	0800bdf5 	.word	0x0800bdf5
 800c0e8:	0800f9a4 	.word	0x0800f9a4
 800c0ec:	0800f3c4 	.word	0x0800f3c4
 800c0f0:	0800de6c 	.word	0x0800de6c

0800c0f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800c0f4:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800c0f6:	f7f4 faa3 	bl	8000640 <HAL_GetTick>
}
 800c0fa:	bd08      	pop	{r3, pc}

0800c0fc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c0fc:	b530      	push	{r4, r5, lr}
 800c0fe:	b085      	sub	sp, #20
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c100:	2100      	movs	r1, #0
 800c102:	4608      	mov	r0, r1
 800c104:	f7f8 fbd8 	bl	80048b8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800c108:	4911      	ldr	r1, [pc, #68]	; (800c150 <MX_LWIP_Init+0x54>)
 800c10a:	2000      	movs	r0, #0
 800c10c:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 800c10e:	4a11      	ldr	r2, [pc, #68]	; (800c154 <MX_LWIP_Init+0x58>)
 800c110:	6010      	str	r0, [r2, #0]
  gw.addr = 0;
 800c112:	4b11      	ldr	r3, [pc, #68]	; (800c158 <MX_LWIP_Init+0x5c>)
 800c114:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c116:	4c11      	ldr	r4, [pc, #68]	; (800c15c <MX_LWIP_Init+0x60>)
 800c118:	4d11      	ldr	r5, [pc, #68]	; (800c160 <MX_LWIP_Init+0x64>)
 800c11a:	9502      	str	r5, [sp, #8]
 800c11c:	4d11      	ldr	r5, [pc, #68]	; (800c164 <MX_LWIP_Init+0x68>)
 800c11e:	9501      	str	r5, [sp, #4]
 800c120:	9000      	str	r0, [sp, #0]
 800c122:	4620      	mov	r0, r4
 800c124:	f7f8 ff72 	bl	800500c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c128:	4620      	mov	r0, r4
 800c12a:	f7f8 ffaf 	bl	800508c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c12e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800c132:	f013 0f04 	tst.w	r3, #4
 800c136:	d107      	bne.n	800c148 <MX_LWIP_Init+0x4c>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800c138:	4808      	ldr	r0, [pc, #32]	; (800c15c <MX_LWIP_Init+0x60>)
 800c13a:	f7f8 ffbf 	bl	80050bc <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800c13e:	4807      	ldr	r0, [pc, #28]	; (800c15c <MX_LWIP_Init+0x60>)
 800c140:	f7fd ffba 	bl	800a0b8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c144:	b005      	add	sp, #20
 800c146:	bd30      	pop	{r4, r5, pc}
    netif_set_up(&gnetif);
 800c148:	4620      	mov	r0, r4
 800c14a:	f7f8 ffa5 	bl	8005098 <netif_set_up>
 800c14e:	e7f6      	b.n	800c13e <MX_LWIP_Init+0x42>
 800c150:	2000a838 	.word	0x2000a838
 800c154:	2000a83c 	.word	0x2000a83c
 800c158:	2000a840 	.word	0x2000a840
 800c15c:	2000a804 	.word	0x2000a804
 800c160:	08004821 	.word	0x08004821
 800c164:	0800c0ad 	.word	0x0800c0ad

0800c168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c16c:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c16e:	2400      	movs	r4, #0
 800c170:	9407      	str	r4, [sp, #28]
 800c172:	9408      	str	r4, [sp, #32]
 800c174:	9409      	str	r4, [sp, #36]	; 0x24
 800c176:	940a      	str	r4, [sp, #40]	; 0x28
 800c178:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c17a:	4b53      	ldr	r3, [pc, #332]	; (800c2c8 <MX_GPIO_Init+0x160>)
 800c17c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c17e:	f042 0204 	orr.w	r2, r2, #4
 800c182:	631a      	str	r2, [r3, #48]	; 0x30
 800c184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c186:	f002 0204 	and.w	r2, r2, #4
 800c18a:	9201      	str	r2, [sp, #4]
 800c18c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c18e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c194:	631a      	str	r2, [r3, #48]	; 0x30
 800c196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c198:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c19c:	9202      	str	r2, [sp, #8]
 800c19e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1a2:	f042 0201 	orr.w	r2, r2, #1
 800c1a6:	631a      	str	r2, [r3, #48]	; 0x30
 800c1a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1aa:	f002 0201 	and.w	r2, r2, #1
 800c1ae:	9203      	str	r2, [sp, #12]
 800c1b0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1b4:	f042 0202 	orr.w	r2, r2, #2
 800c1b8:	631a      	str	r2, [r3, #48]	; 0x30
 800c1ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1bc:	f002 0202 	and.w	r2, r2, #2
 800c1c0:	9204      	str	r2, [sp, #16]
 800c1c2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c1c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1c6:	f042 0208 	orr.w	r2, r2, #8
 800c1ca:	631a      	str	r2, [r3, #48]	; 0x30
 800c1cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1ce:	f002 0208 	and.w	r2, r2, #8
 800c1d2:	9205      	str	r2, [sp, #20]
 800c1d4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c1d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1dc:	631a      	str	r2, [r3, #48]	; 0x30
 800c1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e4:	9306      	str	r3, [sp, #24]
 800c1e6:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LDOSR_Pin|LDERR_Pin|LDBTN_Pin, GPIO_PIN_RESET);
 800c1e8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800c2dc <MX_GPIO_Init+0x174>
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	f244 0181 	movw	r1, #16513	; 0x4081
 800c1f2:	4640      	mov	r0, r8
 800c1f4:	f7f4 ffe1 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDDBG_Pin|LDRED_Pin|LDYEL_Pin|LDGRE_Pin, GPIO_PIN_SET);
 800c1f8:	4f34      	ldr	r7, [pc, #208]	; (800c2cc <MX_GPIO_Init+0x164>)
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f44f 6107 	mov.w	r1, #2160	; 0x870
 800c200:	4638      	mov	r0, r7
 800c202:	f7f4 ffda 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDTX_Pin|LDRX_Pin|GND_Pin, GPIO_PIN_RESET);
 800c206:	4622      	mov	r2, r4
 800c208:	f44f 5142 	mov.w	r1, #12416	; 0x3080
 800c20c:	4638      	mov	r0, r7
 800c20e:	f7f4 ffd4 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800c212:	4d2f      	ldr	r5, [pc, #188]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c214:	4622      	mov	r2, r4
 800c216:	2140      	movs	r1, #64	; 0x40
 800c218:	4628      	mov	r0, r5
 800c21a:	f7f4 ffce 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USRBTN_Pin */
  GPIO_InitStruct.Pin = USRBTN_Pin;
 800c21e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c222:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c224:	4b2b      	ldr	r3, [pc, #172]	; (800c2d4 <MX_GPIO_Init+0x16c>)
 800c226:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c228:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USRBTN_GPIO_Port, &GPIO_InitStruct);
 800c22a:	a907      	add	r1, sp, #28
 800c22c:	482a      	ldr	r0, [pc, #168]	; (800c2d8 <MX_GPIO_Init+0x170>)
 800c22e:	f7f4 fecf 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDOSR_Pin LDERR_Pin LDBTN_Pin */
  GPIO_InitStruct.Pin = LDOSR_Pin|LDERR_Pin|LDBTN_Pin;
 800c232:	f244 0381 	movw	r3, #16513	; 0x4081
 800c236:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c238:	2601      	movs	r6, #1
 800c23a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c23c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c23e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c240:	a907      	add	r1, sp, #28
 800c242:	4640      	mov	r0, r8
 800c244:	f7f4 fec4 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDDBG_Pin LDTX_Pin LDRX_Pin LDRED_Pin 
                           LDYEL_Pin LDGRE_Pin GND_Pin */
  GPIO_InitStruct.Pin = LDDBG_Pin|LDTX_Pin|LDRX_Pin|LDRED_Pin 
 800c248:	f643 03f0 	movw	r3, #14576	; 0x38f0
 800c24c:	9307      	str	r3, [sp, #28]
                          |LDYEL_Pin|LDGRE_Pin|GND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c24e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c250:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c252:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c254:	a907      	add	r1, sp, #28
 800c256:	4638      	mov	r0, r7
 800c258:	f7f4 feba 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800c25c:	2340      	movs	r3, #64	; 0x40
 800c25e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c260:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c262:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c264:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800c266:	a907      	add	r1, sp, #28
 800c268:	4628      	mov	r0, r5
 800c26a:	f7f4 feb1 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800c26e:	2380      	movs	r3, #128	; 0x80
 800c270:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c272:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c274:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c276:	a907      	add	r1, sp, #28
 800c278:	4628      	mov	r0, r5
 800c27a:	f7f4 fea9 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c27e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c282:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c284:	2302      	movs	r3, #2
 800c286:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c288:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c28a:	2303      	movs	r3, #3
 800c28c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c28e:	230a      	movs	r3, #10
 800c290:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c292:	f5a5 55c0 	sub.w	r5, r5, #6144	; 0x1800
 800c296:	a907      	add	r1, sp, #28
 800c298:	4628      	mov	r0, r5
 800c29a:	f7f4 fe99 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c29e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2a2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2a4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2a6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c2a8:	a907      	add	r1, sp, #28
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	f7f4 fe90 	bl	8000fd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800c2b0:	4622      	mov	r2, r4
 800c2b2:	2105      	movs	r1, #5
 800c2b4:	2028      	movs	r0, #40	; 0x28
 800c2b6:	f7f4 f9ef 	bl	8000698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c2ba:	2028      	movs	r0, #40	; 0x28
 800c2bc:	f7f4 fa1c 	bl	80006f8 <HAL_NVIC_EnableIRQ>

}
 800c2c0:	b00c      	add	sp, #48	; 0x30
 800c2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c6:	bf00      	nop
 800c2c8:	40023800 	.word	0x40023800
 800c2cc:	40020c00 	.word	0x40020c00
 800c2d0:	40021800 	.word	0x40021800
 800c2d4:	10110000 	.word	0x10110000
 800c2d8:	40020800 	.word	0x40020800
 800c2dc:	40020400 	.word	0x40020400

0800c2e0 <MX_USART3_UART_Init>:
{
 800c2e0:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 800c2e2:	4809      	ldr	r0, [pc, #36]	; (800c308 <MX_USART3_UART_Init+0x28>)
 800c2e4:	4b09      	ldr	r3, [pc, #36]	; (800c30c <MX_USART3_UART_Init+0x2c>)
 800c2e6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800c2e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c2ec:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c2f2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c2f4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c2f6:	220c      	movs	r2, #12
 800c2f8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c2fa:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c2fc:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c2fe:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c300:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c302:	f7f6 fb6e 	bl	80029e2 <HAL_UART_Init>
}
 800c306:	bd08      	pop	{r3, pc}
 800c308:	2000a888 	.word	0x2000a888
 800c30c:	40004800 	.word	0x40004800

0800c310 <startupTask>:

/* USER CODE BEGIN 4 */

void startupTask() {
 800c310:	b530      	push	{r4, r5, lr}
 800c312:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(LDOSR_GPIO_Port, LDOSR_Pin, GPIO_PIN_SET);
 800c314:	2201      	movs	r2, #1
 800c316:	4611      	mov	r1, r2
 800c318:	4817      	ldr	r0, [pc, #92]	; (800c378 <startupTask+0x68>)
 800c31a:	f7f4 ff4e 	bl	80011ba <HAL_GPIO_WritePin>
	xTaskCreate(uartTask, "rxtxST", 100, NULL, 10, NULL);
 800c31e:	2400      	movs	r4, #0
 800c320:	9401      	str	r4, [sp, #4]
 800c322:	250a      	movs	r5, #10
 800c324:	9500      	str	r5, [sp, #0]
 800c326:	4623      	mov	r3, r4
 800c328:	2264      	movs	r2, #100	; 0x64
 800c32a:	4914      	ldr	r1, [pc, #80]	; (800c37c <startupTask+0x6c>)
 800c32c:	4814      	ldr	r0, [pc, #80]	; (800c380 <startupTask+0x70>)
 800c32e:	f7f7 faed 	bl	800390c <xTaskCreate>
	xTaskCreate(buttonTask, "button", 10, NULL, 10, NULL);
 800c332:	9401      	str	r4, [sp, #4]
 800c334:	9500      	str	r5, [sp, #0]
 800c336:	4623      	mov	r3, r4
 800c338:	462a      	mov	r2, r5
 800c33a:	4912      	ldr	r1, [pc, #72]	; (800c384 <startupTask+0x74>)
 800c33c:	4812      	ldr	r0, [pc, #72]	; (800c388 <startupTask+0x78>)
 800c33e:	f7f7 fae5 	bl	800390c <xTaskCreate>
	xTaskCreate(commandParserTask, "commandParser", 100+ARG_SIZE*ARG_COUNT+CMD_SIZE, NULL, 10, NULL);
 800c342:	9401      	str	r4, [sp, #4]
 800c344:	9500      	str	r5, [sp, #0]
 800c346:	4623      	mov	r3, r4
 800c348:	227d      	movs	r2, #125	; 0x7d
 800c34a:	4910      	ldr	r1, [pc, #64]	; (800c38c <startupTask+0x7c>)
 800c34c:	4810      	ldr	r0, [pc, #64]	; (800c390 <startupTask+0x80>)
 800c34e:	f7f7 fadd 	bl	800390c <xTaskCreate>
	uartInit();
 800c352:	f000 f9f7 	bl	800c744 <uartInit>
	stprint("\r\033c");
 800c356:	480f      	ldr	r0, [pc, #60]	; (800c394 <startupTask+0x84>)
 800c358:	f000 fa24 	bl	800c7a4 <stprint>
	stprint("\n\r\033cBOOTED\n------\n");
 800c35c:	480e      	ldr	r0, [pc, #56]	; (800c398 <startupTask+0x88>)
 800c35e:	f000 fa21 	bl	800c7a4 <stprint>
	stprint("starting LwIP...\n");
 800c362:	480e      	ldr	r0, [pc, #56]	; (800c39c <startupTask+0x8c>)
 800c364:	f000 fa1e 	bl	800c7a4 <stprint>
	MX_LWIP_Init();
 800c368:	f7ff fec8 	bl	800c0fc <MX_LWIP_Init>
	vTaskDelete(NULL);
 800c36c:	4620      	mov	r0, r4
 800c36e:	f7f7 faff 	bl	8003970 <vTaskDelete>
}
 800c372:	b003      	add	sp, #12
 800c374:	bd30      	pop	{r4, r5, pc}
 800c376:	bf00      	nop
 800c378:	40020400 	.word	0x40020400
 800c37c:	0800f9c8 	.word	0x0800f9c8
 800c380:	0800c6ed 	.word	0x0800c6ed
 800c384:	0800f9d0 	.word	0x0800f9d0
 800c388:	0800c3a1 	.word	0x0800c3a1
 800c38c:	0800f9d8 	.word	0x0800f9d8
 800c390:	0800c81d 	.word	0x0800c81d
 800c394:	0800f9e8 	.word	0x0800f9e8
 800c398:	0800f9ec 	.word	0x0800f9ec
 800c39c:	0800fa00 	.word	0x0800fa00

0800c3a0 <buttonTask>:

void buttonTask() {
 800c3a0:	b508      	push	{r3, lr}
	while(1) {
		HAL_GPIO_WritePin(LDBTN_GPIO_Port, LDBTN_Pin, HAL_GPIO_ReadPin(USRBTN_GPIO_Port, USRBTN_Pin));
 800c3a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c3a6:	4804      	ldr	r0, [pc, #16]	; (800c3b8 <buttonTask+0x18>)
 800c3a8:	f7f4 ff00 	bl	80011ac <HAL_GPIO_ReadPin>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	2180      	movs	r1, #128	; 0x80
 800c3b0:	4802      	ldr	r0, [pc, #8]	; (800c3bc <buttonTask+0x1c>)
 800c3b2:	f7f4 ff02 	bl	80011ba <HAL_GPIO_WritePin>
 800c3b6:	e7f4      	b.n	800c3a2 <buttonTask+0x2>
 800c3b8:	40020800 	.word	0x40020800
 800c3bc:	40020400 	.word	0x40020400

0800c3c0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800c3c0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800c3c2:	2001      	movs	r0, #1
 800c3c4:	f7f6 fb76 	bl	8002ab4 <osDelay>
 800c3c8:	e7fb      	b.n	800c3c2 <StartDefaultTask+0x2>
	...

0800c3cc <SystemClock_Config>:
{
 800c3cc:	b530      	push	{r4, r5, lr}
 800c3ce:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c3d0:	2234      	movs	r2, #52	; 0x34
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	a82b      	add	r0, sp, #172	; 0xac
 800c3d6:	f000 fba9 	bl	800cb2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c3da:	2400      	movs	r4, #0
 800c3dc:	9426      	str	r4, [sp, #152]	; 0x98
 800c3de:	9427      	str	r4, [sp, #156]	; 0x9c
 800c3e0:	9428      	str	r4, [sp, #160]	; 0xa0
 800c3e2:	9429      	str	r4, [sp, #164]	; 0xa4
 800c3e4:	942a      	str	r4, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c3e6:	2290      	movs	r2, #144	; 0x90
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	a802      	add	r0, sp, #8
 800c3ec:	f000 fb9e 	bl	800cb2c <memset>
  HAL_PWR_EnableBkUpAccess();
 800c3f0:	f7f4 fefc 	bl	80011ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800c3f4:	4b1f      	ldr	r3, [pc, #124]	; (800c474 <SystemClock_Config+0xa8>)
 800c3f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c3fc:	641a      	str	r2, [r3, #64]	; 0x40
 800c3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800c408:	4a1b      	ldr	r2, [pc, #108]	; (800c478 <SystemClock_Config+0xac>)
 800c40a:	6813      	ldr	r3, [r2, #0]
 800c40c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800c410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	6813      	ldr	r3, [r2, #0]
 800c418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c41c:	9301      	str	r3, [sp, #4]
 800c41e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c420:	2301      	movs	r3, #1
 800c422:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800c424:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800c428:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c42a:	2502      	movs	r5, #2
 800c42c:	9531      	str	r5, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c42e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c432:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c434:	2304      	movs	r3, #4
 800c436:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 800c438:	2260      	movs	r2, #96	; 0x60
 800c43a:	9234      	str	r2, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c43c:	9535      	str	r5, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c43e:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c440:	a82b      	add	r0, sp, #172	; 0xac
 800c442:	f7f4 ff19 	bl	8001278 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800c446:	f7f4 fed9 	bl	80011fc <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c44a:	230f      	movs	r3, #15
 800c44c:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c44e:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c450:	9428      	str	r4, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c456:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c458:	942a      	str	r4, [sp, #168]	; 0xa8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800c45a:	2103      	movs	r1, #3
 800c45c:	a826      	add	r0, sp, #152	; 0x98
 800c45e:	f7f5 f95f 	bl	8001720 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800c462:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c466:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800c468:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c46a:	a802      	add	r0, sp, #8
 800c46c:	f7f5 fa4e 	bl	800190c <HAL_RCCEx_PeriphCLKConfig>
}
 800c470:	b039      	add	sp, #228	; 0xe4
 800c472:	bd30      	pop	{r4, r5, pc}
 800c474:	40023800 	.word	0x40023800
 800c478:	40007000 	.word	0x40007000

0800c47c <main>:
{
 800c47c:	b500      	push	{lr}
 800c47e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800c480:	f7f4 f8c6 	bl	8000610 <HAL_Init>
  SystemClock_Config();
 800c484:	f7ff ffa2 	bl	800c3cc <SystemClock_Config>
  MX_GPIO_Init();
 800c488:	f7ff fe6e 	bl	800c168 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800c48c:	f7ff ff28 	bl	800c2e0 <MX_USART3_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800c490:	ac03      	add	r4, sp, #12
 800c492:	4d0b      	ldr	r5, [pc, #44]	; (800c4c0 <main+0x44>)
 800c494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800c49c:	2100      	movs	r1, #0
 800c49e:	a803      	add	r0, sp, #12
 800c4a0:	f7f6 faee 	bl	8002a80 <osThreadCreate>
 800c4a4:	4b07      	ldr	r3, [pc, #28]	; (800c4c4 <main+0x48>)
 800c4a6:	6018      	str	r0, [r3, #0]
  xTaskCreate(startupTask, "startup", 50, NULL, 25, NULL);
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	9301      	str	r3, [sp, #4]
 800c4ac:	2219      	movs	r2, #25
 800c4ae:	9200      	str	r2, [sp, #0]
 800c4b0:	2232      	movs	r2, #50	; 0x32
 800c4b2:	4905      	ldr	r1, [pc, #20]	; (800c4c8 <main+0x4c>)
 800c4b4:	4805      	ldr	r0, [pc, #20]	; (800c4cc <main+0x50>)
 800c4b6:	f7f7 fa29 	bl	800390c <xTaskCreate>
  osKernelStart();
 800c4ba:	f7f6 fad2 	bl	8002a62 <osKernelStart>
 800c4be:	e7fe      	b.n	800c4be <main+0x42>
 800c4c0:	0800dd98 	.word	0x0800dd98
 800c4c4:	2000a844 	.word	0x2000a844
 800c4c8:	0800f9c0 	.word	0x0800f9c0
 800c4cc:	0800c311 	.word	0x0800c311

0800c4d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800c4d2:	6802      	ldr	r2, [r0, #0]
 800c4d4:	4b03      	ldr	r3, [pc, #12]	; (800c4e4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d000      	beq.n	800c4dc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800c4da:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800c4dc:	f7f4 f8a4 	bl	8000628 <HAL_IncTick>
}
 800c4e0:	e7fb      	b.n	800c4da <HAL_TIM_PeriodElapsedCallback+0xa>
 800c4e2:	bf00      	nop
 800c4e4:	40010000 	.word	0x40010000

0800c4e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c4e8:	b500      	push	{lr}
 800c4ea:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800c4ec:	4b0d      	ldr	r3, [pc, #52]	; (800c524 <HAL_MspInit+0x3c>)
 800c4ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c4f4:	641a      	str	r2, [r3, #64]	; 0x40
 800c4f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4f8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800c4fc:	9200      	str	r2, [sp, #0]
 800c4fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c506:	645a      	str	r2, [r3, #68]	; 0x44
 800c508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c50a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c512:	2200      	movs	r2, #0
 800c514:	210f      	movs	r1, #15
 800c516:	f06f 0001 	mvn.w	r0, #1
 800c51a:	f7f4 f8bd 	bl	8000698 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c51e:	b003      	add	sp, #12
 800c520:	f85d fb04 	ldr.w	pc, [sp], #4
 800c524:	40023800 	.word	0x40023800

0800c528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c528:	b500      	push	{lr}
 800c52a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c52c:	2300      	movs	r3, #0
 800c52e:	9303      	str	r3, [sp, #12]
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	9305      	str	r3, [sp, #20]
 800c534:	9306      	str	r3, [sp, #24]
 800c536:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 800c538:	6802      	ldr	r2, [r0, #0]
 800c53a:	4b18      	ldr	r3, [pc, #96]	; (800c59c <HAL_UART_MspInit+0x74>)
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d002      	beq.n	800c546 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800c540:	b009      	add	sp, #36	; 0x24
 800c542:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800c546:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800c54a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c54c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c550:	641a      	str	r2, [r3, #64]	; 0x40
 800c552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c554:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800c558:	9201      	str	r2, [sp, #4]
 800c55a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c55c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c55e:	f042 0208 	orr.w	r2, r2, #8
 800c562:	631a      	str	r2, [r3, #48]	; 0x30
 800c564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c566:	f003 0308 	and.w	r3, r3, #8
 800c56a:	9302      	str	r3, [sp, #8]
 800c56c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800c56e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c572:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c574:	2302      	movs	r3, #2
 800c576:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c578:	2303      	movs	r3, #3
 800c57a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c57c:	2307      	movs	r3, #7
 800c57e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c580:	a903      	add	r1, sp, #12
 800c582:	4807      	ldr	r0, [pc, #28]	; (800c5a0 <HAL_UART_MspInit+0x78>)
 800c584:	f7f4 fd24 	bl	8000fd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800c588:	2200      	movs	r2, #0
 800c58a:	2105      	movs	r1, #5
 800c58c:	2027      	movs	r0, #39	; 0x27
 800c58e:	f7f4 f883 	bl	8000698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800c592:	2027      	movs	r0, #39	; 0x27
 800c594:	f7f4 f8b0 	bl	80006f8 <HAL_NVIC_EnableIRQ>
}
 800c598:	e7d2      	b.n	800c540 <HAL_UART_MspInit+0x18>
 800c59a:	bf00      	nop
 800c59c:	40004800 	.word	0x40004800
 800c5a0:	40020c00 	.word	0x40020c00

0800c5a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c5a4:	b500      	push	{lr}
 800c5a6:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	2019      	movs	r0, #25
 800c5ae:	f7f4 f873 	bl	8000698 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800c5b2:	2019      	movs	r0, #25
 800c5b4:	f7f4 f8a0 	bl	80006f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800c5b8:	4b14      	ldr	r3, [pc, #80]	; (800c60c <HAL_InitTick+0x68>)
 800c5ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5bc:	f042 0201 	orr.w	r2, r2, #1
 800c5c0:	645a      	str	r2, [r3, #68]	; 0x44
 800c5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5c4:	f003 0301 	and.w	r3, r3, #1
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c5cc:	a902      	add	r1, sp, #8
 800c5ce:	a803      	add	r0, sp, #12
 800c5d0:	f7f5 f97e 	bl	80018d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800c5d4:	f7f5 f96c 	bl	80018b0 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c5d8:	4b0d      	ldr	r3, [pc, #52]	; (800c610 <HAL_InitTick+0x6c>)
 800c5da:	fba3 2300 	umull	r2, r3, r3, r0
 800c5de:	0c9b      	lsrs	r3, r3, #18
 800c5e0:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800c5e2:	480c      	ldr	r0, [pc, #48]	; (800c614 <HAL_InitTick+0x70>)
 800c5e4:	4a0c      	ldr	r2, [pc, #48]	; (800c618 <HAL_InitTick+0x74>)
 800c5e6:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800c5e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c5ec:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800c5ee:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c5f4:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800c5f6:	f7f5 fe0b 	bl	8002210 <HAL_TIM_Base_Init>
 800c5fa:	b118      	cbz	r0, 800c604 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c5fc:	2001      	movs	r0, #1
}
 800c5fe:	b009      	add	sp, #36	; 0x24
 800c600:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 800c604:	4803      	ldr	r0, [pc, #12]	; (800c614 <HAL_InitTick+0x70>)
 800c606:	f7f5 fc86 	bl	8001f16 <HAL_TIM_Base_Start_IT>
 800c60a:	e7f8      	b.n	800c5fe <HAL_InitTick+0x5a>
 800c60c:	40023800 	.word	0x40023800
 800c610:	431bde83 	.word	0x431bde83
 800c614:	2000a848 	.word	0x2000a848
 800c618:	40010000 	.word	0x40010000

0800c61c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c61c:	4770      	bx	lr

0800c61e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c61e:	e7fe      	b.n	800c61e <HardFault_Handler>

0800c620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c620:	e7fe      	b.n	800c620 <MemManage_Handler>

0800c622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c622:	e7fe      	b.n	800c622 <BusFault_Handler>

0800c624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c624:	e7fe      	b.n	800c624 <UsageFault_Handler>

0800c626 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c626:	4770      	bx	lr

0800c628 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800c628:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c62a:	4802      	ldr	r0, [pc, #8]	; (800c634 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800c62c:	f7f5 fc83 	bl	8001f36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800c630:	bd08      	pop	{r3, pc}
 800c632:	bf00      	nop
 800c634:	2000a848 	.word	0x2000a848

0800c638 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800c638:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */
  HAL_GPIO_TogglePin(LDTX_GPIO_Port, LDTX_Pin);
 800c63a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c63e:	480a      	ldr	r0, [pc, #40]	; (800c668 <USART3_IRQHandler+0x30>)
 800c640:	f7f4 fdc1 	bl	80011c6 <HAL_GPIO_TogglePin>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 800c644:	4b09      	ldr	r3, [pc, #36]	; (800c66c <USART3_IRQHandler+0x34>)
 800c646:	69db      	ldr	r3, [r3, #28]
  if(LL_USART_IsActiveFlag_RXNE(ST_USART_LL) && LL_USART_IsEnabledIT_RXNE(ST_USART_LL))
 800c648:	f013 0f20 	tst.w	r3, #32
 800c64c:	d004      	beq.n	800c658 <USART3_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 800c64e:	4b07      	ldr	r3, [pc, #28]	; (800c66c <USART3_IRQHandler+0x34>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f013 0f20 	tst.w	r3, #32
 800c656:	d103      	bne.n	800c660 <USART3_IRQHandler+0x28>
    /* RXNE flag will be cleared by reading of RDR register (done in call) */
    /* Call function in charge of handling Character reception */
    UART_CharReception_Callback();
  }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800c658:	4805      	ldr	r0, [pc, #20]	; (800c670 <USART3_IRQHandler+0x38>)
 800c65a:	f7f5 fee3 	bl	8002424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  /* USER CODE END USART3_IRQn 1 */
}
 800c65e:	bd08      	pop	{r3, pc}
    UART_CharReception_Callback();
 800c660:	f000 f9e0 	bl	800ca24 <UART_CharReception_Callback>
 800c664:	e7f8      	b.n	800c658 <USART3_IRQHandler+0x20>
 800c666:	bf00      	nop
 800c668:	40020c00 	.word	0x40020c00
 800c66c:	40004800 	.word	0x40004800
 800c670:	2000a888 	.word	0x2000a888

0800c674 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800c676:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c67a:	f7f4 fda9 	bl	80011d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
#ifdef UART_H_
  isrprint("\n\r\033cSCREEN ClEARED\n\r");
 800c67e:	4802      	ldr	r0, [pc, #8]	; (800c688 <EXTI15_10_IRQHandler+0x14>)
 800c680:	f000 f990 	bl	800c9a4 <isrprint>
#endif
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c684:	bd08      	pop	{r3, pc}
 800c686:	bf00      	nop
 800c688:	0800fa20 	.word	0x0800fa20

0800c68c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800c68c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800c68e:	4802      	ldr	r0, [pc, #8]	; (800c698 <ETH_IRQHandler+0xc>)
 800c690:	f7f4 fa96 	bl	8000bc0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800c694:	bd08      	pop	{r3, pc}
 800c696:	bf00      	nop
 800c698:	20008fec 	.word	0x20008fec

0800c69c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c69c:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c69e:	4a0f      	ldr	r2, [pc, #60]	; (800c6dc <SystemInit+0x40>)
 800c6a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800c6a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c6a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c6ac:	4b0c      	ldr	r3, [pc, #48]	; (800c6e0 <SystemInit+0x44>)
 800c6ae:	6819      	ldr	r1, [r3, #0]
 800c6b0:	f041 0101 	orr.w	r1, r1, #1
 800c6b4:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c6ba:	681c      	ldr	r4, [r3, #0]
 800c6bc:	4909      	ldr	r1, [pc, #36]	; (800c6e4 <SystemInit+0x48>)
 800c6be:	4021      	ands	r1, r4
 800c6c0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c6c2:	4909      	ldr	r1, [pc, #36]	; (800c6e8 <SystemInit+0x4c>)
 800c6c4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c6c6:	6819      	ldr	r1, [r3, #0]
 800c6c8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800c6cc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c6ce:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c6d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c6d4:	6093      	str	r3, [r2, #8]
#endif
}
 800c6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6da:	4770      	bx	lr
 800c6dc:	e000ed00 	.word	0xe000ed00
 800c6e0:	40023800 	.word	0x40023800
 800c6e4:	fef6ffff 	.word	0xfef6ffff
 800c6e8:	24003010 	.word	0x24003010

0800c6ec <uartTask>:
SemaphoreHandle_t mutexUART3;
QueueHandle_t queueRxST, queueTxST;
int flagUSART3TxCplt = 1;
int flagUSART3RxCplt = 0;

void uartTask() {
 800c6ec:	b530      	push	{r4, r5, lr}
 800c6ee:	b089      	sub	sp, #36	; 0x24
 800c6f0:	e016      	b.n	800c720 <uartTask+0x34>
	uint8_t byteToSend[DBG_LINE_SIZE];
	int waitingBytes = 0;
	while(1) {
		 	if(0 < (waitingBytes = uxQueueMessagesWaiting( queueTxST ))) {
				if(waitingBytes > DBG_LINE_SIZE)	waitingBytes = DBG_LINE_SIZE;
				for(int i = 0; i < waitingBytes; i++)	xQueueReceive(queueTxST, byteToSend + i, 0);
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	eb0d 0104 	add.w	r1, sp, r4
 800c6fa:	480f      	ldr	r0, [pc, #60]	; (800c738 <uartTask+0x4c>)
 800c6fc:	6800      	ldr	r0, [r0, #0]
 800c6fe:	f7f6 fe75 	bl	80033ec <xQueueGenericReceive>
 800c702:	3401      	adds	r4, #1
 800c704:	42a5      	cmp	r5, r4
 800c706:	dcf4      	bgt.n	800c6f2 <uartTask+0x6>
				while(!flagUSART3TxCplt);
 800c708:	4b0c      	ldr	r3, [pc, #48]	; (800c73c <uartTask+0x50>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0fb      	beq.n	800c708 <uartTask+0x1c>
				flagUSART3TxCplt = 0;
 800c710:	2200      	movs	r2, #0
 800c712:	4b0a      	ldr	r3, [pc, #40]	; (800c73c <uartTask+0x50>)
 800c714:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit_IT(&ST_USART, byteToSend, waitingBytes);
 800c716:	b2aa      	uxth	r2, r5
 800c718:	4669      	mov	r1, sp
 800c71a:	4809      	ldr	r0, [pc, #36]	; (800c740 <uartTask+0x54>)
 800c71c:	f7f5 fdd8 	bl	80022d0 <HAL_UART_Transmit_IT>
		 	if(0 < (waitingBytes = uxQueueMessagesWaiting( queueTxST ))) {
 800c720:	4b05      	ldr	r3, [pc, #20]	; (800c738 <uartTask+0x4c>)
 800c722:	6818      	ldr	r0, [r3, #0]
 800c724:	f7f6 ffa1 	bl	800366a <uxQueueMessagesWaiting>
 800c728:	1e05      	subs	r5, r0, #0
 800c72a:	ddf9      	ble.n	800c720 <uartTask+0x34>
				if(waitingBytes > DBG_LINE_SIZE)	waitingBytes = DBG_LINE_SIZE;
 800c72c:	2d20      	cmp	r5, #32
 800c72e:	dd00      	ble.n	800c732 <uartTask+0x46>
 800c730:	2520      	movs	r5, #32
				for(int i = 0; i < waitingBytes; i++)	xQueueReceive(queueTxST, byteToSend + i, 0);
 800c732:	2400      	movs	r4, #0
 800c734:	e7e6      	b.n	800c704 <uartTask+0x18>
 800c736:	bf00      	nop
 800c738:	2000a904 	.word	0x2000a904
 800c73c:	20000014 	.word	0x20000014
 800c740:	2000a888 	.word	0x2000a888

0800c744 <uartInit>:
		 	}
	}
	vTaskDelete(NULL);
}

void uartInit() {
 800c744:	b510      	push	{r4, lr}
	mutexSerialCom = xSemaphoreCreateMutex();
 800c746:	2001      	movs	r0, #1
 800c748:	f7f6 fd68 	bl	800321c <xQueueCreateMutex>
 800c74c:	4c10      	ldr	r4, [pc, #64]	; (800c790 <uartInit+0x4c>)
 800c74e:	6020      	str	r0, [r4, #0]
	mutexUART3 = xSemaphoreCreateMutex();
 800c750:	2001      	movs	r0, #1
 800c752:	f7f6 fd63 	bl	800321c <xQueueCreateMutex>
 800c756:	4b0f      	ldr	r3, [pc, #60]	; (800c794 <uartInit+0x50>)
 800c758:	6018      	str	r0, [r3, #0]
	queueRxST = xQueueCreate( 100, 1);
 800c75a:	2200      	movs	r2, #0
 800c75c:	2101      	movs	r1, #1
 800c75e:	2064      	movs	r0, #100	; 0x64
 800c760:	f7f6 fc5e 	bl	8003020 <xQueueGenericCreate>
 800c764:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <uartInit+0x54>)
 800c766:	6018      	str	r0, [r3, #0]
	queueTxST = xQueueCreate( 100, 1);
 800c768:	2200      	movs	r2, #0
 800c76a:	2101      	movs	r1, #1
 800c76c:	2064      	movs	r0, #100	; 0x64
 800c76e:	f7f6 fc57 	bl	8003020 <xQueueGenericCreate>
 800c772:	4b0a      	ldr	r3, [pc, #40]	; (800c79c <uartInit+0x58>)
 800c774:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(mutexSerialCom);
 800c776:	2300      	movs	r3, #0
 800c778:	461a      	mov	r2, r3
 800c77a:	4619      	mov	r1, r3
 800c77c:	6820      	ldr	r0, [r4, #0]
 800c77e:	f7f6 fc75 	bl	800306c <xQueueGenericSend>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800c782:	4a07      	ldr	r2, [pc, #28]	; (800c7a0 <uartInit+0x5c>)
 800c784:	6813      	ldr	r3, [r2, #0]
 800c786:	f043 0320 	orr.w	r3, r3, #32
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	bd10      	pop	{r4, pc}
 800c78e:	bf00      	nop
 800c790:	2000a8fc 	.word	0x2000a8fc
 800c794:	2000a900 	.word	0x2000a900
 800c798:	2000a8f8 	.word	0x2000a8f8
 800c79c:	2000a904 	.word	0x2000a904
 800c7a0:	40004800 	.word	0x40004800

0800c7a4 <stprint>:
		}
	}
	vTaskDelete(NULL);
}

void stprint(char* format, ...){
 800c7a4:	b40f      	push	{r0, r1, r2, r3}
 800c7a6:	b510      	push	{r4, lr}
 800c7a8:	b08a      	sub	sp, #40	; 0x28
 800c7aa:	aa0c      	add	r2, sp, #48	; 0x30
 800c7ac:	f852 1b04 	ldr.w	r1, [r2], #4
	char buffer[DBG_LINE_SIZE];
	va_list args;
	va_start (args, format);
 800c7b0:	9201      	str	r2, [sp, #4]
	vsprintf (buffer,format, args);
 800c7b2:	a802      	add	r0, sp, #8
 800c7b4:	f000 fa24 	bl	800cc00 <vsiprintf>
	while(xSemaphoreTake(mutexSerialCom, 100/portTICK_PERIOD_MS) != pdTRUE);
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	2264      	movs	r2, #100	; 0x64
 800c7bc:	4619      	mov	r1, r3
 800c7be:	4811      	ldr	r0, [pc, #68]	; (800c804 <stprint+0x60>)
 800c7c0:	6800      	ldr	r0, [r0, #0]
 800c7c2:	f7f6 fe13 	bl	80033ec <xQueueGenericReceive>
 800c7c6:	2801      	cmp	r0, #1
 800c7c8:	d1f6      	bne.n	800c7b8 <stprint+0x14>
 800c7ca:	2400      	movs	r4, #0
 800c7cc:	e008      	b.n	800c7e0 <stprint+0x3c>
	for(int i = 0; i < strlen(buffer); i++)
		xQueueSendToBack(queueTxST, buffer + i, NULL);
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	a902      	add	r1, sp, #8
 800c7d4:	4421      	add	r1, r4
 800c7d6:	480c      	ldr	r0, [pc, #48]	; (800c808 <stprint+0x64>)
 800c7d8:	6800      	ldr	r0, [r0, #0]
 800c7da:	f7f6 fc47 	bl	800306c <xQueueGenericSend>
	for(int i = 0; i < strlen(buffer); i++)
 800c7de:	3401      	adds	r4, #1
 800c7e0:	a802      	add	r0, sp, #8
 800c7e2:	f7f3 fd37 	bl	8000254 <strlen>
 800c7e6:	42a0      	cmp	r0, r4
 800c7e8:	d8f1      	bhi.n	800c7ce <stprint+0x2a>
	xSemaphoreGive(mutexSerialCom);
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	4804      	ldr	r0, [pc, #16]	; (800c804 <stprint+0x60>)
 800c7f2:	6800      	ldr	r0, [r0, #0]
 800c7f4:	f7f6 fc3a 	bl	800306c <xQueueGenericSend>
	va_end (args);
}
 800c7f8:	b00a      	add	sp, #40	; 0x28
 800c7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7fe:	b004      	add	sp, #16
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	2000a8fc 	.word	0x2000a8fc
 800c808:	2000a904 	.word	0x2000a904

0800c80c <stclear>:

void stclear(){
 800c80c:	b508      	push	{r3, lr}
	stprint("\r\033c");
 800c80e:	4802      	ldr	r0, [pc, #8]	; (800c818 <stclear+0xc>)
 800c810:	f7ff ffc8 	bl	800c7a4 <stprint>
 800c814:	bd08      	pop	{r3, pc}
 800c816:	bf00      	nop
 800c818:	0800f9e8 	.word	0x0800f9e8

0800c81c <commandParserTask>:
void commandParserTask(){
 800c81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c820:	b089      	sub	sp, #36	; 0x24
	char newline = '\n';
 800c822:	230a      	movs	r3, #10
 800c824:	f88d 3003 	strb.w	r3, [sp, #3]
	int echoFlag = 1;
 800c828:	f04f 0901 	mov.w	r9, #1
	int cmdCompleteFlag = 0;
 800c82c:	2400      	movs	r4, #0
	int argCollectFlag = 0;
 800c82e:	46a2      	mov	sl, r4
	int cmdCollectFlag = 0;
 800c830:	4627      	mov	r7, r4
	int argCounter = 0;
 800c832:	4626      	mov	r6, r4
	uint8_t* argPointer = argBuffer[0];
 800c834:	ad01      	add	r5, sp, #4
	uint8_t* cmdPointer = cmdBuffer;
 800c836:	f10d 0818 	add.w	r8, sp, #24
 800c83a:	e062      	b.n	800c902 <commandParserTask+0xe6>
					*cmdPointer = '\0';
 800c83c:	2600      	movs	r6, #0
 800c83e:	f888 6000 	strb.w	r6, [r8]
					argCollectFlag = 1;
 800c842:	46ba      	mov	sl, r7
					cmdCollectFlag = 0;
 800c844:	4637      	mov	r7, r6
					argPointer = argBuffer[0];
 800c846:	ad01      	add	r5, sp, #4
 800c848:	e01d      	b.n	800c886 <commandParserTask+0x6a>
					*cmdPointer = '\0';
 800c84a:	2300      	movs	r3, #0
 800c84c:	f888 3000 	strb.w	r3, [r8]
					**argBuffer = '\0';
 800c850:	f88d 3004 	strb.w	r3, [sp, #4]
					cmdCompleteFlag = 1;
 800c854:	463c      	mov	r4, r7
					cmdCollectFlag = 0;
 800c856:	461f      	mov	r7, r3
 800c858:	e015      	b.n	800c886 <commandParserTask+0x6a>
			else if(argCollectFlag){
 800c85a:	f1ba 0f00 	cmp.w	sl, #0
 800c85e:	d012      	beq.n	800c886 <commandParserTask+0x6a>
				if(byteToProcess == SEP_CHAR){
 800c860:	2b20      	cmp	r3, #32
 800c862:	d004      	beq.n	800c86e <commandParserTask+0x52>
				if(byteToProcess == RETURN_CHAR){
 800c864:	2b0d      	cmp	r3, #13
 800c866:	d006      	beq.n	800c876 <commandParserTask+0x5a>
				else *(argPointer++) = byteToProcess;
 800c868:	702b      	strb	r3, [r5, #0]
 800c86a:	3501      	adds	r5, #1
 800c86c:	e00b      	b.n	800c886 <commandParserTask+0x6a>
					argPointer = argBuffer[++argCounter];
 800c86e:	3601      	adds	r6, #1
 800c870:	aa01      	add	r2, sp, #4
 800c872:	1995      	adds	r5, r2, r6
 800c874:	e7f6      	b.n	800c864 <commandParserTask+0x48>
					*argPointer = '\0';
 800c876:	2300      	movs	r3, #0
 800c878:	702b      	strb	r3, [r5, #0]
					cmdCompleteFlag = 1;
 800c87a:	4654      	mov	r4, sl
					argCollectFlag = 0;
 800c87c:	46ba      	mov	sl, r7
 800c87e:	e002      	b.n	800c886 <commandParserTask+0x6a>
				cmdCollectFlag = 1;
 800c880:	2701      	movs	r7, #1
				cmdPointer = cmdBuffer;
 800c882:	f10d 0818 	add.w	r8, sp, #24
			if(cmdCompleteFlag){
 800c886:	b1ec      	cbz	r4, 800c8c4 <commandParserTask+0xa8>
				if(0 == strcmp(cmdBuffer, "cls")) stclear();
 800c888:	493b      	ldr	r1, [pc, #236]	; (800c978 <commandParserTask+0x15c>)
 800c88a:	a806      	add	r0, sp, #24
 800c88c:	f7f3 fcd8 	bl	8000240 <strcmp>
 800c890:	4683      	mov	fp, r0
 800c892:	b1a0      	cbz	r0, 800c8be <commandParserTask+0xa2>
				else if(0 == strcmp(cmdBuffer, "rbt")) { stprint("REBOOTING..."); NVIC_SystemReset(); }
 800c894:	4939      	ldr	r1, [pc, #228]	; (800c97c <commandParserTask+0x160>)
 800c896:	a806      	add	r0, sp, #24
 800c898:	f7f3 fcd2 	bl	8000240 <strcmp>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d049      	beq.n	800c934 <commandParserTask+0x118>
				else if(0 == strcmp(cmdBuffer, "eon")) echoFlag = 1;
 800c8a0:	4937      	ldr	r1, [pc, #220]	; (800c980 <commandParserTask+0x164>)
 800c8a2:	a806      	add	r0, sp, #24
 800c8a4:	f7f3 fccc 	bl	8000240 <strcmp>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d059      	beq.n	800c960 <commandParserTask+0x144>
				else if(0 == strcmp(cmdBuffer, "eoff")) echoFlag = 0;
 800c8ac:	4935      	ldr	r1, [pc, #212]	; (800c984 <commandParserTask+0x168>)
 800c8ae:	a806      	add	r0, sp, #24
 800c8b0:	f7f3 fcc6 	bl	8000240 <strcmp>
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d14c      	bne.n	800c954 <commandParserTask+0x138>
 800c8ba:	4681      	mov	r9, r0
 800c8bc:	e002      	b.n	800c8c4 <commandParserTask+0xa8>
				if(0 == strcmp(cmdBuffer, "cls")) stclear();
 800c8be:	f7ff ffa5 	bl	800c80c <stclear>
				cmdCompleteFlag = 0;
 800c8c2:	465c      	mov	r4, fp
			if(echoFlag){
 800c8c4:	f1b9 0f00 	cmp.w	r9, #0
 800c8c8:	d01b      	beq.n	800c902 <commandParserTask+0xe6>
				while(xSemaphoreTake(mutexSerialCom, 100/portTICK_PERIOD_MS) != pdTRUE);
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	2264      	movs	r2, #100	; 0x64
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	482d      	ldr	r0, [pc, #180]	; (800c988 <commandParserTask+0x16c>)
 800c8d2:	6800      	ldr	r0, [r0, #0]
 800c8d4:	f7f6 fd8a 	bl	80033ec <xQueueGenericReceive>
 800c8d8:	2801      	cmp	r0, #1
 800c8da:	d1f6      	bne.n	800c8ca <commandParserTask+0xae>
				if(byteToProcess == RETURN_CHAR)	xQueueSendToBack(queueTxST, &newline, NULL);
 800c8dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800c8e0:	2b0d      	cmp	r3, #13
 800c8e2:	d040      	beq.n	800c966 <commandParserTask+0x14a>
				else	xQueueSendToBack(queueTxST, &byteToProcess, NULL);
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	f10d 011f 	add.w	r1, sp, #31
 800c8ec:	4827      	ldr	r0, [pc, #156]	; (800c98c <commandParserTask+0x170>)
 800c8ee:	6800      	ldr	r0, [r0, #0]
 800c8f0:	f7f6 fbbc 	bl	800306c <xQueueGenericSend>
				xSemaphoreGive(mutexSerialCom);
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	4823      	ldr	r0, [pc, #140]	; (800c988 <commandParserTask+0x16c>)
 800c8fc:	6800      	ldr	r0, [r0, #0]
 800c8fe:	f7f6 fbb5 	bl	800306c <xQueueGenericSend>
		if(xQueueReceive(queueRxST, &byteToProcess, 100/portTICK_PERIOD_MS) == pdTRUE){
 800c902:	2300      	movs	r3, #0
 800c904:	2264      	movs	r2, #100	; 0x64
 800c906:	f10d 011f 	add.w	r1, sp, #31
 800c90a:	4821      	ldr	r0, [pc, #132]	; (800c990 <commandParserTask+0x174>)
 800c90c:	6800      	ldr	r0, [r0, #0]
 800c90e:	f7f6 fd6d 	bl	80033ec <xQueueGenericReceive>
 800c912:	2801      	cmp	r0, #1
 800c914:	d1f5      	bne.n	800c902 <commandParserTask+0xe6>
			if(byteToProcess == CMD_CHAR){
 800c916:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800c91a:	2b23      	cmp	r3, #35	; 0x23
 800c91c:	d0b0      	beq.n	800c880 <commandParserTask+0x64>
			else if(cmdCollectFlag){
 800c91e:	2f00      	cmp	r7, #0
 800c920:	d09b      	beq.n	800c85a <commandParserTask+0x3e>
				if(byteToProcess == SEP_CHAR){
 800c922:	2b20      	cmp	r3, #32
 800c924:	d08a      	beq.n	800c83c <commandParserTask+0x20>
				else if(byteToProcess == RETURN_CHAR){
 800c926:	2b0d      	cmp	r3, #13
 800c928:	d08f      	beq.n	800c84a <commandParserTask+0x2e>
				else *(cmdPointer++) = byteToProcess;
 800c92a:	f888 3000 	strb.w	r3, [r8]
 800c92e:	f108 0801 	add.w	r8, r8, #1
 800c932:	e7a8      	b.n	800c886 <commandParserTask+0x6a>
				else if(0 == strcmp(cmdBuffer, "rbt")) { stprint("REBOOTING..."); NVIC_SystemReset(); }
 800c934:	4817      	ldr	r0, [pc, #92]	; (800c994 <commandParserTask+0x178>)
 800c936:	f7ff ff35 	bl	800c7a4 <stprint>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c93a:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c93e:	4916      	ldr	r1, [pc, #88]	; (800c998 <commandParserTask+0x17c>)
 800c940:	68ca      	ldr	r2, [r1, #12]
 800c942:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c946:	4b15      	ldr	r3, [pc, #84]	; (800c99c <commandParserTask+0x180>)
 800c948:	4313      	orrs	r3, r2
 800c94a:	60cb      	str	r3, [r1, #12]
 800c94c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800c950:	bf00      	nop
 800c952:	e7fd      	b.n	800c950 <commandParserTask+0x134>
				else stprint("\nUnknown command: %s", cmdBuffer);
 800c954:	a906      	add	r1, sp, #24
 800c956:	4812      	ldr	r0, [pc, #72]	; (800c9a0 <commandParserTask+0x184>)
 800c958:	f7ff ff24 	bl	800c7a4 <stprint>
				cmdCompleteFlag = 0;
 800c95c:	2400      	movs	r4, #0
 800c95e:	e7b1      	b.n	800c8c4 <commandParserTask+0xa8>
				else if(0 == strcmp(cmdBuffer, "eon")) echoFlag = 1;
 800c960:	46a1      	mov	r9, r4
				cmdCompleteFlag = 0;
 800c962:	4604      	mov	r4, r0
 800c964:	e7ae      	b.n	800c8c4 <commandParserTask+0xa8>
				if(byteToProcess == RETURN_CHAR)	xQueueSendToBack(queueTxST, &newline, NULL);
 800c966:	2300      	movs	r3, #0
 800c968:	461a      	mov	r2, r3
 800c96a:	f10d 0103 	add.w	r1, sp, #3
 800c96e:	4807      	ldr	r0, [pc, #28]	; (800c98c <commandParserTask+0x170>)
 800c970:	6800      	ldr	r0, [r0, #0]
 800c972:	f7f6 fb7b 	bl	800306c <xQueueGenericSend>
 800c976:	e7bd      	b.n	800c8f4 <commandParserTask+0xd8>
 800c978:	0800fa50 	.word	0x0800fa50
 800c97c:	0800fa54 	.word	0x0800fa54
 800c980:	0800fa68 	.word	0x0800fa68
 800c984:	0800fa6c 	.word	0x0800fa6c
 800c988:	2000a8fc 	.word	0x2000a8fc
 800c98c:	2000a904 	.word	0x2000a904
 800c990:	2000a8f8 	.word	0x2000a8f8
 800c994:	0800fa58 	.word	0x0800fa58
 800c998:	e000ed00 	.word	0xe000ed00
 800c99c:	05fa0004 	.word	0x05fa0004
 800c9a0:	0800fa74 	.word	0x0800fa74

0800c9a4 <isrprint>:
}

void isrprint(char* format, ...){
 800c9a4:	b40f      	push	{r0, r1, r2, r3}
 800c9a6:	b510      	push	{r4, lr}
 800c9a8:	b08a      	sub	sp, #40	; 0x28
 800c9aa:	aa0c      	add	r2, sp, #48	; 0x30
 800c9ac:	f852 1b04 	ldr.w	r1, [r2], #4
	char buffer[DBG_LINE_SIZE];
	va_list args;
	va_start (args, format);
 800c9b0:	9201      	str	r2, [sp, #4]
	vsprintf (buffer,format, args);
 800c9b2:	a802      	add	r0, sp, #8
 800c9b4:	f000 f924 	bl	800cc00 <vsiprintf>
	while(xSemaphoreTakeFromISR(mutexSerialCom, 100/portTICK_PERIOD_MS) != pdTRUE);
 800c9b8:	2264      	movs	r2, #100	; 0x64
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	4b0f      	ldr	r3, [pc, #60]	; (800c9fc <isrprint+0x58>)
 800c9be:	6818      	ldr	r0, [r3, #0]
 800c9c0:	f7f6 fdf2 	bl	80035a8 <xQueueReceiveFromISR>
 800c9c4:	2801      	cmp	r0, #1
 800c9c6:	d1f7      	bne.n	800c9b8 <isrprint+0x14>
 800c9c8:	2400      	movs	r4, #0
 800c9ca:	e008      	b.n	800c9de <isrprint+0x3a>
	for(int i = 0; i < strlen(buffer); i++)
		xQueueSendToBackFromISR(queueTxST, buffer + i, NULL);
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	a902      	add	r1, sp, #8
 800c9d2:	4421      	add	r1, r4
 800c9d4:	480a      	ldr	r0, [pc, #40]	; (800ca00 <isrprint+0x5c>)
 800c9d6:	6800      	ldr	r0, [r0, #0]
 800c9d8:	f7f6 fc2b 	bl	8003232 <xQueueGenericSendFromISR>
	for(int i = 0; i < strlen(buffer); i++)
 800c9dc:	3401      	adds	r4, #1
 800c9de:	a802      	add	r0, sp, #8
 800c9e0:	f7f3 fc38 	bl	8000254 <strlen>
 800c9e4:	42a0      	cmp	r0, r4
 800c9e6:	d8f1      	bhi.n	800c9cc <isrprint+0x28>
	xSemaphoreGiveFromISR(mutexSerialCom, NULL);
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	4b04      	ldr	r3, [pc, #16]	; (800c9fc <isrprint+0x58>)
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	f7f6 fc97 	bl	8003320 <xQueueGiveFromISR>
	va_end (args);
}
 800c9f2:	b00a      	add	sp, #40	; 0x28
 800c9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f8:	b004      	add	sp, #16
 800c9fa:	4770      	bx	lr
 800c9fc:	2000a8fc 	.word	0x2000a8fc
 800ca00:	2000a904 	.word	0x2000a904

0800ca04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800ca04:	b508      	push	{r3, lr}
	flagUSART3TxCplt = 1;
 800ca06:	2201      	movs	r2, #1
 800ca08:	4b04      	ldr	r3, [pc, #16]	; (800ca1c <HAL_UART_TxCpltCallback+0x18>)
 800ca0a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LDTX_GPIO_Port, LDTX_Pin, GPIO_PIN_RESET);
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ca12:	4803      	ldr	r0, [pc, #12]	; (800ca20 <HAL_UART_TxCpltCallback+0x1c>)
 800ca14:	f7f4 fbd1 	bl	80011ba <HAL_GPIO_WritePin>
 800ca18:	bd08      	pop	{r3, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20000014 	.word	0x20000014
 800ca20:	40020c00 	.word	0x40020c00

0800ca24 <UART_CharReception_Callback>:
}

void UART_CharReception_Callback(){
 800ca24:	b500      	push	{lr}
 800ca26:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(LDRX_GPIO_Port, LDRX_Pin, GPIO_PIN_SET);
 800ca28:	2201      	movs	r2, #1
 800ca2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ca2e:	4808      	ldr	r0, [pc, #32]	; (800ca50 <UART_CharReception_Callback+0x2c>)
 800ca30:	f7f4 fbc3 	bl	80011ba <HAL_GPIO_WritePin>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 800ca34:	4b07      	ldr	r3, [pc, #28]	; (800ca54 <UART_CharReception_Callback+0x30>)
 800ca36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t byteToSave = LL_USART_ReceiveData8(ST_USART_LL);
 800ca38:	a902      	add	r1, sp, #8
 800ca3a:	f801 3d01 	strb.w	r3, [r1, #-1]!
	xQueueSendToBackFromISR(queueRxST, &byteToSave, NULL);
 800ca3e:	2300      	movs	r3, #0
 800ca40:	461a      	mov	r2, r3
 800ca42:	4805      	ldr	r0, [pc, #20]	; (800ca58 <UART_CharReception_Callback+0x34>)
 800ca44:	6800      	ldr	r0, [r0, #0]
 800ca46:	f7f6 fbf4 	bl	8003232 <xQueueGenericSendFromISR>
	//xQueueSendToBackFromISR(queueTxST, &byteToSave, NULL); //hardcoded echo
}
 800ca4a:	b003      	add	sp, #12
 800ca4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca50:	40020c00 	.word	0x40020c00
 800ca54:	40004800 	.word	0x40004800
 800ca58:	2000a8f8 	.word	0x2000a8f8

0800ca5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ca5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ca94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ca60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ca62:	e003      	b.n	800ca6c <LoopCopyDataInit>

0800ca64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ca64:	4b0c      	ldr	r3, [pc, #48]	; (800ca98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ca66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ca68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ca6a:	3104      	adds	r1, #4

0800ca6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ca6c:	480b      	ldr	r0, [pc, #44]	; (800ca9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ca6e:	4b0c      	ldr	r3, [pc, #48]	; (800caa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ca70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ca72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ca74:	d3f6      	bcc.n	800ca64 <CopyDataInit>
  ldr  r2, =_sbss
 800ca76:	4a0b      	ldr	r2, [pc, #44]	; (800caa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ca78:	e002      	b.n	800ca80 <LoopFillZerobss>

0800ca7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ca7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ca7c:	f842 3b04 	str.w	r3, [r2], #4

0800ca80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ca80:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ca82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ca84:	d3f9      	bcc.n	800ca7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ca86:	f7ff fe09 	bl	800c69c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ca8a:	f000 f811 	bl	800cab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ca8e:	f7ff fcf5 	bl	800c47c <main>
  bx  lr    
 800ca92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ca94:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800ca98:	0800fb34 	.word	0x0800fb34
  ldr  r0, =_sdata
 800ca9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800caa0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800caa4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800caa8:	2000a908 	.word	0x2000a908

0800caac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800caac:	e7fe      	b.n	800caac <ADC_IRQHandler>
	...

0800cab0 <__libc_init_array>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	4e0d      	ldr	r6, [pc, #52]	; (800cae8 <__libc_init_array+0x38>)
 800cab4:	4c0d      	ldr	r4, [pc, #52]	; (800caec <__libc_init_array+0x3c>)
 800cab6:	1ba4      	subs	r4, r4, r6
 800cab8:	10a4      	asrs	r4, r4, #2
 800caba:	2500      	movs	r5, #0
 800cabc:	42a5      	cmp	r5, r4
 800cabe:	d109      	bne.n	800cad4 <__libc_init_array+0x24>
 800cac0:	4e0b      	ldr	r6, [pc, #44]	; (800caf0 <__libc_init_array+0x40>)
 800cac2:	4c0c      	ldr	r4, [pc, #48]	; (800caf4 <__libc_init_array+0x44>)
 800cac4:	f001 f952 	bl	800dd6c <_init>
 800cac8:	1ba4      	subs	r4, r4, r6
 800caca:	10a4      	asrs	r4, r4, #2
 800cacc:	2500      	movs	r5, #0
 800cace:	42a5      	cmp	r5, r4
 800cad0:	d105      	bne.n	800cade <__libc_init_array+0x2e>
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
 800cad4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cad8:	4798      	blx	r3
 800cada:	3501      	adds	r5, #1
 800cadc:	e7ee      	b.n	800cabc <__libc_init_array+0xc>
 800cade:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cae2:	4798      	blx	r3
 800cae4:	3501      	adds	r5, #1
 800cae6:	e7f2      	b.n	800cace <__libc_init_array+0x1e>
 800cae8:	0800fb2c 	.word	0x0800fb2c
 800caec:	0800fb2c 	.word	0x0800fb2c
 800caf0:	0800fb2c 	.word	0x0800fb2c
 800caf4:	0800fb30 	.word	0x0800fb30

0800caf8 <memcmp>:
 800caf8:	b530      	push	{r4, r5, lr}
 800cafa:	2400      	movs	r4, #0
 800cafc:	42a2      	cmp	r2, r4
 800cafe:	d101      	bne.n	800cb04 <memcmp+0xc>
 800cb00:	2000      	movs	r0, #0
 800cb02:	e007      	b.n	800cb14 <memcmp+0x1c>
 800cb04:	5d03      	ldrb	r3, [r0, r4]
 800cb06:	3401      	adds	r4, #1
 800cb08:	190d      	adds	r5, r1, r4
 800cb0a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800cb0e:	42ab      	cmp	r3, r5
 800cb10:	d0f4      	beq.n	800cafc <memcmp+0x4>
 800cb12:	1b58      	subs	r0, r3, r5
 800cb14:	bd30      	pop	{r4, r5, pc}

0800cb16 <memcpy>:
 800cb16:	b510      	push	{r4, lr}
 800cb18:	1e43      	subs	r3, r0, #1
 800cb1a:	440a      	add	r2, r1
 800cb1c:	4291      	cmp	r1, r2
 800cb1e:	d100      	bne.n	800cb22 <memcpy+0xc>
 800cb20:	bd10      	pop	{r4, pc}
 800cb22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb2a:	e7f7      	b.n	800cb1c <memcpy+0x6>

0800cb2c <memset>:
 800cb2c:	4402      	add	r2, r0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d100      	bne.n	800cb36 <memset+0xa>
 800cb34:	4770      	bx	lr
 800cb36:	f803 1b01 	strb.w	r1, [r3], #1
 800cb3a:	e7f9      	b.n	800cb30 <memset+0x4>

0800cb3c <iprintf>:
 800cb3c:	b40f      	push	{r0, r1, r2, r3}
 800cb3e:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <iprintf+0x2c>)
 800cb40:	b513      	push	{r0, r1, r4, lr}
 800cb42:	681c      	ldr	r4, [r3, #0]
 800cb44:	b124      	cbz	r4, 800cb50 <iprintf+0x14>
 800cb46:	69a3      	ldr	r3, [r4, #24]
 800cb48:	b913      	cbnz	r3, 800cb50 <iprintf+0x14>
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 f8a2 	bl	800cc94 <__sinit>
 800cb50:	ab05      	add	r3, sp, #20
 800cb52:	9a04      	ldr	r2, [sp, #16]
 800cb54:	68a1      	ldr	r1, [r4, #8]
 800cb56:	9301      	str	r3, [sp, #4]
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 fb51 	bl	800d200 <_vfiprintf_r>
 800cb5e:	b002      	add	sp, #8
 800cb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb64:	b004      	add	sp, #16
 800cb66:	4770      	bx	lr
 800cb68:	20000018 	.word	0x20000018

0800cb6c <rand>:
 800cb6c:	b538      	push	{r3, r4, r5, lr}
 800cb6e:	4b13      	ldr	r3, [pc, #76]	; (800cbbc <rand+0x50>)
 800cb70:	681c      	ldr	r4, [r3, #0]
 800cb72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cb74:	b97b      	cbnz	r3, 800cb96 <rand+0x2a>
 800cb76:	2018      	movs	r0, #24
 800cb78:	f000 f916 	bl	800cda8 <malloc>
 800cb7c:	4a10      	ldr	r2, [pc, #64]	; (800cbc0 <rand+0x54>)
 800cb7e:	4b11      	ldr	r3, [pc, #68]	; (800cbc4 <rand+0x58>)
 800cb80:	63a0      	str	r0, [r4, #56]	; 0x38
 800cb82:	e9c0 2300 	strd	r2, r3, [r0]
 800cb86:	4b10      	ldr	r3, [pc, #64]	; (800cbc8 <rand+0x5c>)
 800cb88:	6083      	str	r3, [r0, #8]
 800cb8a:	230b      	movs	r3, #11
 800cb8c:	8183      	strh	r3, [r0, #12]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	2300      	movs	r3, #0
 800cb92:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cb96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb98:	480c      	ldr	r0, [pc, #48]	; (800cbcc <rand+0x60>)
 800cb9a:	690a      	ldr	r2, [r1, #16]
 800cb9c:	694b      	ldr	r3, [r1, #20]
 800cb9e:	4c0c      	ldr	r4, [pc, #48]	; (800cbd0 <rand+0x64>)
 800cba0:	4350      	muls	r0, r2
 800cba2:	fb04 0003 	mla	r0, r4, r3, r0
 800cba6:	fba2 2304 	umull	r2, r3, r2, r4
 800cbaa:	4403      	add	r3, r0
 800cbac:	1c54      	adds	r4, r2, #1
 800cbae:	f143 0500 	adc.w	r5, r3, #0
 800cbb2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800cbb6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800cbba:	bd38      	pop	{r3, r4, r5, pc}
 800cbbc:	20000018 	.word	0x20000018
 800cbc0:	abcd330e 	.word	0xabcd330e
 800cbc4:	e66d1234 	.word	0xe66d1234
 800cbc8:	0005deec 	.word	0x0005deec
 800cbcc:	5851f42d 	.word	0x5851f42d
 800cbd0:	4c957f2d 	.word	0x4c957f2d

0800cbd4 <_vsiprintf_r>:
 800cbd4:	b500      	push	{lr}
 800cbd6:	b09b      	sub	sp, #108	; 0x6c
 800cbd8:	9100      	str	r1, [sp, #0]
 800cbda:	9104      	str	r1, [sp, #16]
 800cbdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbe0:	9105      	str	r1, [sp, #20]
 800cbe2:	9102      	str	r1, [sp, #8]
 800cbe4:	4905      	ldr	r1, [pc, #20]	; (800cbfc <_vsiprintf_r+0x28>)
 800cbe6:	9103      	str	r1, [sp, #12]
 800cbe8:	4669      	mov	r1, sp
 800cbea:	f000 f9e7 	bl	800cfbc <_svfiprintf_r>
 800cbee:	9b00      	ldr	r3, [sp, #0]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	701a      	strb	r2, [r3, #0]
 800cbf4:	b01b      	add	sp, #108	; 0x6c
 800cbf6:	f85d fb04 	ldr.w	pc, [sp], #4
 800cbfa:	bf00      	nop
 800cbfc:	ffff0208 	.word	0xffff0208

0800cc00 <vsiprintf>:
 800cc00:	4613      	mov	r3, r2
 800cc02:	460a      	mov	r2, r1
 800cc04:	4601      	mov	r1, r0
 800cc06:	4802      	ldr	r0, [pc, #8]	; (800cc10 <vsiprintf+0x10>)
 800cc08:	6800      	ldr	r0, [r0, #0]
 800cc0a:	f7ff bfe3 	b.w	800cbd4 <_vsiprintf_r>
 800cc0e:	bf00      	nop
 800cc10:	20000018 	.word	0x20000018

0800cc14 <std>:
 800cc14:	2300      	movs	r3, #0
 800cc16:	b510      	push	{r4, lr}
 800cc18:	4604      	mov	r4, r0
 800cc1a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc1e:	6083      	str	r3, [r0, #8]
 800cc20:	8181      	strh	r1, [r0, #12]
 800cc22:	6643      	str	r3, [r0, #100]	; 0x64
 800cc24:	81c2      	strh	r2, [r0, #14]
 800cc26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc2a:	6183      	str	r3, [r0, #24]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	2208      	movs	r2, #8
 800cc30:	305c      	adds	r0, #92	; 0x5c
 800cc32:	f7ff ff7b 	bl	800cb2c <memset>
 800cc36:	4b05      	ldr	r3, [pc, #20]	; (800cc4c <std+0x38>)
 800cc38:	6263      	str	r3, [r4, #36]	; 0x24
 800cc3a:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <std+0x3c>)
 800cc3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc3e:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <std+0x40>)
 800cc40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc42:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <std+0x44>)
 800cc44:	6224      	str	r4, [r4, #32]
 800cc46:	6323      	str	r3, [r4, #48]	; 0x30
 800cc48:	bd10      	pop	{r4, pc}
 800cc4a:	bf00      	nop
 800cc4c:	0800d75d 	.word	0x0800d75d
 800cc50:	0800d77f 	.word	0x0800d77f
 800cc54:	0800d7b7 	.word	0x0800d7b7
 800cc58:	0800d7db 	.word	0x0800d7db

0800cc5c <_cleanup_r>:
 800cc5c:	4901      	ldr	r1, [pc, #4]	; (800cc64 <_cleanup_r+0x8>)
 800cc5e:	f000 b885 	b.w	800cd6c <_fwalk_reent>
 800cc62:	bf00      	nop
 800cc64:	0800dab5 	.word	0x0800dab5

0800cc68 <__sfmoreglue>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	1e4a      	subs	r2, r1, #1
 800cc6c:	2568      	movs	r5, #104	; 0x68
 800cc6e:	4355      	muls	r5, r2
 800cc70:	460e      	mov	r6, r1
 800cc72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc76:	f000 f8ed 	bl	800ce54 <_malloc_r>
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	b140      	cbz	r0, 800cc90 <__sfmoreglue+0x28>
 800cc7e:	2100      	movs	r1, #0
 800cc80:	e9c0 1600 	strd	r1, r6, [r0]
 800cc84:	300c      	adds	r0, #12
 800cc86:	60a0      	str	r0, [r4, #8]
 800cc88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc8c:	f7ff ff4e 	bl	800cb2c <memset>
 800cc90:	4620      	mov	r0, r4
 800cc92:	bd70      	pop	{r4, r5, r6, pc}

0800cc94 <__sinit>:
 800cc94:	6983      	ldr	r3, [r0, #24]
 800cc96:	b510      	push	{r4, lr}
 800cc98:	4604      	mov	r4, r0
 800cc9a:	bb33      	cbnz	r3, 800ccea <__sinit+0x56>
 800cc9c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cca0:	6503      	str	r3, [r0, #80]	; 0x50
 800cca2:	4b12      	ldr	r3, [pc, #72]	; (800ccec <__sinit+0x58>)
 800cca4:	4a12      	ldr	r2, [pc, #72]	; (800ccf0 <__sinit+0x5c>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6282      	str	r2, [r0, #40]	; 0x28
 800ccaa:	4298      	cmp	r0, r3
 800ccac:	bf04      	itt	eq
 800ccae:	2301      	moveq	r3, #1
 800ccb0:	6183      	streq	r3, [r0, #24]
 800ccb2:	f000 f81f 	bl	800ccf4 <__sfp>
 800ccb6:	6060      	str	r0, [r4, #4]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f000 f81b 	bl	800ccf4 <__sfp>
 800ccbe:	60a0      	str	r0, [r4, #8]
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f000 f817 	bl	800ccf4 <__sfp>
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	60e0      	str	r0, [r4, #12]
 800ccca:	2104      	movs	r1, #4
 800cccc:	6860      	ldr	r0, [r4, #4]
 800ccce:	f7ff ffa1 	bl	800cc14 <std>
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	2109      	movs	r1, #9
 800ccd6:	68a0      	ldr	r0, [r4, #8]
 800ccd8:	f7ff ff9c 	bl	800cc14 <std>
 800ccdc:	2202      	movs	r2, #2
 800ccde:	2112      	movs	r1, #18
 800cce0:	68e0      	ldr	r0, [r4, #12]
 800cce2:	f7ff ff97 	bl	800cc14 <std>
 800cce6:	2301      	movs	r3, #1
 800cce8:	61a3      	str	r3, [r4, #24]
 800ccea:	bd10      	pop	{r4, pc}
 800ccec:	0800fa8c 	.word	0x0800fa8c
 800ccf0:	0800cc5d 	.word	0x0800cc5d

0800ccf4 <__sfp>:
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf6:	4b1b      	ldr	r3, [pc, #108]	; (800cd64 <__sfp+0x70>)
 800ccf8:	681e      	ldr	r6, [r3, #0]
 800ccfa:	69b3      	ldr	r3, [r6, #24]
 800ccfc:	4607      	mov	r7, r0
 800ccfe:	b913      	cbnz	r3, 800cd06 <__sfp+0x12>
 800cd00:	4630      	mov	r0, r6
 800cd02:	f7ff ffc7 	bl	800cc94 <__sinit>
 800cd06:	3648      	adds	r6, #72	; 0x48
 800cd08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	d503      	bpl.n	800cd18 <__sfp+0x24>
 800cd10:	6833      	ldr	r3, [r6, #0]
 800cd12:	b133      	cbz	r3, 800cd22 <__sfp+0x2e>
 800cd14:	6836      	ldr	r6, [r6, #0]
 800cd16:	e7f7      	b.n	800cd08 <__sfp+0x14>
 800cd18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd1c:	b16d      	cbz	r5, 800cd3a <__sfp+0x46>
 800cd1e:	3468      	adds	r4, #104	; 0x68
 800cd20:	e7f4      	b.n	800cd0c <__sfp+0x18>
 800cd22:	2104      	movs	r1, #4
 800cd24:	4638      	mov	r0, r7
 800cd26:	f7ff ff9f 	bl	800cc68 <__sfmoreglue>
 800cd2a:	6030      	str	r0, [r6, #0]
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d1f1      	bne.n	800cd14 <__sfp+0x20>
 800cd30:	230c      	movs	r3, #12
 800cd32:	603b      	str	r3, [r7, #0]
 800cd34:	4604      	mov	r4, r0
 800cd36:	4620      	mov	r0, r4
 800cd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd3a:	4b0b      	ldr	r3, [pc, #44]	; (800cd68 <__sfp+0x74>)
 800cd3c:	6665      	str	r5, [r4, #100]	; 0x64
 800cd3e:	e9c4 5500 	strd	r5, r5, [r4]
 800cd42:	60a5      	str	r5, [r4, #8]
 800cd44:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cd48:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cd4c:	2208      	movs	r2, #8
 800cd4e:	4629      	mov	r1, r5
 800cd50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd54:	f7ff feea 	bl	800cb2c <memset>
 800cd58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd60:	e7e9      	b.n	800cd36 <__sfp+0x42>
 800cd62:	bf00      	nop
 800cd64:	0800fa8c 	.word	0x0800fa8c
 800cd68:	ffff0001 	.word	0xffff0001

0800cd6c <_fwalk_reent>:
 800cd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd70:	4680      	mov	r8, r0
 800cd72:	4689      	mov	r9, r1
 800cd74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd78:	2600      	movs	r6, #0
 800cd7a:	b914      	cbnz	r4, 800cd82 <_fwalk_reent+0x16>
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd82:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cd86:	3f01      	subs	r7, #1
 800cd88:	d501      	bpl.n	800cd8e <_fwalk_reent+0x22>
 800cd8a:	6824      	ldr	r4, [r4, #0]
 800cd8c:	e7f5      	b.n	800cd7a <_fwalk_reent+0xe>
 800cd8e:	89ab      	ldrh	r3, [r5, #12]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d907      	bls.n	800cda4 <_fwalk_reent+0x38>
 800cd94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	d003      	beq.n	800cda4 <_fwalk_reent+0x38>
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	4640      	mov	r0, r8
 800cda0:	47c8      	blx	r9
 800cda2:	4306      	orrs	r6, r0
 800cda4:	3568      	adds	r5, #104	; 0x68
 800cda6:	e7ee      	b.n	800cd86 <_fwalk_reent+0x1a>

0800cda8 <malloc>:
 800cda8:	4b02      	ldr	r3, [pc, #8]	; (800cdb4 <malloc+0xc>)
 800cdaa:	4601      	mov	r1, r0
 800cdac:	6818      	ldr	r0, [r3, #0]
 800cdae:	f000 b851 	b.w	800ce54 <_malloc_r>
 800cdb2:	bf00      	nop
 800cdb4:	20000018 	.word	0x20000018

0800cdb8 <_free_r>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4605      	mov	r5, r0
 800cdbc:	2900      	cmp	r1, #0
 800cdbe:	d045      	beq.n	800ce4c <_free_r+0x94>
 800cdc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc4:	1f0c      	subs	r4, r1, #4
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	bfb8      	it	lt
 800cdca:	18e4      	addlt	r4, r4, r3
 800cdcc:	f000 ff2b 	bl	800dc26 <__malloc_lock>
 800cdd0:	4a1f      	ldr	r2, [pc, #124]	; (800ce50 <_free_r+0x98>)
 800cdd2:	6813      	ldr	r3, [r2, #0]
 800cdd4:	4610      	mov	r0, r2
 800cdd6:	b933      	cbnz	r3, 800cde6 <_free_r+0x2e>
 800cdd8:	6063      	str	r3, [r4, #4]
 800cdda:	6014      	str	r4, [r2, #0]
 800cddc:	4628      	mov	r0, r5
 800cdde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cde2:	f000 bf21 	b.w	800dc28 <__malloc_unlock>
 800cde6:	42a3      	cmp	r3, r4
 800cde8:	d90c      	bls.n	800ce04 <_free_r+0x4c>
 800cdea:	6821      	ldr	r1, [r4, #0]
 800cdec:	1862      	adds	r2, r4, r1
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	bf04      	itt	eq
 800cdf2:	681a      	ldreq	r2, [r3, #0]
 800cdf4:	685b      	ldreq	r3, [r3, #4]
 800cdf6:	6063      	str	r3, [r4, #4]
 800cdf8:	bf04      	itt	eq
 800cdfa:	1852      	addeq	r2, r2, r1
 800cdfc:	6022      	streq	r2, [r4, #0]
 800cdfe:	6004      	str	r4, [r0, #0]
 800ce00:	e7ec      	b.n	800cddc <_free_r+0x24>
 800ce02:	4613      	mov	r3, r2
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	b10a      	cbz	r2, 800ce0c <_free_r+0x54>
 800ce08:	42a2      	cmp	r2, r4
 800ce0a:	d9fa      	bls.n	800ce02 <_free_r+0x4a>
 800ce0c:	6819      	ldr	r1, [r3, #0]
 800ce0e:	1858      	adds	r0, r3, r1
 800ce10:	42a0      	cmp	r0, r4
 800ce12:	d10b      	bne.n	800ce2c <_free_r+0x74>
 800ce14:	6820      	ldr	r0, [r4, #0]
 800ce16:	4401      	add	r1, r0
 800ce18:	1858      	adds	r0, r3, r1
 800ce1a:	4282      	cmp	r2, r0
 800ce1c:	6019      	str	r1, [r3, #0]
 800ce1e:	d1dd      	bne.n	800cddc <_free_r+0x24>
 800ce20:	6810      	ldr	r0, [r2, #0]
 800ce22:	6852      	ldr	r2, [r2, #4]
 800ce24:	605a      	str	r2, [r3, #4]
 800ce26:	4401      	add	r1, r0
 800ce28:	6019      	str	r1, [r3, #0]
 800ce2a:	e7d7      	b.n	800cddc <_free_r+0x24>
 800ce2c:	d902      	bls.n	800ce34 <_free_r+0x7c>
 800ce2e:	230c      	movs	r3, #12
 800ce30:	602b      	str	r3, [r5, #0]
 800ce32:	e7d3      	b.n	800cddc <_free_r+0x24>
 800ce34:	6820      	ldr	r0, [r4, #0]
 800ce36:	1821      	adds	r1, r4, r0
 800ce38:	428a      	cmp	r2, r1
 800ce3a:	bf04      	itt	eq
 800ce3c:	6811      	ldreq	r1, [r2, #0]
 800ce3e:	6852      	ldreq	r2, [r2, #4]
 800ce40:	6062      	str	r2, [r4, #4]
 800ce42:	bf04      	itt	eq
 800ce44:	1809      	addeq	r1, r1, r0
 800ce46:	6021      	streq	r1, [r4, #0]
 800ce48:	605c      	str	r4, [r3, #4]
 800ce4a:	e7c7      	b.n	800cddc <_free_r+0x24>
 800ce4c:	bd38      	pop	{r3, r4, r5, pc}
 800ce4e:	bf00      	nop
 800ce50:	20003f8c 	.word	0x20003f8c

0800ce54 <_malloc_r>:
 800ce54:	b570      	push	{r4, r5, r6, lr}
 800ce56:	1ccd      	adds	r5, r1, #3
 800ce58:	f025 0503 	bic.w	r5, r5, #3
 800ce5c:	3508      	adds	r5, #8
 800ce5e:	2d0c      	cmp	r5, #12
 800ce60:	bf38      	it	cc
 800ce62:	250c      	movcc	r5, #12
 800ce64:	2d00      	cmp	r5, #0
 800ce66:	4606      	mov	r6, r0
 800ce68:	db01      	blt.n	800ce6e <_malloc_r+0x1a>
 800ce6a:	42a9      	cmp	r1, r5
 800ce6c:	d903      	bls.n	800ce76 <_malloc_r+0x22>
 800ce6e:	230c      	movs	r3, #12
 800ce70:	6033      	str	r3, [r6, #0]
 800ce72:	2000      	movs	r0, #0
 800ce74:	bd70      	pop	{r4, r5, r6, pc}
 800ce76:	f000 fed6 	bl	800dc26 <__malloc_lock>
 800ce7a:	4a21      	ldr	r2, [pc, #132]	; (800cf00 <_malloc_r+0xac>)
 800ce7c:	6814      	ldr	r4, [r2, #0]
 800ce7e:	4621      	mov	r1, r4
 800ce80:	b991      	cbnz	r1, 800cea8 <_malloc_r+0x54>
 800ce82:	4c20      	ldr	r4, [pc, #128]	; (800cf04 <_malloc_r+0xb0>)
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	b91b      	cbnz	r3, 800ce90 <_malloc_r+0x3c>
 800ce88:	4630      	mov	r0, r6
 800ce8a:	f000 fc57 	bl	800d73c <_sbrk_r>
 800ce8e:	6020      	str	r0, [r4, #0]
 800ce90:	4629      	mov	r1, r5
 800ce92:	4630      	mov	r0, r6
 800ce94:	f000 fc52 	bl	800d73c <_sbrk_r>
 800ce98:	1c43      	adds	r3, r0, #1
 800ce9a:	d124      	bne.n	800cee6 <_malloc_r+0x92>
 800ce9c:	230c      	movs	r3, #12
 800ce9e:	6033      	str	r3, [r6, #0]
 800cea0:	4630      	mov	r0, r6
 800cea2:	f000 fec1 	bl	800dc28 <__malloc_unlock>
 800cea6:	e7e4      	b.n	800ce72 <_malloc_r+0x1e>
 800cea8:	680b      	ldr	r3, [r1, #0]
 800ceaa:	1b5b      	subs	r3, r3, r5
 800ceac:	d418      	bmi.n	800cee0 <_malloc_r+0x8c>
 800ceae:	2b0b      	cmp	r3, #11
 800ceb0:	d90f      	bls.n	800ced2 <_malloc_r+0x7e>
 800ceb2:	600b      	str	r3, [r1, #0]
 800ceb4:	50cd      	str	r5, [r1, r3]
 800ceb6:	18cc      	adds	r4, r1, r3
 800ceb8:	4630      	mov	r0, r6
 800ceba:	f000 feb5 	bl	800dc28 <__malloc_unlock>
 800cebe:	f104 000b 	add.w	r0, r4, #11
 800cec2:	1d23      	adds	r3, r4, #4
 800cec4:	f020 0007 	bic.w	r0, r0, #7
 800cec8:	1ac3      	subs	r3, r0, r3
 800ceca:	d0d3      	beq.n	800ce74 <_malloc_r+0x20>
 800cecc:	425a      	negs	r2, r3
 800cece:	50e2      	str	r2, [r4, r3]
 800ced0:	e7d0      	b.n	800ce74 <_malloc_r+0x20>
 800ced2:	428c      	cmp	r4, r1
 800ced4:	684b      	ldr	r3, [r1, #4]
 800ced6:	bf16      	itet	ne
 800ced8:	6063      	strne	r3, [r4, #4]
 800ceda:	6013      	streq	r3, [r2, #0]
 800cedc:	460c      	movne	r4, r1
 800cede:	e7eb      	b.n	800ceb8 <_malloc_r+0x64>
 800cee0:	460c      	mov	r4, r1
 800cee2:	6849      	ldr	r1, [r1, #4]
 800cee4:	e7cc      	b.n	800ce80 <_malloc_r+0x2c>
 800cee6:	1cc4      	adds	r4, r0, #3
 800cee8:	f024 0403 	bic.w	r4, r4, #3
 800ceec:	42a0      	cmp	r0, r4
 800ceee:	d005      	beq.n	800cefc <_malloc_r+0xa8>
 800cef0:	1a21      	subs	r1, r4, r0
 800cef2:	4630      	mov	r0, r6
 800cef4:	f000 fc22 	bl	800d73c <_sbrk_r>
 800cef8:	3001      	adds	r0, #1
 800cefa:	d0cf      	beq.n	800ce9c <_malloc_r+0x48>
 800cefc:	6025      	str	r5, [r4, #0]
 800cefe:	e7db      	b.n	800ceb8 <_malloc_r+0x64>
 800cf00:	20003f8c 	.word	0x20003f8c
 800cf04:	20003f90 	.word	0x20003f90

0800cf08 <__ssputs_r>:
 800cf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf0c:	688e      	ldr	r6, [r1, #8]
 800cf0e:	429e      	cmp	r6, r3
 800cf10:	4682      	mov	sl, r0
 800cf12:	460c      	mov	r4, r1
 800cf14:	4690      	mov	r8, r2
 800cf16:	4699      	mov	r9, r3
 800cf18:	d837      	bhi.n	800cf8a <__ssputs_r+0x82>
 800cf1a:	898a      	ldrh	r2, [r1, #12]
 800cf1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf20:	d031      	beq.n	800cf86 <__ssputs_r+0x7e>
 800cf22:	6825      	ldr	r5, [r4, #0]
 800cf24:	6909      	ldr	r1, [r1, #16]
 800cf26:	1a6f      	subs	r7, r5, r1
 800cf28:	6965      	ldr	r5, [r4, #20]
 800cf2a:	2302      	movs	r3, #2
 800cf2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf30:	fb95 f5f3 	sdiv	r5, r5, r3
 800cf34:	f109 0301 	add.w	r3, r9, #1
 800cf38:	443b      	add	r3, r7
 800cf3a:	429d      	cmp	r5, r3
 800cf3c:	bf38      	it	cc
 800cf3e:	461d      	movcc	r5, r3
 800cf40:	0553      	lsls	r3, r2, #21
 800cf42:	d530      	bpl.n	800cfa6 <__ssputs_r+0x9e>
 800cf44:	4629      	mov	r1, r5
 800cf46:	f7ff ff85 	bl	800ce54 <_malloc_r>
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	b950      	cbnz	r0, 800cf64 <__ssputs_r+0x5c>
 800cf4e:	230c      	movs	r3, #12
 800cf50:	f8ca 3000 	str.w	r3, [sl]
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf5a:	81a3      	strh	r3, [r4, #12]
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf64:	463a      	mov	r2, r7
 800cf66:	6921      	ldr	r1, [r4, #16]
 800cf68:	f7ff fdd5 	bl	800cb16 <memcpy>
 800cf6c:	89a3      	ldrh	r3, [r4, #12]
 800cf6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf76:	81a3      	strh	r3, [r4, #12]
 800cf78:	6126      	str	r6, [r4, #16]
 800cf7a:	6165      	str	r5, [r4, #20]
 800cf7c:	443e      	add	r6, r7
 800cf7e:	1bed      	subs	r5, r5, r7
 800cf80:	6026      	str	r6, [r4, #0]
 800cf82:	60a5      	str	r5, [r4, #8]
 800cf84:	464e      	mov	r6, r9
 800cf86:	454e      	cmp	r6, r9
 800cf88:	d900      	bls.n	800cf8c <__ssputs_r+0x84>
 800cf8a:	464e      	mov	r6, r9
 800cf8c:	4632      	mov	r2, r6
 800cf8e:	4641      	mov	r1, r8
 800cf90:	6820      	ldr	r0, [r4, #0]
 800cf92:	f000 fe2f 	bl	800dbf4 <memmove>
 800cf96:	68a3      	ldr	r3, [r4, #8]
 800cf98:	1b9b      	subs	r3, r3, r6
 800cf9a:	60a3      	str	r3, [r4, #8]
 800cf9c:	6823      	ldr	r3, [r4, #0]
 800cf9e:	441e      	add	r6, r3
 800cfa0:	6026      	str	r6, [r4, #0]
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	e7dc      	b.n	800cf60 <__ssputs_r+0x58>
 800cfa6:	462a      	mov	r2, r5
 800cfa8:	f000 fe3f 	bl	800dc2a <_realloc_r>
 800cfac:	4606      	mov	r6, r0
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d1e2      	bne.n	800cf78 <__ssputs_r+0x70>
 800cfb2:	6921      	ldr	r1, [r4, #16]
 800cfb4:	4650      	mov	r0, sl
 800cfb6:	f7ff feff 	bl	800cdb8 <_free_r>
 800cfba:	e7c8      	b.n	800cf4e <__ssputs_r+0x46>

0800cfbc <_svfiprintf_r>:
 800cfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc0:	461d      	mov	r5, r3
 800cfc2:	898b      	ldrh	r3, [r1, #12]
 800cfc4:	061f      	lsls	r7, r3, #24
 800cfc6:	b09d      	sub	sp, #116	; 0x74
 800cfc8:	4680      	mov	r8, r0
 800cfca:	460c      	mov	r4, r1
 800cfcc:	4616      	mov	r6, r2
 800cfce:	d50f      	bpl.n	800cff0 <_svfiprintf_r+0x34>
 800cfd0:	690b      	ldr	r3, [r1, #16]
 800cfd2:	b96b      	cbnz	r3, 800cff0 <_svfiprintf_r+0x34>
 800cfd4:	2140      	movs	r1, #64	; 0x40
 800cfd6:	f7ff ff3d 	bl	800ce54 <_malloc_r>
 800cfda:	6020      	str	r0, [r4, #0]
 800cfdc:	6120      	str	r0, [r4, #16]
 800cfde:	b928      	cbnz	r0, 800cfec <_svfiprintf_r+0x30>
 800cfe0:	230c      	movs	r3, #12
 800cfe2:	f8c8 3000 	str.w	r3, [r8]
 800cfe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfea:	e0c8      	b.n	800d17e <_svfiprintf_r+0x1c2>
 800cfec:	2340      	movs	r3, #64	; 0x40
 800cfee:	6163      	str	r3, [r4, #20]
 800cff0:	2300      	movs	r3, #0
 800cff2:	9309      	str	r3, [sp, #36]	; 0x24
 800cff4:	2320      	movs	r3, #32
 800cff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cffa:	2330      	movs	r3, #48	; 0x30
 800cffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d000:	9503      	str	r5, [sp, #12]
 800d002:	f04f 0b01 	mov.w	fp, #1
 800d006:	4637      	mov	r7, r6
 800d008:	463d      	mov	r5, r7
 800d00a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d00e:	b10b      	cbz	r3, 800d014 <_svfiprintf_r+0x58>
 800d010:	2b25      	cmp	r3, #37	; 0x25
 800d012:	d13e      	bne.n	800d092 <_svfiprintf_r+0xd6>
 800d014:	ebb7 0a06 	subs.w	sl, r7, r6
 800d018:	d00b      	beq.n	800d032 <_svfiprintf_r+0x76>
 800d01a:	4653      	mov	r3, sl
 800d01c:	4632      	mov	r2, r6
 800d01e:	4621      	mov	r1, r4
 800d020:	4640      	mov	r0, r8
 800d022:	f7ff ff71 	bl	800cf08 <__ssputs_r>
 800d026:	3001      	adds	r0, #1
 800d028:	f000 80a4 	beq.w	800d174 <_svfiprintf_r+0x1b8>
 800d02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d02e:	4453      	add	r3, sl
 800d030:	9309      	str	r3, [sp, #36]	; 0x24
 800d032:	783b      	ldrb	r3, [r7, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 809d 	beq.w	800d174 <_svfiprintf_r+0x1b8>
 800d03a:	2300      	movs	r3, #0
 800d03c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d044:	9304      	str	r3, [sp, #16]
 800d046:	9307      	str	r3, [sp, #28]
 800d048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d04c:	931a      	str	r3, [sp, #104]	; 0x68
 800d04e:	462f      	mov	r7, r5
 800d050:	2205      	movs	r2, #5
 800d052:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d056:	4850      	ldr	r0, [pc, #320]	; (800d198 <_svfiprintf_r+0x1dc>)
 800d058:	f7f3 f90a 	bl	8000270 <memchr>
 800d05c:	9b04      	ldr	r3, [sp, #16]
 800d05e:	b9d0      	cbnz	r0, 800d096 <_svfiprintf_r+0xda>
 800d060:	06d9      	lsls	r1, r3, #27
 800d062:	bf44      	itt	mi
 800d064:	2220      	movmi	r2, #32
 800d066:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d06a:	071a      	lsls	r2, r3, #28
 800d06c:	bf44      	itt	mi
 800d06e:	222b      	movmi	r2, #43	; 0x2b
 800d070:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d074:	782a      	ldrb	r2, [r5, #0]
 800d076:	2a2a      	cmp	r2, #42	; 0x2a
 800d078:	d015      	beq.n	800d0a6 <_svfiprintf_r+0xea>
 800d07a:	9a07      	ldr	r2, [sp, #28]
 800d07c:	462f      	mov	r7, r5
 800d07e:	2000      	movs	r0, #0
 800d080:	250a      	movs	r5, #10
 800d082:	4639      	mov	r1, r7
 800d084:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d088:	3b30      	subs	r3, #48	; 0x30
 800d08a:	2b09      	cmp	r3, #9
 800d08c:	d94d      	bls.n	800d12a <_svfiprintf_r+0x16e>
 800d08e:	b1b8      	cbz	r0, 800d0c0 <_svfiprintf_r+0x104>
 800d090:	e00f      	b.n	800d0b2 <_svfiprintf_r+0xf6>
 800d092:	462f      	mov	r7, r5
 800d094:	e7b8      	b.n	800d008 <_svfiprintf_r+0x4c>
 800d096:	4a40      	ldr	r2, [pc, #256]	; (800d198 <_svfiprintf_r+0x1dc>)
 800d098:	1a80      	subs	r0, r0, r2
 800d09a:	fa0b f000 	lsl.w	r0, fp, r0
 800d09e:	4318      	orrs	r0, r3
 800d0a0:	9004      	str	r0, [sp, #16]
 800d0a2:	463d      	mov	r5, r7
 800d0a4:	e7d3      	b.n	800d04e <_svfiprintf_r+0x92>
 800d0a6:	9a03      	ldr	r2, [sp, #12]
 800d0a8:	1d11      	adds	r1, r2, #4
 800d0aa:	6812      	ldr	r2, [r2, #0]
 800d0ac:	9103      	str	r1, [sp, #12]
 800d0ae:	2a00      	cmp	r2, #0
 800d0b0:	db01      	blt.n	800d0b6 <_svfiprintf_r+0xfa>
 800d0b2:	9207      	str	r2, [sp, #28]
 800d0b4:	e004      	b.n	800d0c0 <_svfiprintf_r+0x104>
 800d0b6:	4252      	negs	r2, r2
 800d0b8:	f043 0302 	orr.w	r3, r3, #2
 800d0bc:	9207      	str	r2, [sp, #28]
 800d0be:	9304      	str	r3, [sp, #16]
 800d0c0:	783b      	ldrb	r3, [r7, #0]
 800d0c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d0c4:	d10c      	bne.n	800d0e0 <_svfiprintf_r+0x124>
 800d0c6:	787b      	ldrb	r3, [r7, #1]
 800d0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0ca:	d133      	bne.n	800d134 <_svfiprintf_r+0x178>
 800d0cc:	9b03      	ldr	r3, [sp, #12]
 800d0ce:	1d1a      	adds	r2, r3, #4
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	9203      	str	r2, [sp, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	bfb8      	it	lt
 800d0d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d0dc:	3702      	adds	r7, #2
 800d0de:	9305      	str	r3, [sp, #20]
 800d0e0:	4d2e      	ldr	r5, [pc, #184]	; (800d19c <_svfiprintf_r+0x1e0>)
 800d0e2:	7839      	ldrb	r1, [r7, #0]
 800d0e4:	2203      	movs	r2, #3
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f7f3 f8c2 	bl	8000270 <memchr>
 800d0ec:	b138      	cbz	r0, 800d0fe <_svfiprintf_r+0x142>
 800d0ee:	2340      	movs	r3, #64	; 0x40
 800d0f0:	1b40      	subs	r0, r0, r5
 800d0f2:	fa03 f000 	lsl.w	r0, r3, r0
 800d0f6:	9b04      	ldr	r3, [sp, #16]
 800d0f8:	4303      	orrs	r3, r0
 800d0fa:	3701      	adds	r7, #1
 800d0fc:	9304      	str	r3, [sp, #16]
 800d0fe:	7839      	ldrb	r1, [r7, #0]
 800d100:	4827      	ldr	r0, [pc, #156]	; (800d1a0 <_svfiprintf_r+0x1e4>)
 800d102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d106:	2206      	movs	r2, #6
 800d108:	1c7e      	adds	r6, r7, #1
 800d10a:	f7f3 f8b1 	bl	8000270 <memchr>
 800d10e:	2800      	cmp	r0, #0
 800d110:	d038      	beq.n	800d184 <_svfiprintf_r+0x1c8>
 800d112:	4b24      	ldr	r3, [pc, #144]	; (800d1a4 <_svfiprintf_r+0x1e8>)
 800d114:	bb13      	cbnz	r3, 800d15c <_svfiprintf_r+0x1a0>
 800d116:	9b03      	ldr	r3, [sp, #12]
 800d118:	3307      	adds	r3, #7
 800d11a:	f023 0307 	bic.w	r3, r3, #7
 800d11e:	3308      	adds	r3, #8
 800d120:	9303      	str	r3, [sp, #12]
 800d122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d124:	444b      	add	r3, r9
 800d126:	9309      	str	r3, [sp, #36]	; 0x24
 800d128:	e76d      	b.n	800d006 <_svfiprintf_r+0x4a>
 800d12a:	fb05 3202 	mla	r2, r5, r2, r3
 800d12e:	2001      	movs	r0, #1
 800d130:	460f      	mov	r7, r1
 800d132:	e7a6      	b.n	800d082 <_svfiprintf_r+0xc6>
 800d134:	2300      	movs	r3, #0
 800d136:	3701      	adds	r7, #1
 800d138:	9305      	str	r3, [sp, #20]
 800d13a:	4619      	mov	r1, r3
 800d13c:	250a      	movs	r5, #10
 800d13e:	4638      	mov	r0, r7
 800d140:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d144:	3a30      	subs	r2, #48	; 0x30
 800d146:	2a09      	cmp	r2, #9
 800d148:	d903      	bls.n	800d152 <_svfiprintf_r+0x196>
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d0c8      	beq.n	800d0e0 <_svfiprintf_r+0x124>
 800d14e:	9105      	str	r1, [sp, #20]
 800d150:	e7c6      	b.n	800d0e0 <_svfiprintf_r+0x124>
 800d152:	fb05 2101 	mla	r1, r5, r1, r2
 800d156:	2301      	movs	r3, #1
 800d158:	4607      	mov	r7, r0
 800d15a:	e7f0      	b.n	800d13e <_svfiprintf_r+0x182>
 800d15c:	ab03      	add	r3, sp, #12
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	4622      	mov	r2, r4
 800d162:	4b11      	ldr	r3, [pc, #68]	; (800d1a8 <_svfiprintf_r+0x1ec>)
 800d164:	a904      	add	r1, sp, #16
 800d166:	4640      	mov	r0, r8
 800d168:	f3af 8000 	nop.w
 800d16c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d170:	4681      	mov	r9, r0
 800d172:	d1d6      	bne.n	800d122 <_svfiprintf_r+0x166>
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	065b      	lsls	r3, r3, #25
 800d178:	f53f af35 	bmi.w	800cfe6 <_svfiprintf_r+0x2a>
 800d17c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d17e:	b01d      	add	sp, #116	; 0x74
 800d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d184:	ab03      	add	r3, sp, #12
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	4622      	mov	r2, r4
 800d18a:	4b07      	ldr	r3, [pc, #28]	; (800d1a8 <_svfiprintf_r+0x1ec>)
 800d18c:	a904      	add	r1, sp, #16
 800d18e:	4640      	mov	r0, r8
 800d190:	f000 f9c2 	bl	800d518 <_printf_i>
 800d194:	e7ea      	b.n	800d16c <_svfiprintf_r+0x1b0>
 800d196:	bf00      	nop
 800d198:	0800faf0 	.word	0x0800faf0
 800d19c:	0800faf6 	.word	0x0800faf6
 800d1a0:	0800fafa 	.word	0x0800fafa
 800d1a4:	00000000 	.word	0x00000000
 800d1a8:	0800cf09 	.word	0x0800cf09

0800d1ac <__sfputc_r>:
 800d1ac:	6893      	ldr	r3, [r2, #8]
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	b410      	push	{r4}
 800d1b4:	6093      	str	r3, [r2, #8]
 800d1b6:	da08      	bge.n	800d1ca <__sfputc_r+0x1e>
 800d1b8:	6994      	ldr	r4, [r2, #24]
 800d1ba:	42a3      	cmp	r3, r4
 800d1bc:	db01      	blt.n	800d1c2 <__sfputc_r+0x16>
 800d1be:	290a      	cmp	r1, #10
 800d1c0:	d103      	bne.n	800d1ca <__sfputc_r+0x1e>
 800d1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1c6:	f000 bb0d 	b.w	800d7e4 <__swbuf_r>
 800d1ca:	6813      	ldr	r3, [r2, #0]
 800d1cc:	1c58      	adds	r0, r3, #1
 800d1ce:	6010      	str	r0, [r2, #0]
 800d1d0:	7019      	strb	r1, [r3, #0]
 800d1d2:	4608      	mov	r0, r1
 800d1d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1d8:	4770      	bx	lr

0800d1da <__sfputs_r>:
 800d1da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1dc:	4606      	mov	r6, r0
 800d1de:	460f      	mov	r7, r1
 800d1e0:	4614      	mov	r4, r2
 800d1e2:	18d5      	adds	r5, r2, r3
 800d1e4:	42ac      	cmp	r4, r5
 800d1e6:	d101      	bne.n	800d1ec <__sfputs_r+0x12>
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	e007      	b.n	800d1fc <__sfputs_r+0x22>
 800d1ec:	463a      	mov	r2, r7
 800d1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f7ff ffda 	bl	800d1ac <__sfputc_r>
 800d1f8:	1c43      	adds	r3, r0, #1
 800d1fa:	d1f3      	bne.n	800d1e4 <__sfputs_r+0xa>
 800d1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d200 <_vfiprintf_r>:
 800d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	460c      	mov	r4, r1
 800d206:	b09d      	sub	sp, #116	; 0x74
 800d208:	4617      	mov	r7, r2
 800d20a:	461d      	mov	r5, r3
 800d20c:	4606      	mov	r6, r0
 800d20e:	b118      	cbz	r0, 800d218 <_vfiprintf_r+0x18>
 800d210:	6983      	ldr	r3, [r0, #24]
 800d212:	b90b      	cbnz	r3, 800d218 <_vfiprintf_r+0x18>
 800d214:	f7ff fd3e 	bl	800cc94 <__sinit>
 800d218:	4b7c      	ldr	r3, [pc, #496]	; (800d40c <_vfiprintf_r+0x20c>)
 800d21a:	429c      	cmp	r4, r3
 800d21c:	d158      	bne.n	800d2d0 <_vfiprintf_r+0xd0>
 800d21e:	6874      	ldr	r4, [r6, #4]
 800d220:	89a3      	ldrh	r3, [r4, #12]
 800d222:	0718      	lsls	r0, r3, #28
 800d224:	d55e      	bpl.n	800d2e4 <_vfiprintf_r+0xe4>
 800d226:	6923      	ldr	r3, [r4, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d05b      	beq.n	800d2e4 <_vfiprintf_r+0xe4>
 800d22c:	2300      	movs	r3, #0
 800d22e:	9309      	str	r3, [sp, #36]	; 0x24
 800d230:	2320      	movs	r3, #32
 800d232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d236:	2330      	movs	r3, #48	; 0x30
 800d238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d23c:	9503      	str	r5, [sp, #12]
 800d23e:	f04f 0b01 	mov.w	fp, #1
 800d242:	46b8      	mov	r8, r7
 800d244:	4645      	mov	r5, r8
 800d246:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d24a:	b10b      	cbz	r3, 800d250 <_vfiprintf_r+0x50>
 800d24c:	2b25      	cmp	r3, #37	; 0x25
 800d24e:	d154      	bne.n	800d2fa <_vfiprintf_r+0xfa>
 800d250:	ebb8 0a07 	subs.w	sl, r8, r7
 800d254:	d00b      	beq.n	800d26e <_vfiprintf_r+0x6e>
 800d256:	4653      	mov	r3, sl
 800d258:	463a      	mov	r2, r7
 800d25a:	4621      	mov	r1, r4
 800d25c:	4630      	mov	r0, r6
 800d25e:	f7ff ffbc 	bl	800d1da <__sfputs_r>
 800d262:	3001      	adds	r0, #1
 800d264:	f000 80c2 	beq.w	800d3ec <_vfiprintf_r+0x1ec>
 800d268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d26a:	4453      	add	r3, sl
 800d26c:	9309      	str	r3, [sp, #36]	; 0x24
 800d26e:	f898 3000 	ldrb.w	r3, [r8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	f000 80ba 	beq.w	800d3ec <_vfiprintf_r+0x1ec>
 800d278:	2300      	movs	r3, #0
 800d27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d282:	9304      	str	r3, [sp, #16]
 800d284:	9307      	str	r3, [sp, #28]
 800d286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d28a:	931a      	str	r3, [sp, #104]	; 0x68
 800d28c:	46a8      	mov	r8, r5
 800d28e:	2205      	movs	r2, #5
 800d290:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d294:	485e      	ldr	r0, [pc, #376]	; (800d410 <_vfiprintf_r+0x210>)
 800d296:	f7f2 ffeb 	bl	8000270 <memchr>
 800d29a:	9b04      	ldr	r3, [sp, #16]
 800d29c:	bb78      	cbnz	r0, 800d2fe <_vfiprintf_r+0xfe>
 800d29e:	06d9      	lsls	r1, r3, #27
 800d2a0:	bf44      	itt	mi
 800d2a2:	2220      	movmi	r2, #32
 800d2a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d2a8:	071a      	lsls	r2, r3, #28
 800d2aa:	bf44      	itt	mi
 800d2ac:	222b      	movmi	r2, #43	; 0x2b
 800d2ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d2b2:	782a      	ldrb	r2, [r5, #0]
 800d2b4:	2a2a      	cmp	r2, #42	; 0x2a
 800d2b6:	d02a      	beq.n	800d30e <_vfiprintf_r+0x10e>
 800d2b8:	9a07      	ldr	r2, [sp, #28]
 800d2ba:	46a8      	mov	r8, r5
 800d2bc:	2000      	movs	r0, #0
 800d2be:	250a      	movs	r5, #10
 800d2c0:	4641      	mov	r1, r8
 800d2c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2c6:	3b30      	subs	r3, #48	; 0x30
 800d2c8:	2b09      	cmp	r3, #9
 800d2ca:	d969      	bls.n	800d3a0 <_vfiprintf_r+0x1a0>
 800d2cc:	b360      	cbz	r0, 800d328 <_vfiprintf_r+0x128>
 800d2ce:	e024      	b.n	800d31a <_vfiprintf_r+0x11a>
 800d2d0:	4b50      	ldr	r3, [pc, #320]	; (800d414 <_vfiprintf_r+0x214>)
 800d2d2:	429c      	cmp	r4, r3
 800d2d4:	d101      	bne.n	800d2da <_vfiprintf_r+0xda>
 800d2d6:	68b4      	ldr	r4, [r6, #8]
 800d2d8:	e7a2      	b.n	800d220 <_vfiprintf_r+0x20>
 800d2da:	4b4f      	ldr	r3, [pc, #316]	; (800d418 <_vfiprintf_r+0x218>)
 800d2dc:	429c      	cmp	r4, r3
 800d2de:	bf08      	it	eq
 800d2e0:	68f4      	ldreq	r4, [r6, #12]
 800d2e2:	e79d      	b.n	800d220 <_vfiprintf_r+0x20>
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f000 fae0 	bl	800d8ac <__swsetup_r>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d09d      	beq.n	800d22c <_vfiprintf_r+0x2c>
 800d2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2f4:	b01d      	add	sp, #116	; 0x74
 800d2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2fa:	46a8      	mov	r8, r5
 800d2fc:	e7a2      	b.n	800d244 <_vfiprintf_r+0x44>
 800d2fe:	4a44      	ldr	r2, [pc, #272]	; (800d410 <_vfiprintf_r+0x210>)
 800d300:	1a80      	subs	r0, r0, r2
 800d302:	fa0b f000 	lsl.w	r0, fp, r0
 800d306:	4318      	orrs	r0, r3
 800d308:	9004      	str	r0, [sp, #16]
 800d30a:	4645      	mov	r5, r8
 800d30c:	e7be      	b.n	800d28c <_vfiprintf_r+0x8c>
 800d30e:	9a03      	ldr	r2, [sp, #12]
 800d310:	1d11      	adds	r1, r2, #4
 800d312:	6812      	ldr	r2, [r2, #0]
 800d314:	9103      	str	r1, [sp, #12]
 800d316:	2a00      	cmp	r2, #0
 800d318:	db01      	blt.n	800d31e <_vfiprintf_r+0x11e>
 800d31a:	9207      	str	r2, [sp, #28]
 800d31c:	e004      	b.n	800d328 <_vfiprintf_r+0x128>
 800d31e:	4252      	negs	r2, r2
 800d320:	f043 0302 	orr.w	r3, r3, #2
 800d324:	9207      	str	r2, [sp, #28]
 800d326:	9304      	str	r3, [sp, #16]
 800d328:	f898 3000 	ldrb.w	r3, [r8]
 800d32c:	2b2e      	cmp	r3, #46	; 0x2e
 800d32e:	d10e      	bne.n	800d34e <_vfiprintf_r+0x14e>
 800d330:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d334:	2b2a      	cmp	r3, #42	; 0x2a
 800d336:	d138      	bne.n	800d3aa <_vfiprintf_r+0x1aa>
 800d338:	9b03      	ldr	r3, [sp, #12]
 800d33a:	1d1a      	adds	r2, r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	9203      	str	r2, [sp, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	bfb8      	it	lt
 800d344:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d348:	f108 0802 	add.w	r8, r8, #2
 800d34c:	9305      	str	r3, [sp, #20]
 800d34e:	4d33      	ldr	r5, [pc, #204]	; (800d41c <_vfiprintf_r+0x21c>)
 800d350:	f898 1000 	ldrb.w	r1, [r8]
 800d354:	2203      	movs	r2, #3
 800d356:	4628      	mov	r0, r5
 800d358:	f7f2 ff8a 	bl	8000270 <memchr>
 800d35c:	b140      	cbz	r0, 800d370 <_vfiprintf_r+0x170>
 800d35e:	2340      	movs	r3, #64	; 0x40
 800d360:	1b40      	subs	r0, r0, r5
 800d362:	fa03 f000 	lsl.w	r0, r3, r0
 800d366:	9b04      	ldr	r3, [sp, #16]
 800d368:	4303      	orrs	r3, r0
 800d36a:	f108 0801 	add.w	r8, r8, #1
 800d36e:	9304      	str	r3, [sp, #16]
 800d370:	f898 1000 	ldrb.w	r1, [r8]
 800d374:	482a      	ldr	r0, [pc, #168]	; (800d420 <_vfiprintf_r+0x220>)
 800d376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d37a:	2206      	movs	r2, #6
 800d37c:	f108 0701 	add.w	r7, r8, #1
 800d380:	f7f2 ff76 	bl	8000270 <memchr>
 800d384:	2800      	cmp	r0, #0
 800d386:	d037      	beq.n	800d3f8 <_vfiprintf_r+0x1f8>
 800d388:	4b26      	ldr	r3, [pc, #152]	; (800d424 <_vfiprintf_r+0x224>)
 800d38a:	bb1b      	cbnz	r3, 800d3d4 <_vfiprintf_r+0x1d4>
 800d38c:	9b03      	ldr	r3, [sp, #12]
 800d38e:	3307      	adds	r3, #7
 800d390:	f023 0307 	bic.w	r3, r3, #7
 800d394:	3308      	adds	r3, #8
 800d396:	9303      	str	r3, [sp, #12]
 800d398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d39a:	444b      	add	r3, r9
 800d39c:	9309      	str	r3, [sp, #36]	; 0x24
 800d39e:	e750      	b.n	800d242 <_vfiprintf_r+0x42>
 800d3a0:	fb05 3202 	mla	r2, r5, r2, r3
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	4688      	mov	r8, r1
 800d3a8:	e78a      	b.n	800d2c0 <_vfiprintf_r+0xc0>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f108 0801 	add.w	r8, r8, #1
 800d3b0:	9305      	str	r3, [sp, #20]
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	250a      	movs	r5, #10
 800d3b6:	4640      	mov	r0, r8
 800d3b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3bc:	3a30      	subs	r2, #48	; 0x30
 800d3be:	2a09      	cmp	r2, #9
 800d3c0:	d903      	bls.n	800d3ca <_vfiprintf_r+0x1ca>
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d0c3      	beq.n	800d34e <_vfiprintf_r+0x14e>
 800d3c6:	9105      	str	r1, [sp, #20]
 800d3c8:	e7c1      	b.n	800d34e <_vfiprintf_r+0x14e>
 800d3ca:	fb05 2101 	mla	r1, r5, r1, r2
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	4680      	mov	r8, r0
 800d3d2:	e7f0      	b.n	800d3b6 <_vfiprintf_r+0x1b6>
 800d3d4:	ab03      	add	r3, sp, #12
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	4622      	mov	r2, r4
 800d3da:	4b13      	ldr	r3, [pc, #76]	; (800d428 <_vfiprintf_r+0x228>)
 800d3dc:	a904      	add	r1, sp, #16
 800d3de:	4630      	mov	r0, r6
 800d3e0:	f3af 8000 	nop.w
 800d3e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d3e8:	4681      	mov	r9, r0
 800d3ea:	d1d5      	bne.n	800d398 <_vfiprintf_r+0x198>
 800d3ec:	89a3      	ldrh	r3, [r4, #12]
 800d3ee:	065b      	lsls	r3, r3, #25
 800d3f0:	f53f af7e 	bmi.w	800d2f0 <_vfiprintf_r+0xf0>
 800d3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3f6:	e77d      	b.n	800d2f4 <_vfiprintf_r+0xf4>
 800d3f8:	ab03      	add	r3, sp, #12
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	4b0a      	ldr	r3, [pc, #40]	; (800d428 <_vfiprintf_r+0x228>)
 800d400:	a904      	add	r1, sp, #16
 800d402:	4630      	mov	r0, r6
 800d404:	f000 f888 	bl	800d518 <_printf_i>
 800d408:	e7ec      	b.n	800d3e4 <_vfiprintf_r+0x1e4>
 800d40a:	bf00      	nop
 800d40c:	0800fab0 	.word	0x0800fab0
 800d410:	0800faf0 	.word	0x0800faf0
 800d414:	0800fad0 	.word	0x0800fad0
 800d418:	0800fa90 	.word	0x0800fa90
 800d41c:	0800faf6 	.word	0x0800faf6
 800d420:	0800fafa 	.word	0x0800fafa
 800d424:	00000000 	.word	0x00000000
 800d428:	0800d1db 	.word	0x0800d1db

0800d42c <_printf_common>:
 800d42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d430:	4691      	mov	r9, r2
 800d432:	461f      	mov	r7, r3
 800d434:	688a      	ldr	r2, [r1, #8]
 800d436:	690b      	ldr	r3, [r1, #16]
 800d438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d43c:	4293      	cmp	r3, r2
 800d43e:	bfb8      	it	lt
 800d440:	4613      	movlt	r3, r2
 800d442:	f8c9 3000 	str.w	r3, [r9]
 800d446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d44a:	4606      	mov	r6, r0
 800d44c:	460c      	mov	r4, r1
 800d44e:	b112      	cbz	r2, 800d456 <_printf_common+0x2a>
 800d450:	3301      	adds	r3, #1
 800d452:	f8c9 3000 	str.w	r3, [r9]
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	0699      	lsls	r1, r3, #26
 800d45a:	bf42      	ittt	mi
 800d45c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d460:	3302      	addmi	r3, #2
 800d462:	f8c9 3000 	strmi.w	r3, [r9]
 800d466:	6825      	ldr	r5, [r4, #0]
 800d468:	f015 0506 	ands.w	r5, r5, #6
 800d46c:	d107      	bne.n	800d47e <_printf_common+0x52>
 800d46e:	f104 0a19 	add.w	sl, r4, #25
 800d472:	68e3      	ldr	r3, [r4, #12]
 800d474:	f8d9 2000 	ldr.w	r2, [r9]
 800d478:	1a9b      	subs	r3, r3, r2
 800d47a:	42ab      	cmp	r3, r5
 800d47c:	dc28      	bgt.n	800d4d0 <_printf_common+0xa4>
 800d47e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d482:	6822      	ldr	r2, [r4, #0]
 800d484:	3300      	adds	r3, #0
 800d486:	bf18      	it	ne
 800d488:	2301      	movne	r3, #1
 800d48a:	0692      	lsls	r2, r2, #26
 800d48c:	d42d      	bmi.n	800d4ea <_printf_common+0xbe>
 800d48e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d492:	4639      	mov	r1, r7
 800d494:	4630      	mov	r0, r6
 800d496:	47c0      	blx	r8
 800d498:	3001      	adds	r0, #1
 800d49a:	d020      	beq.n	800d4de <_printf_common+0xb2>
 800d49c:	6823      	ldr	r3, [r4, #0]
 800d49e:	68e5      	ldr	r5, [r4, #12]
 800d4a0:	f8d9 2000 	ldr.w	r2, [r9]
 800d4a4:	f003 0306 	and.w	r3, r3, #6
 800d4a8:	2b04      	cmp	r3, #4
 800d4aa:	bf08      	it	eq
 800d4ac:	1aad      	subeq	r5, r5, r2
 800d4ae:	68a3      	ldr	r3, [r4, #8]
 800d4b0:	6922      	ldr	r2, [r4, #16]
 800d4b2:	bf0c      	ite	eq
 800d4b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4b8:	2500      	movne	r5, #0
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	bfc4      	itt	gt
 800d4be:	1a9b      	subgt	r3, r3, r2
 800d4c0:	18ed      	addgt	r5, r5, r3
 800d4c2:	f04f 0900 	mov.w	r9, #0
 800d4c6:	341a      	adds	r4, #26
 800d4c8:	454d      	cmp	r5, r9
 800d4ca:	d11a      	bne.n	800d502 <_printf_common+0xd6>
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	e008      	b.n	800d4e2 <_printf_common+0xb6>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	4652      	mov	r2, sl
 800d4d4:	4639      	mov	r1, r7
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	47c0      	blx	r8
 800d4da:	3001      	adds	r0, #1
 800d4dc:	d103      	bne.n	800d4e6 <_printf_common+0xba>
 800d4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e6:	3501      	adds	r5, #1
 800d4e8:	e7c3      	b.n	800d472 <_printf_common+0x46>
 800d4ea:	18e1      	adds	r1, r4, r3
 800d4ec:	1c5a      	adds	r2, r3, #1
 800d4ee:	2030      	movs	r0, #48	; 0x30
 800d4f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4f4:	4422      	add	r2, r4
 800d4f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4fe:	3302      	adds	r3, #2
 800d500:	e7c5      	b.n	800d48e <_printf_common+0x62>
 800d502:	2301      	movs	r3, #1
 800d504:	4622      	mov	r2, r4
 800d506:	4639      	mov	r1, r7
 800d508:	4630      	mov	r0, r6
 800d50a:	47c0      	blx	r8
 800d50c:	3001      	adds	r0, #1
 800d50e:	d0e6      	beq.n	800d4de <_printf_common+0xb2>
 800d510:	f109 0901 	add.w	r9, r9, #1
 800d514:	e7d8      	b.n	800d4c8 <_printf_common+0x9c>
	...

0800d518 <_printf_i>:
 800d518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d51c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d520:	460c      	mov	r4, r1
 800d522:	7e09      	ldrb	r1, [r1, #24]
 800d524:	b085      	sub	sp, #20
 800d526:	296e      	cmp	r1, #110	; 0x6e
 800d528:	4617      	mov	r7, r2
 800d52a:	4606      	mov	r6, r0
 800d52c:	4698      	mov	r8, r3
 800d52e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d530:	f000 80b3 	beq.w	800d69a <_printf_i+0x182>
 800d534:	d822      	bhi.n	800d57c <_printf_i+0x64>
 800d536:	2963      	cmp	r1, #99	; 0x63
 800d538:	d036      	beq.n	800d5a8 <_printf_i+0x90>
 800d53a:	d80a      	bhi.n	800d552 <_printf_i+0x3a>
 800d53c:	2900      	cmp	r1, #0
 800d53e:	f000 80b9 	beq.w	800d6b4 <_printf_i+0x19c>
 800d542:	2958      	cmp	r1, #88	; 0x58
 800d544:	f000 8083 	beq.w	800d64e <_printf_i+0x136>
 800d548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d54c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d550:	e032      	b.n	800d5b8 <_printf_i+0xa0>
 800d552:	2964      	cmp	r1, #100	; 0x64
 800d554:	d001      	beq.n	800d55a <_printf_i+0x42>
 800d556:	2969      	cmp	r1, #105	; 0x69
 800d558:	d1f6      	bne.n	800d548 <_printf_i+0x30>
 800d55a:	6820      	ldr	r0, [r4, #0]
 800d55c:	6813      	ldr	r3, [r2, #0]
 800d55e:	0605      	lsls	r5, r0, #24
 800d560:	f103 0104 	add.w	r1, r3, #4
 800d564:	d52a      	bpl.n	800d5bc <_printf_i+0xa4>
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6011      	str	r1, [r2, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	da03      	bge.n	800d576 <_printf_i+0x5e>
 800d56e:	222d      	movs	r2, #45	; 0x2d
 800d570:	425b      	negs	r3, r3
 800d572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d576:	486f      	ldr	r0, [pc, #444]	; (800d734 <_printf_i+0x21c>)
 800d578:	220a      	movs	r2, #10
 800d57a:	e039      	b.n	800d5f0 <_printf_i+0xd8>
 800d57c:	2973      	cmp	r1, #115	; 0x73
 800d57e:	f000 809d 	beq.w	800d6bc <_printf_i+0x1a4>
 800d582:	d808      	bhi.n	800d596 <_printf_i+0x7e>
 800d584:	296f      	cmp	r1, #111	; 0x6f
 800d586:	d020      	beq.n	800d5ca <_printf_i+0xb2>
 800d588:	2970      	cmp	r1, #112	; 0x70
 800d58a:	d1dd      	bne.n	800d548 <_printf_i+0x30>
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	f043 0320 	orr.w	r3, r3, #32
 800d592:	6023      	str	r3, [r4, #0]
 800d594:	e003      	b.n	800d59e <_printf_i+0x86>
 800d596:	2975      	cmp	r1, #117	; 0x75
 800d598:	d017      	beq.n	800d5ca <_printf_i+0xb2>
 800d59a:	2978      	cmp	r1, #120	; 0x78
 800d59c:	d1d4      	bne.n	800d548 <_printf_i+0x30>
 800d59e:	2378      	movs	r3, #120	; 0x78
 800d5a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5a4:	4864      	ldr	r0, [pc, #400]	; (800d738 <_printf_i+0x220>)
 800d5a6:	e055      	b.n	800d654 <_printf_i+0x13c>
 800d5a8:	6813      	ldr	r3, [r2, #0]
 800d5aa:	1d19      	adds	r1, r3, #4
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	6011      	str	r1, [r2, #0]
 800d5b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e08c      	b.n	800d6d6 <_printf_i+0x1be>
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6011      	str	r1, [r2, #0]
 800d5c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d5c4:	bf18      	it	ne
 800d5c6:	b21b      	sxthne	r3, r3
 800d5c8:	e7cf      	b.n	800d56a <_printf_i+0x52>
 800d5ca:	6813      	ldr	r3, [r2, #0]
 800d5cc:	6825      	ldr	r5, [r4, #0]
 800d5ce:	1d18      	adds	r0, r3, #4
 800d5d0:	6010      	str	r0, [r2, #0]
 800d5d2:	0628      	lsls	r0, r5, #24
 800d5d4:	d501      	bpl.n	800d5da <_printf_i+0xc2>
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	e002      	b.n	800d5e0 <_printf_i+0xc8>
 800d5da:	0668      	lsls	r0, r5, #25
 800d5dc:	d5fb      	bpl.n	800d5d6 <_printf_i+0xbe>
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	4854      	ldr	r0, [pc, #336]	; (800d734 <_printf_i+0x21c>)
 800d5e2:	296f      	cmp	r1, #111	; 0x6f
 800d5e4:	bf14      	ite	ne
 800d5e6:	220a      	movne	r2, #10
 800d5e8:	2208      	moveq	r2, #8
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d5f0:	6865      	ldr	r5, [r4, #4]
 800d5f2:	60a5      	str	r5, [r4, #8]
 800d5f4:	2d00      	cmp	r5, #0
 800d5f6:	f2c0 8095 	blt.w	800d724 <_printf_i+0x20c>
 800d5fa:	6821      	ldr	r1, [r4, #0]
 800d5fc:	f021 0104 	bic.w	r1, r1, #4
 800d600:	6021      	str	r1, [r4, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d13d      	bne.n	800d682 <_printf_i+0x16a>
 800d606:	2d00      	cmp	r5, #0
 800d608:	f040 808e 	bne.w	800d728 <_printf_i+0x210>
 800d60c:	4665      	mov	r5, ip
 800d60e:	2a08      	cmp	r2, #8
 800d610:	d10b      	bne.n	800d62a <_printf_i+0x112>
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	07db      	lsls	r3, r3, #31
 800d616:	d508      	bpl.n	800d62a <_printf_i+0x112>
 800d618:	6923      	ldr	r3, [r4, #16]
 800d61a:	6862      	ldr	r2, [r4, #4]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	bfde      	ittt	le
 800d620:	2330      	movle	r3, #48	; 0x30
 800d622:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d626:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d62a:	ebac 0305 	sub.w	r3, ip, r5
 800d62e:	6123      	str	r3, [r4, #16]
 800d630:	f8cd 8000 	str.w	r8, [sp]
 800d634:	463b      	mov	r3, r7
 800d636:	aa03      	add	r2, sp, #12
 800d638:	4621      	mov	r1, r4
 800d63a:	4630      	mov	r0, r6
 800d63c:	f7ff fef6 	bl	800d42c <_printf_common>
 800d640:	3001      	adds	r0, #1
 800d642:	d14d      	bne.n	800d6e0 <_printf_i+0x1c8>
 800d644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d648:	b005      	add	sp, #20
 800d64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d64e:	4839      	ldr	r0, [pc, #228]	; (800d734 <_printf_i+0x21c>)
 800d650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d654:	6813      	ldr	r3, [r2, #0]
 800d656:	6821      	ldr	r1, [r4, #0]
 800d658:	1d1d      	adds	r5, r3, #4
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6015      	str	r5, [r2, #0]
 800d65e:	060a      	lsls	r2, r1, #24
 800d660:	d50b      	bpl.n	800d67a <_printf_i+0x162>
 800d662:	07ca      	lsls	r2, r1, #31
 800d664:	bf44      	itt	mi
 800d666:	f041 0120 	orrmi.w	r1, r1, #32
 800d66a:	6021      	strmi	r1, [r4, #0]
 800d66c:	b91b      	cbnz	r3, 800d676 <_printf_i+0x15e>
 800d66e:	6822      	ldr	r2, [r4, #0]
 800d670:	f022 0220 	bic.w	r2, r2, #32
 800d674:	6022      	str	r2, [r4, #0]
 800d676:	2210      	movs	r2, #16
 800d678:	e7b7      	b.n	800d5ea <_printf_i+0xd2>
 800d67a:	064d      	lsls	r5, r1, #25
 800d67c:	bf48      	it	mi
 800d67e:	b29b      	uxthmi	r3, r3
 800d680:	e7ef      	b.n	800d662 <_printf_i+0x14a>
 800d682:	4665      	mov	r5, ip
 800d684:	fbb3 f1f2 	udiv	r1, r3, r2
 800d688:	fb02 3311 	mls	r3, r2, r1, r3
 800d68c:	5cc3      	ldrb	r3, [r0, r3]
 800d68e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d692:	460b      	mov	r3, r1
 800d694:	2900      	cmp	r1, #0
 800d696:	d1f5      	bne.n	800d684 <_printf_i+0x16c>
 800d698:	e7b9      	b.n	800d60e <_printf_i+0xf6>
 800d69a:	6813      	ldr	r3, [r2, #0]
 800d69c:	6825      	ldr	r5, [r4, #0]
 800d69e:	6961      	ldr	r1, [r4, #20]
 800d6a0:	1d18      	adds	r0, r3, #4
 800d6a2:	6010      	str	r0, [r2, #0]
 800d6a4:	0628      	lsls	r0, r5, #24
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	d501      	bpl.n	800d6ae <_printf_i+0x196>
 800d6aa:	6019      	str	r1, [r3, #0]
 800d6ac:	e002      	b.n	800d6b4 <_printf_i+0x19c>
 800d6ae:	066a      	lsls	r2, r5, #25
 800d6b0:	d5fb      	bpl.n	800d6aa <_printf_i+0x192>
 800d6b2:	8019      	strh	r1, [r3, #0]
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	6123      	str	r3, [r4, #16]
 800d6b8:	4665      	mov	r5, ip
 800d6ba:	e7b9      	b.n	800d630 <_printf_i+0x118>
 800d6bc:	6813      	ldr	r3, [r2, #0]
 800d6be:	1d19      	adds	r1, r3, #4
 800d6c0:	6011      	str	r1, [r2, #0]
 800d6c2:	681d      	ldr	r5, [r3, #0]
 800d6c4:	6862      	ldr	r2, [r4, #4]
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	f7f2 fdd1 	bl	8000270 <memchr>
 800d6ce:	b108      	cbz	r0, 800d6d4 <_printf_i+0x1bc>
 800d6d0:	1b40      	subs	r0, r0, r5
 800d6d2:	6060      	str	r0, [r4, #4]
 800d6d4:	6863      	ldr	r3, [r4, #4]
 800d6d6:	6123      	str	r3, [r4, #16]
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6de:	e7a7      	b.n	800d630 <_printf_i+0x118>
 800d6e0:	6923      	ldr	r3, [r4, #16]
 800d6e2:	462a      	mov	r2, r5
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	47c0      	blx	r8
 800d6ea:	3001      	adds	r0, #1
 800d6ec:	d0aa      	beq.n	800d644 <_printf_i+0x12c>
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	079b      	lsls	r3, r3, #30
 800d6f2:	d413      	bmi.n	800d71c <_printf_i+0x204>
 800d6f4:	68e0      	ldr	r0, [r4, #12]
 800d6f6:	9b03      	ldr	r3, [sp, #12]
 800d6f8:	4298      	cmp	r0, r3
 800d6fa:	bfb8      	it	lt
 800d6fc:	4618      	movlt	r0, r3
 800d6fe:	e7a3      	b.n	800d648 <_printf_i+0x130>
 800d700:	2301      	movs	r3, #1
 800d702:	464a      	mov	r2, r9
 800d704:	4639      	mov	r1, r7
 800d706:	4630      	mov	r0, r6
 800d708:	47c0      	blx	r8
 800d70a:	3001      	adds	r0, #1
 800d70c:	d09a      	beq.n	800d644 <_printf_i+0x12c>
 800d70e:	3501      	adds	r5, #1
 800d710:	68e3      	ldr	r3, [r4, #12]
 800d712:	9a03      	ldr	r2, [sp, #12]
 800d714:	1a9b      	subs	r3, r3, r2
 800d716:	42ab      	cmp	r3, r5
 800d718:	dcf2      	bgt.n	800d700 <_printf_i+0x1e8>
 800d71a:	e7eb      	b.n	800d6f4 <_printf_i+0x1dc>
 800d71c:	2500      	movs	r5, #0
 800d71e:	f104 0919 	add.w	r9, r4, #25
 800d722:	e7f5      	b.n	800d710 <_printf_i+0x1f8>
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1ac      	bne.n	800d682 <_printf_i+0x16a>
 800d728:	7803      	ldrb	r3, [r0, #0]
 800d72a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d72e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d732:	e76c      	b.n	800d60e <_printf_i+0xf6>
 800d734:	0800fb01 	.word	0x0800fb01
 800d738:	0800fb12 	.word	0x0800fb12

0800d73c <_sbrk_r>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	4c06      	ldr	r4, [pc, #24]	; (800d758 <_sbrk_r+0x1c>)
 800d740:	2300      	movs	r3, #0
 800d742:	4605      	mov	r5, r0
 800d744:	4608      	mov	r0, r1
 800d746:	6023      	str	r3, [r4, #0]
 800d748:	f000 fafa 	bl	800dd40 <_sbrk>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	d102      	bne.n	800d756 <_sbrk_r+0x1a>
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	b103      	cbz	r3, 800d756 <_sbrk_r+0x1a>
 800d754:	602b      	str	r3, [r5, #0]
 800d756:	bd38      	pop	{r3, r4, r5, pc}
 800d758:	20007714 	.word	0x20007714

0800d75c <__sread>:
 800d75c:	b510      	push	{r4, lr}
 800d75e:	460c      	mov	r4, r1
 800d760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d764:	f000 fa88 	bl	800dc78 <_read_r>
 800d768:	2800      	cmp	r0, #0
 800d76a:	bfab      	itete	ge
 800d76c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d76e:	89a3      	ldrhlt	r3, [r4, #12]
 800d770:	181b      	addge	r3, r3, r0
 800d772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d776:	bfac      	ite	ge
 800d778:	6563      	strge	r3, [r4, #84]	; 0x54
 800d77a:	81a3      	strhlt	r3, [r4, #12]
 800d77c:	bd10      	pop	{r4, pc}

0800d77e <__swrite>:
 800d77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d782:	461f      	mov	r7, r3
 800d784:	898b      	ldrh	r3, [r1, #12]
 800d786:	05db      	lsls	r3, r3, #23
 800d788:	4605      	mov	r5, r0
 800d78a:	460c      	mov	r4, r1
 800d78c:	4616      	mov	r6, r2
 800d78e:	d505      	bpl.n	800d79c <__swrite+0x1e>
 800d790:	2302      	movs	r3, #2
 800d792:	2200      	movs	r2, #0
 800d794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d798:	f000 f9b6 	bl	800db08 <_lseek_r>
 800d79c:	89a3      	ldrh	r3, [r4, #12]
 800d79e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7a6:	81a3      	strh	r3, [r4, #12]
 800d7a8:	4632      	mov	r2, r6
 800d7aa:	463b      	mov	r3, r7
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b2:	f000 b869 	b.w	800d888 <_write_r>

0800d7b6 <__sseek>:
 800d7b6:	b510      	push	{r4, lr}
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7be:	f000 f9a3 	bl	800db08 <_lseek_r>
 800d7c2:	1c43      	adds	r3, r0, #1
 800d7c4:	89a3      	ldrh	r3, [r4, #12]
 800d7c6:	bf15      	itete	ne
 800d7c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d7ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d7ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d7d2:	81a3      	strheq	r3, [r4, #12]
 800d7d4:	bf18      	it	ne
 800d7d6:	81a3      	strhne	r3, [r4, #12]
 800d7d8:	bd10      	pop	{r4, pc}

0800d7da <__sclose>:
 800d7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7de:	f000 b8d3 	b.w	800d988 <_close_r>
	...

0800d7e4 <__swbuf_r>:
 800d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e6:	460e      	mov	r6, r1
 800d7e8:	4614      	mov	r4, r2
 800d7ea:	4605      	mov	r5, r0
 800d7ec:	b118      	cbz	r0, 800d7f6 <__swbuf_r+0x12>
 800d7ee:	6983      	ldr	r3, [r0, #24]
 800d7f0:	b90b      	cbnz	r3, 800d7f6 <__swbuf_r+0x12>
 800d7f2:	f7ff fa4f 	bl	800cc94 <__sinit>
 800d7f6:	4b21      	ldr	r3, [pc, #132]	; (800d87c <__swbuf_r+0x98>)
 800d7f8:	429c      	cmp	r4, r3
 800d7fa:	d12a      	bne.n	800d852 <__swbuf_r+0x6e>
 800d7fc:	686c      	ldr	r4, [r5, #4]
 800d7fe:	69a3      	ldr	r3, [r4, #24]
 800d800:	60a3      	str	r3, [r4, #8]
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	071a      	lsls	r2, r3, #28
 800d806:	d52e      	bpl.n	800d866 <__swbuf_r+0x82>
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	b363      	cbz	r3, 800d866 <__swbuf_r+0x82>
 800d80c:	6923      	ldr	r3, [r4, #16]
 800d80e:	6820      	ldr	r0, [r4, #0]
 800d810:	1ac0      	subs	r0, r0, r3
 800d812:	6963      	ldr	r3, [r4, #20]
 800d814:	b2f6      	uxtb	r6, r6
 800d816:	4283      	cmp	r3, r0
 800d818:	4637      	mov	r7, r6
 800d81a:	dc04      	bgt.n	800d826 <__swbuf_r+0x42>
 800d81c:	4621      	mov	r1, r4
 800d81e:	4628      	mov	r0, r5
 800d820:	f000 f948 	bl	800dab4 <_fflush_r>
 800d824:	bb28      	cbnz	r0, 800d872 <__swbuf_r+0x8e>
 800d826:	68a3      	ldr	r3, [r4, #8]
 800d828:	3b01      	subs	r3, #1
 800d82a:	60a3      	str	r3, [r4, #8]
 800d82c:	6823      	ldr	r3, [r4, #0]
 800d82e:	1c5a      	adds	r2, r3, #1
 800d830:	6022      	str	r2, [r4, #0]
 800d832:	701e      	strb	r6, [r3, #0]
 800d834:	6963      	ldr	r3, [r4, #20]
 800d836:	3001      	adds	r0, #1
 800d838:	4283      	cmp	r3, r0
 800d83a:	d004      	beq.n	800d846 <__swbuf_r+0x62>
 800d83c:	89a3      	ldrh	r3, [r4, #12]
 800d83e:	07db      	lsls	r3, r3, #31
 800d840:	d519      	bpl.n	800d876 <__swbuf_r+0x92>
 800d842:	2e0a      	cmp	r6, #10
 800d844:	d117      	bne.n	800d876 <__swbuf_r+0x92>
 800d846:	4621      	mov	r1, r4
 800d848:	4628      	mov	r0, r5
 800d84a:	f000 f933 	bl	800dab4 <_fflush_r>
 800d84e:	b190      	cbz	r0, 800d876 <__swbuf_r+0x92>
 800d850:	e00f      	b.n	800d872 <__swbuf_r+0x8e>
 800d852:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <__swbuf_r+0x9c>)
 800d854:	429c      	cmp	r4, r3
 800d856:	d101      	bne.n	800d85c <__swbuf_r+0x78>
 800d858:	68ac      	ldr	r4, [r5, #8]
 800d85a:	e7d0      	b.n	800d7fe <__swbuf_r+0x1a>
 800d85c:	4b09      	ldr	r3, [pc, #36]	; (800d884 <__swbuf_r+0xa0>)
 800d85e:	429c      	cmp	r4, r3
 800d860:	bf08      	it	eq
 800d862:	68ec      	ldreq	r4, [r5, #12]
 800d864:	e7cb      	b.n	800d7fe <__swbuf_r+0x1a>
 800d866:	4621      	mov	r1, r4
 800d868:	4628      	mov	r0, r5
 800d86a:	f000 f81f 	bl	800d8ac <__swsetup_r>
 800d86e:	2800      	cmp	r0, #0
 800d870:	d0cc      	beq.n	800d80c <__swbuf_r+0x28>
 800d872:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d876:	4638      	mov	r0, r7
 800d878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d87a:	bf00      	nop
 800d87c:	0800fab0 	.word	0x0800fab0
 800d880:	0800fad0 	.word	0x0800fad0
 800d884:	0800fa90 	.word	0x0800fa90

0800d888 <_write_r>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	4c07      	ldr	r4, [pc, #28]	; (800d8a8 <_write_r+0x20>)
 800d88c:	4605      	mov	r5, r0
 800d88e:	4608      	mov	r0, r1
 800d890:	4611      	mov	r1, r2
 800d892:	2200      	movs	r2, #0
 800d894:	6022      	str	r2, [r4, #0]
 800d896:	461a      	mov	r2, r3
 800d898:	f000 fa60 	bl	800dd5c <_write>
 800d89c:	1c43      	adds	r3, r0, #1
 800d89e:	d102      	bne.n	800d8a6 <_write_r+0x1e>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	b103      	cbz	r3, 800d8a6 <_write_r+0x1e>
 800d8a4:	602b      	str	r3, [r5, #0]
 800d8a6:	bd38      	pop	{r3, r4, r5, pc}
 800d8a8:	20007714 	.word	0x20007714

0800d8ac <__swsetup_r>:
 800d8ac:	4b32      	ldr	r3, [pc, #200]	; (800d978 <__swsetup_r+0xcc>)
 800d8ae:	b570      	push	{r4, r5, r6, lr}
 800d8b0:	681d      	ldr	r5, [r3, #0]
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	460c      	mov	r4, r1
 800d8b6:	b125      	cbz	r5, 800d8c2 <__swsetup_r+0x16>
 800d8b8:	69ab      	ldr	r3, [r5, #24]
 800d8ba:	b913      	cbnz	r3, 800d8c2 <__swsetup_r+0x16>
 800d8bc:	4628      	mov	r0, r5
 800d8be:	f7ff f9e9 	bl	800cc94 <__sinit>
 800d8c2:	4b2e      	ldr	r3, [pc, #184]	; (800d97c <__swsetup_r+0xd0>)
 800d8c4:	429c      	cmp	r4, r3
 800d8c6:	d10f      	bne.n	800d8e8 <__swsetup_r+0x3c>
 800d8c8:	686c      	ldr	r4, [r5, #4]
 800d8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ce:	b29a      	uxth	r2, r3
 800d8d0:	0715      	lsls	r5, r2, #28
 800d8d2:	d42c      	bmi.n	800d92e <__swsetup_r+0x82>
 800d8d4:	06d0      	lsls	r0, r2, #27
 800d8d6:	d411      	bmi.n	800d8fc <__swsetup_r+0x50>
 800d8d8:	2209      	movs	r2, #9
 800d8da:	6032      	str	r2, [r6, #0]
 800d8dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8e0:	81a3      	strh	r3, [r4, #12]
 800d8e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8e6:	e03e      	b.n	800d966 <__swsetup_r+0xba>
 800d8e8:	4b25      	ldr	r3, [pc, #148]	; (800d980 <__swsetup_r+0xd4>)
 800d8ea:	429c      	cmp	r4, r3
 800d8ec:	d101      	bne.n	800d8f2 <__swsetup_r+0x46>
 800d8ee:	68ac      	ldr	r4, [r5, #8]
 800d8f0:	e7eb      	b.n	800d8ca <__swsetup_r+0x1e>
 800d8f2:	4b24      	ldr	r3, [pc, #144]	; (800d984 <__swsetup_r+0xd8>)
 800d8f4:	429c      	cmp	r4, r3
 800d8f6:	bf08      	it	eq
 800d8f8:	68ec      	ldreq	r4, [r5, #12]
 800d8fa:	e7e6      	b.n	800d8ca <__swsetup_r+0x1e>
 800d8fc:	0751      	lsls	r1, r2, #29
 800d8fe:	d512      	bpl.n	800d926 <__swsetup_r+0x7a>
 800d900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d902:	b141      	cbz	r1, 800d916 <__swsetup_r+0x6a>
 800d904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d908:	4299      	cmp	r1, r3
 800d90a:	d002      	beq.n	800d912 <__swsetup_r+0x66>
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7ff fa53 	bl	800cdb8 <_free_r>
 800d912:	2300      	movs	r3, #0
 800d914:	6363      	str	r3, [r4, #52]	; 0x34
 800d916:	89a3      	ldrh	r3, [r4, #12]
 800d918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d91c:	81a3      	strh	r3, [r4, #12]
 800d91e:	2300      	movs	r3, #0
 800d920:	6063      	str	r3, [r4, #4]
 800d922:	6923      	ldr	r3, [r4, #16]
 800d924:	6023      	str	r3, [r4, #0]
 800d926:	89a3      	ldrh	r3, [r4, #12]
 800d928:	f043 0308 	orr.w	r3, r3, #8
 800d92c:	81a3      	strh	r3, [r4, #12]
 800d92e:	6923      	ldr	r3, [r4, #16]
 800d930:	b94b      	cbnz	r3, 800d946 <__swsetup_r+0x9a>
 800d932:	89a3      	ldrh	r3, [r4, #12]
 800d934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d93c:	d003      	beq.n	800d946 <__swsetup_r+0x9a>
 800d93e:	4621      	mov	r1, r4
 800d940:	4630      	mov	r0, r6
 800d942:	f000 f917 	bl	800db74 <__smakebuf_r>
 800d946:	89a2      	ldrh	r2, [r4, #12]
 800d948:	f012 0301 	ands.w	r3, r2, #1
 800d94c:	d00c      	beq.n	800d968 <__swsetup_r+0xbc>
 800d94e:	2300      	movs	r3, #0
 800d950:	60a3      	str	r3, [r4, #8]
 800d952:	6963      	ldr	r3, [r4, #20]
 800d954:	425b      	negs	r3, r3
 800d956:	61a3      	str	r3, [r4, #24]
 800d958:	6923      	ldr	r3, [r4, #16]
 800d95a:	b953      	cbnz	r3, 800d972 <__swsetup_r+0xc6>
 800d95c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d960:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d964:	d1ba      	bne.n	800d8dc <__swsetup_r+0x30>
 800d966:	bd70      	pop	{r4, r5, r6, pc}
 800d968:	0792      	lsls	r2, r2, #30
 800d96a:	bf58      	it	pl
 800d96c:	6963      	ldrpl	r3, [r4, #20]
 800d96e:	60a3      	str	r3, [r4, #8]
 800d970:	e7f2      	b.n	800d958 <__swsetup_r+0xac>
 800d972:	2000      	movs	r0, #0
 800d974:	e7f7      	b.n	800d966 <__swsetup_r+0xba>
 800d976:	bf00      	nop
 800d978:	20000018 	.word	0x20000018
 800d97c:	0800fab0 	.word	0x0800fab0
 800d980:	0800fad0 	.word	0x0800fad0
 800d984:	0800fa90 	.word	0x0800fa90

0800d988 <_close_r>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	4c06      	ldr	r4, [pc, #24]	; (800d9a4 <_close_r+0x1c>)
 800d98c:	2300      	movs	r3, #0
 800d98e:	4605      	mov	r5, r0
 800d990:	4608      	mov	r0, r1
 800d992:	6023      	str	r3, [r4, #0]
 800d994:	f000 f9ac 	bl	800dcf0 <_close>
 800d998:	1c43      	adds	r3, r0, #1
 800d99a:	d102      	bne.n	800d9a2 <_close_r+0x1a>
 800d99c:	6823      	ldr	r3, [r4, #0]
 800d99e:	b103      	cbz	r3, 800d9a2 <_close_r+0x1a>
 800d9a0:	602b      	str	r3, [r5, #0]
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}
 800d9a4:	20007714 	.word	0x20007714

0800d9a8 <__sflush_r>:
 800d9a8:	898a      	ldrh	r2, [r1, #12]
 800d9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	0710      	lsls	r0, r2, #28
 800d9b2:	460c      	mov	r4, r1
 800d9b4:	d458      	bmi.n	800da68 <__sflush_r+0xc0>
 800d9b6:	684b      	ldr	r3, [r1, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	dc05      	bgt.n	800d9c8 <__sflush_r+0x20>
 800d9bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	dc02      	bgt.n	800d9c8 <__sflush_r+0x20>
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9ca:	2e00      	cmp	r6, #0
 800d9cc:	d0f9      	beq.n	800d9c2 <__sflush_r+0x1a>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d9d4:	682f      	ldr	r7, [r5, #0]
 800d9d6:	6a21      	ldr	r1, [r4, #32]
 800d9d8:	602b      	str	r3, [r5, #0]
 800d9da:	d032      	beq.n	800da42 <__sflush_r+0x9a>
 800d9dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	075a      	lsls	r2, r3, #29
 800d9e2:	d505      	bpl.n	800d9f0 <__sflush_r+0x48>
 800d9e4:	6863      	ldr	r3, [r4, #4]
 800d9e6:	1ac0      	subs	r0, r0, r3
 800d9e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d9ea:	b10b      	cbz	r3, 800d9f0 <__sflush_r+0x48>
 800d9ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9ee:	1ac0      	subs	r0, r0, r3
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9f6:	6a21      	ldr	r1, [r4, #32]
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b0      	blx	r6
 800d9fc:	1c43      	adds	r3, r0, #1
 800d9fe:	89a3      	ldrh	r3, [r4, #12]
 800da00:	d106      	bne.n	800da10 <__sflush_r+0x68>
 800da02:	6829      	ldr	r1, [r5, #0]
 800da04:	291d      	cmp	r1, #29
 800da06:	d848      	bhi.n	800da9a <__sflush_r+0xf2>
 800da08:	4a29      	ldr	r2, [pc, #164]	; (800dab0 <__sflush_r+0x108>)
 800da0a:	40ca      	lsrs	r2, r1
 800da0c:	07d6      	lsls	r6, r2, #31
 800da0e:	d544      	bpl.n	800da9a <__sflush_r+0xf2>
 800da10:	2200      	movs	r2, #0
 800da12:	6062      	str	r2, [r4, #4]
 800da14:	04d9      	lsls	r1, r3, #19
 800da16:	6922      	ldr	r2, [r4, #16]
 800da18:	6022      	str	r2, [r4, #0]
 800da1a:	d504      	bpl.n	800da26 <__sflush_r+0x7e>
 800da1c:	1c42      	adds	r2, r0, #1
 800da1e:	d101      	bne.n	800da24 <__sflush_r+0x7c>
 800da20:	682b      	ldr	r3, [r5, #0]
 800da22:	b903      	cbnz	r3, 800da26 <__sflush_r+0x7e>
 800da24:	6560      	str	r0, [r4, #84]	; 0x54
 800da26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da28:	602f      	str	r7, [r5, #0]
 800da2a:	2900      	cmp	r1, #0
 800da2c:	d0c9      	beq.n	800d9c2 <__sflush_r+0x1a>
 800da2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da32:	4299      	cmp	r1, r3
 800da34:	d002      	beq.n	800da3c <__sflush_r+0x94>
 800da36:	4628      	mov	r0, r5
 800da38:	f7ff f9be 	bl	800cdb8 <_free_r>
 800da3c:	2000      	movs	r0, #0
 800da3e:	6360      	str	r0, [r4, #52]	; 0x34
 800da40:	e7c0      	b.n	800d9c4 <__sflush_r+0x1c>
 800da42:	2301      	movs	r3, #1
 800da44:	4628      	mov	r0, r5
 800da46:	47b0      	blx	r6
 800da48:	1c41      	adds	r1, r0, #1
 800da4a:	d1c8      	bne.n	800d9de <__sflush_r+0x36>
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d0c5      	beq.n	800d9de <__sflush_r+0x36>
 800da52:	2b1d      	cmp	r3, #29
 800da54:	d001      	beq.n	800da5a <__sflush_r+0xb2>
 800da56:	2b16      	cmp	r3, #22
 800da58:	d101      	bne.n	800da5e <__sflush_r+0xb6>
 800da5a:	602f      	str	r7, [r5, #0]
 800da5c:	e7b1      	b.n	800d9c2 <__sflush_r+0x1a>
 800da5e:	89a3      	ldrh	r3, [r4, #12]
 800da60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da64:	81a3      	strh	r3, [r4, #12]
 800da66:	e7ad      	b.n	800d9c4 <__sflush_r+0x1c>
 800da68:	690f      	ldr	r7, [r1, #16]
 800da6a:	2f00      	cmp	r7, #0
 800da6c:	d0a9      	beq.n	800d9c2 <__sflush_r+0x1a>
 800da6e:	0793      	lsls	r3, r2, #30
 800da70:	680e      	ldr	r6, [r1, #0]
 800da72:	bf08      	it	eq
 800da74:	694b      	ldreq	r3, [r1, #20]
 800da76:	600f      	str	r7, [r1, #0]
 800da78:	bf18      	it	ne
 800da7a:	2300      	movne	r3, #0
 800da7c:	eba6 0807 	sub.w	r8, r6, r7
 800da80:	608b      	str	r3, [r1, #8]
 800da82:	f1b8 0f00 	cmp.w	r8, #0
 800da86:	dd9c      	ble.n	800d9c2 <__sflush_r+0x1a>
 800da88:	4643      	mov	r3, r8
 800da8a:	463a      	mov	r2, r7
 800da8c:	6a21      	ldr	r1, [r4, #32]
 800da8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da90:	4628      	mov	r0, r5
 800da92:	47b0      	blx	r6
 800da94:	2800      	cmp	r0, #0
 800da96:	dc06      	bgt.n	800daa6 <__sflush_r+0xfe>
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da9e:	81a3      	strh	r3, [r4, #12]
 800daa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daa4:	e78e      	b.n	800d9c4 <__sflush_r+0x1c>
 800daa6:	4407      	add	r7, r0
 800daa8:	eba8 0800 	sub.w	r8, r8, r0
 800daac:	e7e9      	b.n	800da82 <__sflush_r+0xda>
 800daae:	bf00      	nop
 800dab0:	20400001 	.word	0x20400001

0800dab4 <_fflush_r>:
 800dab4:	b538      	push	{r3, r4, r5, lr}
 800dab6:	690b      	ldr	r3, [r1, #16]
 800dab8:	4605      	mov	r5, r0
 800daba:	460c      	mov	r4, r1
 800dabc:	b1db      	cbz	r3, 800daf6 <_fflush_r+0x42>
 800dabe:	b118      	cbz	r0, 800dac8 <_fflush_r+0x14>
 800dac0:	6983      	ldr	r3, [r0, #24]
 800dac2:	b90b      	cbnz	r3, 800dac8 <_fflush_r+0x14>
 800dac4:	f7ff f8e6 	bl	800cc94 <__sinit>
 800dac8:	4b0c      	ldr	r3, [pc, #48]	; (800dafc <_fflush_r+0x48>)
 800daca:	429c      	cmp	r4, r3
 800dacc:	d109      	bne.n	800dae2 <_fflush_r+0x2e>
 800dace:	686c      	ldr	r4, [r5, #4]
 800dad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad4:	b17b      	cbz	r3, 800daf6 <_fflush_r+0x42>
 800dad6:	4621      	mov	r1, r4
 800dad8:	4628      	mov	r0, r5
 800dada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dade:	f7ff bf63 	b.w	800d9a8 <__sflush_r>
 800dae2:	4b07      	ldr	r3, [pc, #28]	; (800db00 <_fflush_r+0x4c>)
 800dae4:	429c      	cmp	r4, r3
 800dae6:	d101      	bne.n	800daec <_fflush_r+0x38>
 800dae8:	68ac      	ldr	r4, [r5, #8]
 800daea:	e7f1      	b.n	800dad0 <_fflush_r+0x1c>
 800daec:	4b05      	ldr	r3, [pc, #20]	; (800db04 <_fflush_r+0x50>)
 800daee:	429c      	cmp	r4, r3
 800daf0:	bf08      	it	eq
 800daf2:	68ec      	ldreq	r4, [r5, #12]
 800daf4:	e7ec      	b.n	800dad0 <_fflush_r+0x1c>
 800daf6:	2000      	movs	r0, #0
 800daf8:	bd38      	pop	{r3, r4, r5, pc}
 800dafa:	bf00      	nop
 800dafc:	0800fab0 	.word	0x0800fab0
 800db00:	0800fad0 	.word	0x0800fad0
 800db04:	0800fa90 	.word	0x0800fa90

0800db08 <_lseek_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4c07      	ldr	r4, [pc, #28]	; (800db28 <_lseek_r+0x20>)
 800db0c:	4605      	mov	r5, r0
 800db0e:	4608      	mov	r0, r1
 800db10:	4611      	mov	r1, r2
 800db12:	2200      	movs	r2, #0
 800db14:	6022      	str	r2, [r4, #0]
 800db16:	461a      	mov	r2, r3
 800db18:	f000 f902 	bl	800dd20 <_lseek>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	d102      	bne.n	800db26 <_lseek_r+0x1e>
 800db20:	6823      	ldr	r3, [r4, #0]
 800db22:	b103      	cbz	r3, 800db26 <_lseek_r+0x1e>
 800db24:	602b      	str	r3, [r5, #0]
 800db26:	bd38      	pop	{r3, r4, r5, pc}
 800db28:	20007714 	.word	0x20007714

0800db2c <__swhatbuf_r>:
 800db2c:	b570      	push	{r4, r5, r6, lr}
 800db2e:	460e      	mov	r6, r1
 800db30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db34:	2900      	cmp	r1, #0
 800db36:	b096      	sub	sp, #88	; 0x58
 800db38:	4614      	mov	r4, r2
 800db3a:	461d      	mov	r5, r3
 800db3c:	da07      	bge.n	800db4e <__swhatbuf_r+0x22>
 800db3e:	2300      	movs	r3, #0
 800db40:	602b      	str	r3, [r5, #0]
 800db42:	89b3      	ldrh	r3, [r6, #12]
 800db44:	061a      	lsls	r2, r3, #24
 800db46:	d410      	bmi.n	800db6a <__swhatbuf_r+0x3e>
 800db48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db4c:	e00e      	b.n	800db6c <__swhatbuf_r+0x40>
 800db4e:	466a      	mov	r2, sp
 800db50:	f000 f8a4 	bl	800dc9c <_fstat_r>
 800db54:	2800      	cmp	r0, #0
 800db56:	dbf2      	blt.n	800db3e <__swhatbuf_r+0x12>
 800db58:	9a01      	ldr	r2, [sp, #4]
 800db5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db62:	425a      	negs	r2, r3
 800db64:	415a      	adcs	r2, r3
 800db66:	602a      	str	r2, [r5, #0]
 800db68:	e7ee      	b.n	800db48 <__swhatbuf_r+0x1c>
 800db6a:	2340      	movs	r3, #64	; 0x40
 800db6c:	2000      	movs	r0, #0
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	b016      	add	sp, #88	; 0x58
 800db72:	bd70      	pop	{r4, r5, r6, pc}

0800db74 <__smakebuf_r>:
 800db74:	898b      	ldrh	r3, [r1, #12]
 800db76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db78:	079d      	lsls	r5, r3, #30
 800db7a:	4606      	mov	r6, r0
 800db7c:	460c      	mov	r4, r1
 800db7e:	d507      	bpl.n	800db90 <__smakebuf_r+0x1c>
 800db80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	6123      	str	r3, [r4, #16]
 800db88:	2301      	movs	r3, #1
 800db8a:	6163      	str	r3, [r4, #20]
 800db8c:	b002      	add	sp, #8
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	ab01      	add	r3, sp, #4
 800db92:	466a      	mov	r2, sp
 800db94:	f7ff ffca 	bl	800db2c <__swhatbuf_r>
 800db98:	9900      	ldr	r1, [sp, #0]
 800db9a:	4605      	mov	r5, r0
 800db9c:	4630      	mov	r0, r6
 800db9e:	f7ff f959 	bl	800ce54 <_malloc_r>
 800dba2:	b948      	cbnz	r0, 800dbb8 <__smakebuf_r+0x44>
 800dba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dba8:	059a      	lsls	r2, r3, #22
 800dbaa:	d4ef      	bmi.n	800db8c <__smakebuf_r+0x18>
 800dbac:	f023 0303 	bic.w	r3, r3, #3
 800dbb0:	f043 0302 	orr.w	r3, r3, #2
 800dbb4:	81a3      	strh	r3, [r4, #12]
 800dbb6:	e7e3      	b.n	800db80 <__smakebuf_r+0xc>
 800dbb8:	4b0d      	ldr	r3, [pc, #52]	; (800dbf0 <__smakebuf_r+0x7c>)
 800dbba:	62b3      	str	r3, [r6, #40]	; 0x28
 800dbbc:	89a3      	ldrh	r3, [r4, #12]
 800dbbe:	6020      	str	r0, [r4, #0]
 800dbc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbc4:	81a3      	strh	r3, [r4, #12]
 800dbc6:	9b00      	ldr	r3, [sp, #0]
 800dbc8:	6163      	str	r3, [r4, #20]
 800dbca:	9b01      	ldr	r3, [sp, #4]
 800dbcc:	6120      	str	r0, [r4, #16]
 800dbce:	b15b      	cbz	r3, 800dbe8 <__smakebuf_r+0x74>
 800dbd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f000 f873 	bl	800dcc0 <_isatty_r>
 800dbda:	b128      	cbz	r0, 800dbe8 <__smakebuf_r+0x74>
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	f023 0303 	bic.w	r3, r3, #3
 800dbe2:	f043 0301 	orr.w	r3, r3, #1
 800dbe6:	81a3      	strh	r3, [r4, #12]
 800dbe8:	89a3      	ldrh	r3, [r4, #12]
 800dbea:	431d      	orrs	r5, r3
 800dbec:	81a5      	strh	r5, [r4, #12]
 800dbee:	e7cd      	b.n	800db8c <__smakebuf_r+0x18>
 800dbf0:	0800cc5d 	.word	0x0800cc5d

0800dbf4 <memmove>:
 800dbf4:	4288      	cmp	r0, r1
 800dbf6:	b510      	push	{r4, lr}
 800dbf8:	eb01 0302 	add.w	r3, r1, r2
 800dbfc:	d807      	bhi.n	800dc0e <memmove+0x1a>
 800dbfe:	1e42      	subs	r2, r0, #1
 800dc00:	4299      	cmp	r1, r3
 800dc02:	d00a      	beq.n	800dc1a <memmove+0x26>
 800dc04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc08:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dc0c:	e7f8      	b.n	800dc00 <memmove+0xc>
 800dc0e:	4283      	cmp	r3, r0
 800dc10:	d9f5      	bls.n	800dbfe <memmove+0xa>
 800dc12:	1881      	adds	r1, r0, r2
 800dc14:	1ad2      	subs	r2, r2, r3
 800dc16:	42d3      	cmn	r3, r2
 800dc18:	d100      	bne.n	800dc1c <memmove+0x28>
 800dc1a:	bd10      	pop	{r4, pc}
 800dc1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dc24:	e7f7      	b.n	800dc16 <memmove+0x22>

0800dc26 <__malloc_lock>:
 800dc26:	4770      	bx	lr

0800dc28 <__malloc_unlock>:
 800dc28:	4770      	bx	lr

0800dc2a <_realloc_r>:
 800dc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2c:	4607      	mov	r7, r0
 800dc2e:	4614      	mov	r4, r2
 800dc30:	460e      	mov	r6, r1
 800dc32:	b921      	cbnz	r1, 800dc3e <_realloc_r+0x14>
 800dc34:	4611      	mov	r1, r2
 800dc36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc3a:	f7ff b90b 	b.w	800ce54 <_malloc_r>
 800dc3e:	b922      	cbnz	r2, 800dc4a <_realloc_r+0x20>
 800dc40:	f7ff f8ba 	bl	800cdb8 <_free_r>
 800dc44:	4625      	mov	r5, r4
 800dc46:	4628      	mov	r0, r5
 800dc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc4a:	f000 f849 	bl	800dce0 <_malloc_usable_size_r>
 800dc4e:	42a0      	cmp	r0, r4
 800dc50:	d20f      	bcs.n	800dc72 <_realloc_r+0x48>
 800dc52:	4621      	mov	r1, r4
 800dc54:	4638      	mov	r0, r7
 800dc56:	f7ff f8fd 	bl	800ce54 <_malloc_r>
 800dc5a:	4605      	mov	r5, r0
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d0f2      	beq.n	800dc46 <_realloc_r+0x1c>
 800dc60:	4631      	mov	r1, r6
 800dc62:	4622      	mov	r2, r4
 800dc64:	f7fe ff57 	bl	800cb16 <memcpy>
 800dc68:	4631      	mov	r1, r6
 800dc6a:	4638      	mov	r0, r7
 800dc6c:	f7ff f8a4 	bl	800cdb8 <_free_r>
 800dc70:	e7e9      	b.n	800dc46 <_realloc_r+0x1c>
 800dc72:	4635      	mov	r5, r6
 800dc74:	e7e7      	b.n	800dc46 <_realloc_r+0x1c>
	...

0800dc78 <_read_r>:
 800dc78:	b538      	push	{r3, r4, r5, lr}
 800dc7a:	4c07      	ldr	r4, [pc, #28]	; (800dc98 <_read_r+0x20>)
 800dc7c:	4605      	mov	r5, r0
 800dc7e:	4608      	mov	r0, r1
 800dc80:	4611      	mov	r1, r2
 800dc82:	2200      	movs	r2, #0
 800dc84:	6022      	str	r2, [r4, #0]
 800dc86:	461a      	mov	r2, r3
 800dc88:	f000 f852 	bl	800dd30 <_read>
 800dc8c:	1c43      	adds	r3, r0, #1
 800dc8e:	d102      	bne.n	800dc96 <_read_r+0x1e>
 800dc90:	6823      	ldr	r3, [r4, #0]
 800dc92:	b103      	cbz	r3, 800dc96 <_read_r+0x1e>
 800dc94:	602b      	str	r3, [r5, #0]
 800dc96:	bd38      	pop	{r3, r4, r5, pc}
 800dc98:	20007714 	.word	0x20007714

0800dc9c <_fstat_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	4c07      	ldr	r4, [pc, #28]	; (800dcbc <_fstat_r+0x20>)
 800dca0:	2300      	movs	r3, #0
 800dca2:	4605      	mov	r5, r0
 800dca4:	4608      	mov	r0, r1
 800dca6:	4611      	mov	r1, r2
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	f000 f829 	bl	800dd00 <_fstat>
 800dcae:	1c43      	adds	r3, r0, #1
 800dcb0:	d102      	bne.n	800dcb8 <_fstat_r+0x1c>
 800dcb2:	6823      	ldr	r3, [r4, #0]
 800dcb4:	b103      	cbz	r3, 800dcb8 <_fstat_r+0x1c>
 800dcb6:	602b      	str	r3, [r5, #0]
 800dcb8:	bd38      	pop	{r3, r4, r5, pc}
 800dcba:	bf00      	nop
 800dcbc:	20007714 	.word	0x20007714

0800dcc0 <_isatty_r>:
 800dcc0:	b538      	push	{r3, r4, r5, lr}
 800dcc2:	4c06      	ldr	r4, [pc, #24]	; (800dcdc <_isatty_r+0x1c>)
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	4605      	mov	r5, r0
 800dcc8:	4608      	mov	r0, r1
 800dcca:	6023      	str	r3, [r4, #0]
 800dccc:	f000 f820 	bl	800dd10 <_isatty>
 800dcd0:	1c43      	adds	r3, r0, #1
 800dcd2:	d102      	bne.n	800dcda <_isatty_r+0x1a>
 800dcd4:	6823      	ldr	r3, [r4, #0]
 800dcd6:	b103      	cbz	r3, 800dcda <_isatty_r+0x1a>
 800dcd8:	602b      	str	r3, [r5, #0]
 800dcda:	bd38      	pop	{r3, r4, r5, pc}
 800dcdc:	20007714 	.word	0x20007714

0800dce0 <_malloc_usable_size_r>:
 800dce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dce4:	1f18      	subs	r0, r3, #4
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	bfbc      	itt	lt
 800dcea:	580b      	ldrlt	r3, [r1, r0]
 800dcec:	18c0      	addlt	r0, r0, r3
 800dcee:	4770      	bx	lr

0800dcf0 <_close>:
 800dcf0:	4b02      	ldr	r3, [pc, #8]	; (800dcfc <_close+0xc>)
 800dcf2:	2258      	movs	r2, #88	; 0x58
 800dcf4:	601a      	str	r2, [r3, #0]
 800dcf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcfa:	4770      	bx	lr
 800dcfc:	20007714 	.word	0x20007714

0800dd00 <_fstat>:
 800dd00:	4b02      	ldr	r3, [pc, #8]	; (800dd0c <_fstat+0xc>)
 800dd02:	2258      	movs	r2, #88	; 0x58
 800dd04:	601a      	str	r2, [r3, #0]
 800dd06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd0a:	4770      	bx	lr
 800dd0c:	20007714 	.word	0x20007714

0800dd10 <_isatty>:
 800dd10:	4b02      	ldr	r3, [pc, #8]	; (800dd1c <_isatty+0xc>)
 800dd12:	2258      	movs	r2, #88	; 0x58
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	2000      	movs	r0, #0
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	20007714 	.word	0x20007714

0800dd20 <_lseek>:
 800dd20:	4b02      	ldr	r3, [pc, #8]	; (800dd2c <_lseek+0xc>)
 800dd22:	2258      	movs	r2, #88	; 0x58
 800dd24:	601a      	str	r2, [r3, #0]
 800dd26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd2a:	4770      	bx	lr
 800dd2c:	20007714 	.word	0x20007714

0800dd30 <_read>:
 800dd30:	4b02      	ldr	r3, [pc, #8]	; (800dd3c <_read+0xc>)
 800dd32:	2258      	movs	r2, #88	; 0x58
 800dd34:	601a      	str	r2, [r3, #0]
 800dd36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd3a:	4770      	bx	lr
 800dd3c:	20007714 	.word	0x20007714

0800dd40 <_sbrk>:
 800dd40:	4b04      	ldr	r3, [pc, #16]	; (800dd54 <_sbrk+0x14>)
 800dd42:	6819      	ldr	r1, [r3, #0]
 800dd44:	4602      	mov	r2, r0
 800dd46:	b909      	cbnz	r1, 800dd4c <_sbrk+0xc>
 800dd48:	4903      	ldr	r1, [pc, #12]	; (800dd58 <_sbrk+0x18>)
 800dd4a:	6019      	str	r1, [r3, #0]
 800dd4c:	6818      	ldr	r0, [r3, #0]
 800dd4e:	4402      	add	r2, r0
 800dd50:	601a      	str	r2, [r3, #0]
 800dd52:	4770      	bx	lr
 800dd54:	20003f94 	.word	0x20003f94
 800dd58:	2000a908 	.word	0x2000a908

0800dd5c <_write>:
 800dd5c:	4b02      	ldr	r3, [pc, #8]	; (800dd68 <_write+0xc>)
 800dd5e:	2258      	movs	r2, #88	; 0x58
 800dd60:	601a      	str	r2, [r3, #0]
 800dd62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd66:	4770      	bx	lr
 800dd68:	20007714 	.word	0x20007714

0800dd6c <_init>:
 800dd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6e:	bf00      	nop
 800dd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd72:	bc08      	pop	{r3}
 800dd74:	469e      	mov	lr, r3
 800dd76:	4770      	bx	lr

0800dd78 <_fini>:
 800dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7a:	bf00      	nop
 800dd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd7e:	bc08      	pop	{r3}
 800dd80:	469e      	mov	lr, r3
 800dd82:	4770      	bx	lr


f7rtos_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fefc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002818  080100fc  080100fc  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012914  08012914  00022914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801291c  0801291c  0002291c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012920  08012920  00022920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000b18  20000000  08012924  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a910  20000b18  0801343c  00030b18  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000b428  0801343c  0003b428  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030b18  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005776e  00000000  00000000  00030b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000094a9  00000000  00000000  000882b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001c078  00000000  00000000  0009175d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002080  00000000  00000000  000ad7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000024b0  00000000  00000000  000af858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000270b4  00000000  00000000  000b1d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0011ea38  00000000  00000000  000d8dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000f7  00000000  00000000  001f77f4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066d0  00000000  00000000  001f78ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00036cca  00000000  00000000  001fdfbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000009c  00000000  00000000  00234c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014d  00000000  00000000  00234d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b18 	.word	0x20000b18
 800021c:	00000000 	.word	0x00000000
 8000220:	080100e4 	.word	0x080100e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b1c 	.word	0x20000b1c
 800023c:	080100e4 	.word	0x080100e4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000612:	2003      	movs	r0, #3
 8000614:	f000 f82e 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000618:	2000      	movs	r0, #0
 800061a:	f00e f93d 	bl	800e898 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800061e:	f00e f8dd 	bl	800e7dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000622:	2000      	movs	r0, #0
 8000624:	bd08      	pop	{r3, pc}
	...

08000628 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <HAL_IncTick+0x10>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <HAL_IncTick+0x14>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	440b      	add	r3, r1
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20004a74 	.word	0x20004a74
 800063c:	20000000 	.word	0x20000000

08000640 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <HAL_GetTick+0x8>)
 8000642:	6818      	ldr	r0, [r3, #0]
}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20004a74 	.word	0x20004a74

0800064c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800064c:	b538      	push	{r3, r4, r5, lr}
 800064e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000650:	f7ff fff6 	bl	8000640 <HAL_GetTick>
 8000654:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000656:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800065a:	d002      	beq.n	8000662 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <HAL_Delay+0x24>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000662:	f7ff ffed 	bl	8000640 <HAL_GetTick>
 8000666:	1b40      	subs	r0, r0, r5
 8000668:	4284      	cmp	r4, r0
 800066a:	d8fa      	bhi.n	8000662 <HAL_Delay+0x16>
  {
  }
}
 800066c:	bd38      	pop	{r3, r4, r5, pc}
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000

08000674 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4906      	ldr	r1, [pc, #24]	; (8000690 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000676:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000678:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800067c:	041b      	lsls	r3, r3, #16
 800067e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000680:	0200      	lsls	r0, r0, #8
 8000682:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000686:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000688:	4a02      	ldr	r2, [pc, #8]	; (8000694 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800068a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800068c:	60ca      	str	r2, [r1, #12]
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00
 8000694:	05fa0000 	.word	0x05fa0000

08000698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000698:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_NVIC_SetPriority+0x54>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a2:	f1c3 0407 	rsb	r4, r3, #7
 80006a6:	2c04      	cmp	r4, #4
 80006a8:	bf28      	it	cs
 80006aa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ac:	1d1d      	adds	r5, r3, #4
 80006ae:	2d06      	cmp	r5, #6
 80006b0:	d913      	bls.n	80006da <HAL_NVIC_SetPriority+0x42>
 80006b2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	2501      	movs	r5, #1
 80006b6:	fa05 f404 	lsl.w	r4, r5, r4
 80006ba:	3c01      	subs	r4, #1
 80006bc:	4021      	ands	r1, r4
 80006be:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	fa05 f303 	lsl.w	r3, r5, r3
 80006c4:	3b01      	subs	r3, #1
 80006c6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80006ca:	2800      	cmp	r0, #0
 80006cc:	db07      	blt.n	80006de <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	0109      	lsls	r1, r1, #4
 80006d0:	b2c9      	uxtb	r1, r1
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <HAL_NVIC_SetPriority+0x58>)
 80006d4:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006d6:	bc30      	pop	{r4, r5}
 80006d8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	2300      	movs	r3, #0
 80006dc:	e7ea      	b.n	80006b4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	f000 000f 	and.w	r0, r0, #15
 80006e2:	0109      	lsls	r1, r1, #4
 80006e4:	b2c9      	uxtb	r1, r1
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_NVIC_SetPriority+0x5c>)
 80006e8:	5419      	strb	r1, [r3, r0]
 80006ea:	e7f4      	b.n	80006d6 <HAL_NVIC_SetPriority+0x3e>
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000e400 	.word	0xe000e400
 80006f4:	e000ed14 	.word	0xe000ed14

080006f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006f8:	0942      	lsrs	r2, r0, #5
 80006fa:	f000 001f 	and.w	r0, r0, #31
 80006fe:	2301      	movs	r3, #1
 8000700:	fa03 f000 	lsl.w	r0, r3, r0
 8000704:	4b01      	ldr	r3, [pc, #4]	; (800070c <HAL_NVIC_EnableIRQ+0x14>)
 8000706:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100

08000710 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000710:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b02      	cmp	r3, #2
 8000718:	d003      	beq.n	8000722 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800071e:	2001      	movs	r0, #1
 8000720:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000722:	2305      	movs	r3, #5
 8000724:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000728:	6802      	ldr	r2, [r0, #0]
 800072a:	6813      	ldr	r3, [r2, #0]
 800072c:	f023 0301 	bic.w	r3, r3, #1
 8000730:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000732:	2000      	movs	r0, #0
}
 8000734:	4770      	bx	lr
	...

08000738 <ETH_MACAddressConfig>:
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000738:	7950      	ldrb	r0, [r2, #5]
 800073a:	7913      	ldrb	r3, [r2, #4]
 800073c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <ETH_MACAddressConfig+0x28>)
 8000742:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000744:	78d0      	ldrb	r0, [r2, #3]
 8000746:	7893      	ldrb	r3, [r2, #2]
 8000748:	041b      	lsls	r3, r3, #16
 800074a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800074e:	7850      	ldrb	r0, [r2, #1]
 8000750:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8000758:	4a02      	ldr	r2, [pc, #8]	; (8000764 <ETH_MACAddressConfig+0x2c>)
 800075a:	508b      	str	r3, [r1, r2]
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40028040 	.word	0x40028040
 8000764:	40028044 	.word	0x40028044

08000768 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000768:	6801      	ldr	r1, [r0, #0]
 800076a:	f241 0218 	movw	r2, #4120	; 0x1018
 800076e:	588b      	ldr	r3, [r1, r2]
 8000770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000774:	508b      	str	r3, [r1, r2]
 8000776:	4770      	bx	lr

08000778 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000778:	6801      	ldr	r1, [r0, #0]
 800077a:	f241 0218 	movw	r2, #4120	; 0x1018
 800077e:	588b      	ldr	r3, [r1, r2]
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	508b      	str	r3, [r1, r2]
 8000786:	4770      	bx	lr

08000788 <ETH_MACDMAConfig>:
{
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	b09e      	sub	sp, #120	; 0x78
 800078c:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800078e:	b129      	cbz	r1, 800079c <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000790:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000794:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000796:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800079a:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800079c:	69e3      	ldr	r3, [r4, #28]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d168      	bne.n	8000874 <ETH_MACDMAConfig+0xec>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80007a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a6:	9307      	str	r3, [sp, #28]
  tmpreg = (heth->Instance)->MACCR;
 80007a8:	6821      	ldr	r1, [r4, #0]
 80007aa:	680b      	ldr	r3, [r1, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80007ac:	4a37      	ldr	r2, [pc, #220]	; (800088c <ETH_MACDMAConfig+0x104>)
 80007ae:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 80007b0:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 80007b2:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 80007b4:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 80007b6:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 80007b8:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 80007ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80007be:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80007c0:	600b      	str	r3, [r1, #0]
  tmpreg = (heth->Instance)->MACCR;
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff ff40 	bl	800064c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	2240      	movs	r2, #64	; 0x40
 80007d4:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff ff36 	bl	800064c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	2500      	movs	r5, #0
 80007e8:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007ea:	6823      	ldr	r3, [r4, #0]
 80007ec:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 80007ee:	6822      	ldr	r2, [r4, #0]
 80007f0:	6993      	ldr	r3, [r2, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80007f2:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80007f6:	041b      	lsls	r3, r3, #16
 80007f8:	0c1b      	lsrs	r3, r3, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80007fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80007fe:	6193      	str	r3, [r2, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff ff21 	bl	800064c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800080a:	6823      	ldr	r3, [r4, #0]
 800080c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8000812:	6823      	ldr	r3, [r4, #0]
 8000814:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ff18 	bl	800064c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8000820:	6821      	ldr	r1, [r4, #0]
 8000822:	f241 0518 	movw	r5, #4120	; 0x1018
 8000826:	594b      	ldr	r3, [r1, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000828:	4a19      	ldr	r2, [pc, #100]	; (8000890 <ETH_MACDMAConfig+0x108>)
 800082a:	401a      	ands	r2, r3
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <ETH_MACDMAConfig+0x10c>)
 800082e:	4313      	orrs	r3, r2
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8000830:	514b      	str	r3, [r1, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff ff08 	bl	800064c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <ETH_MACDMAConfig+0x110>)
 8000848:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000850:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff fefa 	bl	800064c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000860:	69a3      	ldr	r3, [r4, #24]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d009      	beq.n	800087a <ETH_MACDMAConfig+0xf2>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000866:	6962      	ldr	r2, [r4, #20]
 8000868:	2100      	movs	r1, #0
 800086a:	4620      	mov	r0, r4
 800086c:	f7ff ff64 	bl	8000738 <ETH_MACAddressConfig>
}
 8000870:	b01e      	add	sp, #120	; 0x78
 8000872:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	9307      	str	r3, [sp, #28]
 8000878:	e796      	b.n	80007a8 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800087a:	6821      	ldr	r1, [r4, #0]
 800087c:	f241 021c 	movw	r2, #4124	; 0x101c
 8000880:	5888      	ldr	r0, [r1, r2]
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <ETH_MACDMAConfig+0x114>)
 8000884:	4303      	orrs	r3, r0
 8000886:	508b      	str	r3, [r1, r2]
 8000888:	e7ed      	b.n	8000866 <ETH_MACDMAConfig+0xde>
 800088a:	bf00      	nop
 800088c:	ff20810f 	.word	0xff20810f
 8000890:	f8de3f23 	.word	0xf8de3f23
 8000894:	02200004 	.word	0x02200004
 8000898:	02c12080 	.word	0x02c12080
 800089c:	00010040 	.word	0x00010040

080008a0 <ETH_MACTransmissionEnable>:
{ 
 80008a0:	b510      	push	{r4, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80008aa:	6802      	ldr	r2, [r0, #0]
 80008ac:	6813      	ldr	r3, [r2, #0]
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80008b4:	6803      	ldr	r3, [r0, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fec6 	bl	800064c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	9a01      	ldr	r2, [sp, #4]
 80008c4:	601a      	str	r2, [r3, #0]
}
 80008c6:	b002      	add	sp, #8
 80008c8:	bd10      	pop	{r4, pc}

080008ca <ETH_MACReceptionEnable>:
{ 
 80008ca:	b510      	push	{r4, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80008d4:	6802      	ldr	r2, [r0, #0]
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80008de:	6803      	ldr	r3, [r0, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff feb1 	bl	800064c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	9a01      	ldr	r2, [sp, #4]
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	b002      	add	sp, #8
 80008f2:	bd10      	pop	{r4, pc}

080008f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80008f4:	b530      	push	{r4, r5, lr}
 80008f6:	b083      	sub	sp, #12
 80008f8:	4605      	mov	r5, r0
  __IO uint32_t tmpreg = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	9301      	str	r3, [sp, #4]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80008fe:	6802      	ldr	r2, [r0, #0]
 8000900:	f241 0418 	movw	r4, #4120	; 0x1018
 8000904:	5913      	ldr	r3, [r2, r4]
 8000906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800090a:	5113      	str	r3, [r2, r4]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800090c:	6803      	ldr	r3, [r0, #0]
 800090e:	591b      	ldr	r3, [r3, r4]
 8000910:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000912:	2001      	movs	r0, #1
 8000914:	f7ff fe9a 	bl	800064c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8000918:	682b      	ldr	r3, [r5, #0]
 800091a:	9a01      	ldr	r2, [sp, #4]
 800091c:	511a      	str	r2, [r3, r4]
}
 800091e:	b003      	add	sp, #12
 8000920:	bd30      	pop	{r4, r5, pc}

08000922 <HAL_ETH_DMATxDescListInit>:
{
 8000922:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8000924:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000928:	2c01      	cmp	r4, #1
 800092a:	d031      	beq.n	8000990 <HAL_ETH_DMATxDescListInit+0x6e>
 800092c:	2401      	movs	r4, #1
 800092e:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000932:	2402      	movs	r4, #2
 8000934:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000938:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 800093a:	2400      	movs	r4, #0
 800093c:	e001      	b.n	8000942 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800093e:	60f9      	str	r1, [r7, #12]
  for(i=0; i < TxBuffCount; i++)
 8000940:	3401      	adds	r4, #1
 8000942:	429c      	cmp	r4, r3
 8000944:	d217      	bcs.n	8000976 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8000946:	0165      	lsls	r5, r4, #5
 8000948:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800094a:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 800094e:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000950:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8000954:	fb06 2604 	mla	r6, r6, r4, r2
 8000958:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800095a:	69c6      	ldr	r6, [r0, #28]
 800095c:	b91e      	cbnz	r6, 8000966 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800095e:	594e      	ldr	r6, [r1, r5]
 8000960:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000964:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1))
 8000966:	1e5d      	subs	r5, r3, #1
 8000968:	42ac      	cmp	r4, r5
 800096a:	d2e8      	bcs.n	800093e <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800096c:	1c65      	adds	r5, r4, #1
 800096e:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8000972:	60fd      	str	r5, [r7, #12]
 8000974:	e7e4      	b.n	8000940 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000976:	6802      	ldr	r2, [r0, #0]
 8000978:	f241 0310 	movw	r3, #4112	; 0x1010
 800097c:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800097e:	2301      	movs	r3, #1
 8000980:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000984:	2300      	movs	r3, #0
 8000986:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800098a:	4618      	mov	r0, r3
}
 800098c:	bcf0      	pop	{r4, r5, r6, r7}
 800098e:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000990:	2002      	movs	r0, #2
 8000992:	e7fb      	b.n	800098c <HAL_ETH_DMATxDescListInit+0x6a>

08000994 <HAL_ETH_DMARxDescListInit>:
{
 8000994:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8000996:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800099a:	2c01      	cmp	r4, #1
 800099c:	d02e      	beq.n	80009fc <HAL_ETH_DMARxDescListInit+0x68>
 800099e:	2401      	movs	r4, #1
 80009a0:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80009a4:	2402      	movs	r4, #2
 80009a6:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80009aa:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80009ac:	2400      	movs	r4, #0
 80009ae:	e001      	b.n	80009b4 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80009b0:	60e9      	str	r1, [r5, #12]
  for(i=0; i < RxBuffCount; i++)
 80009b2:	3401      	adds	r4, #1
 80009b4:	429c      	cmp	r4, r3
 80009b6:	d214      	bcs.n	80009e2 <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 80009b8:	0166      	lsls	r6, r4, #5
 80009ba:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80009bc:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80009c0:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80009c2:	f244 56f4 	movw	r6, #17908	; 0x45f4
 80009c6:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80009c8:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80009cc:	fb06 2604 	mla	r6, r6, r4, r2
 80009d0:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1))
 80009d2:	1e5e      	subs	r6, r3, #1
 80009d4:	42b4      	cmp	r4, r6
 80009d6:	d2eb      	bcs.n	80009b0 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80009d8:	1c66      	adds	r6, r4, #1
 80009da:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 80009de:	60ee      	str	r6, [r5, #12]
 80009e0:	e7e7      	b.n	80009b2 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80009e2:	6802      	ldr	r2, [r0, #0]
 80009e4:	f241 030c 	movw	r3, #4108	; 0x100c
 80009e8:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009f0:	2300      	movs	r3, #0
 80009f2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80009f6:	4618      	mov	r0, r3
}
 80009f8:	bcf0      	pop	{r4, r5, r6, r7}
 80009fa:	4770      	bx	lr
  __HAL_LOCK(heth);
 80009fc:	2002      	movs	r0, #2
 80009fe:	e7fb      	b.n	80009f8 <HAL_ETH_DMARxDescListInit+0x64>

08000a00 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000a00:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	f000 8087 	beq.w	8000b18 <HAL_ETH_TransmitFrame+0x118>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a10:	2302      	movs	r3, #2
 8000a12:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 8000a16:	b199      	cbz	r1, 8000a40 <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000a18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	db17      	blt.n	8000a50 <HAL_ETH_TransmitFrame+0x50>
{
 8000a20:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000a22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a26:	4291      	cmp	r1, r2
 8000a28:	d91a      	bls.n	8000a60 <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000a2a:	4c3c      	ldr	r4, [pc, #240]	; (8000b1c <HAL_ETH_TransmitFrame+0x11c>)
 8000a2c:	fba4 2401 	umull	r2, r4, r4, r1
 8000a30:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000a32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a36:	fb02 1214 	mls	r2, r2, r4, r1
 8000a3a:	b192      	cbz	r2, 8000a62 <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8000a3c:	3401      	adds	r4, #1
 8000a3e:	e010      	b.n	8000a62 <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 8000a40:	2301      	movs	r3, #1
 8000a42:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000a50:	2312      	movs	r3, #18
 8000a52:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a56:	2300      	movs	r3, #0
 8000a58:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	4770      	bx	lr
    bufcount = 1;
 8000a60:	2401      	movs	r4, #1
  if (bufcount == 1)
 8000a62:	2c01      	cmp	r4, #1
 8000a64:	d001      	beq.n	8000a6a <HAL_ETH_TransmitFrame+0x6a>
 8000a66:	2300      	movs	r3, #0
 8000a68:	e037      	b.n	8000ada <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000a70:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a74:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8000a78:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a7a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a7c:	6813      	ldr	r3, [r2, #0]
 8000a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a82:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a8a:	6803      	ldr	r3, [r0, #0]
 8000a8c:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a90:	589a      	ldr	r2, [r3, r2]
 8000a92:	f012 0f04 	tst.w	r2, #4
 8000a96:	d008      	beq.n	8000aaa <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000a98:	2104      	movs	r1, #4
 8000a9a:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a9e:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8000aa0:	6802      	ldr	r2, [r0, #0]
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f241 0304 	movw	r3, #4100	; 0x1004
 8000aa8:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000ab6:	4618      	mov	r0, r3
}
 8000ab8:	bc30      	pop	{r4, r5}
 8000aba:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000abc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000abe:	682a      	ldr	r2, [r5, #0]
 8000ac0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ac4:	602a      	str	r2, [r5, #0]
 8000ac6:	e011      	b.n	8000aec <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000ac8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000aca:	682a      	ldr	r2, [r5, #0]
 8000acc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ad0:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000ad2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000ad4:	68d2      	ldr	r2, [r2, #12]
 8000ad6:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8000ad8:	3301      	adds	r3, #1
 8000ada:	429c      	cmp	r4, r3
 8000adc:	d9d5      	bls.n	8000a8a <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000ade:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000ae0:	682a      	ldr	r2, [r5, #0]
 8000ae2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ae6:	602a      	str	r2, [r5, #0]
      if (i == 0) 
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0e7      	beq.n	8000abc <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000aec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000aee:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8000af2:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1))
 8000af4:	1e62      	subs	r2, r4, #1
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d1e6      	bne.n	8000ac8 <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000afa:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000afc:	682a      	ldr	r2, [r5, #0]
 8000afe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000b02:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_ETH_TransmitFrame+0x120>)
 8000b06:	fb02 1204 	mla	r2, r2, r4, r1
 8000b0a:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000b0e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000b10:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000b14:	606a      	str	r2, [r5, #4]
 8000b16:	e7d7      	b.n	8000ac8 <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	4770      	bx	lr
 8000b1c:	ac02b00b 	.word	0xac02b00b
 8000b20:	fffffa0c 	.word	0xfffffa0c

08000b24 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000b24:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d045      	beq.n	8000bb8 <HAL_ETH_GetReceivedFrame_IT+0x94>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000b32:	2302      	movs	r3, #2
 8000b34:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0;
 8000b38:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000b3a:	e00a      	b.n	8000b52 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000b3c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8000b3e:	2201      	movs	r2, #1
 8000b40:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	6283      	str	r3, [r0, #40]	; 0x28
 8000b46:	e004      	b.n	8000b52 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8000b48:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b4a:	3201      	adds	r2, #1
 8000b4c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000b52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	db26      	blt.n	8000ba8 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8000b5a:	2903      	cmp	r1, #3
 8000b5c:	d824      	bhi.n	8000ba8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8000b5e:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000b66:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000b6a:	d0e7      	beq.n	8000b3c <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000b72:	d0e9      	beq.n	8000b48 <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000b74:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8000b76:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b78:	3201      	adds	r2, #1
 8000b7a:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 8000b7c:	2a01      	cmp	r2, #1
 8000b7e:	d011      	beq.n	8000ba4 <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8000b86:	3a04      	subs	r2, #4
 8000b88:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000b8a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000b8c:	6892      	ldr	r2, [r2, #8]
 8000b8e:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000ba4:	6303      	str	r3, [r0, #48]	; 0x30
 8000ba6:	e7eb      	b.n	8000b80 <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000bb8:	2002      	movs	r0, #2
}
 8000bba:	4770      	bx	lr

08000bbc <HAL_ETH_TxCpltCallback>:
{
 8000bbc:	4770      	bx	lr

08000bbe <HAL_ETH_ErrorCallback>:
{
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_ETH_IRQHandler>:
{
 8000bc0:	b510      	push	{r4, lr}
 8000bc2:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000bc4:	6803      	ldr	r3, [r0, #0]
 8000bc6:	f241 0214 	movw	r2, #4116	; 0x1014
 8000bca:	589a      	ldr	r2, [r3, r2]
 8000bcc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000bd0:	d111      	bne.n	8000bf6 <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000bd2:	f241 0214 	movw	r2, #4116	; 0x1014
 8000bd6:	589b      	ldr	r3, [r3, r2]
 8000bd8:	f013 0f01 	tst.w	r3, #1
 8000bdc:	d119      	bne.n	8000c12 <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000bde:	6822      	ldr	r2, [r4, #0]
 8000be0:	f241 0314 	movw	r3, #4116	; 0x1014
 8000be4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000be8:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	58d3      	ldr	r3, [r2, r3]
 8000bee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000bf2:	d11b      	bne.n	8000c2c <HAL_ETH_IRQHandler+0x6c>
 8000bf4:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8000bf6:	f00d faeb 	bl	800e1d0 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000bfa:	6822      	ldr	r2, [r4, #0]
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	f241 0314 	movw	r3, #4116	; 0x1014
 8000c02:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c10:	e7e5      	b.n	8000bde <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8000c12:	f7ff ffd3 	bl	8000bbc <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000c16:	6821      	ldr	r1, [r4, #0]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f241 0214 	movw	r2, #4116	; 0x1014
 8000c1e:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8000c20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000c24:	2300      	movs	r3, #0
 8000c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c2a:	e7d8      	b.n	8000bde <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f7ff ffc6 	bl	8000bbe <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000c32:	6822      	ldr	r2, [r4, #0]
 8000c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c38:	f241 0314 	movw	r3, #4116	; 0x1014
 8000c3c:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000c44:	2300      	movs	r3, #0
 8000c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c4a:	e7d3      	b.n	8000bf4 <HAL_ETH_IRQHandler+0x34>

08000c4c <HAL_ETH_ReadPHYRegister>:
{
 8000c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000c4e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b82      	cmp	r3, #130	; 0x82
 8000c56:	d101      	bne.n	8000c5c <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000c58:	2002      	movs	r0, #2
}
 8000c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c5c:	4616      	mov	r6, r2
 8000c5e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000c60:	2382      	movs	r3, #130	; 0x82
 8000c62:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000c66:	6802      	ldr	r2, [r0, #0]
 8000c68:	6914      	ldr	r4, [r2, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000c6a:	f004 041c 	and.w	r4, r4, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000c6e:	8a03      	ldrh	r3, [r0, #16]
 8000c70:	02db      	lsls	r3, r3, #11
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	431c      	orrs	r4, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000c76:	0189      	lsls	r1, r1, #6
 8000c78:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000c7c:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000c7e:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000c82:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000c84:	f7ff fcdc 	bl	8000640 <HAL_GetTick>
 8000c88:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c8a:	f014 0f01 	tst.w	r4, #1
 8000c8e:	d010      	beq.n	8000cb2 <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000c90:	f7ff fcd6 	bl	8000640 <HAL_GetTick>
 8000c94:	1bc0      	subs	r0, r0, r7
 8000c96:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c9a:	d202      	bcs.n	8000ca2 <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg = heth->Instance->MACMIIAR;
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	691c      	ldr	r4, [r3, #16]
 8000ca0:	e7f3      	b.n	8000c8a <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000cae:	2003      	movs	r0, #3
 8000cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000cb2:	682b      	ldr	r3, [r5, #0]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000cc4 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000cc4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b42      	cmp	r3, #66	; 0x42
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8000cce:	2002      	movs	r0, #2
 8000cd0:	4770      	bx	lr
{
 8000cd2:	b570      	push	{r4, r5, r6, lr}
 8000cd4:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000cd6:	2342      	movs	r3, #66	; 0x42
 8000cd8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000cdc:	6800      	ldr	r0, [r0, #0]
 8000cde:	6904      	ldr	r4, [r0, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000ce0:	f004 041c 	and.w	r4, r4, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000ce4:	8a2b      	ldrh	r3, [r5, #16]
 8000ce6:	02db      	lsls	r3, r3, #11
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	431c      	orrs	r4, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000cec:	0189      	lsls	r1, r1, #6
 8000cee:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000cf2:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000cf4:	f044 0403 	orr.w	r4, r4, #3
 8000cf8:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000cfa:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg;
 8000cfc:	682b      	ldr	r3, [r5, #0]
 8000cfe:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000d00:	f7ff fc9e 	bl	8000640 <HAL_GetTick>
 8000d04:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d06:	f014 0f01 	tst.w	r4, #1
 8000d0a:	d010      	beq.n	8000d2e <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000d0c:	f7ff fc98 	bl	8000640 <HAL_GetTick>
 8000d10:	1b80      	subs	r0, r0, r6
 8000d12:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000d16:	d202      	bcs.n	8000d1e <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg = heth->Instance->MACMIIAR;
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	691c      	ldr	r4, [r3, #16]
 8000d1c:	e7f3      	b.n	8000d06 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000d24:	2300      	movs	r3, #0
 8000d26:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000d34:	2000      	movs	r0, #0
 8000d36:	bd70      	pop	{r4, r5, r6, pc}

08000d38 <HAL_ETH_Init>:
{
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	b082      	sub	sp, #8
  uint32_t tempreg = 0, phyreg = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000d40:	2800      	cmp	r0, #0
 8000d42:	f000 810c 	beq.w	8000f5e <HAL_ETH_Init+0x226>
 8000d46:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000d48:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d032      	beq.n	8000db6 <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d50:	4b84      	ldr	r3, [pc, #528]	; (8000f64 <HAL_ETH_Init+0x22c>)
 8000d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d58:	645a      	str	r2, [r3, #68]	; 0x44
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000d64:	4b80      	ldr	r3, [pc, #512]	; (8000f68 <HAL_ETH_Init+0x230>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000d6c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	6a21      	ldr	r1, [r4, #32]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000d84:	f7ff fc5c 	bl	8000640 <HAL_GetTick>
 8000d88:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000d90:	6812      	ldr	r2, [r2, #0]
 8000d92:	f012 0f01 	tst.w	r2, #1
 8000d96:	d013      	beq.n	8000dc0 <HAL_ETH_Init+0x88>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000d98:	f7ff fc52 	bl	8000640 <HAL_GetTick>
 8000d9c:	1b40      	subs	r0, r0, r5
 8000d9e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000da2:	d9f2      	bls.n	8000d8a <HAL_ETH_Init+0x52>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000da4:	2503      	movs	r5, #3
 8000da6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000daa:	2300      	movs	r3, #0
 8000dac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000db0:	4628      	mov	r0, r5
 8000db2:	b002      	add	sp, #8
 8000db4:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8000db6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000dba:	f00d f9a3 	bl	800e104 <HAL_ETH_MspInit>
 8000dbe:	e7c7      	b.n	8000d50 <HAL_ETH_Init+0x18>
  tempreg = (heth->Instance)->MACMIIAR;
 8000dc0:	691d      	ldr	r5, [r3, #16]
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000dc2:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8000dc6:	f000 fd5d 	bl	8001884 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000dca:	4b68      	ldr	r3, [pc, #416]	; (8000f6c <HAL_ETH_Init+0x234>)
 8000dcc:	4403      	add	r3, r0
 8000dce:	4a68      	ldr	r2, [pc, #416]	; (8000f70 <HAL_ETH_Init+0x238>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d855      	bhi.n	8000e80 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000dd4:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000ddc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de0:	2100      	movs	r1, #0
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff ff6e 	bl	8000cc4 <HAL_ETH_WritePHYRegister>
 8000de8:	4605      	mov	r5, r0
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d160      	bne.n	8000eb0 <HAL_ETH_Init+0x178>
  HAL_Delay(PHY_RESET_DELAY);
 8000dee:	20ff      	movs	r0, #255	; 0xff
 8000df0:	f7ff fc2c 	bl	800064c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000df4:	6863      	ldr	r3, [r4, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8091 	beq.w	8000f1e <HAL_ETH_Init+0x1e6>
    tickstart = HAL_GetTick();
 8000dfc:	f7ff fc20 	bl	8000640 <HAL_GetTick>
 8000e00:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e02:	aa01      	add	r2, sp, #4
 8000e04:	2101      	movs	r1, #1
 8000e06:	4620      	mov	r0, r4
 8000e08:	f7ff ff20 	bl	8000c4c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000e0c:	f7ff fc18 	bl	8000640 <HAL_GetTick>
 8000e10:	1b80      	subs	r0, r0, r6
 8000e12:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e16:	4298      	cmp	r0, r3
 8000e18:	d852      	bhi.n	8000ec0 <HAL_ETH_Init+0x188>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000e1a:	9b01      	ldr	r3, [sp, #4]
 8000e1c:	f013 0f04 	tst.w	r3, #4
 8000e20:	d0ef      	beq.n	8000e02 <HAL_ETH_Init+0xca>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e26:	2100      	movs	r1, #0
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f7ff ff4b 	bl	8000cc4 <HAL_ETH_WritePHYRegister>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d152      	bne.n	8000ed8 <HAL_ETH_Init+0x1a0>
    tickstart = HAL_GetTick();
 8000e32:	f7ff fc05 	bl	8000640 <HAL_GetTick>
 8000e36:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e38:	aa01      	add	r2, sp, #4
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff ff05 	bl	8000c4c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000e42:	f7ff fbfd 	bl	8000640 <HAL_GetTick>
 8000e46:	1b80      	subs	r0, r0, r6
 8000e48:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	d84b      	bhi.n	8000ee8 <HAL_ETH_Init+0x1b0>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000e50:	9b01      	ldr	r3, [sp, #4]
 8000e52:	f013 0f20 	tst.w	r3, #32
 8000e56:	d0ef      	beq.n	8000e38 <HAL_ETH_Init+0x100>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000e58:	aa01      	add	r2, sp, #4
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f7ff fef5 	bl	8000c4c <HAL_ETH_ReadPHYRegister>
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d14c      	bne.n	8000f00 <HAL_ETH_Init+0x1c8>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000e66:	9b01      	ldr	r3, [sp, #4]
 8000e68:	f013 0f04 	tst.w	r3, #4
 8000e6c:	d050      	beq.n	8000f10 <HAL_ETH_Init+0x1d8>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e72:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000e74:	f013 0f02 	tst.w	r3, #2
 8000e78:	d04d      	beq.n	8000f16 <HAL_ETH_Init+0x1de>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60a3      	str	r3, [r4, #8]
 8000e7e:	e05e      	b.n	8000f3e <HAL_ETH_Init+0x206>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000e80:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <HAL_ETH_Init+0x23c>)
 8000e82:	4403      	add	r3, r0
 8000e84:	4a3c      	ldr	r2, [pc, #240]	; (8000f78 <HAL_ETH_Init+0x240>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d802      	bhi.n	8000e90 <HAL_ETH_Init+0x158>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000e8a:	f045 050c 	orr.w	r5, r5, #12
 8000e8e:	e7a3      	b.n	8000dd8 <HAL_ETH_Init+0xa0>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000e90:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <HAL_ETH_Init+0x244>)
 8000e92:	4403      	add	r3, r0
 8000e94:	4a3a      	ldr	r2, [pc, #232]	; (8000f80 <HAL_ETH_Init+0x248>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d99e      	bls.n	8000dd8 <HAL_ETH_Init+0xa0>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000e9a:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <HAL_ETH_Init+0x24c>)
 8000e9c:	4403      	add	r3, r0
 8000e9e:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <HAL_ETH_Init+0x250>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d802      	bhi.n	8000eaa <HAL_ETH_Init+0x172>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000ea4:	f045 0504 	orr.w	r5, r5, #4
 8000ea8:	e796      	b.n	8000dd8 <HAL_ETH_Init+0xa0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000eaa:	f045 0510 	orr.w	r5, r5, #16
 8000eae:	e793      	b.n	8000dd8 <HAL_ETH_Init+0xa0>
    ETH_MACDMAConfig(heth, err);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff fc68 	bl	8000788 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8000eb8:	2501      	movs	r5, #1
 8000eba:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000ebe:	e777      	b.n	8000db0 <HAL_ETH_Init+0x78>
        ETH_MACDMAConfig(heth, err);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff fc60 	bl	8000788 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000ed4:	2503      	movs	r5, #3
 8000ed6:	e76b      	b.n	8000db0 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4620      	mov	r0, r4
 8000edc:	f7ff fc54 	bl	8000788 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000ee0:	2501      	movs	r5, #1
 8000ee2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000ee6:	e763      	b.n	8000db0 <HAL_ETH_Init+0x78>
        ETH_MACDMAConfig(heth, err);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff fc4c 	bl	8000788 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000efc:	2503      	movs	r5, #3
 8000efe:	e757      	b.n	8000db0 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 8000f00:	2101      	movs	r1, #1
 8000f02:	4620      	mov	r0, r4
 8000f04:	f7ff fc40 	bl	8000788 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000f08:	2501      	movs	r5, #1
 8000f0a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000f0e:	e74f      	b.n	8000db0 <HAL_ETH_Init+0x78>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000f10:	2200      	movs	r2, #0
 8000f12:	60e2      	str	r2, [r4, #12]
 8000f14:	e7ae      	b.n	8000e74 <HAL_ETH_Init+0x13c>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f1a:	60a3      	str	r3, [r4, #8]
 8000f1c:	e00f      	b.n	8000f3e <HAL_ETH_Init+0x206>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000f1e:	68e3      	ldr	r3, [r4, #12]
 8000f20:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000f24:	68a3      	ldr	r3, [r4, #8]
 8000f26:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f7ff fec8 	bl	8000cc4 <HAL_ETH_WritePHYRegister>
 8000f34:	b958      	cbnz	r0, 8000f4e <HAL_ETH_Init+0x216>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000f36:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f3a:	f7ff fb87 	bl	800064c <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4620      	mov	r0, r4
 8000f42:	f7ff fc21 	bl	8000788 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000f4c:	e730      	b.n	8000db0 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4620      	mov	r0, r4
 8000f52:	f7ff fc19 	bl	8000788 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000f56:	2501      	movs	r5, #1
 8000f58:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000f5c:	e728      	b.n	8000db0 <HAL_ETH_Init+0x78>
    return HAL_ERROR;
 8000f5e:	2501      	movs	r5, #1
 8000f60:	e726      	b.n	8000db0 <HAL_ETH_Init+0x78>
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	feced300 	.word	0xfeced300
 8000f70:	00e4e1bf 	.word	0x00e4e1bf
 8000f74:	fde9f140 	.word	0xfde9f140
 8000f78:	017d783f 	.word	0x017d783f
 8000f7c:	fc6c7900 	.word	0xfc6c7900
 8000f80:	026259ff 	.word	0x026259ff
 8000f84:	fa0a1f00 	.word	0xfa0a1f00
 8000f88:	02faf07f 	.word	0x02faf07f

08000f8c <HAL_ETH_Start>:
{  
 8000f8c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8000f8e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <HAL_ETH_Start+0xe>
 8000f96:	2002      	movs	r0, #2
}
 8000f98:	bd38      	pop	{r3, r4, r5, pc}
 8000f9a:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8000f9c:	2501      	movs	r5, #1
 8000f9e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8000fa8:	f7ff fc7a 	bl	80008a0 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff fc8c 	bl	80008ca <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f7ff fc9e 	bl	80008f4 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f7ff fbd5 	bl	8000768 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f7ff fbda 	bl	8000778 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8000fc4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8000fce:	bd38      	pop	{r3, r4, r5, pc}

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fd4:	2400      	movs	r4, #0
 8000fd6:	e037      	b.n	8001048 <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fd8:	2609      	movs	r6, #9
 8000fda:	e000      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8000fdc:	2600      	movs	r6, #0
 8000fde:	fa06 f60e 	lsl.w	r6, r6, lr
 8000fe2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	4e6c      	ldr	r6, [pc, #432]	; (8001198 <HAL_GPIO_Init+0x1c8>)
 8000fe8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fec:	4b6b      	ldr	r3, [pc, #428]	; (800119c <HAL_GPIO_Init+0x1cc>)
 8000fee:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	43eb      	mvns	r3, r5
 8000ff2:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff6:	684f      	ldr	r7, [r1, #4]
 8000ff8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000ffc:	d001      	beq.n	8001002 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8000ffe:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8001002:	4a66      	ldr	r2, [pc, #408]	; (800119c <HAL_GPIO_Init+0x1cc>)
 8001004:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001006:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001008:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100c:	684f      	ldr	r7, [r1, #4]
 800100e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001012:	d001      	beq.n	8001018 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8001014:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8001018:	4a60      	ldr	r2, [pc, #384]	; (800119c <HAL_GPIO_Init+0x1cc>)
 800101a:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101c:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800101e:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001022:	684f      	ldr	r7, [r1, #4]
 8001024:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001028:	d001      	beq.n	800102e <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 800102a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 800102e:	4a5b      	ldr	r2, [pc, #364]	; (800119c <HAL_GPIO_Init+0x1cc>)
 8001030:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001032:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001034:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001036:	684e      	ldr	r6, [r1, #4]
 8001038:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800103c:	d001      	beq.n	8001042 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 800103e:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001042:	4a56      	ldr	r2, [pc, #344]	; (800119c <HAL_GPIO_Init+0x1cc>)
 8001044:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001046:	3401      	adds	r4, #1
 8001048:	2c0f      	cmp	r4, #15
 800104a:	f200 80a3 	bhi.w	8001194 <HAL_GPIO_Init+0x1c4>
    ioposition = ((uint32_t)0x01) << position;
 800104e:	2301      	movs	r3, #1
 8001050:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	680a      	ldr	r2, [r1, #0]
 8001054:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8001058:	42ab      	cmp	r3, r5
 800105a:	d1f4      	bne.n	8001046 <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105c:	684a      	ldr	r2, [r1, #4]
 800105e:	2a12      	cmp	r2, #18
 8001060:	bf18      	it	ne
 8001062:	2a02      	cmpne	r2, #2
 8001064:	d112      	bne.n	800108c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8001066:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800106a:	f10e 0e08 	add.w	lr, lr, #8
 800106e:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001072:	f004 0607 	and.w	r6, r4, #7
 8001076:	00b6      	lsls	r6, r6, #2
 8001078:	270f      	movs	r7, #15
 800107a:	40b7      	lsls	r7, r6
 800107c:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001080:	690f      	ldr	r7, [r1, #16]
 8001082:	fa07 f606 	lsl.w	r6, r7, r6
 8001086:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 8001088:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 800108c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800108e:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f20e 	lsl.w	r2, r2, lr
 8001098:	43d2      	mvns	r2, r2
 800109a:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800109c:	684f      	ldr	r7, [r1, #4]
 800109e:	f007 0703 	and.w	r7, r7, #3
 80010a2:	fa07 f70e 	lsl.w	r7, r7, lr
 80010a6:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80010a8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010aa:	684e      	ldr	r6, [r1, #4]
 80010ac:	1e77      	subs	r7, r6, #1
 80010ae:	2e11      	cmp	r6, #17
 80010b0:	bf18      	it	ne
 80010b2:	2f01      	cmpne	r7, #1
 80010b4:	d901      	bls.n	80010ba <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b6:	2e12      	cmp	r6, #18
 80010b8:	d10f      	bne.n	80010da <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 80010ba:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010bc:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 80010be:	68cf      	ldr	r7, [r1, #12]
 80010c0:	fa07 f70e 	lsl.w	r7, r7, lr
 80010c4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80010c6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80010c8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ca:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010ce:	684e      	ldr	r6, [r1, #4]
 80010d0:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80010d4:	40a6      	lsls	r6, r4
 80010d6:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80010d8:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80010da:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010dc:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010de:	688b      	ldr	r3, [r1, #8]
 80010e0:	fa03 f30e 	lsl.w	r3, r3, lr
 80010e4:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80010e6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e8:	684b      	ldr	r3, [r1, #4]
 80010ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010ee:	d0aa      	beq.n	8001046 <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_GPIO_Init+0x1d0>)
 80010f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
 80010fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001104:	08a3      	lsrs	r3, r4, #2
 8001106:	1c9e      	adds	r6, r3, #2
 8001108:	4a23      	ldr	r2, [pc, #140]	; (8001198 <HAL_GPIO_Init+0x1c8>)
 800110a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800110e:	f004 0603 	and.w	r6, r4, #3
 8001112:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001116:	260f      	movs	r6, #15
 8001118:	fa06 f60e 	lsl.w	r6, r6, lr
 800111c:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001120:	4f20      	ldr	r7, [pc, #128]	; (80011a4 <HAL_GPIO_Init+0x1d4>)
 8001122:	42b8      	cmp	r0, r7
 8001124:	f43f af5a 	beq.w	8000fdc <HAL_GPIO_Init+0xc>
 8001128:	4e1f      	ldr	r6, [pc, #124]	; (80011a8 <HAL_GPIO_Init+0x1d8>)
 800112a:	42b0      	cmp	r0, r6
 800112c:	d022      	beq.n	8001174 <HAL_GPIO_Init+0x1a4>
 800112e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001132:	42b0      	cmp	r0, r6
 8001134:	d020      	beq.n	8001178 <HAL_GPIO_Init+0x1a8>
 8001136:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800113a:	42b0      	cmp	r0, r6
 800113c:	d01e      	beq.n	800117c <HAL_GPIO_Init+0x1ac>
 800113e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001142:	42b0      	cmp	r0, r6
 8001144:	d01c      	beq.n	8001180 <HAL_GPIO_Init+0x1b0>
 8001146:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800114a:	42b0      	cmp	r0, r6
 800114c:	d01a      	beq.n	8001184 <HAL_GPIO_Init+0x1b4>
 800114e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001152:	42b0      	cmp	r0, r6
 8001154:	d018      	beq.n	8001188 <HAL_GPIO_Init+0x1b8>
 8001156:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800115a:	42b0      	cmp	r0, r6
 800115c:	d016      	beq.n	800118c <HAL_GPIO_Init+0x1bc>
 800115e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001162:	42b0      	cmp	r0, r6
 8001164:	d014      	beq.n	8001190 <HAL_GPIO_Init+0x1c0>
 8001166:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800116a:	42b0      	cmp	r0, r6
 800116c:	f43f af34 	beq.w	8000fd8 <HAL_GPIO_Init+0x8>
 8001170:	260a      	movs	r6, #10
 8001172:	e734      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001174:	2601      	movs	r6, #1
 8001176:	e732      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001178:	2602      	movs	r6, #2
 800117a:	e730      	b.n	8000fde <HAL_GPIO_Init+0xe>
 800117c:	2603      	movs	r6, #3
 800117e:	e72e      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001180:	2604      	movs	r6, #4
 8001182:	e72c      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001184:	2605      	movs	r6, #5
 8001186:	e72a      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001188:	2606      	movs	r6, #6
 800118a:	e728      	b.n	8000fde <HAL_GPIO_Init+0xe>
 800118c:	2607      	movs	r6, #7
 800118e:	e726      	b.n	8000fde <HAL_GPIO_Init+0xe>
 8001190:	2608      	movs	r6, #8
 8001192:	e724      	b.n	8000fde <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 8001194:	b003      	add	sp, #12
 8001196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001198:	40013800 	.word	0x40013800
 800119c:	40013c00 	.word	0x40013c00
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400

080011ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011ac:	6903      	ldr	r3, [r0, #16]
 80011ae:	4219      	tst	r1, r3
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011b2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80011b4:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80011b6:	2001      	movs	r0, #1
 80011b8:	4770      	bx	lr

080011ba <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ba:	b912      	cbnz	r2, 80011c2 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011bc:	0409      	lsls	r1, r1, #16
 80011be:	6181      	str	r1, [r0, #24]
 80011c0:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	6181      	str	r1, [r0, #24]
 80011c4:	4770      	bx	lr

080011c6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80011c6:	6943      	ldr	r3, [r0, #20]
 80011c8:	4059      	eors	r1, r3
 80011ca:	6141      	str	r1, [r0, #20]
 80011cc:	4770      	bx	lr

080011ce <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80011d0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	4203      	tst	r3, r0
 80011d8:	d100      	bne.n	80011dc <HAL_GPIO_EXTI_IRQHandler+0xc>
 80011da:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80011de:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011e0:	f7ff fff5 	bl	80011ce <HAL_GPIO_EXTI_Callback>
}
 80011e4:	e7f9      	b.n	80011da <HAL_GPIO_EXTI_IRQHandler+0xa>
 80011e6:	bf00      	nop
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ec:	4a02      	ldr	r2, [pc, #8]	; (80011f8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80011ee:	6813      	ldr	r3, [r2, #0]
 80011f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4770      	bx	lr
 80011f8:	40007000 	.word	0x40007000

080011fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011fc:	b510      	push	{r4, lr}
 80011fe:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_PWREx_EnableOverDrive+0x74>)
 8001202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001204:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_PWREx_EnableOverDrive+0x78>)
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800121e:	f7ff fa0f 	bl	8000640 <HAL_GetTick>
 8001222:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_PWREx_EnableOverDrive+0x78>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800122c:	d108      	bne.n	8001240 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800122e:	f7ff fa07 	bl	8000640 <HAL_GetTick>
 8001232:	1b00      	subs	r0, r0, r4
 8001234:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001238:	d9f4      	bls.n	8001224 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800123a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800123c:	b002      	add	sp, #8
 800123e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001240:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <HAL_PWREx_EnableOverDrive+0x78>)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800124a:	f7ff f9f9 	bl	8000640 <HAL_GetTick>
 800124e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_PWREx_EnableOverDrive+0x78>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001258:	d107      	bne.n	800126a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800125a:	f7ff f9f1 	bl	8000640 <HAL_GetTick>
 800125e:	1b00      	subs	r0, r0, r4
 8001260:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001264:	d9f4      	bls.n	8001250 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001266:	2003      	movs	r0, #3
 8001268:	e7e8      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800126a:	2000      	movs	r0, #0
 800126c:	e7e6      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x40>
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001278:	2800      	cmp	r0, #0
 800127a:	f000 81dc 	beq.w	8001636 <HAL_RCC_OscConfig+0x3be>
{
 800127e:	b570      	push	{r4, r5, r6, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001284:	6803      	ldr	r3, [r0, #0]
 8001286:	f013 0f01 	tst.w	r3, #1
 800128a:	d03a      	beq.n	8001302 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800128c:	4ba2      	ldr	r3, [pc, #648]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b04      	cmp	r3, #4
 8001296:	d02b      	beq.n	80012f0 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001298:	4b9f      	ldr	r3, [pc, #636]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_OscConfig+0x6e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	6863      	ldr	r3, [r4, #4]
 80012a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012aa:	d050      	beq.n	800134e <HAL_RCC_OscConfig+0xd6>
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d154      	bne.n	800135a <HAL_RCC_OscConfig+0xe2>
 80012b0:	4b99      	ldr	r3, [pc, #612]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c2:	6863      	ldr	r3, [r4, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d05f      	beq.n	8001388 <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff f9ba 	bl	8000640 <HAL_GetTick>
 80012cc:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b92      	ldr	r3, [pc, #584]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012d6:	d114      	bne.n	8001302 <HAL_RCC_OscConfig+0x8a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff f9b2 	bl	8000640 <HAL_GetTick>
 80012dc:	1b40      	subs	r0, r0, r5
 80012de:	2864      	cmp	r0, #100	; 0x64
 80012e0:	d9f5      	bls.n	80012ce <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 80012e2:	2003      	movs	r0, #3
 80012e4:	e1ac      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4b8c      	ldr	r3, [pc, #560]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012ee:	d0d9      	beq.n	80012a4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	4b89      	ldr	r3, [pc, #548]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012f8:	d003      	beq.n	8001302 <HAL_RCC_OscConfig+0x8a>
 80012fa:	6863      	ldr	r3, [r4, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 819c 	beq.w	800163a <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	f013 0f02 	tst.w	r3, #2
 8001308:	d064      	beq.n	80013d4 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800130a:	4b83      	ldr	r3, [pc, #524]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f013 0f0c 	tst.w	r3, #12
 8001312:	d04d      	beq.n	80013b0 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001314:	4b80      	ldr	r3, [pc, #512]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b08      	cmp	r3, #8
 800131e:	d042      	beq.n	80013a6 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001320:	68e3      	ldr	r3, [r4, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d079      	beq.n	800141a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001326:	4a7c      	ldr	r2, [pc, #496]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001328:	6813      	ldr	r3, [r2, #0]
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff f986 	bl	8000640 <HAL_GetTick>
 8001334:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	4b78      	ldr	r3, [pc, #480]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f013 0f02 	tst.w	r3, #2
 800133e:	d163      	bne.n	8001408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff f97e 	bl	8000640 <HAL_GetTick>
 8001344:	1b40      	subs	r0, r0, r5
 8001346:	2802      	cmp	r0, #2
 8001348:	d9f5      	bls.n	8001336 <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 800134a:	2003      	movs	r0, #3
 800134c:	e178      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134e:	4a72      	ldr	r2, [pc, #456]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	e7b3      	b.n	80012c2 <HAL_RCC_OscConfig+0x4a>
 800135a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800135e:	d009      	beq.n	8001374 <HAL_RCC_OscConfig+0xfc>
 8001360:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e7a6      	b.n	80012c2 <HAL_RCC_OscConfig+0x4a>
 8001374:	4b68      	ldr	r3, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e79c      	b.n	80012c2 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8001388:	f7ff f95a 	bl	8000640 <HAL_GetTick>
 800138c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001396:	d0b4      	beq.n	8001302 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff f952 	bl	8000640 <HAL_GetTick>
 800139c:	1b40      	subs	r0, r0, r5
 800139e:	2864      	cmp	r0, #100	; 0x64
 80013a0:	d9f5      	bls.n	800138e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80013a2:	2003      	movs	r0, #3
 80013a4:	e14c      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80013ae:	d1b7      	bne.n	8001320 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b0:	4b59      	ldr	r3, [pc, #356]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f013 0f02 	tst.w	r3, #2
 80013b8:	d004      	beq.n	80013c4 <HAL_RCC_OscConfig+0x14c>
 80013ba:	68e3      	ldr	r3, [r4, #12]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80013c0:	2001      	movs	r0, #1
 80013c2:	e13d      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4a54      	ldr	r2, [pc, #336]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013cc:	6921      	ldr	r1, [r4, #16]
 80013ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013d2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	f013 0f08 	tst.w	r3, #8
 80013da:	d046      	beq.n	800146a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013dc:	6963      	ldr	r3, [r4, #20]
 80013de:	b383      	cbz	r3, 8001442 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e0:	4a4d      	ldr	r2, [pc, #308]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80013e2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ea:	f7ff f929 	bl	8000640 <HAL_GetTick>
 80013ee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f0:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80013f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f4:	f013 0f02 	tst.w	r3, #2
 80013f8:	d137      	bne.n	800146a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fa:	f7ff f921 	bl	8000640 <HAL_GetTick>
 80013fe:	1b40      	subs	r0, r0, r5
 8001400:	2802      	cmp	r0, #2
 8001402:	d9f5      	bls.n	80013f0 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8001404:	2003      	movs	r0, #3
 8001406:	e11b      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4a43      	ldr	r2, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001410:	6921      	ldr	r1, [r4, #16]
 8001412:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e7dc      	b.n	80013d4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800141a:	4a3f      	ldr	r2, [pc, #252]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800141c:	6813      	ldr	r3, [r2, #0]
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001424:	f7ff f90c 	bl	8000640 <HAL_GetTick>
 8001428:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f013 0f02 	tst.w	r3, #2
 8001432:	d0cf      	beq.n	80013d4 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff f904 	bl	8000640 <HAL_GetTick>
 8001438:	1b40      	subs	r0, r0, r5
 800143a:	2802      	cmp	r0, #2
 800143c:	d9f5      	bls.n	800142a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800143e:	2003      	movs	r0, #3
 8001440:	e0fe      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4a35      	ldr	r2, [pc, #212]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001444:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff f8f8 	bl	8000640 <HAL_GetTick>
 8001450:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001456:	f013 0f02 	tst.w	r3, #2
 800145a:	d006      	beq.n	800146a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff f8f0 	bl	8000640 <HAL_GetTick>
 8001460:	1b40      	subs	r0, r0, r5
 8001462:	2802      	cmp	r0, #2
 8001464:	d9f5      	bls.n	8001452 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8001466:	2003      	movs	r0, #3
 8001468:	e0ea      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	f013 0f04 	tst.w	r3, #4
 8001470:	d07e      	beq.n	8001570 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800147a:	d131      	bne.n	80014e0 <HAL_RCC_OscConfig+0x268>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800147e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001480:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001490:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_RCC_OscConfig+0x2a4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f413 7f80 	tst.w	r3, #256	; 0x100
 800149a:	d023      	beq.n	80014e4 <HAL_RCC_OscConfig+0x26c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149c:	68a3      	ldr	r3, [r4, #8]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d034      	beq.n	800150c <HAL_RCC_OscConfig+0x294>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d13c      	bne.n	8001520 <HAL_RCC_OscConfig+0x2a8>
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80014a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	671a      	str	r2, [r3, #112]	; 0x70
 80014b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014b2:	f022 0204 	bic.w	r2, r2, #4
 80014b6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b8:	68a3      	ldr	r3, [r4, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d046      	beq.n	800154c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014be:	f7ff f8bf 	bl	8000640 <HAL_GetTick>
 80014c2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	f013 0f02 	tst.w	r3, #2
 80014cc:	d14f      	bne.n	800156e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff f8b7 	bl	8000640 <HAL_GetTick>
 80014d2:	1b80      	subs	r0, r0, r6
 80014d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80014d8:	4298      	cmp	r0, r3
 80014da:	d9f3      	bls.n	80014c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014dc:	2003      	movs	r0, #3
 80014de:	e0af      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
  FlagStatus pwrclkchanged = RESET;
 80014e0:	2500      	movs	r5, #0
 80014e2:	e7d6      	b.n	8001492 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <HAL_RCC_OscConfig+0x2a4>)
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80014ee:	f7ff f8a7 	bl	8000640 <HAL_GetTick>
 80014f2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_OscConfig+0x2a4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014fc:	d1ce      	bne.n	800149c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014fe:	f7ff f89f 	bl	8000640 <HAL_GetTick>
 8001502:	1b80      	subs	r0, r0, r6
 8001504:	2864      	cmp	r0, #100	; 0x64
 8001506:	d9f5      	bls.n	80014f4 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8001508:	2003      	movs	r0, #3
 800150a:	e099      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	4a02      	ldr	r2, [pc, #8]	; (8001518 <HAL_RCC_OscConfig+0x2a0>)
 800150e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6713      	str	r3, [r2, #112]	; 0x70
 8001516:	e7cf      	b.n	80014b8 <HAL_RCC_OscConfig+0x240>
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000
 8001520:	2b05      	cmp	r3, #5
 8001522:	d009      	beq.n	8001538 <HAL_RCC_OscConfig+0x2c0>
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	671a      	str	r2, [r3, #112]	; 0x70
 800152e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001530:	f022 0204 	bic.w	r2, r2, #4
 8001534:	671a      	str	r2, [r3, #112]	; 0x70
 8001536:	e7bf      	b.n	80014b8 <HAL_RCC_OscConfig+0x240>
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 800153a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800153c:	f042 0204 	orr.w	r2, r2, #4
 8001540:	671a      	str	r2, [r3, #112]	; 0x70
 8001542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	671a      	str	r2, [r3, #112]	; 0x70
 800154a:	e7b5      	b.n	80014b8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff f878 	bl	8000640 <HAL_GetTick>
 8001550:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	f013 0f02 	tst.w	r3, #2
 800155a:	d008      	beq.n	800156e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff f870 	bl	8000640 <HAL_GetTick>
 8001560:	1b80      	subs	r0, r0, r6
 8001562:	f241 3388 	movw	r3, #5000	; 0x1388
 8001566:	4298      	cmp	r0, r3
 8001568:	d9f3      	bls.n	8001552 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800156a:	2003      	movs	r0, #3
 800156c:	e068      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156e:	b9f5      	cbnz	r5, 80015ae <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001570:	69a3      	ldr	r3, [r4, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001576:	4a34      	ldr	r2, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001578:	6892      	ldr	r2, [r2, #8]
 800157a:	f002 020c 	and.w	r2, r2, #12
 800157e:	2a08      	cmp	r2, #8
 8001580:	d060      	beq.n	8001644 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001582:	2b02      	cmp	r3, #2
 8001584:	d019      	beq.n	80015ba <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4a30      	ldr	r2, [pc, #192]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800158e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff f856 	bl	8000640 <HAL_GetTick>
 8001594:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800159e:	d048      	beq.n	8001632 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff f84e 	bl	8000640 <HAL_GetTick>
 80015a4:	1b00      	subs	r0, r0, r4
 80015a6:	2802      	cmp	r0, #2
 80015a8:	d9f5      	bls.n	8001596 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80015aa:	2003      	movs	r0, #3
 80015ac:	e048      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ae:	4a26      	ldr	r2, [pc, #152]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 80015b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	e7da      	b.n	8001570 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 80015bc:	6813      	ldr	r3, [r2, #0]
 80015be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015c2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015c4:	f7ff f83c 	bl	8000640 <HAL_GetTick>
 80015c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015d2:	d006      	beq.n	80015e2 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff f834 	bl	8000640 <HAL_GetTick>
 80015d8:	1b40      	subs	r0, r0, r5
 80015da:	2802      	cmp	r0, #2
 80015dc:	d9f5      	bls.n	80015ca <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 80015de:	2003      	movs	r0, #3
 80015e0:	e02e      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e2:	69e3      	ldr	r3, [r4, #28]
 80015e4:	6a22      	ldr	r2, [r4, #32]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015f0:	0852      	lsrs	r2, r2, #1
 80015f2:	3a01      	subs	r2, #1
 80015f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001600:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001606:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001608:	6813      	ldr	r3, [r2, #0]
 800160a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001610:	f7ff f816 	bl	8000640 <HAL_GetTick>
 8001614:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_RCC_OscConfig+0x3d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff f80e 	bl	8000640 <HAL_GetTick>
 8001624:	1b00      	subs	r0, r0, r4
 8001626:	2802      	cmp	r0, #2
 8001628:	d9f5      	bls.n	8001616 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 800162a:	2003      	movs	r0, #3
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800162e:	2000      	movs	r0, #0
 8001630:	e006      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
 8001632:	2000      	movs	r0, #0
 8001634:	e004      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8001636:	2001      	movs	r0, #1
 8001638:	4770      	bx	lr
        return HAL_ERROR;
 800163a:	2001      	movs	r0, #1
 800163c:	e000      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 800163e:	2000      	movs	r0, #0
}
 8001640:	b002      	add	sp, #8
 8001642:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001644:	2001      	movs	r0, #1
 8001646:	e7fb      	b.n	8001640 <HAL_RCC_OscConfig+0x3c8>
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b04      	cmp	r3, #4
 8001658:	d059      	beq.n	800170e <HAL_RCC_GetSysClockFreq+0xc2>
 800165a:	2b08      	cmp	r3, #8
 800165c:	d001      	beq.n	8001662 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800165e:	482e      	ldr	r0, [pc, #184]	; (8001718 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001670:	d02a      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800167a:	461e      	mov	r6, r3
 800167c:	2700      	movs	r7, #0
 800167e:	015c      	lsls	r4, r3, #5
 8001680:	2500      	movs	r5, #0
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	eb65 0507 	sbc.w	r5, r5, r7
 8001688:	01a9      	lsls	r1, r5, #6
 800168a:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800168e:	01a0      	lsls	r0, r4, #6
 8001690:	1b00      	subs	r0, r0, r4
 8001692:	eb61 0105 	sbc.w	r1, r1, r5
 8001696:	00cb      	lsls	r3, r1, #3
 8001698:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800169c:	00c4      	lsls	r4, r0, #3
 800169e:	19a0      	adds	r0, r4, r6
 80016a0:	eb43 0107 	adc.w	r1, r3, r7
 80016a4:	024b      	lsls	r3, r1, #9
 80016a6:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80016aa:	0244      	lsls	r4, r0, #9
 80016ac:	4620      	mov	r0, r4
 80016ae:	4619      	mov	r1, r3
 80016b0:	2300      	movs	r3, #0
 80016b2:	f7fe fe2d 	bl	8000310 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_RCC_GetSysClockFreq+0xc8>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80016be:	3301      	adds	r3, #1
 80016c0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80016c2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80016c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCC_GetSysClockFreq+0xc8>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80016d0:	461e      	mov	r6, r3
 80016d2:	2700      	movs	r7, #0
 80016d4:	015c      	lsls	r4, r3, #5
 80016d6:	2500      	movs	r5, #0
 80016d8:	1ae4      	subs	r4, r4, r3
 80016da:	eb65 0507 	sbc.w	r5, r5, r7
 80016de:	01a9      	lsls	r1, r5, #6
 80016e0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80016e4:	01a0      	lsls	r0, r4, #6
 80016e6:	1b00      	subs	r0, r0, r4
 80016e8:	eb61 0105 	sbc.w	r1, r1, r5
 80016ec:	00cb      	lsls	r3, r1, #3
 80016ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016f2:	00c4      	lsls	r4, r0, #3
 80016f4:	19a0      	adds	r0, r4, r6
 80016f6:	eb43 0107 	adc.w	r1, r3, r7
 80016fa:	028b      	lsls	r3, r1, #10
 80016fc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001700:	0284      	lsls	r4, r0, #10
 8001702:	4620      	mov	r0, r4
 8001704:	4619      	mov	r1, r3
 8001706:	2300      	movs	r3, #0
 8001708:	f7fe fe02 	bl	8000310 <__aeabi_uldivmod>
 800170c:	e7d3      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	00f42400 	.word	0x00f42400
 800171c:	007a1200 	.word	0x007a1200

08001720 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001720:	2800      	cmp	r0, #0
 8001722:	f000 80a2 	beq.w	800186a <HAL_RCC_ClockConfig+0x14a>
{
 8001726:	b570      	push	{r4, r5, r6, lr}
 8001728:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172a:	4b52      	ldr	r3, [pc, #328]	; (8001874 <HAL_RCC_ClockConfig+0x154>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	428b      	cmp	r3, r1
 8001734:	d20c      	bcs.n	8001750 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4a4f      	ldr	r2, [pc, #316]	; (8001874 <HAL_RCC_ClockConfig+0x154>)
 8001738:	6813      	ldr	r3, [r2, #0]
 800173a:	f023 030f 	bic.w	r3, r3, #15
 800173e:	430b      	orrs	r3, r1
 8001740:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	6813      	ldr	r3, [r2, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	4299      	cmp	r1, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800174c:	2001      	movs	r0, #1
 800174e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	f013 0f02 	tst.w	r3, #2
 8001756:	d017      	beq.n	8001788 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	f013 0f04 	tst.w	r3, #4
 800175c:	d004      	beq.n	8001768 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800175e:	4a46      	ldr	r2, [pc, #280]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 8001760:	6893      	ldr	r3, [r2, #8]
 8001762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001766:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	f013 0f08 	tst.w	r3, #8
 800176e:	d004      	beq.n	800177a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001770:	4a41      	ldr	r2, [pc, #260]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 8001772:	6893      	ldr	r3, [r2, #8]
 8001774:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001778:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177a:	4a3f      	ldr	r2, [pc, #252]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 800177c:	6893      	ldr	r3, [r2, #8]
 800177e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001782:	68a0      	ldr	r0, [r4, #8]
 8001784:	4303      	orrs	r3, r0
 8001786:	6093      	str	r3, [r2, #8]
 8001788:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	f013 0f01 	tst.w	r3, #1
 8001790:	d031      	beq.n	80017f6 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001792:	6863      	ldr	r3, [r4, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001798:	2b02      	cmp	r3, #2
 800179a:	d025      	beq.n	80017e8 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	4a36      	ldr	r2, [pc, #216]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	f012 0f02 	tst.w	r2, #2
 80017a4:	d063      	beq.n	800186e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a6:	4934      	ldr	r1, [pc, #208]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 80017a8:	688a      	ldr	r2, [r1, #8]
 80017aa:	f022 0203 	bic.w	r2, r2, #3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80017b2:	f7fe ff45 	bl	8000640 <HAL_GetTick>
 80017b6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	6862      	ldr	r2, [r4, #4]
 80017c2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017c6:	d016      	beq.n	80017f6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7fe ff3a 	bl	8000640 <HAL_GetTick>
 80017cc:	1b80      	subs	r0, r0, r6
 80017ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80017d2:	4298      	cmp	r0, r3
 80017d4:	d9f0      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80017d6:	2003      	movs	r0, #3
 80017d8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80017e2:	d1e0      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e8:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017f0:	d1d9      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80017f2:	2001      	movs	r0, #1
 80017f4:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_RCC_ClockConfig+0x154>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	429d      	cmp	r5, r3
 8001800:	d20c      	bcs.n	800181c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <HAL_RCC_ClockConfig+0x154>)
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	f023 030f 	bic.w	r3, r3, #15
 800180a:	432b      	orrs	r3, r5
 800180c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	6813      	ldr	r3, [r2, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	429d      	cmp	r5, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
}
 800181a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	f013 0f04 	tst.w	r3, #4
 8001822:	d006      	beq.n	8001832 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 8001826:	6893      	ldr	r3, [r2, #8]
 8001828:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800182c:	68e1      	ldr	r1, [r4, #12]
 800182e:	430b      	orrs	r3, r1
 8001830:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	f013 0f08 	tst.w	r3, #8
 8001838:	d007      	beq.n	800184a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 800183c:	6893      	ldr	r3, [r2, #8]
 800183e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001842:	6921      	ldr	r1, [r4, #16]
 8001844:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001848:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184a:	f7ff feff 	bl	800164c <HAL_RCC_GetSysClockFreq>
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_RCC_ClockConfig+0x158>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_RCC_ClockConfig+0x15c>)
 8001858:	5cd3      	ldrb	r3, [r2, r3]
 800185a:	40d8      	lsrs	r0, r3
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_RCC_ClockConfig+0x160>)
 800185e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001860:	2000      	movs	r0, #0
 8001862:	f00d f819 	bl	800e898 <HAL_InitTick>
  return HAL_OK;
 8001866:	2000      	movs	r0, #0
 8001868:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
 800186c:	4770      	bx	lr
        return HAL_ERROR;
 800186e:	2001      	movs	r0, #1
 8001870:	bd70      	pop	{r4, r5, r6, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00
 8001878:	40023800 	.word	0x40023800
 800187c:	08012804 	.word	0x08012804
 8001880:	20000aac 	.word	0x20000aac

08001884 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001884:	4b01      	ldr	r3, [pc, #4]	; (800188c <HAL_RCC_GetHCLKFreq+0x8>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000aac 	.word	0x20000aac

08001890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001890:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001892:	f7ff fff7 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800189e:	4a03      	ldr	r2, [pc, #12]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80018a2:	40d8      	lsrs	r0, r3
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	08012814 	.word	0x08012814

080018b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018b2:	f7ff ffe7 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018be:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80018c2:	40d8      	lsrs	r0, r3
 80018c4:	bd08      	pop	{r3, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08012814 	.word	0x08012814

080018d0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018d0:	230f      	movs	r3, #15
 80018d2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_GetClockConfig+0x34>)
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80018e4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80018ec:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80018f6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_RCC_GetClockConfig+0x38>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	600b      	str	r3, [r1, #0]
 8001902:	4770      	bx	lr
 8001904:	40023800 	.word	0x40023800
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190e:	b083      	sub	sp, #12
 8001910:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001912:	6803      	ldr	r3, [r0, #0]
 8001914:	f013 0f01 	tst.w	r3, #1
 8001918:	d00c      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800191a:	4bb5      	ldr	r3, [pc, #724]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001928:	430a      	orrs	r2, r1
 800192a:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800192c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800192e:	b1c3      	cbz	r3, 8001962 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8001930:	2700      	movs	r7, #0
 8001932:	e000      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8001934:	2700      	movs	r7, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800193c:	d015      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800193e:	4aac      	ldr	r2, [pc, #688]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001940:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001944:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001948:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800194a:	430b      	orrs	r3, r1
 800194c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001950:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001956:	d006      	beq.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 8145 	beq.w	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  uint32_t pllsaiused = 0;
 800195e:	2500      	movs	r5, #0
 8001960:	e004      	b.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001962:	2701      	movs	r7, #1
 8001964:	e7e7      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8001966:	2701      	movs	r7, #1
 8001968:	e7f6      	b.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 800196a:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001972:	d00f      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001974:	4a9e      	ldr	r2, [pc, #632]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001976:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800197a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800197e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001980:	430b      	orrs	r3, r1
 8001982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800198c:	f000 812e 	beq.w	8001bec <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001990:	b903      	cbnz	r3, 8001994 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8001992:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800199a:	d000      	beq.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 800199c:	2701      	movs	r7, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800199e:	f013 0f20 	tst.w	r3, #32
 80019a2:	f040 8127 	bne.w	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	f013 0f10 	tst.w	r3, #16
 80019ac:	d00c      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80019ae:	4b90      	ldr	r3, [pc, #576]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80019b4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80019b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80019bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80019c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80019c2:	430a      	orrs	r2, r1
 80019c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80019ce:	d008      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019d0:	4a87      	ldr	r2, [pc, #540]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019da:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80019dc:	430b      	orrs	r3, r1
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80019e8:	d008      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80019ea:	4a81      	ldr	r2, [pc, #516]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019f0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80019f4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80019f6:	430b      	orrs	r3, r1
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a02:	d008      	beq.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a04:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a0a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001a0e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001a10:	430b      	orrs	r3, r1
 8001a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a1c:	d008      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001a1e:	4a74      	ldr	r2, [pc, #464]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a20:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a24:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a28:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a36:	d008      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a38:	4a6d      	ldr	r2, [pc, #436]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001a44:	430b      	orrs	r3, r1
 8001a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a50:	d008      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a52:	4a67      	ldr	r2, [pc, #412]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a54:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a58:	f023 030c 	bic.w	r3, r3, #12
 8001a5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a6c:	4a60      	ldr	r2, [pc, #384]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a76:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001a84:	d008      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a86:	4a5a      	ldr	r2, [pc, #360]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a88:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a90:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001a92:	430b      	orrs	r3, r1
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001aa0:	4a53      	ldr	r2, [pc, #332]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001aa2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aaa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001aac:	430b      	orrs	r3, r1
 8001aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001ab8:	d008      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001aba:	4a4d      	ldr	r2, [pc, #308]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001abc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ac0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ac4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001ad2:	d008      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ad4:	4a46      	ldr	r2, [pc, #280]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ad6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ada:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ade:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001aec:	d008      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001aee:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001af0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001af4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001af8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001afa:	430b      	orrs	r3, r1
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b06:	d008      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b08:	4a39      	ldr	r2, [pc, #228]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b12:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001b14:	430b      	orrs	r3, r1
 8001b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001b20:	d00d      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b22:	4a33      	ldr	r2, [pc, #204]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b28:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001b2c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001b34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b3a:	f000 80c1 	beq.w	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	f013 0f08 	tst.w	r3, #8
 8001b44:	d000      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8001b46:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001b48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001b4c:	d008      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b4e:	4a28      	ldr	r2, [pc, #160]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b50:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b54:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001b58:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001b66:	d009      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001b68:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b72:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001b76:	430b      	orrs	r3, r1
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001b82:	d009      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001b84:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001b8e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8001b92:	430b      	orrs	r3, r1
 8001b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001b9e:	d009      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ba2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ba6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001baa:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001bba:	d009      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001bbe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001bc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001bc6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001bd0:	2f00      	cmp	r7, #0
 8001bd2:	d177      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bda:	d073      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001bdc:	2d00      	cmp	r5, #0
 8001bde:	f040 8105 	bne.w	8001dec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001be2:	2000      	movs	r0, #0
}
 8001be4:	b003      	add	sp, #12
 8001be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8001be8:	2501      	movs	r5, #1
 8001bea:	e6bf      	b.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001bec:	2701      	movs	r7, #1
 8001bee:	e6cf      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8001bf0:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4bb8      	ldr	r3, [pc, #736]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001c08:	4ab4      	ldr	r2, [pc, #720]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001c0a:	6813      	ldr	r3, [r2, #0]
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c12:	f7fe fd15 	bl	8000640 <HAL_GetTick>
 8001c16:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c18:	4bb0      	ldr	r3, [pc, #704]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c20:	d106      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7fe fd0d 	bl	8000640 <HAL_GetTick>
 8001c26:	1b80      	subs	r0, r0, r6
 8001c28:	2864      	cmp	r0, #100	; 0x64
 8001c2a:	d9f5      	bls.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	e7d9      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c30:	4ba9      	ldr	r3, [pc, #676]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c34:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c38:	d015      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8001c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c3c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d010      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c44:	4ba4      	ldr	r3, [pc, #656]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c4c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001c4e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001c52:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c54:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001c56:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001c5a:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001c5c:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	f013 0f01 	tst.w	r3, #1
 8001c64:	d112      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c68:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c6c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c70:	d01d      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001c72:	4a99      	ldr	r2, [pc, #612]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c74:	6893      	ldr	r3, [r2, #8]
 8001c76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c7a:	6093      	str	r3, [r2, #8]
 8001c7c:	4996      	ldr	r1, [pc, #600]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c7e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001c80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c82:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001c86:	4313      	orrs	r3, r2
 8001c88:	670b      	str	r3, [r1, #112]	; 0x70
 8001c8a:	e68c      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fcd8 	bl	8000640 <HAL_GetTick>
 8001c90:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c92:	4b91      	ldr	r3, [pc, #580]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	f013 0f02 	tst.w	r3, #2
 8001c9a:	d1e4      	bne.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7fe fcd0 	bl	8000640 <HAL_GetTick>
 8001ca0:	1b80      	subs	r0, r0, r6
 8001ca2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ca6:	4298      	cmp	r0, r3
 8001ca8:	d9f3      	bls.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
 8001cac:	e79a      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cae:	488a      	ldr	r0, [pc, #552]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001cb0:	6882      	ldr	r2, [r0, #8]
 8001cb2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001cb6:	498a      	ldr	r1, [pc, #552]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8001cb8:	4019      	ands	r1, r3
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	6082      	str	r2, [r0, #8]
 8001cbe:	e7dd      	b.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1;
 8001cc0:	2501      	movs	r5, #1
 8001cc2:	e73c      	b.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8001cc4:	4a84      	ldr	r2, [pc, #528]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ccc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001cce:	f7fe fcb7 	bl	8000640 <HAL_GetTick>
 8001cd2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cd4:	4b80      	ldr	r3, [pc, #512]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001cdc:	d006      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cde:	f7fe fcaf 	bl	8000640 <HAL_GetTick>
 8001ce2:	1b80      	subs	r0, r0, r6
 8001ce4:	2864      	cmp	r0, #100	; 0x64
 8001ce6:	d9f5      	bls.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8001ce8:	2003      	movs	r0, #3
 8001cea:	e77b      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	f013 0f01 	tst.w	r3, #1
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8001cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cf6:	b98b      	cbnz	r3, 8001d1c <HAL_RCCEx_PeriphCLKConfig+0x410>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001cf8:	4a77      	ldr	r2, [pc, #476]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001cfa:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cfe:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d02:	6860      	ldr	r0, [r4, #4]
 8001d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d08:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d0c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001d10:	430b      	orrs	r3, r1
 8001d12:	68a1      	ldr	r1, [r4, #8]
 8001d14:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001d18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001d22:	d003      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8001d24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d26:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001d2a:	d043      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001d2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001d30:	d003      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d38:	d03c      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001d40:	d011      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d42:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d44:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d48:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d4c:	6866      	ldr	r6, [r4, #4]
 8001d4e:	6923      	ldr	r3, [r4, #16]
 8001d50:	041b      	lsls	r3, r3, #16
 8001d52:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001d56:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001d5a:	4303      	orrs	r3, r0
 8001d5c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001d60:	430b      	orrs	r3, r1
 8001d62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d6c:	d00d      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x47e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d6e:	6862      	ldr	r2, [r4, #4]
 8001d70:	6923      	ldr	r3, [r4, #16]
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d78:	68e2      	ldr	r2, [r4, #12]
 8001d7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d7e:	68a2      	ldr	r2, [r4, #8]
 8001d80:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d84:	4a54      	ldr	r2, [pc, #336]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001d8a:	4a53      	ldr	r2, [pc, #332]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d8c:	6813      	ldr	r3, [r2, #0]
 8001d8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d92:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d94:	f7fe fc54 	bl	8000640 <HAL_GetTick>
 8001d98:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d9a:	4b4f      	ldr	r3, [pc, #316]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001da2:	f47f af1b 	bne.w	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001da6:	f7fe fc4b 	bl	8000640 <HAL_GetTick>
 8001daa:	1b80      	subs	r0, r0, r6
 8001dac:	2864      	cmp	r0, #100	; 0x64
 8001dae:	d9f4      	bls.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x48e>
        return HAL_TIMEOUT;
 8001db0:	2003      	movs	r0, #3
 8001db2:	e717      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001db4:	4a48      	ldr	r2, [pc, #288]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001db6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dba:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001dbe:	6860      	ldr	r0, [r4, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001dc8:	68e0      	ldr	r0, [r4, #12]
 8001dca:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001dce:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001dd8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ddc:	f023 031f 	bic.w	r3, r3, #31
 8001de0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001de2:	3901      	subs	r1, #1
 8001de4:	430b      	orrs	r3, r1
 8001de6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dea:	e7a6      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    __HAL_RCC_PLLSAI_DISABLE();
 8001dec:	4a3a      	ldr	r2, [pc, #232]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001dee:	6813      	ldr	r3, [r2, #0]
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001df6:	f7fe fc23 	bl	8000640 <HAL_GetTick>
 8001dfa:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001e04:	d006      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x508>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e06:	f7fe fc1b 	bl	8000640 <HAL_GetTick>
 8001e0a:	1b40      	subs	r0, r0, r5
 8001e0c:	2864      	cmp	r0, #100	; 0x64
 8001e0e:	d9f5      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        return HAL_TIMEOUT;
 8001e10:	2003      	movs	r0, #3
 8001e12:	e6e7      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001e1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e1e:	b122      	cbz	r2, 8001e2a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8001e20:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001e24:	d01d      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x556>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e28:	b9db      	cbnz	r3, 8001e62 <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e2a:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001e2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e30:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e34:	6960      	ldr	r0, [r4, #20]
 8001e36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e3a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e3e:	69a0      	ldr	r0, [r4, #24]
 8001e40:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001e44:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e4e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e52:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001e56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e58:	3901      	subs	r1, #1
 8001e5a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001e68:	d003      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001e6a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e70:	d038      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	f013 0f08 	tst.w	r3, #8
 8001e78:	d019      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e7a:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001e7c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e84:	6960      	ldr	r0, [r4, #20]
 8001e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e8e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001e92:	430b      	orrs	r3, r1
 8001e94:	69e1      	ldr	r1, [r4, #28]
 8001e96:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001e9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001e9e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ea2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ea6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fbc2 	bl	8000640 <HAL_GetTick>
 8001ebc:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001ec6:	d120      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001ec8:	f7fe fbba 	bl	8000640 <HAL_GetTick>
 8001ecc:	1b00      	subs	r0, r0, r4
 8001ece:	2864      	cmp	r0, #100	; 0x64
 8001ed0:	d9f5      	bls.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
        return HAL_TIMEOUT;
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	e686      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	0ffffcff 	.word	0x0ffffcff
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8001ee6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001eea:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001eee:	6965      	ldr	r5, [r4, #20]
 8001ef0:	6a23      	ldr	r3, [r4, #32]
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001ef8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001efc:	4303      	orrs	r3, r0
 8001efe:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001f02:	430b      	orrs	r3, r1
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001f08:	e7b3      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x566>
  return HAL_OK;
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	e66a      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800

08001f14 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f14:	4770      	bx	lr

08001f16 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f16:	6802      	ldr	r2, [r0, #0]
 8001f18:	68d3      	ldr	r3, [r2, #12]
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f20:	6802      	ldr	r2, [r0, #0]
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	4770      	bx	lr

08001f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	4770      	bx	lr

08001f32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	4770      	bx	lr

08001f36 <HAL_TIM_IRQHandler>:
{
 8001f36:	b510      	push	{r4, lr}
 8001f38:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f3a:	6803      	ldr	r3, [r0, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	f012 0f02 	tst.w	r2, #2
 8001f42:	d011      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	f012 0f02 	tst.w	r2, #2
 8001f4a:	d00d      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f4c:	f06f 0202 	mvn.w	r2, #2
 8001f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001f56:	6803      	ldr	r3, [r0, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f013 0f03 	tst.w	r3, #3
 8001f5e:	d079      	beq.n	8002054 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f60:	f7ff ffe6 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f64:	2300      	movs	r3, #0
 8001f66:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	f012 0f04 	tst.w	r2, #4
 8001f70:	d012      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	f012 0f04 	tst.w	r2, #4
 8001f78:	d00e      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f7a:	f06f 0204 	mvn.w	r2, #4
 8001f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f80:	2302      	movs	r3, #2
 8001f82:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f8c:	d068      	beq.n	8002060 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f7ff ffce 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f94:	2300      	movs	r3, #0
 8001f96:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	f012 0f08 	tst.w	r2, #8
 8001fa0:	d012      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	f012 0f08 	tst.w	r2, #8
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001faa:	f06f 0208 	mvn.w	r2, #8
 8001fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f013 0f03 	tst.w	r3, #3
 8001fbc:	d057      	beq.n	800206e <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f7ff ffb6 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	f012 0f10 	tst.w	r2, #16
 8001fd0:	d012      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	f012 0f10 	tst.w	r2, #16
 8001fd8:	d00e      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fda:	f06f 0210 	mvn.w	r2, #16
 8001fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001fec:	d046      	beq.n	800207c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff ff9e 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	f012 0f01 	tst.w	r2, #1
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	f012 0f01 	tst.w	r2, #1
 8002008:	d13f      	bne.n	800208a <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002012:	d003      	beq.n	800201c <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	f012 0f80 	tst.w	r2, #128	; 0x80
 800201a:	d13d      	bne.n	8002098 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	f012 0f80 	tst.w	r2, #128	; 0x80
 800202c:	d13b      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002036:	d003      	beq.n	8002040 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800203e:	d139      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	f012 0f20 	tst.w	r2, #32
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	f012 0f20 	tst.w	r2, #32
 8002050:	d137      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x18c>
 8002052:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002054:	f7ff ff6b 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	4620      	mov	r0, r4
 800205a:	f7ff ff6a 	bl	8001f32 <HAL_TIM_PWM_PulseFinishedCallback>
 800205e:	e781      	b.n	8001f64 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002060:	4620      	mov	r0, r4
 8002062:	f7ff ff64 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002066:	4620      	mov	r0, r4
 8002068:	f7ff ff63 	bl	8001f32 <HAL_TIM_PWM_PulseFinishedCallback>
 800206c:	e792      	b.n	8001f94 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	4620      	mov	r0, r4
 8002070:	f7ff ff5d 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff5c 	bl	8001f32 <HAL_TIM_PWM_PulseFinishedCallback>
 800207a:	e7a3      	b.n	8001fc4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff ff56 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff ff55 	bl	8001f32 <HAL_TIM_PWM_PulseFinishedCallback>
 8002088:	e7b4      	b.n	8001ff4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800208a:	f06f 0201 	mvn.w	r2, #1
 800208e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002090:	4620      	mov	r0, r4
 8002092:	f00c fb97 	bl	800e7c4 <HAL_TIM_PeriodElapsedCallback>
 8002096:	e7b8      	b.n	800200a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800209c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800209e:	4620      	mov	r0, r4
 80020a0:	f000 f8d0 	bl	8002244 <HAL_TIMEx_BreakCallback>
 80020a4:	e7ba      	b.n	800201c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80020ac:	4620      	mov	r0, r4
 80020ae:	f000 f8c9 	bl	8002244 <HAL_TIMEx_BreakCallback>
 80020b2:	e7bc      	b.n	800202e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff ff3a 	bl	8001f34 <HAL_TIM_TriggerCallback>
 80020c0:	e7be      	b.n	8002040 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c2:	f06f 0220 	mvn.w	r2, #32
 80020c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80020c8:	4620      	mov	r0, r4
 80020ca:	f000 f8ba 	bl	8002242 <HAL_TIMEx_CommutationCallback>
}
 80020ce:	e7c0      	b.n	8002052 <HAL_TIM_IRQHandler+0x11c>

080020d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020d0:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80020d2:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80020d4:	4a47      	ldr	r2, [pc, #284]	; (80021f4 <TIM_Base_SetConfig+0x124>)
 80020d6:	4290      	cmp	r0, r2
 80020d8:	bf14      	ite	ne
 80020da:	2200      	movne	r2, #0
 80020dc:	2201      	moveq	r2, #1
 80020de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020e2:	bf14      	ite	ne
 80020e4:	4614      	movne	r4, r2
 80020e6:	f042 0401 	orreq.w	r4, r2, #1
 80020ea:	b9d4      	cbnz	r4, 8002122 <TIM_Base_SetConfig+0x52>
 80020ec:	4d42      	ldr	r5, [pc, #264]	; (80021f8 <TIM_Base_SetConfig+0x128>)
 80020ee:	42a8      	cmp	r0, r5
 80020f0:	bf14      	ite	ne
 80020f2:	2500      	movne	r5, #0
 80020f4:	2501      	moveq	r5, #1
 80020f6:	4e41      	ldr	r6, [pc, #260]	; (80021fc <TIM_Base_SetConfig+0x12c>)
 80020f8:	42b0      	cmp	r0, r6
 80020fa:	d054      	beq.n	80021a6 <TIM_Base_SetConfig+0xd6>
 80020fc:	2d00      	cmp	r5, #0
 80020fe:	d152      	bne.n	80021a6 <TIM_Base_SetConfig+0xd6>
 8002100:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002104:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8002108:	42a8      	cmp	r0, r5
 800210a:	bf14      	ite	ne
 800210c:	2500      	movne	r5, #0
 800210e:	2501      	moveq	r5, #1
 8002110:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002114:	42b0      	cmp	r0, r6
 8002116:	d002      	beq.n	800211e <TIM_Base_SetConfig+0x4e>
 8002118:	b90d      	cbnz	r5, 800211e <TIM_Base_SetConfig+0x4e>
 800211a:	2500      	movs	r5, #0
 800211c:	e002      	b.n	8002124 <TIM_Base_SetConfig+0x54>
 800211e:	2501      	movs	r5, #1
 8002120:	e000      	b.n	8002124 <TIM_Base_SetConfig+0x54>
 8002122:	2501      	movs	r5, #1
 8002124:	b11d      	cbz	r5, 800212e <TIM_Base_SetConfig+0x5e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800212a:	684d      	ldr	r5, [r1, #4]
 800212c:	432b      	orrs	r3, r5
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800212e:	2c00      	cmp	r4, #0
 8002130:	d13d      	bne.n	80021ae <TIM_Base_SetConfig+0xde>
 8002132:	4c31      	ldr	r4, [pc, #196]	; (80021f8 <TIM_Base_SetConfig+0x128>)
 8002134:	42a0      	cmp	r0, r4
 8002136:	bf14      	ite	ne
 8002138:	2400      	movne	r4, #0
 800213a:	2401      	moveq	r4, #1
 800213c:	4d2f      	ldr	r5, [pc, #188]	; (80021fc <TIM_Base_SetConfig+0x12c>)
 800213e:	42a8      	cmp	r0, r5
 8002140:	d050      	beq.n	80021e4 <TIM_Base_SetConfig+0x114>
 8002142:	2c00      	cmp	r4, #0
 8002144:	d14e      	bne.n	80021e4 <TIM_Base_SetConfig+0x114>
 8002146:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800214a:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800214e:	42a0      	cmp	r0, r4
 8002150:	bf14      	ite	ne
 8002152:	2400      	movne	r4, #0
 8002154:	2401      	moveq	r4, #1
 8002156:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800215a:	42a8      	cmp	r0, r5
 800215c:	d044      	beq.n	80021e8 <TIM_Base_SetConfig+0x118>
 800215e:	2c00      	cmp	r4, #0
 8002160:	d142      	bne.n	80021e8 <TIM_Base_SetConfig+0x118>
 8002162:	4c27      	ldr	r4, [pc, #156]	; (8002200 <TIM_Base_SetConfig+0x130>)
 8002164:	42a0      	cmp	r0, r4
 8002166:	bf14      	ite	ne
 8002168:	2400      	movne	r4, #0
 800216a:	2401      	moveq	r4, #1
 800216c:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8002170:	42a8      	cmp	r0, r5
 8002172:	d03b      	beq.n	80021ec <TIM_Base_SetConfig+0x11c>
 8002174:	2c00      	cmp	r4, #0
 8002176:	d139      	bne.n	80021ec <TIM_Base_SetConfig+0x11c>
 8002178:	4c22      	ldr	r4, [pc, #136]	; (8002204 <TIM_Base_SetConfig+0x134>)
 800217a:	42a0      	cmp	r0, r4
 800217c:	bf14      	ite	ne
 800217e:	2400      	movne	r4, #0
 8002180:	2401      	moveq	r4, #1
 8002182:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002186:	42a8      	cmp	r0, r5
 8002188:	d032      	beq.n	80021f0 <TIM_Base_SetConfig+0x120>
 800218a:	2c00      	cmp	r4, #0
 800218c:	d130      	bne.n	80021f0 <TIM_Base_SetConfig+0x120>
 800218e:	4c1e      	ldr	r4, [pc, #120]	; (8002208 <TIM_Base_SetConfig+0x138>)
 8002190:	42a0      	cmp	r0, r4
 8002192:	bf14      	ite	ne
 8002194:	2400      	movne	r4, #0
 8002196:	2401      	moveq	r4, #1
 8002198:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 800219c:	42a8      	cmp	r0, r5
 800219e:	d004      	beq.n	80021aa <TIM_Base_SetConfig+0xda>
 80021a0:	b91c      	cbnz	r4, 80021aa <TIM_Base_SetConfig+0xda>
 80021a2:	2400      	movs	r4, #0
 80021a4:	e004      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021a6:	2501      	movs	r5, #1
 80021a8:	e7bc      	b.n	8002124 <TIM_Base_SetConfig+0x54>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021aa:	2401      	movs	r4, #1
 80021ac:	e000      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
 80021ae:	2401      	movs	r4, #1
 80021b0:	b11c      	cbz	r4, 80021ba <TIM_Base_SetConfig+0xea>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b6:	68cc      	ldr	r4, [r1, #12]
 80021b8:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021be:	694c      	ldr	r4, [r1, #20]
 80021c0:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80021c2:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c4:	688b      	ldr	r3, [r1, #8]
 80021c6:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021c8:	680b      	ldr	r3, [r1, #0]
 80021ca:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <TIM_Base_SetConfig+0x13c>)
 80021ce:	4298      	cmp	r0, r3
 80021d0:	bf08      	it	eq
 80021d2:	f042 0201 	orreq.w	r2, r2, #1
 80021d6:	b10a      	cbz	r2, 80021dc <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d8:	690b      	ldr	r3, [r1, #16]
 80021da:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021dc:	2301      	movs	r3, #1
 80021de:	6143      	str	r3, [r0, #20]
}
 80021e0:	bc70      	pop	{r4, r5, r6}
 80021e2:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021e4:	2401      	movs	r4, #1
 80021e6:	e7e3      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
 80021e8:	2401      	movs	r4, #1
 80021ea:	e7e1      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
 80021ec:	2401      	movs	r4, #1
 80021ee:	e7df      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
 80021f0:	2401      	movs	r4, #1
 80021f2:	e7dd      	b.n	80021b0 <TIM_Base_SetConfig+0xe0>
 80021f4:	40010000 	.word	0x40010000
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40000400 	.word	0x40000400
 8002200:	40014400 	.word	0x40014400
 8002204:	40001800 	.word	0x40001800
 8002208:	40002000 	.word	0x40002000
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002210:	b1a8      	cbz	r0, 800223e <HAL_TIM_Base_Init+0x2e>
{ 
 8002212:	b510      	push	{r4, lr}
 8002214:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002216:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800221a:	b15b      	cbz	r3, 8002234 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800221c:	2302      	movs	r3, #2
 800221e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002222:	1d21      	adds	r1, r4, #4
 8002224:	6820      	ldr	r0, [r4, #0]
 8002226:	f7ff ff53 	bl	80020d0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800222a:	2301      	movs	r3, #1
 800222c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002230:	2000      	movs	r0, #0
 8002232:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002234:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002238:	f7ff fe6c 	bl	8001f14 <HAL_TIM_Base_MspInit>
 800223c:	e7ee      	b.n	800221c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800223e:	2001      	movs	r0, #1
 8002240:	4770      	bx	lr

08002242 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002242:	4770      	bx	lr

08002244 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002244:	4770      	bx	lr

08002246 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002246:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b21      	cmp	r3, #33	; 0x21
 800224e:	d001      	beq.n	8002254 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002250:	2002      	movs	r0, #2
  }
}
 8002252:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002254:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002258:	b29b      	uxth	r3, r3
 800225a:	b193      	cbz	r3, 8002282 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800225c:	6883      	ldr	r3, [r0, #8]
 800225e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002262:	d01a      	beq.n	800229a <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002264:	6802      	ldr	r2, [r0, #0]
 8002266:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002268:	1c59      	adds	r1, r3, #1
 800226a:	64c1      	str	r1, [r0, #76]	; 0x4c
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002270:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29b      	uxth	r3, r3
 800227a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 800227e:	2000      	movs	r0, #0
 8002280:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002282:	6802      	ldr	r2, [r0, #0]
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800228a:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800228c:	6802      	ldr	r2, [r0, #0]
 800228e:	6813      	ldr	r3, [r2, #0]
 8002290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002294:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8002296:	2000      	movs	r0, #0
 8002298:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800229a:	6903      	ldr	r3, [r0, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e1      	bne.n	8002264 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80022a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80022a2:	6802      	ldr	r2, [r0, #0]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022aa:	6293      	str	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80022ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80022ae:	3302      	adds	r3, #2
 80022b0:	64c3      	str	r3, [r0, #76]	; 0x4c
 80022b2:	e7dd      	b.n	8002270 <UART_Transmit_IT+0x2a>

080022b4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022b4:	6802      	ldr	r2, [r0, #0]
 80022b6:	6813      	ldr	r3, [r2, #0]
 80022b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022bc:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022be:	6802      	ldr	r2, [r0, #0]
 80022c0:	6893      	ldr	r3, [r2, #8]
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022c8:	2320      	movs	r3, #32
 80022ca:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80022ce:	4770      	bx	lr

080022d0 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 80022d0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d001      	beq.n	80022de <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 80022da:	2002      	movs	r0, #2
 80022dc:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 80022de:	2a00      	cmp	r2, #0
 80022e0:	bf18      	it	ne
 80022e2:	2900      	cmpne	r1, #0
 80022e4:	d016      	beq.n	8002314 <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 80022e6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d014      	beq.n	8002318 <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 80022ee:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80022f0:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80022f4:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022fc:	2221      	movs	r2, #33	; 0x21
 80022fe:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002302:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002306:	6801      	ldr	r1, [r0, #0]
 8002308:	680a      	ldr	r2, [r1, #0]
 800230a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800230e:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002310:	4618      	mov	r0, r3
 8002312:	4770      	bx	lr
      return HAL_ERROR;
 8002314:	2001      	movs	r0, #1
 8002316:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002318:	2002      	movs	r0, #2
}
 800231a:	4770      	bx	lr

0800231c <UART_WaitOnFlagUntilTimeout>:
{
 800231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002320:	4605      	mov	r5, r0
 8002322:	460f      	mov	r7, r1
 8002324:	4616      	mov	r6, r2
 8002326:	4698      	mov	r8, r3
 8002328:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	ea37 0303 	bics.w	r3, r7, r3
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	42b3      	cmp	r3, r6
 800233a:	d11e      	bne.n	800237a <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 800233c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002340:	d0f3      	beq.n	800232a <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002342:	b12c      	cbz	r4, 8002350 <UART_WaitOnFlagUntilTimeout+0x34>
 8002344:	f7fe f97c 	bl	8000640 <HAL_GetTick>
 8002348:	eba0 0008 	sub.w	r0, r0, r8
 800234c:	4284      	cmp	r4, r0
 800234e:	d8ec      	bhi.n	800232a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002350:	682a      	ldr	r2, [r5, #0]
 8002352:	6813      	ldr	r3, [r2, #0]
 8002354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002358:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235a:	682a      	ldr	r2, [r5, #0]
 800235c:	6893      	ldr	r3, [r2, #8]
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002364:	2320      	movs	r3, #32
 8002366:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800236a:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800236e:	2300      	movs	r3, #0
 8002370:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8002374:	2003      	movs	r0, #3
 8002376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800237a:	2000      	movs	r0, #0
}
 800237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002380 <UART_EndTransmit_IT>:
{
 8002380:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002382:	6801      	ldr	r1, [r0, #0]
 8002384:	680b      	ldr	r3, [r1, #0]
 8002386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800238a:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800238c:	2320      	movs	r3, #32
 800238e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8002392:	f00c fcd9 	bl	800ed48 <HAL_UART_TxCpltCallback>
}
 8002396:	2000      	movs	r0, #0
 8002398:	bd08      	pop	{r3, pc}

0800239a <HAL_UART_RxCpltCallback>:
{
 800239a:	4770      	bx	lr

0800239c <UART_Receive_IT>:
{
 800239c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800239e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023a2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b22      	cmp	r3, #34	; 0x22
 80023aa:	d006      	beq.n	80023ba <UART_Receive_IT+0x1e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	6993      	ldr	r3, [r2, #24]
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 80023b6:	2002      	movs	r0, #2
 80023b8:	bd08      	pop	{r3, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ba:	6883      	ldr	r3, [r0, #8]
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d011      	beq.n	80023e6 <UART_Receive_IT+0x4a>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80023c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023c4:	1c59      	adds	r1, r3, #1
 80023c6:	6541      	str	r1, [r0, #84]	; 0x54
 80023c8:	6801      	ldr	r1, [r0, #0]
 80023ca:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	400a      	ands	r2, r1
 80023d0:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 80023d2:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80023e0:	b16b      	cbz	r3, 80023fe <UART_Receive_IT+0x62>
    return HAL_OK;
 80023e2:	2000      	movs	r0, #0
}
 80023e4:	bd08      	pop	{r3, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e6:	6903      	ldr	r3, [r0, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ea      	bne.n	80023c2 <UART_Receive_IT+0x26>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80023ec:	6d43      	ldr	r3, [r0, #84]	; 0x54
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80023f2:	400a      	ands	r2, r1
 80023f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 80023f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023f8:	3302      	adds	r3, #2
 80023fa:	6543      	str	r3, [r0, #84]	; 0x54
 80023fc:	e7e9      	b.n	80023d2 <UART_Receive_IT+0x36>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023fe:	6802      	ldr	r2, [r0, #0]
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002406:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002408:	6802      	ldr	r2, [r0, #0]
 800240a:	6893      	ldr	r3, [r2, #8]
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002412:	2320      	movs	r3, #32
 8002414:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002418:	f7ff ffbf 	bl	800239a <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800241c:	2000      	movs	r0, #0
 800241e:	bd08      	pop	{r3, pc}

08002420 <HAL_UART_ErrorCallback>:
{
 8002420:	4770      	bx	lr
	...

08002424 <HAL_UART_IRQHandler>:
{
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002428:	6802      	ldr	r2, [r0, #0]
 800242a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800242c:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800242e:	6891      	ldr	r1, [r2, #8]
  if (errorflags == RESET)
 8002430:	f013 050f 	ands.w	r5, r3, #15
 8002434:	d105      	bne.n	8002442 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002436:	f013 0f20 	tst.w	r3, #32
 800243a:	d002      	beq.n	8002442 <HAL_UART_IRQHandler+0x1e>
 800243c:	f010 0f20 	tst.w	r0, #32
 8002440:	d15f      	bne.n	8002502 <HAL_UART_IRQHandler+0xde>
  if(   (errorflags != RESET)
 8002442:	2d00      	cmp	r5, #0
 8002444:	d073      	beq.n	800252e <HAL_UART_IRQHandler+0x10a>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002446:	f011 0101 	ands.w	r1, r1, #1
 800244a:	d102      	bne.n	8002452 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800244c:	f410 7f90 	tst.w	r0, #288	; 0x120
 8002450:	d06d      	beq.n	800252e <HAL_UART_IRQHandler+0x10a>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002452:	f013 0f01 	tst.w	r3, #1
 8002456:	d007      	beq.n	8002468 <HAL_UART_IRQHandler+0x44>
 8002458:	f410 7f80 	tst.w	r0, #256	; 0x100
 800245c:	d004      	beq.n	8002468 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800245e:	2501      	movs	r5, #1
 8002460:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002462:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002464:	432a      	orrs	r2, r5
 8002466:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002468:	f013 0f02 	tst.w	r3, #2
 800246c:	d007      	beq.n	800247e <HAL_UART_IRQHandler+0x5a>
 800246e:	b131      	cbz	r1, 800247e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002470:	6822      	ldr	r2, [r4, #0]
 8002472:	2502      	movs	r5, #2
 8002474:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002476:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002478:	f042 0204 	orr.w	r2, r2, #4
 800247c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800247e:	f013 0f04 	tst.w	r3, #4
 8002482:	d007      	beq.n	8002494 <HAL_UART_IRQHandler+0x70>
 8002484:	b131      	cbz	r1, 8002494 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002486:	6822      	ldr	r2, [r4, #0]
 8002488:	2504      	movs	r5, #4
 800248a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800248c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800248e:	f042 0202 	orr.w	r2, r2, #2
 8002492:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002494:	f013 0f08 	tst.w	r3, #8
 8002498:	d009      	beq.n	80024ae <HAL_UART_IRQHandler+0x8a>
 800249a:	f010 0f20 	tst.w	r0, #32
 800249e:	d100      	bne.n	80024a2 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024a0:	b129      	cbz	r1, 80024ae <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80024a2:	6822      	ldr	r2, [r4, #0]
 80024a4:	2108      	movs	r1, #8
 80024a6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024a8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80024aa:	430a      	orrs	r2, r1
 80024ac:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ae:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	d048      	beq.n	8002546 <HAL_UART_IRQHandler+0x122>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024b4:	f013 0f20 	tst.w	r3, #32
 80024b8:	d002      	beq.n	80024c0 <HAL_UART_IRQHandler+0x9c>
 80024ba:	f010 0f20 	tst.w	r0, #32
 80024be:	d124      	bne.n	800250a <HAL_UART_IRQHandler+0xe6>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80024c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80024c2:	f013 0f08 	tst.w	r3, #8
 80024c6:	d104      	bne.n	80024d2 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80024cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024d0:	d027      	beq.n	8002522 <HAL_UART_IRQHandler+0xfe>
        UART_EndRxTransfer(huart);
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7ff feee 	bl	80022b4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80024e0:	d01b      	beq.n	800251a <HAL_UART_IRQHandler+0xf6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e8:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80024ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024ec:	b18b      	cbz	r3, 8002512 <HAL_UART_IRQHandler+0xee>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024ee:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_UART_IRQHandler+0x134>)
 80024f0:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024f2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80024f4:	f7fe f90c 	bl	8000710 <HAL_DMA_Abort_IT>
 80024f8:	b328      	cbz	r0, 8002546 <HAL_UART_IRQHandler+0x122>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80024fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80024fe:	4798      	blx	r3
 8002500:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002502:	4620      	mov	r0, r4
 8002504:	f7ff ff4a 	bl	800239c <UART_Receive_IT>
      return;
 8002508:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff ff46 	bl	800239c <UART_Receive_IT>
 8002510:	e7d6      	b.n	80024c0 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002512:	4620      	mov	r0, r4
 8002514:	f7ff ff84 	bl	8002420 <HAL_UART_ErrorCallback>
 8002518:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 800251a:	4620      	mov	r0, r4
 800251c:	f7ff ff80 	bl	8002420 <HAL_UART_ErrorCallback>
 8002520:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002522:	4620      	mov	r0, r4
 8002524:	f7ff ff7c 	bl	8002420 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002528:	2300      	movs	r3, #0
 800252a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800252c:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800252e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002532:	d002      	beq.n	800253a <HAL_UART_IRQHandler+0x116>
 8002534:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002538:	d106      	bne.n	8002548 <HAL_UART_IRQHandler+0x124>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800253a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800253e:	d002      	beq.n	8002546 <HAL_UART_IRQHandler+0x122>
 8002540:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002544:	d104      	bne.n	8002550 <HAL_UART_IRQHandler+0x12c>
 8002546:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fe7c 	bl	8002246 <UART_Transmit_IT>
    return;
 800254e:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff ff15 	bl	8002380 <UART_EndTransmit_IT>
    return;
 8002556:	e7f6      	b.n	8002546 <HAL_UART_IRQHandler+0x122>
 8002558:	0800255d 	.word	0x0800255d

0800255c <UART_DMAAbortOnError>:
{
 800255c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800255e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002566:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800256a:	f7ff ff59 	bl	8002420 <HAL_UART_ErrorCallback>
 800256e:	bd08      	pop	{r3, pc}

08002570 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002570:	b538      	push	{r3, r4, r5, lr}
 8002572:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002574:	6883      	ldr	r3, [r0, #8]
 8002576:	6902      	ldr	r2, [r0, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	6942      	ldr	r2, [r0, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	69c2      	ldr	r2, [r0, #28]
 8002580:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002582:	6801      	ldr	r1, [r0, #0]
 8002584:	6808      	ldr	r0, [r1, #0]
 8002586:	4aa0      	ldr	r2, [pc, #640]	; (8002808 <UART_SetConfig+0x298>)
 8002588:	4002      	ands	r2, r0
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	6853      	ldr	r3, [r2, #4]
 8002592:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002596:	68e1      	ldr	r1, [r4, #12]
 8002598:	430b      	orrs	r3, r1
 800259a:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800259c:	69a3      	ldr	r3, [r4, #24]
 800259e:	6a22      	ldr	r2, [r4, #32]
 80025a0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80025a2:	6821      	ldr	r1, [r4, #0]
 80025a4:	688a      	ldr	r2, [r1, #8]
 80025a6:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025ae:	6825      	ldr	r5, [r4, #0]
 80025b0:	4b96      	ldr	r3, [pc, #600]	; (800280c <UART_SetConfig+0x29c>)
 80025b2:	429d      	cmp	r5, r3
 80025b4:	d02b      	beq.n	800260e <UART_SetConfig+0x9e>
 80025b6:	4b96      	ldr	r3, [pc, #600]	; (8002810 <UART_SetConfig+0x2a0>)
 80025b8:	429d      	cmp	r5, r3
 80025ba:	d03c      	beq.n	8002636 <UART_SetConfig+0xc6>
 80025bc:	4b95      	ldr	r3, [pc, #596]	; (8002814 <UART_SetConfig+0x2a4>)
 80025be:	429d      	cmp	r5, r3
 80025c0:	d052      	beq.n	8002668 <UART_SetConfig+0xf8>
 80025c2:	4b95      	ldr	r3, [pc, #596]	; (8002818 <UART_SetConfig+0x2a8>)
 80025c4:	429d      	cmp	r5, r3
 80025c6:	d067      	beq.n	8002698 <UART_SetConfig+0x128>
 80025c8:	4b94      	ldr	r3, [pc, #592]	; (800281c <UART_SetConfig+0x2ac>)
 80025ca:	429d      	cmp	r5, r3
 80025cc:	d07c      	beq.n	80026c8 <UART_SetConfig+0x158>
 80025ce:	4b94      	ldr	r3, [pc, #592]	; (8002820 <UART_SetConfig+0x2b0>)
 80025d0:	429d      	cmp	r5, r3
 80025d2:	f000 8094 	beq.w	80026fe <UART_SetConfig+0x18e>
 80025d6:	4b93      	ldr	r3, [pc, #588]	; (8002824 <UART_SetConfig+0x2b4>)
 80025d8:	429d      	cmp	r5, r3
 80025da:	f000 80ab 	beq.w	8002734 <UART_SetConfig+0x1c4>
 80025de:	4b92      	ldr	r3, [pc, #584]	; (8002828 <UART_SetConfig+0x2b8>)
 80025e0:	429d      	cmp	r5, r3
 80025e2:	f000 80c2 	beq.w	800276a <UART_SetConfig+0x1fa>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80025e6:	2310      	movs	r3, #16

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e8:	69e2      	ldr	r2, [r4, #28]
 80025ea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80025ee:	f000 80db 	beq.w	80027a8 <UART_SetConfig+0x238>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	f200 8168 	bhi.w	80028c8 <UART_SetConfig+0x358>
 80025f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80025fc:	013c0131 	.word	0x013c0131
 8002600:	01660147 	.word	0x01660147
 8002604:	01660151 	.word	0x01660151
 8002608:	01660166 	.word	0x01660166
 800260c:	015c      	.short	0x015c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800260e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b03      	cmp	r3, #3
 800261c:	d803      	bhi.n	8002626 <UART_SetConfig+0xb6>
 800261e:	e8df f003 	tbb	[pc, r3]
 8002622:	06bf      	.short	0x06bf
 8002624:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002626:	2310      	movs	r3, #16
 8002628:	e7de      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800262a:	2302      	movs	r3, #2
 800262c:	e7dc      	b.n	80025e8 <UART_SetConfig+0x78>
 800262e:	2304      	movs	r3, #4
 8002630:	e7da      	b.n	80025e8 <UART_SetConfig+0x78>
 8002632:	2308      	movs	r3, #8
 8002634:	e7d8      	b.n	80025e8 <UART_SetConfig+0x78>
 8002636:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d808      	bhi.n	8002658 <UART_SetConfig+0xe8>
 8002646:	e8df f003 	tbb	[pc, r3]
 800264a:	07ad      	.short	0x07ad
 800264c:	070b0707 	.word	0x070b0707
 8002650:	07090707 	.word	0x07090707
 8002654:	0707      	.short	0x0707
 8002656:	0d          	.byte	0x0d
 8002657:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002658:	2310      	movs	r3, #16
 800265a:	e7c5      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800265c:	2302      	movs	r3, #2
 800265e:	e7c3      	b.n	80025e8 <UART_SetConfig+0x78>
 8002660:	2304      	movs	r3, #4
 8002662:	e7c1      	b.n	80025e8 <UART_SetConfig+0x78>
 8002664:	2308      	movs	r3, #8
 8002666:	e7bf      	b.n	80025e8 <UART_SetConfig+0x78>
 8002668:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002674:	2b10      	cmp	r3, #16
 8002676:	d00d      	beq.n	8002694 <UART_SetConfig+0x124>
 8002678:	d905      	bls.n	8002686 <UART_SetConfig+0x116>
 800267a:	2b20      	cmp	r3, #32
 800267c:	d008      	beq.n	8002690 <UART_SetConfig+0x120>
 800267e:	2b30      	cmp	r3, #48	; 0x30
 8002680:	d104      	bne.n	800268c <UART_SetConfig+0x11c>
 8002682:	2308      	movs	r3, #8
 8002684:	e7b0      	b.n	80025e8 <UART_SetConfig+0x78>
 8002686:	b90b      	cbnz	r3, 800268c <UART_SetConfig+0x11c>
 8002688:	2300      	movs	r3, #0
 800268a:	e7ad      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800268c:	2310      	movs	r3, #16
 800268e:	e7ab      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002690:	2302      	movs	r3, #2
 8002692:	e7a9      	b.n	80025e8 <UART_SetConfig+0x78>
 8002694:	2304      	movs	r3, #4
 8002696:	e7a7      	b.n	80025e8 <UART_SetConfig+0x78>
 8002698:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d00d      	beq.n	80026c4 <UART_SetConfig+0x154>
 80026a8:	d905      	bls.n	80026b6 <UART_SetConfig+0x146>
 80026aa:	2b80      	cmp	r3, #128	; 0x80
 80026ac:	d008      	beq.n	80026c0 <UART_SetConfig+0x150>
 80026ae:	2bc0      	cmp	r3, #192	; 0xc0
 80026b0:	d104      	bne.n	80026bc <UART_SetConfig+0x14c>
 80026b2:	2308      	movs	r3, #8
 80026b4:	e798      	b.n	80025e8 <UART_SetConfig+0x78>
 80026b6:	b90b      	cbnz	r3, 80026bc <UART_SetConfig+0x14c>
 80026b8:	2300      	movs	r3, #0
 80026ba:	e795      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80026bc:	2310      	movs	r3, #16
 80026be:	e793      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026c0:	2302      	movs	r3, #2
 80026c2:	e791      	b.n	80025e8 <UART_SetConfig+0x78>
 80026c4:	2304      	movs	r3, #4
 80026c6:	e78f      	b.n	80025e8 <UART_SetConfig+0x78>
 80026c8:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d8:	d00f      	beq.n	80026fa <UART_SetConfig+0x18a>
 80026da:	d907      	bls.n	80026ec <UART_SetConfig+0x17c>
 80026dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e0:	d009      	beq.n	80026f6 <UART_SetConfig+0x186>
 80026e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026e6:	d104      	bne.n	80026f2 <UART_SetConfig+0x182>
 80026e8:	2308      	movs	r3, #8
 80026ea:	e77d      	b.n	80025e8 <UART_SetConfig+0x78>
 80026ec:	b90b      	cbnz	r3, 80026f2 <UART_SetConfig+0x182>
 80026ee:	2300      	movs	r3, #0
 80026f0:	e77a      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80026f2:	2310      	movs	r3, #16
 80026f4:	e778      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026f6:	2302      	movs	r3, #2
 80026f8:	e776      	b.n	80025e8 <UART_SetConfig+0x78>
 80026fa:	2304      	movs	r3, #4
 80026fc:	e774      	b.n	80025e8 <UART_SetConfig+0x78>
 80026fe:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d00f      	beq.n	8002730 <UART_SetConfig+0x1c0>
 8002710:	d907      	bls.n	8002722 <UART_SetConfig+0x1b2>
 8002712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002716:	d009      	beq.n	800272c <UART_SetConfig+0x1bc>
 8002718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800271c:	d104      	bne.n	8002728 <UART_SetConfig+0x1b8>
 800271e:	2308      	movs	r3, #8
 8002720:	e762      	b.n	80025e8 <UART_SetConfig+0x78>
 8002722:	b90b      	cbnz	r3, 8002728 <UART_SetConfig+0x1b8>
 8002724:	2301      	movs	r3, #1
 8002726:	e75f      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002728:	2310      	movs	r3, #16
 800272a:	e75d      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800272c:	2302      	movs	r3, #2
 800272e:	e75b      	b.n	80025e8 <UART_SetConfig+0x78>
 8002730:	2304      	movs	r3, #4
 8002732:	e759      	b.n	80025e8 <UART_SetConfig+0x78>
 8002734:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002744:	d00f      	beq.n	8002766 <UART_SetConfig+0x1f6>
 8002746:	d907      	bls.n	8002758 <UART_SetConfig+0x1e8>
 8002748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800274c:	d009      	beq.n	8002762 <UART_SetConfig+0x1f2>
 800274e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002752:	d104      	bne.n	800275e <UART_SetConfig+0x1ee>
 8002754:	2308      	movs	r3, #8
 8002756:	e747      	b.n	80025e8 <UART_SetConfig+0x78>
 8002758:	b90b      	cbnz	r3, 800275e <UART_SetConfig+0x1ee>
 800275a:	2300      	movs	r3, #0
 800275c:	e744      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800275e:	2310      	movs	r3, #16
 8002760:	e742      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002762:	2302      	movs	r3, #2
 8002764:	e740      	b.n	80025e8 <UART_SetConfig+0x78>
 8002766:	2304      	movs	r3, #4
 8002768:	e73e      	b.n	80025e8 <UART_SetConfig+0x78>
 800276a:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800277a:	d00f      	beq.n	800279c <UART_SetConfig+0x22c>
 800277c:	d907      	bls.n	800278e <UART_SetConfig+0x21e>
 800277e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002782:	d009      	beq.n	8002798 <UART_SetConfig+0x228>
 8002784:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002788:	d104      	bne.n	8002794 <UART_SetConfig+0x224>
 800278a:	2308      	movs	r3, #8
 800278c:	e72c      	b.n	80025e8 <UART_SetConfig+0x78>
 800278e:	b90b      	cbnz	r3, 8002794 <UART_SetConfig+0x224>
 8002790:	2300      	movs	r3, #0
 8002792:	e729      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002794:	2310      	movs	r3, #16
 8002796:	e727      	b.n	80025e8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002798:	2302      	movs	r3, #2
 800279a:	e725      	b.n	80025e8 <UART_SetConfig+0x78>
 800279c:	2304      	movs	r3, #4
 800279e:	e723      	b.n	80025e8 <UART_SetConfig+0x78>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e721      	b.n	80025e8 <UART_SetConfig+0x78>
 80027a4:	2300      	movs	r3, #0
 80027a6:	e71f      	b.n	80025e8 <UART_SetConfig+0x78>
    switch (clocksource)
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d855      	bhi.n	8002858 <UART_SetConfig+0x2e8>
 80027ac:	e8df f003 	tbb	[pc, r3]
 80027b0:	54221705 	.word	0x54221705
 80027b4:	54545440 	.word	0x54545440
 80027b8:	4b          	.byte	0x4b
 80027b9:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027ba:	f7ff f869 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 80027be:	6862      	ldr	r2, [r4, #4]
 80027c0:	0853      	lsrs	r3, r2, #1
 80027c2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80027c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80027ca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80027cc:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80027ce:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027d2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80027d6:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80027d8:	6822      	ldr	r2, [r4, #0]
 80027da:	60d3      	str	r3, [r2, #12]
 80027dc:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027de:	f7ff f867 	bl	80018b0 <HAL_RCC_GetPCLK2Freq>
 80027e2:	6862      	ldr	r2, [r4, #4]
 80027e4:	0853      	lsrs	r3, r2, #1
 80027e6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80027ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80027ee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f0:	2000      	movs	r0, #0
      break;
 80027f2:	e7ec      	b.n	80027ce <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027f4:	6862      	ldr	r2, [r4, #4]
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <UART_SetConfig+0x2bc>)
 80027f8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80027fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002800:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002802:	2000      	movs	r0, #0
      break;
 8002804:	e7e3      	b.n	80027ce <UART_SetConfig+0x25e>
 8002806:	bf00      	nop
 8002808:	efff69f3 	.word	0xefff69f3
 800280c:	40011000 	.word	0x40011000
 8002810:	40004400 	.word	0x40004400
 8002814:	40004800 	.word	0x40004800
 8002818:	40004c00 	.word	0x40004c00
 800281c:	40005000 	.word	0x40005000
 8002820:	40011400 	.word	0x40011400
 8002824:	40007800 	.word	0x40007800
 8002828:	40007c00 	.word	0x40007c00
 800282c:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002830:	f7fe ff0c 	bl	800164c <HAL_RCC_GetSysClockFreq>
 8002834:	6862      	ldr	r2, [r4, #4]
 8002836:	0853      	lsrs	r3, r2, #1
 8002838:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800283c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002840:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002842:	2000      	movs	r0, #0
      break;
 8002844:	e7c3      	b.n	80027ce <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002846:	6862      	ldr	r2, [r4, #4]
 8002848:	0853      	lsrs	r3, r2, #1
 800284a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800284e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002852:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002854:	2000      	movs	r0, #0
      break;
 8002856:	e7ba      	b.n	80027ce <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8002858:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800285a:	2300      	movs	r3, #0
 800285c:	e7b7      	b.n	80027ce <UART_SetConfig+0x25e>
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800285e:	f7ff f817 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 8002862:	6863      	ldr	r3, [r4, #4]
 8002864:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002868:	fbb0 f0f3 	udiv	r0, r0, r3
 800286c:	b280      	uxth	r0, r0
 800286e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002870:	2000      	movs	r0, #0
      break;
 8002872:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002874:	f7ff f81c 	bl	80018b0 <HAL_RCC_GetPCLK2Freq>
 8002878:	6863      	ldr	r3, [r4, #4]
 800287a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800287e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002882:	b280      	uxth	r0, r0
 8002884:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002886:	2000      	movs	r0, #0
      break;
 8002888:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800288a:	6862      	ldr	r2, [r4, #4]
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <UART_SetConfig+0x35c>)
 800288e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002892:	fbb3 f3f2 	udiv	r3, r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800289a:	2000      	movs	r0, #0
      break;
 800289c:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800289e:	f7fe fed5 	bl	800164c <HAL_RCC_GetSysClockFreq>
 80028a2:	6863      	ldr	r3, [r4, #4]
 80028a4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80028a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80028ac:	b280      	uxth	r0, r0
 80028ae:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80028b0:	2000      	movs	r0, #0
      break;
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028b4:	6862      	ldr	r2, [r4, #4]
 80028b6:	0853      	lsrs	r3, r2, #1
 80028b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80028c4:	2000      	movs	r0, #0
      break;
 80028c6:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80028c8:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80028ca:	bd38      	pop	{r3, r4, r5, pc}
 80028cc:	00f42400 	.word	0x00f42400

080028d0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028d2:	f013 0f01 	tst.w	r3, #1
 80028d6:	d006      	beq.n	80028e6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028d8:	6802      	ldr	r2, [r0, #0]
 80028da:	6853      	ldr	r3, [r2, #4]
 80028dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80028e0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80028e2:	430b      	orrs	r3, r1
 80028e4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028e8:	f013 0f02 	tst.w	r3, #2
 80028ec:	d006      	beq.n	80028fc <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028ee:	6802      	ldr	r2, [r0, #0]
 80028f0:	6853      	ldr	r3, [r2, #4]
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028fe:	f013 0f04 	tst.w	r3, #4
 8002902:	d006      	beq.n	8002912 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002904:	6802      	ldr	r2, [r0, #0]
 8002906:	6853      	ldr	r3, [r2, #4]
 8002908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800290e:	430b      	orrs	r3, r1
 8002910:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002912:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002914:	f013 0f08 	tst.w	r3, #8
 8002918:	d006      	beq.n	8002928 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800291a:	6802      	ldr	r2, [r0, #0]
 800291c:	6853      	ldr	r3, [r2, #4]
 800291e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002922:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002924:	430b      	orrs	r3, r1
 8002926:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002928:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800292a:	f013 0f10 	tst.w	r3, #16
 800292e:	d006      	beq.n	800293e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002930:	6802      	ldr	r2, [r0, #0]
 8002932:	6893      	ldr	r3, [r2, #8]
 8002934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002938:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800293a:	430b      	orrs	r3, r1
 800293c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800293e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002940:	f013 0f20 	tst.w	r3, #32
 8002944:	d006      	beq.n	8002954 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002946:	6802      	ldr	r2, [r0, #0]
 8002948:	6893      	ldr	r3, [r2, #8]
 800294a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800294e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002950:	430b      	orrs	r3, r1
 8002952:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002954:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002956:	f013 0f40 	tst.w	r3, #64	; 0x40
 800295a:	d00a      	beq.n	8002972 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800295c:	6802      	ldr	r2, [r0, #0]
 800295e:	6853      	ldr	r3, [r2, #4]
 8002960:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002964:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002966:	430b      	orrs	r3, r1
 8002968:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800296a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800296c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002970:	d00b      	beq.n	800298a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002972:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002974:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002978:	d006      	beq.n	8002988 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800297a:	6802      	ldr	r2, [r0, #0]
 800297c:	6853      	ldr	r3, [r2, #4]
 800297e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002982:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002984:	430b      	orrs	r3, r1
 8002986:	6053      	str	r3, [r2, #4]
 8002988:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800298a:	6802      	ldr	r2, [r0, #0]
 800298c:	6853      	ldr	r3, [r2, #4]
 800298e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002992:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002994:	430b      	orrs	r3, r1
 8002996:	6053      	str	r3, [r2, #4]
 8002998:	e7eb      	b.n	8002972 <UART_AdvFeatureConfig+0xa2>

0800299a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800299a:	b510      	push	{r4, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80029a4:	f7fd fe4c 	bl	8000640 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	f012 0f08 	tst.w	r2, #8
 80029b0:	d109      	bne.n	80029c6 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80029b2:	2320      	movs	r3, #32
 80029b4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 80029b8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029bc:	2000      	movs	r0, #0
 80029be:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 80029c2:	b002      	add	sp, #8
 80029c4:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4603      	mov	r3, r0
 80029ce:	2200      	movs	r2, #0
 80029d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff fca1 	bl	800231c <UART_WaitOnFlagUntilTimeout>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d0e9      	beq.n	80029b2 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80029de:	2003      	movs	r0, #3
 80029e0:	e7ef      	b.n	80029c2 <UART_CheckIdleState+0x28>

080029e2 <HAL_UART_Init>:
  if(huart == NULL)
 80029e2:	b378      	cbz	r0, 8002a44 <HAL_UART_Init+0x62>
{
 80029e4:	b510      	push	{r4, lr}
 80029e6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80029e8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80029ec:	b30b      	cbz	r3, 8002a32 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80029ee:	2324      	movs	r3, #36	; 0x24
 80029f0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80029f4:	6822      	ldr	r2, [r4, #0]
 80029f6:	6813      	ldr	r3, [r2, #0]
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7ff fdb6 	bl	8002570 <UART_SetConfig>
 8002a04:	2801      	cmp	r0, #1
 8002a06:	d01f      	beq.n	8002a48 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a0a:	b9bb      	cbnz	r3, 8002a3c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	6853      	ldr	r3, [r2, #4]
 8002a10:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a14:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	6893      	ldr	r3, [r2, #8]
 8002a1a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002a1e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	6813      	ldr	r3, [r2, #0]
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7ff ffb5 	bl	800299a <UART_CheckIdleState>
 8002a30:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002a32:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002a36:	f00b fef1 	bl	800e81c <HAL_UART_MspInit>
 8002a3a:	e7d8      	b.n	80029ee <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff ff47 	bl	80028d0 <UART_AdvFeatureConfig>
 8002a42:	e7e3      	b.n	8002a0c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
 8002a46:	4770      	bx	lr
}
 8002a48:	bd10      	pop	{r4, pc}

08002a4a <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002a4a:	2884      	cmp	r0, #132	; 0x84
 8002a4c:	d001      	beq.n	8002a52 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8002a4e:	3003      	adds	r0, #3
 8002a50:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a52:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8002a54:	4770      	bx	lr

08002a56 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a56:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8002a5a:	3000      	adds	r0, #0
 8002a5c:	bf18      	it	ne
 8002a5e:	2001      	movne	r0, #1
 8002a60:	4770      	bx	lr

08002a62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a62:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002a64:	f001 f852 	bl	8003b0c <vTaskStartScheduler>
  
  return osOK;
}
 8002a68:	2000      	movs	r0, #0
 8002a6a:	bd08      	pop	{r3, pc}

08002a6c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002a6c:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8002a6e:	f7ff fff2 	bl	8002a56 <inHandlerMode>
 8002a72:	b910      	cbnz	r0, 8002a7a <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8002a74:	f001 f894 	bl	8003ba0 <xTaskGetTickCount>
  }
}
 8002a78:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 8002a7a:	f001 f897 	bl	8003bac <xTaskGetTickCountFromISR>
 8002a7e:	bd08      	pop	{r3, pc}

08002a80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a82:	b085      	sub	sp, #20
 8002a84:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a86:	6844      	ldr	r4, [r0, #4]
 8002a88:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a8a:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a8c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002a90:	f7ff ffdb 	bl	8002a4a <makeFreeRtosPriority>
 8002a94:	ab03      	add	r3, sp, #12
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	9000      	str	r0, [sp, #0]
 8002a9a:	463b      	mov	r3, r7
 8002a9c:	b2b2      	uxth	r2, r6
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f000 ff8f 	bl	80039c4 <xTaskCreate>
 8002aa6:	2801      	cmp	r0, #1
 8002aa8:	d102      	bne.n	8002ab0 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002aaa:	9803      	ldr	r0, [sp, #12]
}
 8002aac:	b005      	add	sp, #20
 8002aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	e7fb      	b.n	8002aac <osThreadCreate+0x2c>

08002ab4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ab4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b900      	cbnz	r0, 8002abc <osDelay+0x8>
 8002aba:	2301      	movs	r3, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 f98f 	bl	8003de0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	bd08      	pop	{r3, pc}

08002ac6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002ac6:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f000 fbcb 	bl	8003264 <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8002ace:	bd08      	pop	{r3, pc}

08002ad0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002ad0:	b530      	push	{r4, r5, lr}
 8002ad2:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8002ad8:	b360      	cbz	r0, 8002b34 <osMutexWait+0x64>
 8002ada:	460c      	mov	r4, r1
 8002adc:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002ade:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002ae2:	d00d      	beq.n	8002b00 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002ae4:	b901      	cbnz	r1, 8002ae8 <osMutexWait+0x18>
  ticks = 0;
 8002ae6:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002ae8:	f7ff ffb5 	bl	8002a56 <inHandlerMode>
 8002aec:	b1b8      	cbz	r0, 8002b1e <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002aee:	aa01      	add	r2, sp, #4
 8002af0:	2100      	movs	r1, #0
 8002af2:	4628      	mov	r0, r5
 8002af4:	f000 fd7c 	bl	80035f0 <xQueueReceiveFromISR>
 8002af8:	2801      	cmp	r0, #1
 8002afa:	d004      	beq.n	8002b06 <osMutexWait+0x36>
      return osErrorOS;
 8002afc:	20ff      	movs	r0, #255	; 0xff
 8002afe:	e017      	b.n	8002b30 <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 8002b00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b04:	e7f0      	b.n	8002ae8 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002b06:	9b01      	ldr	r3, [sp, #4]
 8002b08:	b1b3      	cbz	r3, 8002b38 <osMutexWait+0x68>
 8002b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <osMutexWait+0x70>)
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	e008      	b.n	8002b30 <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	4622      	mov	r2, r4
 8002b22:	4619      	mov	r1, r3
 8002b24:	4628      	mov	r0, r5
 8002b26:	f000 fc85 	bl	8003434 <xQueueGenericReceive>
 8002b2a:	2801      	cmp	r0, #1
 8002b2c:	d006      	beq.n	8002b3c <osMutexWait+0x6c>
    return osErrorOS;
 8002b2e:	20ff      	movs	r0, #255	; 0xff
}
 8002b30:	b003      	add	sp, #12
 8002b32:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8002b34:	2080      	movs	r0, #128	; 0x80
 8002b36:	e7fb      	b.n	8002b30 <osMutexWait+0x60>
  return osOK;
 8002b38:	2000      	movs	r0, #0
 8002b3a:	e7f9      	b.n	8002b30 <osMutexWait+0x60>
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e7f7      	b.n	8002b30 <osMutexWait+0x60>
 8002b40:	e000ed04 	.word	0xe000ed04

08002b44 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002b44:	b510      	push	{r4, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8002b4e:	f7ff ff82 	bl	8002a56 <inHandlerMode>
 8002b52:	b1a0      	cbz	r0, 8002b7e <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002b54:	a901      	add	r1, sp, #4
 8002b56:	4620      	mov	r0, r4
 8002b58:	f000 fc06 	bl	8003368 <xQueueGiveFromISR>
 8002b5c:	2801      	cmp	r0, #1
 8002b5e:	d002      	beq.n	8002b66 <osMutexRelease+0x22>
      return osErrorOS;
 8002b60:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8002b62:	b002      	add	sp, #8
 8002b64:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002b66:	9b01      	ldr	r3, [sp, #4]
 8002b68:	b1ab      	cbz	r3, 8002b96 <osMutexRelease+0x52>
 8002b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <osMutexRelease+0x58>)
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	e7f1      	b.n	8002b62 <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002b7e:	2300      	movs	r3, #0
 8002b80:	461a      	mov	r2, r3
 8002b82:	4619      	mov	r1, r3
 8002b84:	4620      	mov	r0, r4
 8002b86:	f000 fa95 	bl	80030b4 <xQueueGenericSend>
 8002b8a:	2801      	cmp	r0, #1
 8002b8c:	d001      	beq.n	8002b92 <osMutexRelease+0x4e>
    result = osErrorOS;
 8002b8e:	20ff      	movs	r0, #255	; 0xff
 8002b90:	e7e7      	b.n	8002b62 <osMutexRelease+0x1e>
  osStatus result = osOK;
 8002b92:	2000      	movs	r0, #0
 8002b94:	e7e5      	b.n	8002b62 <osMutexRelease+0x1e>
 8002b96:	2000      	movs	r0, #0
 8002b98:	e7e3      	b.n	8002b62 <osMutexRelease+0x1e>
 8002b9a:	bf00      	nop
 8002b9c:	e000ed04 	.word	0xe000ed04

08002ba0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002ba0:	b510      	push	{r4, lr}
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002ba2:	2901      	cmp	r1, #1
 8002ba4:	d10d      	bne.n	8002bc2 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2001      	movs	r0, #1
 8002bac:	f000 fa5c 	bl	8003068 <xQueueGenericCreate>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	b120      	cbz	r0, 8002bbe <osSemaphoreCreate+0x1e>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f000 fa7b 	bl	80030b4 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	bd10      	pop	{r4, pc}
    return NULL;
 8002bc2:	2400      	movs	r4, #0
 8002bc4:	e7fb      	b.n	8002bbe <osSemaphoreCreate+0x1e>
	...

08002bc8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002bc8:	b530      	push	{r4, r5, lr}
 8002bca:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8002bd0:	b360      	cbz	r0, 8002c2c <osSemaphoreWait+0x64>
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002bd6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002bda:	d00d      	beq.n	8002bf8 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002bdc:	b901      	cbnz	r1, 8002be0 <osSemaphoreWait+0x18>
  ticks = 0;
 8002bde:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002be0:	f7ff ff39 	bl	8002a56 <inHandlerMode>
 8002be4:	b1b8      	cbz	r0, 8002c16 <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002be6:	aa01      	add	r2, sp, #4
 8002be8:	2100      	movs	r1, #0
 8002bea:	4628      	mov	r0, r5
 8002bec:	f000 fd00 	bl	80035f0 <xQueueReceiveFromISR>
 8002bf0:	2801      	cmp	r0, #1
 8002bf2:	d004      	beq.n	8002bfe <osSemaphoreWait+0x36>
      return osErrorOS;
 8002bf4:	20ff      	movs	r0, #255	; 0xff
 8002bf6:	e017      	b.n	8002c28 <osSemaphoreWait+0x60>
    ticks = portMAX_DELAY;
 8002bf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002bfc:	e7f0      	b.n	8002be0 <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002bfe:	9b01      	ldr	r3, [sp, #4]
 8002c00:	b1b3      	cbz	r3, 8002c30 <osSemaphoreWait+0x68>
 8002c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <osSemaphoreWait+0x70>)
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8002c12:	2000      	movs	r0, #0
 8002c14:	e008      	b.n	8002c28 <osSemaphoreWait+0x60>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002c16:	2300      	movs	r3, #0
 8002c18:	4622      	mov	r2, r4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f000 fc09 	bl	8003434 <xQueueGenericReceive>
 8002c22:	2801      	cmp	r0, #1
 8002c24:	d006      	beq.n	8002c34 <osSemaphoreWait+0x6c>
    return osErrorOS;
 8002c26:	20ff      	movs	r0, #255	; 0xff
}
 8002c28:	b003      	add	sp, #12
 8002c2a:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8002c2c:	2080      	movs	r0, #128	; 0x80
 8002c2e:	e7fb      	b.n	8002c28 <osSemaphoreWait+0x60>
  return osOK;
 8002c30:	2000      	movs	r0, #0
 8002c32:	e7f9      	b.n	8002c28 <osSemaphoreWait+0x60>
 8002c34:	2000      	movs	r0, #0
 8002c36:	e7f7      	b.n	8002c28 <osSemaphoreWait+0x60>
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8002c46:	f7ff ff06 	bl	8002a56 <inHandlerMode>
 8002c4a:	b1a0      	cbz	r0, 8002c76 <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002c4c:	a901      	add	r1, sp, #4
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f000 fb8a 	bl	8003368 <xQueueGiveFromISR>
 8002c54:	2801      	cmp	r0, #1
 8002c56:	d002      	beq.n	8002c5e <osSemaphoreRelease+0x22>
      return osErrorOS;
 8002c58:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002c5a:	b002      	add	sp, #8
 8002c5c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002c5e:	9b01      	ldr	r3, [sp, #4]
 8002c60:	b1ab      	cbz	r3, 8002c8e <osSemaphoreRelease+0x52>
 8002c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <osSemaphoreRelease+0x58>)
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002c72:	2000      	movs	r0, #0
 8002c74:	e7f1      	b.n	8002c5a <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002c76:	2300      	movs	r3, #0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f000 fa19 	bl	80030b4 <xQueueGenericSend>
 8002c82:	2801      	cmp	r0, #1
 8002c84:	d001      	beq.n	8002c8a <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8002c86:	20ff      	movs	r0, #255	; 0xff
 8002c88:	e7e7      	b.n	8002c5a <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	e7e5      	b.n	8002c5a <osSemaphoreRelease+0x1e>
 8002c8e:	2000      	movs	r0, #0
 8002c90:	e7e3      	b.n	8002c5a <osSemaphoreRelease+0x1e>
 8002c92:	bf00      	nop
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8002c9c:	f7ff fedb 	bl	8002a56 <inHandlerMode>
 8002ca0:	b108      	cbz	r0, 8002ca6 <osSemaphoreDelete+0xe>
    return osErrorISR;
 8002ca2:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 8002ca4:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f000 fd3c 	bl	8003724 <vQueueDelete>
  return osOK; 
 8002cac:	2000      	movs	r0, #0
 8002cae:	bd10      	pop	{r4, pc}

08002cb0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002cb0:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	6841      	ldr	r1, [r0, #4]
 8002cb6:	6800      	ldr	r0, [r0, #0]
 8002cb8:	f000 f9d6 	bl	8003068 <xQueueGenericCreate>
#endif
}
 8002cbc:	bd08      	pop	{r3, pc}
	...

08002cc0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002cc0:	b530      	push	{r4, r5, lr}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8002ccc:	4615      	mov	r5, r2
 8002cce:	b902      	cbnz	r2, 8002cd2 <osMessagePut+0x12>
    ticks = 1;
 8002cd0:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8002cd2:	f7ff fec0 	bl	8002a56 <inHandlerMode>
 8002cd6:	b1a8      	cbz	r0, 8002d04 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002cd8:	2300      	movs	r3, #0
 8002cda:	aa03      	add	r2, sp, #12
 8002cdc:	a901      	add	r1, sp, #4
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f000 facb 	bl	800327a <xQueueGenericSendFromISR>
 8002ce4:	2801      	cmp	r0, #1
 8002ce6:	d001      	beq.n	8002cec <osMessagePut+0x2c>
      return osErrorOS;
 8002ce8:	20ff      	movs	r0, #255	; 0xff
 8002cea:	e014      	b.n	8002d16 <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002cec:	9b03      	ldr	r3, [sp, #12]
 8002cee:	b1a3      	cbz	r3, 8002d1a <osMessagePut+0x5a>
 8002cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <osMessagePut+0x64>)
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8002d00:	2000      	movs	r0, #0
 8002d02:	e008      	b.n	8002d16 <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002d04:	2300      	movs	r3, #0
 8002d06:	462a      	mov	r2, r5
 8002d08:	a901      	add	r1, sp, #4
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f000 f9d2 	bl	80030b4 <xQueueGenericSend>
 8002d10:	2801      	cmp	r0, #1
 8002d12:	d004      	beq.n	8002d1e <osMessagePut+0x5e>
      return osErrorOS;
 8002d14:	20ff      	movs	r0, #255	; 0xff
}
 8002d16:	b005      	add	sp, #20
 8002d18:	bd30      	pop	{r4, r5, pc}
  return osOK;
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	e7fb      	b.n	8002d16 <osMessagePut+0x56>
 8002d1e:	2000      	movs	r0, #0
 8002d20:	e7f9      	b.n	8002d16 <osMessagePut+0x56>
 8002d22:	bf00      	nop
 8002d24:	e000ed04 	.word	0xe000ed04

08002d28 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002d2e:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8002d34:	b1f9      	cbz	r1, 8002d76 <osMessageGet+0x4e>
 8002d36:	460d      	mov	r5, r1
 8002d38:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002d3e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8002d42:	d021      	beq.n	8002d88 <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002d44:	b902      	cbnz	r2, 8002d48 <osMessageGet+0x20>
  ticks = 0;
 8002d46:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002d48:	f7ff fe85 	bl	8002a56 <inHandlerMode>
 8002d4c:	b310      	cbz	r0, 8002d94 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002d4e:	aa03      	add	r2, sp, #12
 8002d50:	a901      	add	r1, sp, #4
 8002d52:	4628      	mov	r0, r5
 8002d54:	f000 fc4c 	bl	80035f0 <xQueueReceiveFromISR>
 8002d58:	2801      	cmp	r0, #1
 8002d5a:	d018      	beq.n	8002d8e <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002d60:	9b03      	ldr	r3, [sp, #12]
 8002d62:	b313      	cbz	r3, 8002daa <osMessageGet+0x82>
 8002d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <osMessageGet+0x9c>)
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	e019      	b.n	8002daa <osMessageGet+0x82>
    event.status = osErrorParameter;
 8002d76:	ab04      	add	r3, sp, #16
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8002d7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d86:	e014      	b.n	8002db2 <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 8002d88:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002d8c:	e7dc      	b.n	8002d48 <osMessageGet+0x20>
      event.status = osEventMessage;
 8002d8e:	2310      	movs	r3, #16
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	e7e5      	b.n	8002d60 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002d94:	2300      	movs	r3, #0
 8002d96:	4632      	mov	r2, r6
 8002d98:	a901      	add	r1, sp, #4
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f000 fb4a 	bl	8003434 <xQueueGenericReceive>
 8002da0:	2801      	cmp	r0, #1
 8002da2:	d009      	beq.n	8002db8 <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002da4:	b95e      	cbnz	r6, 8002dbe <osMessageGet+0x96>
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8002daa:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 8002dae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002db2:	4620      	mov	r0, r4
 8002db4:	b004      	add	sp, #16
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8002db8:	2310      	movs	r3, #16
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	e7f5      	b.n	8002daa <osMessageGet+0x82>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	e7f2      	b.n	8002da8 <osMessageGet+0x80>
 8002dc2:	bf00      	nop
 8002dc4:	e000ed04 	.word	0xe000ed04

08002dc8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8002dcc:	f7ff fe43 	bl	8002a56 <inHandlerMode>
 8002dd0:	b918      	cbnz	r0, 8002dda <osMessageWaiting+0x12>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f000 fc6d 	bl	80036b2 <uxQueueMessagesWaiting>
  }
}
 8002dd8:	bd10      	pop	{r4, pc}
    return uxQueueMessagesWaitingFromISR(queue_id);
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f000 fc7e 	bl	80036dc <uxQueueMessagesWaitingFromISR>
 8002de0:	bd10      	pop	{r4, pc}

08002de2 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8002de2:	b510      	push	{r4, lr}
 8002de4:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8002de6:	f7ff fe36 	bl	8002a56 <inHandlerMode>
 8002dea:	b108      	cbz	r0, 8002df0 <osMessageDelete+0xe>
    return osErrorISR;
 8002dec:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 8002dee:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 8002df0:	4620      	mov	r0, r4
 8002df2:	f000 fc97 	bl	8003724 <vQueueDelete>
  return osOK; 
 8002df6:	2000      	movs	r0, #0
 8002df8:	bd10      	pop	{r4, pc}

08002dfa <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dfa:	f100 0308 	add.w	r3, r0, #8
 8002dfe:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e04:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e06:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e08:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	6003      	str	r3, [r0, #0]
 8002e0e:	4770      	bx	lr

08002e10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	6103      	str	r3, [r0, #16]
 8002e14:	4770      	bx	lr

08002e16 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e16:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e18:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e22:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e24:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002e26:	6803      	ldr	r3, [r0, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	6003      	str	r3, [r0, #0]
 8002e2c:	4770      	bx	lr

08002e2e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e2e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e30:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e32:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002e36:	d002      	beq.n	8002e3e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e38:	f100 0208 	add.w	r2, r0, #8
 8002e3c:	e002      	b.n	8002e44 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e3e:	6902      	ldr	r2, [r0, #16]
 8002e40:	e004      	b.n	8002e4c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e42:	461a      	mov	r2, r3
 8002e44:	6853      	ldr	r3, [r2, #4]
 8002e46:	681c      	ldr	r4, [r3, #0]
 8002e48:	42a5      	cmp	r5, r4
 8002e4a:	d2fa      	bcs.n	8002e42 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e4c:	6853      	ldr	r3, [r2, #4]
 8002e4e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e50:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e52:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e54:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e56:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002e58:	6803      	ldr	r3, [r0, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	6003      	str	r3, [r0, #0]
}
 8002e5e:	bc30      	pop	{r4, r5}
 8002e60:	4770      	bx	lr

08002e62 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002e62:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e64:	6842      	ldr	r2, [r0, #4]
 8002e66:	6881      	ldr	r1, [r0, #8]
 8002e68:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e6a:	6882      	ldr	r2, [r0, #8]
 8002e6c:	6841      	ldr	r1, [r0, #4]
 8002e6e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4290      	cmp	r0, r2
 8002e74:	d005      	beq.n	8002e82 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e76:	2200      	movs	r2, #0
 8002e78:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	3801      	subs	r0, #1
 8002e7e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002e80:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e82:	6882      	ldr	r2, [r0, #8]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	e7f6      	b.n	8002e76 <uxListRemove+0x14>

08002e88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e88:	b510      	push	{r4, lr}
 8002e8a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e8c:	f001 fa5a 	bl	8004344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d004      	beq.n	8002ea2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8002e98:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8002e9a:	f001 fa79 	bl	8004390 <vPortExitCritical>

	return xReturn;
}
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002ea2:	2401      	movs	r4, #1
 8002ea4:	e7f9      	b.n	8002e9a <prvIsQueueFull+0x12>

08002ea6 <prvIsQueueEmpty>:
{
 8002ea6:	b510      	push	{r4, lr}
 8002ea8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002eaa:	f001 fa4b 	bl	8004344 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002eae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002eb0:	b123      	cbz	r3, 8002ebc <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8002eb2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002eb4:	f001 fa6c 	bl	8004390 <vPortExitCritical>
}
 8002eb8:	4620      	mov	r0, r4
 8002eba:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002ebc:	2401      	movs	r4, #1
 8002ebe:	e7f9      	b.n	8002eb4 <prvIsQueueEmpty+0xe>

08002ec0 <prvCopyDataToQueue>:
{
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ec6:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ec8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002eca:	b94a      	cbnz	r2, 8002ee0 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ecc:	6803      	ldr	r3, [r0, #0]
 8002ece:	bb53      	cbnz	r3, 8002f26 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002ed0:	6840      	ldr	r0, [r0, #4]
 8002ed2:	f001 f967 	bl	80041a4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002eda:	3501      	adds	r5, #1
 8002edc:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002ee0:	b96e      	cbnz	r6, 8002efe <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ee2:	6880      	ldr	r0, [r0, #8]
 8002ee4:	f00b ffb9 	bl	800ee5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ee8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002eea:	68a3      	ldr	r3, [r4, #8]
 8002eec:	4413      	add	r3, r2
 8002eee:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ef0:	6862      	ldr	r2, [r4, #4]
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d319      	bcc.n	8002f2a <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002efa:	2000      	movs	r0, #0
 8002efc:	e7ed      	b.n	8002eda <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002efe:	68c0      	ldr	r0, [r0, #12]
 8002f00:	f00b ffab 	bl	800ee5a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f06:	425b      	negs	r3, r3
 8002f08:	68e2      	ldr	r2, [r4, #12]
 8002f0a:	441a      	add	r2, r3
 8002f0c:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f0e:	6821      	ldr	r1, [r4, #0]
 8002f10:	428a      	cmp	r2, r1
 8002f12:	d202      	bcs.n	8002f1a <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002f14:	6862      	ldr	r2, [r4, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002f1a:	2e02      	cmp	r6, #2
 8002f1c:	d107      	bne.n	8002f2e <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f1e:	b145      	cbz	r5, 8002f32 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8002f20:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8002f22:	2000      	movs	r0, #0
 8002f24:	e7d9      	b.n	8002eda <prvCopyDataToQueue+0x1a>
 8002f26:	2000      	movs	r0, #0
 8002f28:	e7d7      	b.n	8002eda <prvCopyDataToQueue+0x1a>
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	e7d5      	b.n	8002eda <prvCopyDataToQueue+0x1a>
 8002f2e:	2000      	movs	r0, #0
 8002f30:	e7d3      	b.n	8002eda <prvCopyDataToQueue+0x1a>
 8002f32:	2000      	movs	r0, #0
 8002f34:	e7d1      	b.n	8002eda <prvCopyDataToQueue+0x1a>

08002f36 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f36:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002f38:	b172      	cbz	r2, 8002f58 <prvCopyDataFromQueue+0x22>
{
 8002f3a:	b510      	push	{r4, lr}
 8002f3c:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002f3e:	68c4      	ldr	r4, [r0, #12]
 8002f40:	4414      	add	r4, r2
 8002f42:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f44:	6840      	ldr	r0, [r0, #4]
 8002f46:	4284      	cmp	r4, r0
 8002f48:	d301      	bcc.n	8002f4e <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	60d8      	str	r0, [r3, #12]
 8002f4e:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002f50:	68d9      	ldr	r1, [r3, #12]
 8002f52:	f00b ff82 	bl	800ee5a <memcpy>
 8002f56:	bd10      	pop	{r4, pc}
 8002f58:	4770      	bx	lr

08002f5a <prvUnlockQueue>:
{
 8002f5a:	b538      	push	{r3, r4, r5, lr}
 8002f5c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002f5e:	f001 f9f1 	bl	8004344 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002f62:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8002f66:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f68:	e001      	b.n	8002f6e <prvUnlockQueue+0x14>
			--cTxLock;
 8002f6a:	3c01      	subs	r4, #1
 8002f6c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f6e:	2c00      	cmp	r4, #0
 8002f70:	dd0a      	ble.n	8002f88 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002f74:	b143      	cbz	r3, 8002f88 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f76:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002f7a:	f001 f807 	bl	8003f8c <xTaskRemoveFromEventList>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d0f3      	beq.n	8002f6a <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8002f82:	f001 f8a7 	bl	80040d4 <vTaskMissedYield>
 8002f86:	e7f0      	b.n	8002f6a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8002f88:	23ff      	movs	r3, #255	; 0xff
 8002f8a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002f8e:	f001 f9ff 	bl	8004390 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002f92:	f001 f9d7 	bl	8004344 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002f96:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8002f9a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f9c:	e001      	b.n	8002fa2 <prvUnlockQueue+0x48>
				--cRxLock;
 8002f9e:	3c01      	subs	r4, #1
 8002fa0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fa2:	2c00      	cmp	r4, #0
 8002fa4:	dd0a      	ble.n	8002fbc <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fa6:	692b      	ldr	r3, [r5, #16]
 8002fa8:	b143      	cbz	r3, 8002fbc <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002faa:	f105 0010 	add.w	r0, r5, #16
 8002fae:	f000 ffed 	bl	8003f8c <xTaskRemoveFromEventList>
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d0f3      	beq.n	8002f9e <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8002fb6:	f001 f88d 	bl	80040d4 <vTaskMissedYield>
 8002fba:	e7f0      	b.n	8002f9e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002fbc:	23ff      	movs	r3, #255	; 0xff
 8002fbe:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002fc2:	f001 f9e5 	bl	8004390 <vPortExitCritical>
 8002fc6:	bd38      	pop	{r3, r4, r5, pc}

08002fc8 <xQueueGenericReset>:
{
 8002fc8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002fca:	b330      	cbz	r0, 800301a <xQueueGenericReset+0x52>
 8002fcc:	4604      	mov	r4, r0
 8002fce:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8002fd0:	f001 f9b8 	bl	8004344 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fd4:	6821      	ldr	r1, [r4, #0]
 8002fd6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002fd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fda:	fb03 1002 	mla	r0, r3, r2, r1
 8002fde:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fe4:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	fb02 1303 	mla	r3, r2, r3, r1
 8002fec:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fee:	23ff      	movs	r3, #255	; 0xff
 8002ff0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ff4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002ff8:	b9d5      	cbnz	r5, 8003030 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ffa:	6923      	ldr	r3, [r4, #16]
 8002ffc:	b303      	cbz	r3, 8003040 <xQueueGenericReset+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ffe:	f104 0010 	add.w	r0, r4, #16
 8003002:	f000 ffc3 	bl	8003f8c <xTaskRemoveFromEventList>
 8003006:	b1d8      	cbz	r0, 8003040 <xQueueGenericReset+0x78>
					queueYIELD_IF_USING_PREEMPTION();
 8003008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <xQueueGenericReset+0x80>)
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	e012      	b.n	8003040 <xQueueGenericReset+0x78>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	b672      	cpsid	i
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	b662      	cpsie	i
 800302e:	e7fe      	b.n	800302e <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003030:	f104 0010 	add.w	r0, r4, #16
 8003034:	f7ff fee1 	bl	8002dfa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003038:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800303c:	f7ff fedd 	bl	8002dfa <vListInitialise>
	taskEXIT_CRITICAL();
 8003040:	f001 f9a6 	bl	8004390 <vPortExitCritical>
}
 8003044:	2001      	movs	r0, #1
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <prvInitialiseNewQueue>:
{
 800304c:	b510      	push	{r4, lr}
 800304e:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003050:	460c      	mov	r4, r1
 8003052:	b139      	cbz	r1, 8003064 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003054:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003056:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003058:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800305a:	2101      	movs	r1, #1
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ffb3 	bl	8002fc8 <xQueueGenericReset>
 8003062:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003064:	601b      	str	r3, [r3, #0]
 8003066:	e7f6      	b.n	8003056 <prvInitialiseNewQueue+0xa>

08003068 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003068:	b950      	cbnz	r0, 8003080 <xQueueGenericCreate+0x18>
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	b672      	cpsid	i
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	b662      	cpsie	i
 800307e:	e7fe      	b.n	800307e <xQueueGenericCreate+0x16>
	{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	b083      	sub	sp, #12
 8003084:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8003086:	b111      	cbz	r1, 800308e <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003088:	fb01 f000 	mul.w	r0, r1, r0
 800308c:	e000      	b.n	8003090 <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 800308e:	2000      	movs	r0, #0
 8003090:	4617      	mov	r7, r2
 8003092:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003094:	3048      	adds	r0, #72	; 0x48
 8003096:	f001 fad7 	bl	8004648 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800309a:	4606      	mov	r6, r0
 800309c:	b138      	cbz	r0, 80030ae <xQueueGenericCreate+0x46>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800309e:	9000      	str	r0, [sp, #0]
 80030a0:	463b      	mov	r3, r7
 80030a2:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80030a6:	4621      	mov	r1, r4
 80030a8:	4628      	mov	r0, r5
 80030aa:	f7ff ffcf 	bl	800304c <prvInitialiseNewQueue>
	}
 80030ae:	4630      	mov	r0, r6
 80030b0:	b003      	add	sp, #12
 80030b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030b4 <xQueueGenericSend>:
{
 80030b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b6:	b085      	sub	sp, #20
 80030b8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80030ba:	b170      	cbz	r0, 80030da <xQueueGenericSend+0x26>
 80030bc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030be:	b1b9      	cbz	r1, 80030f0 <xQueueGenericSend+0x3c>
 80030c0:	2501      	movs	r5, #1
 80030c2:	b9dd      	cbnz	r5, 80030fc <xQueueGenericSend+0x48>
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	b672      	cpsid	i
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	b662      	cpsie	i
 80030d8:	e7fe      	b.n	80030d8 <xQueueGenericSend+0x24>
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	b672      	cpsid	i
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	b662      	cpsie	i
 80030ee:	e7fe      	b.n	80030ee <xQueueGenericSend+0x3a>
 80030f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80030f2:	b90a      	cbnz	r2, 80030f8 <xQueueGenericSend+0x44>
 80030f4:	2501      	movs	r5, #1
 80030f6:	e7e4      	b.n	80030c2 <xQueueGenericSend+0xe>
 80030f8:	2500      	movs	r5, #0
 80030fa:	e7e2      	b.n	80030c2 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d00b      	beq.n	8003118 <xQueueGenericSend+0x64>
 8003100:	b97d      	cbnz	r5, 8003122 <xQueueGenericSend+0x6e>
 8003102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003106:	b672      	cpsid	i
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	b662      	cpsie	i
 8003116:	e7fe      	b.n	8003116 <xQueueGenericSend+0x62>
 8003118:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800311a:	2a01      	cmp	r2, #1
 800311c:	d0f0      	beq.n	8003100 <xQueueGenericSend+0x4c>
 800311e:	2500      	movs	r5, #0
 8003120:	e7ee      	b.n	8003100 <xQueueGenericSend+0x4c>
 8003122:	461e      	mov	r6, r3
 8003124:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003126:	f000 ffdb 	bl	80040e0 <xTaskGetSchedulerState>
 800312a:	b910      	cbnz	r0, 8003132 <xQueueGenericSend+0x7e>
 800312c:	9b01      	ldr	r3, [sp, #4]
 800312e:	b103      	cbz	r3, 8003132 <xQueueGenericSend+0x7e>
 8003130:	2500      	movs	r5, #0
 8003132:	b955      	cbnz	r5, 800314a <xQueueGenericSend+0x96>
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	b672      	cpsid	i
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	b662      	cpsie	i
 8003148:	e7fe      	b.n	8003148 <xQueueGenericSend+0x94>
 800314a:	2500      	movs	r5, #0
 800314c:	e02c      	b.n	80031a8 <xQueueGenericSend+0xf4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800314e:	4632      	mov	r2, r6
 8003150:	4639      	mov	r1, r7
 8003152:	4620      	mov	r0, r4
 8003154:	f7ff feb4 	bl	8002ec0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800315a:	b18b      	cbz	r3, 8003180 <xQueueGenericSend+0xcc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800315c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003160:	f000 ff14 	bl	8003f8c <xTaskRemoveFromEventList>
 8003164:	b138      	cbz	r0, 8003176 <xQueueGenericSend+0xc2>
							queueYIELD_IF_USING_PREEMPTION();
 8003166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316a:	4b37      	ldr	r3, [pc, #220]	; (8003248 <xQueueGenericSend+0x194>)
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003176:	f001 f90b 	bl	8004390 <vPortExitCritical>
				return pdPASS;
 800317a:	2001      	movs	r0, #1
}
 800317c:	b005      	add	sp, #20
 800317e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 8003180:	2800      	cmp	r0, #0
 8003182:	d0f8      	beq.n	8003176 <xQueueGenericSend+0xc2>
						queueYIELD_IF_USING_PREEMPTION();
 8003184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003188:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <xQueueGenericSend+0x194>)
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	e7ef      	b.n	8003176 <xQueueGenericSend+0xc2>
					taskEXIT_CRITICAL();
 8003196:	f001 f8fb 	bl	8004390 <vPortExitCritical>
					return errQUEUE_FULL;
 800319a:	2000      	movs	r0, #0
 800319c:	e7ee      	b.n	800317c <xQueueGenericSend+0xc8>
				prvUnlockQueue( pxQueue );
 800319e:	4620      	mov	r0, r4
 80031a0:	f7ff fedb 	bl	8002f5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031a4:	f000 fd9c 	bl	8003ce0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80031a8:	f001 f8cc 	bl	8004344 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3cc      	bcc.n	800314e <xQueueGenericSend+0x9a>
 80031b4:	2e02      	cmp	r6, #2
 80031b6:	d0ca      	beq.n	800314e <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80031b8:	9b01      	ldr	r3, [sp, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0eb      	beq.n	8003196 <xQueueGenericSend+0xe2>
				else if( xEntryTimeSet == pdFALSE )
 80031be:	b91d      	cbnz	r5, 80031c8 <xQueueGenericSend+0x114>
					vTaskSetTimeOutState( &xTimeOut );
 80031c0:	a802      	add	r0, sp, #8
 80031c2:	f000 ff2b 	bl	800401c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031c6:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 80031c8:	f001 f8e2 	bl	8004390 <vPortExitCritical>
		vTaskSuspendAll();
 80031cc:	f000 fce0 	bl	8003b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031d0:	f001 f8b8 	bl	8004344 <vPortEnterCritical>
 80031d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80031d8:	b25b      	sxtb	r3, r3
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031de:	d102      	bne.n	80031e6 <xQueueGenericSend+0x132>
 80031e0:	2300      	movs	r3, #0
 80031e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80031e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f0:	d102      	bne.n	80031f8 <xQueueGenericSend+0x144>
 80031f2:	2300      	movs	r3, #0
 80031f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031f8:	f001 f8ca 	bl	8004390 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031fc:	a901      	add	r1, sp, #4
 80031fe:	a802      	add	r0, sp, #8
 8003200:	f000 ff24 	bl	800404c <xTaskCheckForTimeOut>
 8003204:	b9c8      	cbnz	r0, 800323a <xQueueGenericSend+0x186>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003206:	4620      	mov	r0, r4
 8003208:	f7ff fe3e 	bl	8002e88 <prvIsQueueFull>
 800320c:	2800      	cmp	r0, #0
 800320e:	d0c6      	beq.n	800319e <xQueueGenericSend+0xea>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003210:	9901      	ldr	r1, [sp, #4]
 8003212:	f104 0010 	add.w	r0, r4, #16
 8003216:	f000 fe9f 	bl	8003f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800321a:	4620      	mov	r0, r4
 800321c:	f7ff fe9d 	bl	8002f5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003220:	f000 fd5e 	bl	8003ce0 <xTaskResumeAll>
 8003224:	2800      	cmp	r0, #0
 8003226:	d1bf      	bne.n	80031a8 <xQueueGenericSend+0xf4>
					portYIELD_WITHIN_API();
 8003228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <xQueueGenericSend+0x194>)
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	e7b6      	b.n	80031a8 <xQueueGenericSend+0xf4>
			prvUnlockQueue( pxQueue );
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff fe8d 	bl	8002f5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003240:	f000 fd4e 	bl	8003ce0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8003244:	2000      	movs	r0, #0
 8003246:	e799      	b.n	800317c <xQueueGenericSend+0xc8>
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800324c:	b148      	cbz	r0, 8003262 <prvInitialiseMutex+0x16>
	{
 800324e:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8003250:	2100      	movs	r1, #0
 8003252:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003254:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003256:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003258:	460b      	mov	r3, r1
 800325a:	460a      	mov	r2, r1
 800325c:	f7ff ff2a 	bl	80030b4 <xQueueGenericSend>
 8003260:	bd08      	pop	{r3, pc}
 8003262:	4770      	bx	lr

08003264 <xQueueCreateMutex>:
	{
 8003264:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003266:	4602      	mov	r2, r0
 8003268:	2100      	movs	r1, #0
 800326a:	2001      	movs	r0, #1
 800326c:	f7ff fefc 	bl	8003068 <xQueueGenericCreate>
 8003270:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8003272:	f7ff ffeb 	bl	800324c <prvInitialiseMutex>
	}
 8003276:	4620      	mov	r0, r4
 8003278:	bd10      	pop	{r4, pc}

0800327a <xQueueGenericSendFromISR>:
{
 800327a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800327e:	b170      	cbz	r0, 800329e <xQueueGenericSendFromISR+0x24>
 8003280:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003282:	b1b9      	cbz	r1, 80032b4 <xQueueGenericSendFromISR+0x3a>
 8003284:	2001      	movs	r0, #1
 8003286:	b9d8      	cbnz	r0, 80032c0 <xQueueGenericSendFromISR+0x46>
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	b672      	cpsid	i
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	b662      	cpsie	i
 800329c:	e7fe      	b.n	800329c <xQueueGenericSendFromISR+0x22>
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	b672      	cpsid	i
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	b662      	cpsie	i
 80032b2:	e7fe      	b.n	80032b2 <xQueueGenericSendFromISR+0x38>
 80032b4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80032b6:	b908      	cbnz	r0, 80032bc <xQueueGenericSendFromISR+0x42>
 80032b8:	2001      	movs	r0, #1
 80032ba:	e7e4      	b.n	8003286 <xQueueGenericSendFromISR+0xc>
 80032bc:	2000      	movs	r0, #0
 80032be:	e7e2      	b.n	8003286 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d00b      	beq.n	80032dc <xQueueGenericSendFromISR+0x62>
 80032c4:	b978      	cbnz	r0, 80032e6 <xQueueGenericSendFromISR+0x6c>
 80032c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ca:	b672      	cpsid	i
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	b662      	cpsie	i
 80032da:	e7fe      	b.n	80032da <xQueueGenericSendFromISR+0x60>
 80032dc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80032de:	2d01      	cmp	r5, #1
 80032e0:	d0f0      	beq.n	80032c4 <xQueueGenericSendFromISR+0x4a>
 80032e2:	2000      	movs	r0, #0
 80032e4:	e7ee      	b.n	80032c4 <xQueueGenericSendFromISR+0x4a>
 80032e6:	461f      	mov	r7, r3
 80032e8:	4690      	mov	r8, r2
 80032ea:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032ec:	f001 f91c 	bl	8004528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032f0:	f3ef 8611 	mrs	r6, BASEPRI
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	b672      	cpsid	i
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003308:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800330a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800330c:	429a      	cmp	r2, r3
 800330e:	d301      	bcc.n	8003314 <xQueueGenericSendFromISR+0x9a>
 8003310:	2f02      	cmp	r7, #2
 8003312:	d121      	bne.n	8003358 <xQueueGenericSendFromISR+0xde>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003314:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003318:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800331a:	463a      	mov	r2, r7
 800331c:	4649      	mov	r1, r9
 800331e:	4620      	mov	r0, r4
 8003320:	f7ff fdce 	bl	8002ec0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003324:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003328:	d110      	bne.n	800334c <xQueueGenericSendFromISR+0xd2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800332a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800332c:	b1b3      	cbz	r3, 800335c <xQueueGenericSendFromISR+0xe2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800332e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003332:	f000 fe2b 	bl	8003f8c <xTaskRemoveFromEventList>
 8003336:	b198      	cbz	r0, 8003360 <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 8003338:	f1b8 0f00 	cmp.w	r8, #0
 800333c:	d012      	beq.n	8003364 <xQueueGenericSendFromISR+0xea>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800333e:	2001      	movs	r0, #1
 8003340:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003344:	f386 8811 	msr	BASEPRI, r6
}
 8003348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800334c:	1c6b      	adds	r3, r5, #1
 800334e:	b25b      	sxtb	r3, r3
 8003350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8003354:	2001      	movs	r0, #1
 8003356:	e7f5      	b.n	8003344 <xQueueGenericSendFromISR+0xca>
			xReturn = errQUEUE_FULL;
 8003358:	2000      	movs	r0, #0
 800335a:	e7f3      	b.n	8003344 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 800335c:	2001      	movs	r0, #1
 800335e:	e7f1      	b.n	8003344 <xQueueGenericSendFromISR+0xca>
 8003360:	2001      	movs	r0, #1
 8003362:	e7ef      	b.n	8003344 <xQueueGenericSendFromISR+0xca>
 8003364:	2001      	movs	r0, #1
 8003366:	e7ed      	b.n	8003344 <xQueueGenericSendFromISR+0xca>

08003368 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8003368:	b170      	cbz	r0, 8003388 <xQueueGiveFromISR+0x20>
{
 800336a:	b570      	push	{r4, r5, r6, lr}
 800336c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800336e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003370:	b1ab      	cbz	r3, 800339e <xQueueGiveFromISR+0x36>
	__asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	b672      	cpsid	i
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	b662      	cpsie	i
 8003386:	e7fe      	b.n	8003386 <xQueueGiveFromISR+0x1e>
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	b672      	cpsid	i
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	b662      	cpsie	i
 800339c:	e7fe      	b.n	800339c <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800339e:	6803      	ldr	r3, [r0, #0]
 80033a0:	b163      	cbz	r3, 80033bc <xQueueGiveFromISR+0x54>
 80033a2:	2301      	movs	r3, #1
 80033a4:	b983      	cbnz	r3, 80033c8 <xQueueGiveFromISR+0x60>
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	b672      	cpsid	i
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	b662      	cpsie	i
 80033ba:	e7fe      	b.n	80033ba <xQueueGiveFromISR+0x52>
 80033bc:	6843      	ldr	r3, [r0, #4]
 80033be:	b90b      	cbnz	r3, 80033c4 <xQueueGiveFromISR+0x5c>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e7ef      	b.n	80033a4 <xQueueGiveFromISR+0x3c>
 80033c4:	2300      	movs	r3, #0
 80033c6:	e7ed      	b.n	80033a4 <xQueueGiveFromISR+0x3c>
 80033c8:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033ca:	f001 f8ad 	bl	8004528 <vPortValidateInterruptPriority>
	__asm volatile
 80033ce:	f3ef 8511 	mrs	r5, BASEPRI
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	b672      	cpsid	i
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80033e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d21a      	bcs.n	8003424 <xQueueGiveFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
 80033ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80033f2:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80033f4:	3201      	adds	r2, #1
 80033f6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033fc:	d10c      	bne.n	8003418 <xQueueGiveFromISR+0xb0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003400:	b193      	cbz	r3, 8003428 <xQueueGiveFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003402:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003406:	f000 fdc1 	bl	8003f8c <xTaskRemoveFromEventList>
 800340a:	b178      	cbz	r0, 800342c <xQueueGiveFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800340c:	b186      	cbz	r6, 8003430 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800340e:	2001      	movs	r0, #1
 8003410:	6030      	str	r0, [r6, #0]
	__asm volatile
 8003412:	f385 8811 	msr	BASEPRI, r5
}
 8003416:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003418:	3301      	adds	r3, #1
 800341a:	b25b      	sxtb	r3, r3
 800341c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8003420:	2001      	movs	r0, #1
 8003422:	e7f6      	b.n	8003412 <xQueueGiveFromISR+0xaa>
			xReturn = errQUEUE_FULL;
 8003424:	2000      	movs	r0, #0
 8003426:	e7f4      	b.n	8003412 <xQueueGiveFromISR+0xaa>
			xReturn = pdPASS;
 8003428:	2001      	movs	r0, #1
 800342a:	e7f2      	b.n	8003412 <xQueueGiveFromISR+0xaa>
 800342c:	2001      	movs	r0, #1
 800342e:	e7f0      	b.n	8003412 <xQueueGiveFromISR+0xaa>
 8003430:	2001      	movs	r0, #1
 8003432:	e7ee      	b.n	8003412 <xQueueGiveFromISR+0xaa>

08003434 <xQueueGenericReceive>:
{
 8003434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800343c:	b170      	cbz	r0, 800345c <xQueueGenericReceive+0x28>
 800343e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003440:	b1b9      	cbz	r1, 8003472 <xQueueGenericReceive+0x3e>
 8003442:	2501      	movs	r5, #1
 8003444:	b9dd      	cbnz	r5, 800347e <xQueueGenericReceive+0x4a>
	__asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	b672      	cpsid	i
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	b662      	cpsie	i
 800345a:	e7fe      	b.n	800345a <xQueueGenericReceive+0x26>
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	b672      	cpsid	i
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	b662      	cpsie	i
 8003470:	e7fe      	b.n	8003470 <xQueueGenericReceive+0x3c>
 8003472:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003474:	b90a      	cbnz	r2, 800347a <xQueueGenericReceive+0x46>
 8003476:	2501      	movs	r5, #1
 8003478:	e7e4      	b.n	8003444 <xQueueGenericReceive+0x10>
 800347a:	2500      	movs	r5, #0
 800347c:	e7e2      	b.n	8003444 <xQueueGenericReceive+0x10>
 800347e:	461f      	mov	r7, r3
 8003480:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003482:	f000 fe2d 	bl	80040e0 <xTaskGetSchedulerState>
 8003486:	b910      	cbnz	r0, 800348e <xQueueGenericReceive+0x5a>
 8003488:	9b01      	ldr	r3, [sp, #4]
 800348a:	b103      	cbz	r3, 800348e <xQueueGenericReceive+0x5a>
 800348c:	2500      	movs	r5, #0
 800348e:	b955      	cbnz	r5, 80034a6 <xQueueGenericReceive+0x72>
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	b672      	cpsid	i
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	b662      	cpsie	i
 80034a4:	e7fe      	b.n	80034a4 <xQueueGenericReceive+0x70>
 80034a6:	2600      	movs	r6, #0
 80034a8:	e05d      	b.n	8003566 <xQueueGenericReceive+0x132>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80034aa:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034ac:	4641      	mov	r1, r8
 80034ae:	4620      	mov	r0, r4
 80034b0:	f7ff fd41 	bl	8002f36 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80034b4:	b9df      	cbnz	r7, 80034ee <xQueueGenericReceive+0xba>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80034b6:	3d01      	subs	r5, #1
 80034b8:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	b913      	cbnz	r3, 80034c4 <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80034be:	f000 fecf 	bl	8004260 <pvTaskIncrementMutexHeldCount>
 80034c2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034c4:	6923      	ldr	r3, [r4, #16]
 80034c6:	b163      	cbz	r3, 80034e2 <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034c8:	f104 0010 	add.w	r0, r4, #16
 80034cc:	f000 fd5e 	bl	8003f8c <xTaskRemoveFromEventList>
 80034d0:	b138      	cbz	r0, 80034e2 <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 80034d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d6:	4b45      	ldr	r3, [pc, #276]	; (80035ec <xQueueGenericReceive+0x1b8>)
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80034e2:	f000 ff55 	bl	8004390 <vPortExitCritical>
				return pdPASS;
 80034e6:	2001      	movs	r0, #1
}
 80034e8:	b004      	add	sp, #16
 80034ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80034ee:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f5      	beq.n	80034e2 <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034fa:	f000 fd47 	bl	8003f8c <xTaskRemoveFromEventList>
 80034fe:	2800      	cmp	r0, #0
 8003500:	d0ef      	beq.n	80034e2 <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8003502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003506:	4b39      	ldr	r3, [pc, #228]	; (80035ec <xQueueGenericReceive+0x1b8>)
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	e7e6      	b.n	80034e2 <xQueueGenericReceive+0xae>
					taskEXIT_CRITICAL();
 8003514:	f000 ff3c 	bl	8004390 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003518:	2000      	movs	r0, #0
 800351a:	e7e5      	b.n	80034e8 <xQueueGenericReceive+0xb4>
					vTaskSetTimeOutState( &xTimeOut );
 800351c:	a802      	add	r0, sp, #8
 800351e:	f000 fd7d 	bl	800401c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003522:	2601      	movs	r6, #1
 8003524:	e029      	b.n	800357a <xQueueGenericReceive+0x146>
		prvLockQueue( pxQueue );
 8003526:	2300      	movs	r3, #0
 8003528:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800352c:	e031      	b.n	8003592 <xQueueGenericReceive+0x15e>
 800352e:	2300      	movs	r3, #0
 8003530:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003534:	e033      	b.n	800359e <xQueueGenericReceive+0x16a>
						taskENTER_CRITICAL();
 8003536:	f000 ff05 	bl	8004344 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800353a:	6860      	ldr	r0, [r4, #4]
 800353c:	f000 fde0 	bl	8004100 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8003540:	f000 ff26 	bl	8004390 <vPortExitCritical>
 8003544:	e03b      	b.n	80035be <xQueueGenericReceive+0x18a>
				prvUnlockQueue( pxQueue );
 8003546:	4620      	mov	r0, r4
 8003548:	f7ff fd07 	bl	8002f5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800354c:	f000 fbc8 	bl	8003ce0 <xTaskResumeAll>
 8003550:	e009      	b.n	8003566 <xQueueGenericReceive+0x132>
			prvUnlockQueue( pxQueue );
 8003552:	4620      	mov	r0, r4
 8003554:	f7ff fd01 	bl	8002f5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003558:	f000 fbc2 	bl	8003ce0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800355c:	4620      	mov	r0, r4
 800355e:	f7ff fca2 	bl	8002ea6 <prvIsQueueEmpty>
 8003562:	2800      	cmp	r0, #0
 8003564:	d140      	bne.n	80035e8 <xQueueGenericReceive+0x1b4>
		taskENTER_CRITICAL();
 8003566:	f000 feed 	bl	8004344 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800356a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800356c:	2d00      	cmp	r5, #0
 800356e:	d19c      	bne.n	80034aa <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003570:	9b01      	ldr	r3, [sp, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ce      	beq.n	8003514 <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
 8003576:	2e00      	cmp	r6, #0
 8003578:	d0d0      	beq.n	800351c <xQueueGenericReceive+0xe8>
		taskEXIT_CRITICAL();
 800357a:	f000 ff09 	bl	8004390 <vPortExitCritical>
		vTaskSuspendAll();
 800357e:	f000 fb07 	bl	8003b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003582:	f000 fedf 	bl	8004344 <vPortEnterCritical>
 8003586:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800358a:	b25b      	sxtb	r3, r3
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003590:	d0c9      	beq.n	8003526 <xQueueGenericReceive+0xf2>
 8003592:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003596:	b25b      	sxtb	r3, r3
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800359c:	d0c7      	beq.n	800352e <xQueueGenericReceive+0xfa>
 800359e:	f000 fef7 	bl	8004390 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035a2:	a901      	add	r1, sp, #4
 80035a4:	a802      	add	r0, sp, #8
 80035a6:	f000 fd51 	bl	800404c <xTaskCheckForTimeOut>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d1d1      	bne.n	8003552 <xQueueGenericReceive+0x11e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035ae:	4620      	mov	r0, r4
 80035b0:	f7ff fc79 	bl	8002ea6 <prvIsQueueEmpty>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	d0c6      	beq.n	8003546 <xQueueGenericReceive+0x112>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0bb      	beq.n	8003536 <xQueueGenericReceive+0x102>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035be:	9901      	ldr	r1, [sp, #4]
 80035c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80035c4:	f000 fcc8 	bl	8003f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035c8:	4620      	mov	r0, r4
 80035ca:	f7ff fcc6 	bl	8002f5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035ce:	f000 fb87 	bl	8003ce0 <xTaskResumeAll>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d1c7      	bne.n	8003566 <xQueueGenericReceive+0x132>
					portYIELD_WITHIN_API();
 80035d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <xQueueGenericReceive+0x1b8>)
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	e7be      	b.n	8003566 <xQueueGenericReceive+0x132>
				return errQUEUE_EMPTY;
 80035e8:	2000      	movs	r0, #0
 80035ea:	e77d      	b.n	80034e8 <xQueueGenericReceive+0xb4>
 80035ec:	e000ed04 	.word	0xe000ed04

080035f0 <xQueueReceiveFromISR>:
{
 80035f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80035f4:	b170      	cbz	r0, 8003614 <xQueueReceiveFromISR+0x24>
 80035f6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035f8:	b1b9      	cbz	r1, 800362a <xQueueReceiveFromISR+0x3a>
 80035fa:	2301      	movs	r3, #1
 80035fc:	b9db      	cbnz	r3, 8003636 <xQueueReceiveFromISR+0x46>
 80035fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003602:	b672      	cpsid	i
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	b662      	cpsie	i
 8003612:	e7fe      	b.n	8003612 <xQueueReceiveFromISR+0x22>
 8003614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003618:	b672      	cpsid	i
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	b662      	cpsie	i
 8003628:	e7fe      	b.n	8003628 <xQueueReceiveFromISR+0x38>
 800362a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800362c:	b90b      	cbnz	r3, 8003632 <xQueueReceiveFromISR+0x42>
 800362e:	2301      	movs	r3, #1
 8003630:	e7e4      	b.n	80035fc <xQueueReceiveFromISR+0xc>
 8003632:	2300      	movs	r3, #0
 8003634:	e7e2      	b.n	80035fc <xQueueReceiveFromISR+0xc>
 8003636:	4617      	mov	r7, r2
 8003638:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800363a:	f000 ff75 	bl	8004528 <vPortValidateInterruptPriority>
	__asm volatile
 800363e:	f3ef 8611 	mrs	r6, BASEPRI
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	b672      	cpsid	i
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003656:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800365a:	f1b8 0f00 	cmp.w	r8, #0
 800365e:	d020      	beq.n	80036a2 <xQueueReceiveFromISR+0xb2>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003660:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003664:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003666:	4649      	mov	r1, r9
 8003668:	4620      	mov	r0, r4
 800366a:	f7ff fc64 	bl	8002f36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800366e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8003672:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8003674:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003678:	d10d      	bne.n	8003696 <xQueueReceiveFromISR+0xa6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800367a:	6923      	ldr	r3, [r4, #16]
 800367c:	b19b      	cbz	r3, 80036a6 <xQueueReceiveFromISR+0xb6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800367e:	f104 0010 	add.w	r0, r4, #16
 8003682:	f000 fc83 	bl	8003f8c <xTaskRemoveFromEventList>
 8003686:	b180      	cbz	r0, 80036aa <xQueueReceiveFromISR+0xba>
						if( pxHigherPriorityTaskWoken != NULL )
 8003688:	b18f      	cbz	r7, 80036ae <xQueueReceiveFromISR+0xbe>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800368a:	2001      	movs	r0, #1
 800368c:	6038      	str	r0, [r7, #0]
	__asm volatile
 800368e:	f386 8811 	msr	BASEPRI, r6
}
 8003692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003696:	1c6b      	adds	r3, r5, #1
 8003698:	b25b      	sxtb	r3, r3
 800369a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800369e:	2001      	movs	r0, #1
 80036a0:	e7f5      	b.n	800368e <xQueueReceiveFromISR+0x9e>
			xReturn = pdFAIL;
 80036a2:	2000      	movs	r0, #0
 80036a4:	e7f3      	b.n	800368e <xQueueReceiveFromISR+0x9e>
			xReturn = pdPASS;
 80036a6:	2001      	movs	r0, #1
 80036a8:	e7f1      	b.n	800368e <xQueueReceiveFromISR+0x9e>
 80036aa:	2001      	movs	r0, #1
 80036ac:	e7ef      	b.n	800368e <xQueueReceiveFromISR+0x9e>
 80036ae:	2001      	movs	r0, #1
 80036b0:	e7ed      	b.n	800368e <xQueueReceiveFromISR+0x9e>

080036b2 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80036b2:	b950      	cbnz	r0, 80036ca <uxQueueMessagesWaiting+0x18>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	b672      	cpsid	i
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	b662      	cpsie	i
 80036c8:	e7fe      	b.n	80036c8 <uxQueueMessagesWaiting+0x16>
{
 80036ca:	b510      	push	{r4, lr}
 80036cc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80036ce:	f000 fe39 	bl	8004344 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80036d2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80036d4:	f000 fe5c 	bl	8004390 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80036d8:	4620      	mov	r0, r4
 80036da:	bd10      	pop	{r4, pc}

080036dc <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 80036dc:	b108      	cbz	r0, 80036e2 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80036de:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80036e0:	4770      	bx	lr
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	b672      	cpsid	i
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	b662      	cpsie	i
 80036f6:	e7fe      	b.n	80036f6 <uxQueueMessagesWaitingFromISR+0x1a>

080036f8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036f8:	2300      	movs	r3, #0
 80036fa:	2b07      	cmp	r3, #7
 80036fc:	d80f      	bhi.n	800371e <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <vQueueUnregisterQueue+0x28>)
 8003700:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003704:	6852      	ldr	r2, [r2, #4]
 8003706:	4282      	cmp	r2, r0
 8003708:	d001      	beq.n	800370e <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800370a:	3301      	adds	r3, #1
 800370c:	e7f5      	b.n	80036fa <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800370e:	4a04      	ldr	r2, [pc, #16]	; (8003720 <vQueueUnregisterQueue+0x28>)
 8003710:	2100      	movs	r1, #0
 8003712:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003716:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800371a:	6059      	str	r1, [r3, #4]
				break;
 800371c:	4770      	bx	lr
 800371e:	4770      	bx	lr
 8003720:	20004a78 	.word	0x20004a78

08003724 <vQueueDelete>:
	configASSERT( pxQueue );
 8003724:	b950      	cbnz	r0, 800373c <vQueueDelete+0x18>
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	b672      	cpsid	i
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	b662      	cpsie	i
 800373a:	e7fe      	b.n	800373a <vQueueDelete+0x16>
{
 800373c:	b510      	push	{r4, lr}
 800373e:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8003740:	f7ff ffda 	bl	80036f8 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8003744:	4620      	mov	r0, r4
 8003746:	f001 f809 	bl	800475c <vPortFree>
 800374a:	bd10      	pop	{r4, pc}

0800374c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <prvResetNextTaskUnblockTime+0x2c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b94b      	cbnz	r3, 8003768 <prvResetNextTaskUnblockTime+0x1c>
 8003754:	2301      	movs	r3, #1
 8003756:	b94b      	cbnz	r3, 800376c <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003758:	4b07      	ldr	r3, [pc, #28]	; (8003778 <prvResetNextTaskUnblockTime+0x2c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <prvResetNextTaskUnblockTime+0x30>)
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003768:	2300      	movs	r3, #0
 800376a:	e7f4      	b.n	8003756 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 800376c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003770:	4b02      	ldr	r3, [pc, #8]	; (800377c <prvResetNextTaskUnblockTime+0x30>)
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000b38 	.word	0x20000b38
 800377c:	20000c10 	.word	0x20000c10

08003780 <prvDeleteTCB>:
	{
 8003780:	b510      	push	{r4, lr}
 8003782:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8003784:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003786:	f000 ffe9 	bl	800475c <vPortFree>
			vPortFree( pxTCB );
 800378a:	4620      	mov	r0, r4
 800378c:	f000 ffe6 	bl	800475c <vPortFree>
 8003790:	bd10      	pop	{r4, pc}

08003792 <prvInitialiseNewTask>:
{
 8003792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003796:	4680      	mov	r8, r0
 8003798:	4699      	mov	r9, r3
 800379a:	9d08      	ldr	r5, [sp, #32]
 800379c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800379e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80037a0:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80037a2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80037a6:	4413      	add	r3, r2
 80037a8:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80037ac:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b0f      	cmp	r3, #15
 80037b4:	d807      	bhi.n	80037c6 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037b6:	5cc8      	ldrb	r0, [r1, r3]
 80037b8:	18e2      	adds	r2, r4, r3
 80037ba:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80037be:	5cca      	ldrb	r2, [r1, r3]
 80037c0:	b10a      	cbz	r2, 80037c6 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037c2:	3301      	adds	r3, #1
 80037c4:	e7f5      	b.n	80037b2 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037c6:	2300      	movs	r3, #0
 80037c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037cc:	2d06      	cmp	r5, #6
 80037ce:	d900      	bls.n	80037d2 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037d0:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80037d2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80037d4:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037d6:	f04f 0a00 	mov.w	sl, #0
 80037da:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037de:	1d20      	adds	r0, r4, #4
 80037e0:	f7ff fb16 	bl	8002e10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037e4:	f104 0018 	add.w	r0, r4, #24
 80037e8:	f7ff fb12 	bl	8002e10 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037ec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ee:	f1c5 0507 	rsb	r5, r5, #7
 80037f2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037f4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80037f6:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037fa:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037fe:	464a      	mov	r2, r9
 8003800:	4641      	mov	r1, r8
 8003802:	4630      	mov	r0, r6
 8003804:	f000 fd72 	bl	80042ec <pxPortInitialiseStack>
 8003808:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800380a:	b107      	cbz	r7, 800380e <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800380c:	603c      	str	r4, [r7, #0]
 800380e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08003814 <prvInitialiseTaskLists>:
{
 8003814:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003816:	2400      	movs	r4, #0
 8003818:	e007      	b.n	800382a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800381a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800381e:	0093      	lsls	r3, r2, #2
 8003820:	480e      	ldr	r0, [pc, #56]	; (800385c <prvInitialiseTaskLists+0x48>)
 8003822:	4418      	add	r0, r3
 8003824:	f7ff fae9 	bl	8002dfa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003828:	3401      	adds	r4, #1
 800382a:	2c06      	cmp	r4, #6
 800382c:	d9f5      	bls.n	800381a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800382e:	4d0c      	ldr	r5, [pc, #48]	; (8003860 <prvInitialiseTaskLists+0x4c>)
 8003830:	4628      	mov	r0, r5
 8003832:	f7ff fae2 	bl	8002dfa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003836:	4c0b      	ldr	r4, [pc, #44]	; (8003864 <prvInitialiseTaskLists+0x50>)
 8003838:	4620      	mov	r0, r4
 800383a:	f7ff fade 	bl	8002dfa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800383e:	480a      	ldr	r0, [pc, #40]	; (8003868 <prvInitialiseTaskLists+0x54>)
 8003840:	f7ff fadb 	bl	8002dfa <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003844:	4809      	ldr	r0, [pc, #36]	; (800386c <prvInitialiseTaskLists+0x58>)
 8003846:	f7ff fad8 	bl	8002dfa <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800384a:	4809      	ldr	r0, [pc, #36]	; (8003870 <prvInitialiseTaskLists+0x5c>)
 800384c:	f7ff fad5 	bl	8002dfa <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <prvInitialiseTaskLists+0x60>)
 8003852:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <prvInitialiseTaskLists+0x64>)
 8003856:	601c      	str	r4, [r3, #0]
 8003858:	bd38      	pop	{r3, r4, r5, pc}
 800385a:	bf00      	nop
 800385c:	20000b40 	.word	0x20000b40
 8003860:	20000be4 	.word	0x20000be4
 8003864:	20000bf8 	.word	0x20000bf8
 8003868:	20000c18 	.word	0x20000c18
 800386c:	20000c44 	.word	0x20000c44
 8003870:	20000c30 	.word	0x20000c30
 8003874:	20000b38 	.word	0x20000b38
 8003878:	20000b3c 	.word	0x20000b3c

0800387c <prvAddNewTaskToReadyList>:
{
 800387c:	b510      	push	{r4, lr}
 800387e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003880:	f000 fd60 	bl	8004344 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003884:	4a20      	ldr	r2, [pc, #128]	; (8003908 <prvAddNewTaskToReadyList+0x8c>)
 8003886:	6813      	ldr	r3, [r2, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <prvAddNewTaskToReadyList+0x90>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d031      	beq.n	80038f8 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8003894:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <prvAddNewTaskToReadyList+0x94>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	b93b      	cbnz	r3, 80038aa <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800389a:	4b1c      	ldr	r3, [pc, #112]	; (800390c <prvAddNewTaskToReadyList+0x90>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d801      	bhi.n	80038aa <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 80038a6:	4b19      	ldr	r3, [pc, #100]	; (800390c <prvAddNewTaskToReadyList+0x90>)
 80038a8:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 80038aa:	4a1a      	ldr	r2, [pc, #104]	; (8003914 <prvAddNewTaskToReadyList+0x98>)
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80038b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80038b4:	2201      	movs	r2, #1
 80038b6:	409a      	lsls	r2, r3
 80038b8:	4917      	ldr	r1, [pc, #92]	; (8003918 <prvAddNewTaskToReadyList+0x9c>)
 80038ba:	6808      	ldr	r0, [r1, #0]
 80038bc:	4302      	orrs	r2, r0
 80038be:	600a      	str	r2, [r1, #0]
 80038c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038c4:	009a      	lsls	r2, r3, #2
 80038c6:	1d21      	adds	r1, r4, #4
 80038c8:	4814      	ldr	r0, [pc, #80]	; (800391c <prvAddNewTaskToReadyList+0xa0>)
 80038ca:	4410      	add	r0, r2
 80038cc:	f7ff faa3 	bl	8002e16 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80038d0:	f000 fd5e 	bl	8004390 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80038d4:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <prvAddNewTaskToReadyList+0x94>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	b16b      	cbz	r3, 80038f6 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <prvAddNewTaskToReadyList+0x90>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d207      	bcs.n	80038f6 <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 80038e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <prvAddNewTaskToReadyList+0xa4>)
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <prvAddNewTaskToReadyList+0x90>)
 80038fa:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d1d3      	bne.n	80038aa <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 8003902:	f7ff ff87 	bl	8003814 <prvInitialiseTaskLists>
 8003906:	e7d0      	b.n	80038aa <prvAddNewTaskToReadyList+0x2e>
 8003908:	20000bcc 	.word	0x20000bcc
 800390c:	20000b34 	.word	0x20000b34
 8003910:	20000c2c 	.word	0x20000c2c
 8003914:	20000bdc 	.word	0x20000bdc
 8003918:	20000be0 	.word	0x20000be0
 800391c:	20000b40 	.word	0x20000b40
 8003920:	e000ed04 	.word	0xe000ed04

08003924 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	4604      	mov	r4, r0
 8003928:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800392a:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <prvAddCurrentTaskToDelayedList+0x84>)
 800392c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800392e:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <prvAddCurrentTaskToDelayedList+0x88>)
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	3004      	adds	r0, #4
 8003934:	f7ff fa95 	bl	8002e62 <uxListRemove>
 8003938:	b950      	cbnz	r0, 8003950 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800393a:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <prvAddCurrentTaskToDelayedList+0x88>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	2301      	movs	r3, #1
 8003942:	fa03 f202 	lsl.w	r2, r3, r2
 8003946:	491a      	ldr	r1, [pc, #104]	; (80039b0 <prvAddCurrentTaskToDelayedList+0x8c>)
 8003948:	680b      	ldr	r3, [r1, #0]
 800394a:	ea23 0302 	bic.w	r3, r3, r2
 800394e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003950:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003954:	bf14      	ite	ne
 8003956:	2300      	movne	r3, #0
 8003958:	2301      	moveq	r3, #1
 800395a:	2e00      	cmp	r6, #0
 800395c:	bf08      	it	eq
 800395e:	2300      	moveq	r3, #0
 8003960:	b99b      	cbnz	r3, 800398a <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003962:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <prvAddCurrentTaskToDelayedList+0x88>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800396a:	42a5      	cmp	r5, r4
 800396c:	d814      	bhi.n	8003998 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <prvAddCurrentTaskToDelayedList+0x88>)
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	3104      	adds	r1, #4
 8003978:	f7ff fa59 	bl	8002e2e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800397c:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	429c      	cmp	r4, r3
 8003982:	d201      	bcs.n	8003988 <prvAddCurrentTaskToDelayedList+0x64>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003986:	601c      	str	r4, [r3, #0]
 8003988:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <prvAddCurrentTaskToDelayedList+0x88>)
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	3104      	adds	r1, #4
 8003990:	480a      	ldr	r0, [pc, #40]	; (80039bc <prvAddCurrentTaskToDelayedList+0x98>)
 8003992:	f7ff fa40 	bl	8002e16 <vListInsertEnd>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <prvAddCurrentTaskToDelayedList+0x88>)
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	3104      	adds	r1, #4
 80039a2:	f7ff fa44 	bl	8002e2e <vListInsert>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	20000c58 	.word	0x20000c58
 80039ac:	20000b34 	.word	0x20000b34
 80039b0:	20000be0 	.word	0x20000be0
 80039b4:	20000b38 	.word	0x20000b38
 80039b8:	20000c10 	.word	0x20000c10
 80039bc:	20000c30 	.word	0x20000c30
 80039c0:	20000b3c 	.word	0x20000b3c

080039c4 <xTaskCreate>:
	{
 80039c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039c8:	b085      	sub	sp, #20
 80039ca:	4606      	mov	r6, r0
 80039cc:	460f      	mov	r7, r1
 80039ce:	4615      	mov	r5, r2
 80039d0:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d2:	0090      	lsls	r0, r2, #2
 80039d4:	f000 fe38 	bl	8004648 <pvPortMalloc>
			if( pxStack != NULL )
 80039d8:	b300      	cbz	r0, 8003a1c <xTaskCreate+0x58>
 80039da:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039dc:	2054      	movs	r0, #84	; 0x54
 80039de:	f000 fe33 	bl	8004648 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80039e2:	4604      	mov	r4, r0
 80039e4:	b1b0      	cbz	r0, 8003a14 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80039e6:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80039ea:	b1cc      	cbz	r4, 8003a20 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039ec:	2300      	movs	r3, #0
 80039ee:	9303      	str	r3, [sp, #12]
 80039f0:	9402      	str	r4, [sp, #8]
 80039f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	4643      	mov	r3, r8
 80039fc:	462a      	mov	r2, r5
 80039fe:	4639      	mov	r1, r7
 8003a00:	4630      	mov	r0, r6
 8003a02:	f7ff fec6 	bl	8003792 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7ff ff38 	bl	800387c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a0c:	2001      	movs	r0, #1
	}
 8003a0e:	b005      	add	sp, #20
 8003a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003a14:	4648      	mov	r0, r9
 8003a16:	f000 fea1 	bl	800475c <vPortFree>
 8003a1a:	e7e6      	b.n	80039ea <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8003a1c:	2400      	movs	r4, #0
 8003a1e:	e7e4      	b.n	80039ea <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8003a24:	e7f3      	b.n	8003a0e <xTaskCreate+0x4a>
	...

08003a28 <vTaskDelete>:
	{
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8003a2c:	f000 fc8a 	bl	8004344 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003a30:	2c00      	cmp	r4, #0
 8003a32:	d034      	beq.n	8003a9e <vTaskDelete+0x76>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a34:	1d25      	adds	r5, r4, #4
 8003a36:	4628      	mov	r0, r5
 8003a38:	f7ff fa13 	bl	8002e62 <uxListRemove>
 8003a3c:	b970      	cbnz	r0, 8003a5c <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a40:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003a44:	008b      	lsls	r3, r1, #2
 8003a46:	4927      	ldr	r1, [pc, #156]	; (8003ae4 <vTaskDelete+0xbc>)
 8003a48:	58cb      	ldr	r3, [r1, r3]
 8003a4a:	b93b      	cbnz	r3, 8003a5c <vTaskDelete+0x34>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	fa03 f202 	lsl.w	r2, r3, r2
 8003a52:	4925      	ldr	r1, [pc, #148]	; (8003ae8 <vTaskDelete+0xc0>)
 8003a54:	680b      	ldr	r3, [r1, #0]
 8003a56:	ea23 0302 	bic.w	r3, r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a5e:	b11b      	cbz	r3, 8003a68 <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a60:	f104 0018 	add.w	r0, r4, #24
 8003a64:	f7ff f9fd 	bl	8002e62 <uxListRemove>
			uxTaskNumber++;
 8003a68:	4a20      	ldr	r2, [pc, #128]	; (8003aec <vTaskDelete+0xc4>)
 8003a6a:	6813      	ldr	r3, [r2, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8003a70:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <vTaskDelete+0xc8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	429c      	cmp	r4, r3
 8003a76:	d015      	beq.n	8003aa4 <vTaskDelete+0x7c>
				--uxCurrentNumberOfTasks;
 8003a78:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <vTaskDelete+0xcc>)
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003a80:	4620      	mov	r0, r4
 8003a82:	f7ff fe7d 	bl	8003780 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 8003a86:	f7ff fe61 	bl	800374c <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 8003a8a:	f000 fc81 	bl	8004390 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003a8e:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <vTaskDelete+0xd0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	b11b      	cbz	r3, 8003a9c <vTaskDelete+0x74>
			if( pxTCB == pxCurrentTCB )
 8003a94:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <vTaskDelete+0xc8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	429c      	cmp	r4, r3
 8003a9a:	d00c      	beq.n	8003ab6 <vTaskDelete+0x8e>
 8003a9c:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <vTaskDelete+0xc8>)
 8003aa0:	681c      	ldr	r4, [r3, #0]
 8003aa2:	e7c7      	b.n	8003a34 <vTaskDelete+0xc>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	4815      	ldr	r0, [pc, #84]	; (8003afc <vTaskDelete+0xd4>)
 8003aa8:	f7ff f9b5 	bl	8002e16 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <vTaskDelete+0xd8>)
 8003aae:	6813      	ldr	r3, [r2, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e7e9      	b.n	8003a8a <vTaskDelete+0x62>
				configASSERT( uxSchedulerSuspended == 0 );
 8003ab6:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <vTaskDelete+0xdc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	b153      	cbz	r3, 8003ad2 <vTaskDelete+0xaa>
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	b672      	cpsid	i
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	b662      	cpsie	i
 8003ad0:	e7fe      	b.n	8003ad0 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8003ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <vTaskDelete+0xe0>)
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	f3bf 8f6f 	isb	sy
	}
 8003ae2:	e7db      	b.n	8003a9c <vTaskDelete+0x74>
 8003ae4:	20000b40 	.word	0x20000b40
 8003ae8:	20000be0 	.word	0x20000be0
 8003aec:	20000bdc 	.word	0x20000bdc
 8003af0:	20000b34 	.word	0x20000b34
 8003af4:	20000bcc 	.word	0x20000bcc
 8003af8:	20000c2c 	.word	0x20000c2c
 8003afc:	20000c44 	.word	0x20000c44
 8003b00:	20000bd0 	.word	0x20000bd0
 8003b04:	20000bd8 	.word	0x20000bd8
 8003b08:	e000ed04 	.word	0xe000ed04

08003b0c <vTaskStartScheduler>:
{
 8003b0c:	b500      	push	{lr}
 8003b0e:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <vTaskStartScheduler+0x6c>)
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	2300      	movs	r3, #0
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2280      	movs	r2, #128	; 0x80
 8003b1a:	4918      	ldr	r1, [pc, #96]	; (8003b7c <vTaskStartScheduler+0x70>)
 8003b1c:	4818      	ldr	r0, [pc, #96]	; (8003b80 <vTaskStartScheduler+0x74>)
 8003b1e:	f7ff ff51 	bl	80039c4 <xTaskCreate>
	if( xReturn == pdPASS )
 8003b22:	2801      	cmp	r0, #1
 8003b24:	d005      	beq.n	8003b32 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b26:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003b2a:	d019      	beq.n	8003b60 <vTaskStartScheduler+0x54>
}
 8003b2c:	b003      	add	sp, #12
 8003b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	b672      	cpsid	i
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <vTaskStartScheduler+0x78>)
 8003b4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <vTaskStartScheduler+0x7c>)
 8003b52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b54:	2200      	movs	r2, #0
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <vTaskStartScheduler+0x80>)
 8003b58:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003b5a:	f000 fc91 	bl	8004480 <xPortStartScheduler>
 8003b5e:	e7e5      	b.n	8003b2c <vTaskStartScheduler+0x20>
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	b672      	cpsid	i
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	b662      	cpsie	i
 8003b74:	e7fe      	b.n	8003b74 <vTaskStartScheduler+0x68>
 8003b76:	bf00      	nop
 8003b78:	20000c0c 	.word	0x20000c0c
 8003b7c:	08010124 	.word	0x08010124
 8003b80:	08003e91 	.word	0x08003e91
 8003b84:	20000c10 	.word	0x20000c10
 8003b88:	20000c2c 	.word	0x20000c2c
 8003b8c:	20000c58 	.word	0x20000c58

08003b90 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003b90:	4a02      	ldr	r2, [pc, #8]	; (8003b9c <vTaskSuspendAll+0xc>)
 8003b92:	6813      	ldr	r3, [r2, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000bd8 	.word	0x20000bd8

08003ba0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003ba0:	4b01      	ldr	r3, [pc, #4]	; (8003ba8 <xTaskGetTickCount+0x8>)
 8003ba2:	6818      	ldr	r0, [r3, #0]
}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000c58 	.word	0x20000c58

08003bac <xTaskGetTickCountFromISR>:
{
 8003bac:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bae:	f000 fcbb 	bl	8004528 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003bb2:	4b01      	ldr	r3, [pc, #4]	; (8003bb8 <xTaskGetTickCountFromISR+0xc>)
 8003bb4:	6818      	ldr	r0, [r3, #0]
}
 8003bb6:	bd08      	pop	{r3, pc}
 8003bb8:	20000c58 	.word	0x20000c58

08003bbc <xTaskIncrementTick>:
{
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <xTaskIncrementTick+0xf8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d16a      	bne.n	8003c9c <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003bc6:	4b3c      	ldr	r3, [pc, #240]	; (8003cb8 <xTaskIncrementTick+0xfc>)
 8003bc8:	681d      	ldr	r5, [r3, #0]
 8003bca:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003bcc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003bce:	b9d5      	cbnz	r5, 8003c06 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <xTaskIncrementTick+0x100>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	b153      	cbz	r3, 8003bee <xTaskIncrementTick+0x32>
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	b672      	cpsid	i
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	b662      	cpsie	i
 8003bec:	e7fe      	b.n	8003bec <xTaskIncrementTick+0x30>
 8003bee:	4a33      	ldr	r2, [pc, #204]	; (8003cbc <xTaskIncrementTick+0x100>)
 8003bf0:	6811      	ldr	r1, [r2, #0]
 8003bf2:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <xTaskIncrementTick+0x104>)
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	6010      	str	r0, [r2, #0]
 8003bf8:	6019      	str	r1, [r3, #0]
 8003bfa:	4a32      	ldr	r2, [pc, #200]	; (8003cc4 <xTaskIncrementTick+0x108>)
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	f7ff fda3 	bl	800374c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c06:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <xTaskIncrementTick+0x10c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429d      	cmp	r5, r3
 8003c0c:	d23a      	bcs.n	8003c84 <xTaskIncrementTick+0xc8>
BaseType_t xSwitchRequired = pdFALSE;
 8003c0e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c10:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <xTaskIncrementTick+0x110>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	4b2c      	ldr	r3, [pc, #176]	; (8003cd0 <xTaskIncrementTick+0x114>)
 8003c1e:	589b      	ldr	r3, [r3, r2]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d940      	bls.n	8003ca6 <xTaskIncrementTick+0xea>
				xSwitchRequired = pdTRUE;
 8003c24:	2401      	movs	r4, #1
 8003c26:	e03e      	b.n	8003ca6 <xTaskIncrementTick+0xea>
							xSwitchRequired = pdTRUE;
 8003c28:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c2a:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <xTaskIncrementTick+0x100>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	b353      	cbz	r3, 8003c88 <xTaskIncrementTick+0xcc>
 8003c32:	2300      	movs	r3, #0
 8003c34:	bb53      	cbnz	r3, 8003c8c <xTaskIncrementTick+0xd0>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c36:	4b21      	ldr	r3, [pc, #132]	; (8003cbc <xTaskIncrementTick+0x100>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c3e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003c40:	429d      	cmp	r5, r3
 8003c42:	d328      	bcc.n	8003c96 <xTaskIncrementTick+0xda>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c44:	1d37      	adds	r7, r6, #4
 8003c46:	4638      	mov	r0, r7
 8003c48:	f7ff f90b 	bl	8002e62 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c4c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003c4e:	b11b      	cbz	r3, 8003c58 <xTaskIncrementTick+0x9c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c50:	f106 0018 	add.w	r0, r6, #24
 8003c54:	f7ff f905 	bl	8002e62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c58:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	491d      	ldr	r1, [pc, #116]	; (8003cd4 <xTaskIncrementTick+0x118>)
 8003c60:	6808      	ldr	r0, [r1, #0]
 8003c62:	4302      	orrs	r2, r0
 8003c64:	600a      	str	r2, [r1, #0]
 8003c66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c6a:	009a      	lsls	r2, r3, #2
 8003c6c:	4639      	mov	r1, r7
 8003c6e:	4818      	ldr	r0, [pc, #96]	; (8003cd0 <xTaskIncrementTick+0x114>)
 8003c70:	4410      	add	r0, r2
 8003c72:	f7ff f8d0 	bl	8002e16 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c76:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <xTaskIncrementTick+0x110>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d2d2      	bcs.n	8003c28 <xTaskIncrementTick+0x6c>
 8003c82:	e7d2      	b.n	8003c2a <xTaskIncrementTick+0x6e>
 8003c84:	2400      	movs	r4, #0
 8003c86:	e7d0      	b.n	8003c2a <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e7d3      	b.n	8003c34 <xTaskIncrementTick+0x78>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <xTaskIncrementTick+0x10c>)
 8003c92:	601a      	str	r2, [r3, #0]
					break;
 8003c94:	e7bc      	b.n	8003c10 <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <xTaskIncrementTick+0x10c>)
 8003c98:	6013      	str	r3, [r2, #0]
						break;
 8003c9a:	e7b9      	b.n	8003c10 <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8003c9c:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <xTaskIncrementTick+0x11c>)
 8003c9e:	6813      	ldr	r3, [r2, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003ca4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <xTaskIncrementTick+0x120>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b103      	cbz	r3, 8003cae <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 8003cac:	2401      	movs	r4, #1
}
 8003cae:	4620      	mov	r0, r4
 8003cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000bd8 	.word	0x20000bd8
 8003cb8:	20000c58 	.word	0x20000c58
 8003cbc:	20000b38 	.word	0x20000b38
 8003cc0:	20000b3c 	.word	0x20000b3c
 8003cc4:	20000c14 	.word	0x20000c14
 8003cc8:	20000c10 	.word	0x20000c10
 8003ccc:	20000b34 	.word	0x20000b34
 8003cd0:	20000b40 	.word	0x20000b40
 8003cd4:	20000be0 	.word	0x20000be0
 8003cd8:	20000bd4 	.word	0x20000bd4
 8003cdc:	20000c5c 	.word	0x20000c5c

08003ce0 <xTaskResumeAll>:
{
 8003ce0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <xTaskResumeAll+0xdc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	b953      	cbnz	r3, 8003cfe <xTaskResumeAll+0x1e>
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	b672      	cpsid	i
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	b662      	cpsie	i
 8003cfc:	e7fe      	b.n	8003cfc <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8003cfe:	f000 fb21 	bl	8004344 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003d02:	4b2e      	ldr	r3, [pc, #184]	; (8003dbc <xTaskResumeAll+0xdc>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	3a01      	subs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d150      	bne.n	8003db2 <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d10:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <xTaskResumeAll+0xe0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	b923      	cbnz	r3, 8003d20 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8003d16:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003d18:	f000 fb3a 	bl	8004390 <vPortExitCritical>
}
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d22:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <xTaskResumeAll+0xe4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	b31b      	cbz	r3, 8003d70 <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d28:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <xTaskResumeAll+0xe4>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d2e:	f104 0018 	add.w	r0, r4, #24
 8003d32:	f7ff f896 	bl	8002e62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d36:	1d25      	adds	r5, r4, #4
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f7ff f892 	bl	8002e62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d40:	2201      	movs	r2, #1
 8003d42:	409a      	lsls	r2, r3
 8003d44:	4920      	ldr	r1, [pc, #128]	; (8003dc8 <xTaskResumeAll+0xe8>)
 8003d46:	6808      	ldr	r0, [r1, #0]
 8003d48:	4302      	orrs	r2, r0
 8003d4a:	600a      	str	r2, [r1, #0]
 8003d4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d50:	009a      	lsls	r2, r3, #2
 8003d52:	4629      	mov	r1, r5
 8003d54:	481d      	ldr	r0, [pc, #116]	; (8003dcc <xTaskResumeAll+0xec>)
 8003d56:	4410      	add	r0, r2
 8003d58:	f7ff f85d 	bl	8002e16 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <xTaskResumeAll+0xf0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d3dc      	bcc.n	8003d22 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <xTaskResumeAll+0xf4>)
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e7d8      	b.n	8003d22 <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8003d70:	b10c      	cbz	r4, 8003d76 <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8003d72:	f7ff fceb 	bl	800374c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <xTaskResumeAll+0xf8>)
 8003d78:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d7a:	b974      	cbnz	r4, 8003d9a <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 8003d7c:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <xTaskResumeAll+0xf4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	b1cb      	cbz	r3, 8003db6 <xTaskResumeAll+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 8003d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <xTaskResumeAll+0xfc>)
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003d92:	2401      	movs	r4, #1
 8003d94:	e7c0      	b.n	8003d18 <xTaskResumeAll+0x38>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d96:	3c01      	subs	r4, #1
 8003d98:	d007      	beq.n	8003daa <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 8003d9a:	f7ff ff0f 	bl	8003bbc <xTaskIncrementTick>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d0f9      	beq.n	8003d96 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8003da2:	2201      	movs	r2, #1
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <xTaskResumeAll+0xf4>)
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e7f5      	b.n	8003d96 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 8003daa:	2200      	movs	r2, #0
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <xTaskResumeAll+0xf8>)
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e7e4      	b.n	8003d7c <xTaskResumeAll+0x9c>
BaseType_t xAlreadyYielded = pdFALSE;
 8003db2:	2400      	movs	r4, #0
 8003db4:	e7b0      	b.n	8003d18 <xTaskResumeAll+0x38>
 8003db6:	2400      	movs	r4, #0
 8003db8:	e7ae      	b.n	8003d18 <xTaskResumeAll+0x38>
 8003dba:	bf00      	nop
 8003dbc:	20000bd8 	.word	0x20000bd8
 8003dc0:	20000bcc 	.word	0x20000bcc
 8003dc4:	20000c18 	.word	0x20000c18
 8003dc8:	20000be0 	.word	0x20000be0
 8003dcc:	20000b40 	.word	0x20000b40
 8003dd0:	20000b34 	.word	0x20000b34
 8003dd4:	20000c5c 	.word	0x20000c5c
 8003dd8:	20000bd4 	.word	0x20000bd4
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <vTaskDelay>:
	{
 8003de0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003de2:	b1b8      	cbz	r0, 8003e14 <vTaskDelay+0x34>
 8003de4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <vTaskDelay+0x4c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	b153      	cbz	r3, 8003e02 <vTaskDelay+0x22>
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	b672      	cpsid	i
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	b662      	cpsie	i
 8003e00:	e7fe      	b.n	8003e00 <vTaskDelay+0x20>
			vTaskSuspendAll();
 8003e02:	f7ff fec5 	bl	8003b90 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e06:	2100      	movs	r1, #0
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f7ff fd8b 	bl	8003924 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003e0e:	f7ff ff67 	bl	8003ce0 <xTaskResumeAll>
 8003e12:	e000      	b.n	8003e16 <vTaskDelay+0x36>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e14:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003e16:	b938      	cbnz	r0, 8003e28 <vTaskDelay+0x48>
			portYIELD_WITHIN_API();
 8003e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <vTaskDelay+0x50>)
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000bd8 	.word	0x20000bd8
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <prvCheckTasksWaitingTermination+0x50>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b313      	cbz	r3, 8003e80 <prvCheckTasksWaitingTermination+0x4c>
{
 8003e3a:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8003e3c:	f7ff fea8 	bl	8003b90 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <prvCheckTasksWaitingTermination+0x54>)
 8003e42:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8003e44:	f7ff ff4c 	bl	8003ce0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003e48:	b924      	cbnz	r4, 8003e54 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <prvCheckTasksWaitingTermination+0x50>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f4      	bne.n	8003e3c <prvCheckTasksWaitingTermination+0x8>
}
 8003e52:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8003e54:	f000 fa76 	bl	8004344 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <prvCheckTasksWaitingTermination+0x54>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e5e:	1d20      	adds	r0, r4, #4
 8003e60:	f7fe ffff 	bl	8002e62 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003e64:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <prvCheckTasksWaitingTermination+0x58>)
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003e6c:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <prvCheckTasksWaitingTermination+0x50>)
 8003e6e:	6813      	ldr	r3, [r2, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8003e74:	f000 fa8c 	bl	8004390 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f7ff fc81 	bl	8003780 <prvDeleteTCB>
 8003e7e:	e7e4      	b.n	8003e4a <prvCheckTasksWaitingTermination+0x16>
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000bd0 	.word	0x20000bd0
 8003e88:	20000c44 	.word	0x20000c44
 8003e8c:	20000bcc 	.word	0x20000bcc

08003e90 <prvIdleTask>:
{
 8003e90:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8003e92:	f7ff ffcf 	bl	8003e34 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <prvIdleTask+0x20>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d9f9      	bls.n	8003e92 <prvIdleTask+0x2>
				taskYIELD();
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <prvIdleTask+0x24>)
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	e7f0      	b.n	8003e92 <prvIdleTask+0x2>
 8003eb0:	20000b40 	.word	0x20000b40
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eb8:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <vTaskSwitchContext+0x8c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	b9d3      	cbnz	r3, 8003ef4 <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <vTaskSwitchContext+0x90>)
 8003ec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ec4:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <vTaskSwitchContext+0x94>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f1c3 031f 	rsb	r3, r3, #31
 8003ed2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003ed6:	008a      	lsls	r2, r1, #2
 8003ed8:	491d      	ldr	r1, [pc, #116]	; (8003f50 <vTaskSwitchContext+0x98>)
 8003eda:	588a      	ldr	r2, [r1, r2]
 8003edc:	b972      	cbnz	r2, 8003efc <vTaskSwitchContext+0x44>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	b672      	cpsid	i
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	b662      	cpsie	i
 8003ef2:	e7fe      	b.n	8003ef2 <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <vTaskSwitchContext+0x90>)
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	4770      	bx	lr
{
 8003efc:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003efe:	4814      	ldr	r0, [pc, #80]	; (8003f50 <vTaskSwitchContext+0x98>)
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	18d4      	adds	r4, r2, r3
 8003f04:	00a1      	lsls	r1, r4, #2
 8003f06:	4401      	add	r1, r0
 8003f08:	684c      	ldr	r4, [r1, #4]
 8003f0a:	6864      	ldr	r4, [r4, #4]
 8003f0c:	604c      	str	r4, [r1, #4]
 8003f0e:	441a      	add	r2, r3
 8003f10:	0091      	lsls	r1, r2, #2
 8003f12:	3108      	adds	r1, #8
 8003f14:	4408      	add	r0, r1
 8003f16:	4284      	cmp	r4, r0
 8003f18:	d00b      	beq.n	8003f32 <vTaskSwitchContext+0x7a>
 8003f1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f1e:	009a      	lsls	r2, r3, #2
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <vTaskSwitchContext+0x98>)
 8003f22:	4413      	add	r3, r2
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <vTaskSwitchContext+0x9c>)
 8003f2a:	601a      	str	r2, [r3, #0]
}
 8003f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f30:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f32:	6860      	ldr	r0, [r4, #4]
 8003f34:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003f38:	0091      	lsls	r1, r2, #2
 8003f3a:	4a05      	ldr	r2, [pc, #20]	; (8003f50 <vTaskSwitchContext+0x98>)
 8003f3c:	440a      	add	r2, r1
 8003f3e:	6050      	str	r0, [r2, #4]
 8003f40:	e7eb      	b.n	8003f1a <vTaskSwitchContext+0x62>
 8003f42:	bf00      	nop
 8003f44:	20000bd8 	.word	0x20000bd8
 8003f48:	20000c5c 	.word	0x20000c5c
 8003f4c:	20000be0 	.word	0x20000be0
 8003f50:	20000b40 	.word	0x20000b40
 8003f54:	20000b34 	.word	0x20000b34

08003f58 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003f58:	b950      	cbnz	r0, 8003f70 <vTaskPlaceOnEventList+0x18>
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	b672      	cpsid	i
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	b662      	cpsie	i
 8003f6e:	e7fe      	b.n	8003f6e <vTaskPlaceOnEventList+0x16>
{
 8003f70:	b510      	push	{r4, lr}
 8003f72:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f74:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <vTaskPlaceOnEventList+0x30>)
 8003f76:	6819      	ldr	r1, [r3, #0]
 8003f78:	3118      	adds	r1, #24
 8003f7a:	f7fe ff58 	bl	8002e2e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4620      	mov	r0, r4
 8003f82:	f7ff fccf 	bl	8003924 <prvAddCurrentTaskToDelayedList>
 8003f86:	bd10      	pop	{r4, pc}
 8003f88:	20000b34 	.word	0x20000b34

08003f8c <xTaskRemoveFromEventList>:
{
 8003f8c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f8e:	68c3      	ldr	r3, [r0, #12]
 8003f90:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003f92:	b324      	cbz	r4, 8003fde <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f94:	f104 0518 	add.w	r5, r4, #24
 8003f98:	4628      	mov	r0, r5
 8003f9a:	f7fe ff62 	bl	8002e62 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f9e:	4b19      	ldr	r3, [pc, #100]	; (8004004 <xTaskRemoveFromEventList+0x78>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	bb3b      	cbnz	r3, 8003ff4 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fa4:	1d25      	adds	r5, r4, #4
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f7fe ff5b 	bl	8002e62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fae:	2201      	movs	r2, #1
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	4915      	ldr	r1, [pc, #84]	; (8004008 <xTaskRemoveFromEventList+0x7c>)
 8003fb4:	6808      	ldr	r0, [r1, #0]
 8003fb6:	4302      	orrs	r2, r0
 8003fb8:	600a      	str	r2, [r1, #0]
 8003fba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fbe:	009a      	lsls	r2, r3, #2
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	4812      	ldr	r0, [pc, #72]	; (800400c <xTaskRemoveFromEventList+0x80>)
 8003fc4:	4410      	add	r0, r2
 8003fc6:	f7fe ff26 	bl	8002e16 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <xTaskRemoveFromEventList+0x84>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d913      	bls.n	8003ffe <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <xTaskRemoveFromEventList+0x88>)
 8003fda:	6018      	str	r0, [r3, #0]
 8003fdc:	bd38      	pop	{r3, r4, r5, pc}
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	b672      	cpsid	i
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	b662      	cpsie	i
 8003ff2:	e7fe      	b.n	8003ff2 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4808      	ldr	r0, [pc, #32]	; (8004018 <xTaskRemoveFromEventList+0x8c>)
 8003ff8:	f7fe ff0d 	bl	8002e16 <vListInsertEnd>
 8003ffc:	e7e5      	b.n	8003fca <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8003ffe:	2000      	movs	r0, #0
}
 8004000:	bd38      	pop	{r3, r4, r5, pc}
 8004002:	bf00      	nop
 8004004:	20000bd8 	.word	0x20000bd8
 8004008:	20000be0 	.word	0x20000be0
 800400c:	20000b40 	.word	0x20000b40
 8004010:	20000b34 	.word	0x20000b34
 8004014:	20000c5c 	.word	0x20000c5c
 8004018:	20000c18 	.word	0x20000c18

0800401c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800401c:	b130      	cbz	r0, 800402c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <vTaskSetTimeOutState+0x28>)
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004024:	4a08      	ldr	r2, [pc, #32]	; (8004048 <vTaskSetTimeOutState+0x2c>)
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	6042      	str	r2, [r0, #4]
 800402a:	4770      	bx	lr
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	b672      	cpsid	i
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	b662      	cpsie	i
 8004040:	e7fe      	b.n	8004040 <vTaskSetTimeOutState+0x24>
 8004042:	bf00      	nop
 8004044:	20000c14 	.word	0x20000c14
 8004048:	20000c58 	.word	0x20000c58

0800404c <xTaskCheckForTimeOut>:
{
 800404c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 800404e:	b1c0      	cbz	r0, 8004082 <xTaskCheckForTimeOut+0x36>
 8004050:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8004052:	b309      	cbz	r1, 8004098 <xTaskCheckForTimeOut+0x4c>
 8004054:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004056:	f000 f975 	bl	8004344 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800405a:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <xTaskCheckForTimeOut+0x80>)
 800405c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800405e:	682b      	ldr	r3, [r5, #0]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004064:	d02e      	beq.n	80040c4 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004066:	6820      	ldr	r0, [r4, #0]
 8004068:	4a19      	ldr	r2, [pc, #100]	; (80040d0 <xTaskCheckForTimeOut+0x84>)
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	4290      	cmp	r0, r2
 800406e:	d002      	beq.n	8004076 <xTaskCheckForTimeOut+0x2a>
 8004070:	6862      	ldr	r2, [r4, #4]
 8004072:	4291      	cmp	r1, r2
 8004074:	d228      	bcs.n	80040c8 <xTaskCheckForTimeOut+0x7c>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004076:	6862      	ldr	r2, [r4, #4]
 8004078:	1a88      	subs	r0, r1, r2
 800407a:	4283      	cmp	r3, r0
 800407c:	d817      	bhi.n	80040ae <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 800407e:	2401      	movs	r4, #1
 8004080:	e01c      	b.n	80040bc <xTaskCheckForTimeOut+0x70>
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	b672      	cpsid	i
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	b662      	cpsie	i
 8004096:	e7fe      	b.n	8004096 <xTaskCheckForTimeOut+0x4a>
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	b672      	cpsid	i
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	b662      	cpsie	i
 80040ac:	e7fe      	b.n	80040ac <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80040ae:	1a52      	subs	r2, r2, r1
 80040b0:	4413      	add	r3, r2
 80040b2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7ff ffb1 	bl	800401c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80040ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80040bc:	f000 f968 	bl	8004390 <vPortExitCritical>
}
 80040c0:	4620      	mov	r0, r4
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 80040c4:	2400      	movs	r4, #0
 80040c6:	e7f9      	b.n	80040bc <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 80040c8:	2401      	movs	r4, #1
 80040ca:	e7f7      	b.n	80040bc <xTaskCheckForTimeOut+0x70>
 80040cc:	20000c58 	.word	0x20000c58
 80040d0:	20000c14 	.word	0x20000c14

080040d4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80040d4:	2201      	movs	r2, #1
 80040d6:	4b01      	ldr	r3, [pc, #4]	; (80040dc <vTaskMissedYield+0x8>)
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	4770      	bx	lr
 80040dc:	20000c5c 	.word	0x20000c5c

080040e0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <xTaskGetSchedulerState+0x18>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	b123      	cbz	r3, 80040f0 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <xTaskGetSchedulerState+0x1c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b91b      	cbnz	r3, 80040f4 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 80040ec:	2002      	movs	r0, #2
 80040ee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040f0:	2001      	movs	r0, #1
 80040f2:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 80040f4:	2000      	movs	r0, #0
	}
 80040f6:	4770      	bx	lr
 80040f8:	20000c2c 	.word	0x20000c2c
 80040fc:	20000bd8 	.word	0x20000bd8

08004100 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8004100:	2800      	cmp	r0, #0
 8004102:	d047      	beq.n	8004194 <vTaskPriorityInherit+0x94>
	{
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004108:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800410a:	4923      	ldr	r1, [pc, #140]	; (8004198 <vTaskPriorityInherit+0x98>)
 800410c:	6809      	ldr	r1, [r1, #0]
 800410e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004110:	428b      	cmp	r3, r1
 8004112:	d216      	bcs.n	8004142 <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004114:	6981      	ldr	r1, [r0, #24]
 8004116:	2900      	cmp	r1, #0
 8004118:	db05      	blt.n	8004126 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800411a:	491f      	ldr	r1, [pc, #124]	; (8004198 <vTaskPriorityInherit+0x98>)
 800411c:	6809      	ldr	r1, [r1, #0]
 800411e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004120:	f1c1 0107 	rsb	r1, r1, #7
 8004124:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004126:	6960      	ldr	r0, [r4, #20]
 8004128:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800412c:	0099      	lsls	r1, r3, #2
 800412e:	4b1b      	ldr	r3, [pc, #108]	; (800419c <vTaskPriorityInherit+0x9c>)
 8004130:	440b      	add	r3, r1
 8004132:	4298      	cmp	r0, r3
 8004134:	d006      	beq.n	8004144 <vTaskPriorityInherit+0x44>
 8004136:	2300      	movs	r3, #0
 8004138:	b933      	cbnz	r3, 8004148 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <vTaskPriorityInherit+0x98>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004142:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004144:	2301      	movs	r3, #1
 8004146:	e7f7      	b.n	8004138 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004148:	1d25      	adds	r5, r4, #4
 800414a:	4628      	mov	r0, r5
 800414c:	f7fe fe89 	bl	8002e62 <uxListRemove>
 8004150:	b968      	cbnz	r0, 800416e <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004152:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004154:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004158:	008a      	lsls	r2, r1, #2
 800415a:	4910      	ldr	r1, [pc, #64]	; (800419c <vTaskPriorityInherit+0x9c>)
 800415c:	588a      	ldr	r2, [r1, r2]
 800415e:	b932      	cbnz	r2, 800416e <vTaskPriorityInherit+0x6e>
 8004160:	2201      	movs	r2, #1
 8004162:	409a      	lsls	r2, r3
 8004164:	490e      	ldr	r1, [pc, #56]	; (80041a0 <vTaskPriorityInherit+0xa0>)
 8004166:	680b      	ldr	r3, [r1, #0]
 8004168:	ea23 0302 	bic.w	r3, r3, r2
 800416c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800416e:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <vTaskPriorityInherit+0x98>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004176:	2201      	movs	r2, #1
 8004178:	409a      	lsls	r2, r3
 800417a:	4909      	ldr	r1, [pc, #36]	; (80041a0 <vTaskPriorityInherit+0xa0>)
 800417c:	6808      	ldr	r0, [r1, #0]
 800417e:	4302      	orrs	r2, r0
 8004180:	600a      	str	r2, [r1, #0]
 8004182:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004186:	009a      	lsls	r2, r3, #2
 8004188:	4629      	mov	r1, r5
 800418a:	4804      	ldr	r0, [pc, #16]	; (800419c <vTaskPriorityInherit+0x9c>)
 800418c:	4410      	add	r0, r2
 800418e:	f7fe fe42 	bl	8002e16 <vListInsertEnd>
 8004192:	bd38      	pop	{r3, r4, r5, pc}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000b34 	.word	0x20000b34
 800419c:	20000b40 	.word	0x20000b40
 80041a0:	20000be0 	.word	0x20000be0

080041a4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d04e      	beq.n	8004246 <xTaskPriorityDisinherit+0xa2>
	{
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80041ac:	4a29      	ldr	r2, [pc, #164]	; (8004254 <xTaskPriorityDisinherit+0xb0>)
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	4290      	cmp	r0, r2
 80041b2:	d00a      	beq.n	80041ca <xTaskPriorityDisinherit+0x26>
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	b672      	cpsid	i
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	b662      	cpsie	i
 80041c8:	e7fe      	b.n	80041c8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80041ca:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80041cc:	b952      	cbnz	r2, 80041e4 <xTaskPriorityDisinherit+0x40>
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	b672      	cpsid	i
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	b662      	cpsie	i
 80041e2:	e7fe      	b.n	80041e2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 80041e4:	3a01      	subs	r2, #1
 80041e6:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80041ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80041ec:	4288      	cmp	r0, r1
 80041ee:	d02c      	beq.n	800424a <xTaskPriorityDisinherit+0xa6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041f0:	bb6a      	cbnz	r2, 800424e <xTaskPriorityDisinherit+0xaa>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041f2:	1d25      	adds	r5, r4, #4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f7fe fe34 	bl	8002e62 <uxListRemove>
 80041fa:	b970      	cbnz	r0, 800421a <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80041fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80041fe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004202:	008b      	lsls	r3, r1, #2
 8004204:	4914      	ldr	r1, [pc, #80]	; (8004258 <xTaskPriorityDisinherit+0xb4>)
 8004206:	58cb      	ldr	r3, [r1, r3]
 8004208:	b93b      	cbnz	r3, 800421a <xTaskPriorityDisinherit+0x76>
 800420a:	2301      	movs	r3, #1
 800420c:	fa03 f202 	lsl.w	r2, r3, r2
 8004210:	4912      	ldr	r1, [pc, #72]	; (800425c <xTaskPriorityDisinherit+0xb8>)
 8004212:	680b      	ldr	r3, [r1, #0]
 8004214:	ea23 0302 	bic.w	r3, r3, r2
 8004218:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800421a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800421c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800421e:	f1c3 0207 	rsb	r2, r3, #7
 8004222:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004224:	2401      	movs	r4, #1
 8004226:	fa04 f203 	lsl.w	r2, r4, r3
 800422a:	490c      	ldr	r1, [pc, #48]	; (800425c <xTaskPriorityDisinherit+0xb8>)
 800422c:	6808      	ldr	r0, [r1, #0]
 800422e:	4302      	orrs	r2, r0
 8004230:	600a      	str	r2, [r1, #0]
 8004232:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004236:	009a      	lsls	r2, r3, #2
 8004238:	4629      	mov	r1, r5
 800423a:	4807      	ldr	r0, [pc, #28]	; (8004258 <xTaskPriorityDisinherit+0xb4>)
 800423c:	4410      	add	r0, r2
 800423e:	f7fe fdea 	bl	8002e16 <vListInsertEnd>
					xReturn = pdTRUE;
 8004242:	4620      	mov	r0, r4
 8004244:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8004246:	2000      	movs	r0, #0
 8004248:	4770      	bx	lr
 800424a:	2000      	movs	r0, #0
 800424c:	bd38      	pop	{r3, r4, r5, pc}
 800424e:	2000      	movs	r0, #0
	}
 8004250:	bd38      	pop	{r3, r4, r5, pc}
 8004252:	bf00      	nop
 8004254:	20000b34 	.word	0x20000b34
 8004258:	20000b40 	.word	0x20000b40
 800425c:	20000be0 	.word	0x20000be0

08004260 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <pvTaskIncrementMutexHeldCount+0x18>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	b123      	cbz	r3, 8004270 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004266:	4b04      	ldr	r3, [pc, #16]	; (8004278 <pvTaskIncrementMutexHeldCount+0x18>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800426c:	3301      	adds	r3, #1
 800426e:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8004270:	4b01      	ldr	r3, [pc, #4]	; (8004278 <pvTaskIncrementMutexHeldCount+0x18>)
 8004272:	6818      	ldr	r0, [r3, #0]
	}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000b34 	.word	0x20000b34

0800427c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800427c:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <prvTaskExitError+0x38>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004284:	d00a      	beq.n	800429c <prvTaskExitError+0x20>
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	b672      	cpsid	i
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	b662      	cpsie	i
 800429a:	e7fe      	b.n	800429a <prvTaskExitError+0x1e>
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	b672      	cpsid	i
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	b662      	cpsie	i
 80042b0:	e7fe      	b.n	80042b0 <prvTaskExitError+0x34>
 80042b2:	bf00      	nop
 80042b4:	20000004 	.word	0x20000004

080042b8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80042b8:	4806      	ldr	r0, [pc, #24]	; (80042d4 <prvPortStartFirstTask+0x1c>)
 80042ba:	6800      	ldr	r0, [r0, #0]
 80042bc:	6800      	ldr	r0, [r0, #0]
 80042be:	f380 8808 	msr	MSP, r0
 80042c2:	b662      	cpsie	i
 80042c4:	b661      	cpsie	f
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	df00      	svc	0
 80042d0:	bf00      	nop
 80042d2:	0000      	.short	0x0000
 80042d4:	e000ed08 	.word	0xe000ed08

080042d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80042d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042e8 <vPortEnableVFP+0x10>
 80042dc:	6801      	ldr	r1, [r0, #0]
 80042de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80042e2:	6001      	str	r1, [r0, #0]
 80042e4:	4770      	bx	lr
 80042e6:	0000      	.short	0x0000
 80042e8:	e000ed88 	.word	0xe000ed88

080042ec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042f0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042f4:	f021 0101 	bic.w	r1, r1, #1
 80042f8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <pxPortInitialiseStack+0x28>)
 80042fe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004302:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004306:	f06f 0302 	mvn.w	r3, #2
 800430a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800430e:	3844      	subs	r0, #68	; 0x44
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	0800427d 	.word	0x0800427d
	...

08004320 <SVC_Handler>:
	__asm volatile (
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <pxCurrentTCBConst2>)
 8004322:	6819      	ldr	r1, [r3, #0]
 8004324:	6808      	ldr	r0, [r1, #0]
 8004326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	f380 8809 	msr	PSP, r0
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8811 	msr	BASEPRI, r0
 800433a:	4770      	bx	lr
 800433c:	f3af 8000 	nop.w

08004340 <pxCurrentTCBConst2>:
 8004340:	20000b34 	.word	0x20000b34

08004344 <vPortEnterCritical>:
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	b672      	cpsid	i
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	b662      	cpsie	i
	uxCriticalNesting++;
 8004358:	4a0b      	ldr	r2, [pc, #44]	; (8004388 <vPortEnterCritical+0x44>)
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	3301      	adds	r3, #1
 800435e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10f      	bne.n	8004384 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <vPortEnterCritical+0x48>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f013 0fff 	tst.w	r3, #255	; 0xff
 800436c:	d00a      	beq.n	8004384 <vPortEnterCritical+0x40>
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	b672      	cpsid	i
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	b662      	cpsie	i
 8004382:	e7fe      	b.n	8004382 <vPortEnterCritical+0x3e>
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000004 	.word	0x20000004
 800438c:	e000ed04 	.word	0xe000ed04

08004390 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <vPortExitCritical+0x2c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	b953      	cbnz	r3, 80043ac <vPortExitCritical+0x1c>
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	b672      	cpsid	i
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	b662      	cpsie	i
 80043aa:	e7fe      	b.n	80043aa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80043ac:	3b01      	subs	r3, #1
 80043ae:	4a03      	ldr	r2, [pc, #12]	; (80043bc <vPortExitCritical+0x2c>)
 80043b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043b2:	b90b      	cbnz	r3, 80043b8 <vPortExitCritical+0x28>
	__asm volatile
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000004 	.word	0x20000004

080043c0 <PendSV_Handler>:
	__asm volatile
 80043c0:	f3ef 8009 	mrs	r0, PSP
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <pxCurrentTCBConst>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	f01e 0f10 	tst.w	lr, #16
 80043d0:	bf08      	it	eq
 80043d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043da:	6010      	str	r0, [r2, #0]
 80043dc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80043e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043e4:	b672      	cpsid	i
 80043e6:	f380 8811 	msr	BASEPRI, r0
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	b662      	cpsie	i
 80043f4:	f7ff fd60 	bl	8003eb8 <vTaskSwitchContext>
 80043f8:	f04f 0000 	mov.w	r0, #0
 80043fc:	f380 8811 	msr	BASEPRI, r0
 8004400:	bc08      	pop	{r3}
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	6808      	ldr	r0, [r1, #0]
 8004406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440a:	f01e 0f10 	tst.w	lr, #16
 800440e:	bf08      	it	eq
 8004410:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004414:	f380 8809 	msr	PSP, r0
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop

08004420 <pxCurrentTCBConst>:
 8004420:	20000b34 	.word	0x20000b34

08004424 <SysTick_Handler>:
{
 8004424:	b508      	push	{r3, lr}
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	b672      	cpsid	i
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800443a:	f7ff fbbf 	bl	8003bbc <xTaskIncrementTick>
 800443e:	b118      	cbz	r0, 8004448 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004444:	4b02      	ldr	r3, [pc, #8]	; (8004450 <SysTick_Handler+0x2c>)
 8004446:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004448:	2300      	movs	r3, #0
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	bd08      	pop	{r3, pc}
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <vPortSetupTimerInterrupt+0x1c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a06      	ldr	r2, [pc, #24]	; (8004474 <vPortSetupTimerInterrupt+0x20>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	3b01      	subs	r3, #1
 8004462:	4a05      	ldr	r2, [pc, #20]	; (8004478 <vPortSetupTimerInterrupt+0x24>)
 8004464:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004466:	2207      	movs	r2, #7
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <vPortSetupTimerInterrupt+0x28>)
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000aac 	.word	0x20000aac
 8004474:	10624dd3 	.word	0x10624dd3
 8004478:	e000e014 	.word	0xe000e014
 800447c:	e000e010 	.word	0xe000e010

08004480 <xPortStartScheduler>:
{
 8004480:	b500      	push	{lr}
 8004482:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004484:	4b22      	ldr	r3, [pc, #136]	; (8004510 <xPortStartScheduler+0x90>)
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800448c:	22ff      	movs	r2, #255	; 0xff
 800448e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004498:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800449c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044a0:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <xPortStartScheduler+0x94>)
 80044a2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044a4:	2207      	movs	r2, #7
 80044a6:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <xPortStartScheduler+0x98>)
 80044a8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044aa:	e009      	b.n	80044c0 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80044ac:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <xPortStartScheduler+0x98>)
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80044c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044c8:	d1f0      	bne.n	80044ac <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044ca:	4a13      	ldr	r2, [pc, #76]	; (8004518 <xPortStartScheduler+0x98>)
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044d4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044d6:	9b01      	ldr	r3, [sp, #4]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	4a0d      	ldr	r2, [pc, #52]	; (8004510 <xPortStartScheduler+0x90>)
 80044dc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <xPortStartScheduler+0x9c>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80044e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80044ee:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80044f0:	f7ff ffb0 	bl	8004454 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80044f4:	2200      	movs	r2, #0
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <xPortStartScheduler+0xa0>)
 80044f8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80044fa:	f7ff feed 	bl	80042d8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044fe:	4a09      	ldr	r2, [pc, #36]	; (8004524 <xPortStartScheduler+0xa4>)
 8004500:	6813      	ldr	r3, [r2, #0]
 8004502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004506:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004508:	f7ff fed6 	bl	80042b8 <prvPortStartFirstTask>
	prvTaskExitError();
 800450c:	f7ff feb6 	bl	800427c <prvTaskExitError>
 8004510:	e000e400 	.word	0xe000e400
 8004514:	20000c60 	.word	0x20000c60
 8004518:	20000c64 	.word	0x20000c64
 800451c:	e000ed20 	.word	0xe000ed20
 8004520:	20000004 	.word	0x20000004
 8004524:	e000ef34 	.word	0xe000ef34

08004528 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004528:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800452c:	2b0f      	cmp	r3, #15
 800452e:	d911      	bls.n	8004554 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004530:	4a12      	ldr	r2, [pc, #72]	; (800457c <vPortValidateInterruptPriority+0x54>)
 8004532:	5c9b      	ldrb	r3, [r3, r2]
 8004534:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004536:	4a12      	ldr	r2, [pc, #72]	; (8004580 <vPortValidateInterruptPriority+0x58>)
 8004538:	7812      	ldrb	r2, [r2, #0]
 800453a:	4293      	cmp	r3, r2
 800453c:	d20a      	bcs.n	8004554 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	b672      	cpsid	i
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	b662      	cpsie	i
 8004552:	e7fe      	b.n	8004552 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <vPortValidateInterruptPriority+0x5c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800455c:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <vPortValidateInterruptPriority+0x60>)
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	4293      	cmp	r3, r2
 8004562:	d90a      	bls.n	800457a <vPortValidateInterruptPriority+0x52>
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	b672      	cpsid	i
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	b662      	cpsie	i
 8004578:	e7fe      	b.n	8004578 <vPortValidateInterruptPriority+0x50>
 800457a:	4770      	bx	lr
 800457c:	e000e3f0 	.word	0xe000e3f0
 8004580:	20000c60 	.word	0x20000c60
 8004584:	e000ed0c 	.word	0xe000ed0c
 8004588:	20000c64 	.word	0x20000c64

0800458c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800458c:	4a12      	ldr	r2, [pc, #72]	; (80045d8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800458e:	f012 0f07 	tst.w	r2, #7
 8004592:	d01e      	beq.n	80045d2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004594:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004596:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800459a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800459e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045a0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045a2:	480e      	ldr	r0, [pc, #56]	; (80045dc <prvHeapInit+0x50>)
 80045a4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045a6:	2100      	movs	r1, #0
 80045a8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045aa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80045ac:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045ae:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80045b2:	480b      	ldr	r0, [pc, #44]	; (80045e0 <prvHeapInit+0x54>)
 80045b4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80045b6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045b8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045ba:	1a99      	subs	r1, r3, r2
 80045bc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045be:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <prvHeapInit+0x58>)
 80045c2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <prvHeapInit+0x5c>)
 80045c6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045cc:	4b07      	ldr	r3, [pc, #28]	; (80045ec <prvHeapInit+0x60>)
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045d2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80045d6:	e7e4      	b.n	80045a2 <prvHeapInit+0x16>
 80045d8:	20000c6c 	.word	0x20000c6c
 80045dc:	20004878 	.word	0x20004878
 80045e0:	20000c68 	.word	0x20000c68
 80045e4:	20004874 	.word	0x20004874
 80045e8:	20004870 	.word	0x20004870
 80045ec:	2000486c 	.word	0x2000486c

080045f0 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80045f0:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045f2:	4b13      	ldr	r3, [pc, #76]	; (8004640 <prvInsertBlockIntoFreeList+0x50>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4282      	cmp	r2, r0
 80045f8:	d31b      	bcc.n	8004632 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	185c      	adds	r4, r3, r1
 80045fe:	42a0      	cmp	r0, r4
 8004600:	d103      	bne.n	800460a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004602:	6840      	ldr	r0, [r0, #4]
 8004604:	4401      	add	r1, r0
 8004606:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004608:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800460a:	6841      	ldr	r1, [r0, #4]
 800460c:	1844      	adds	r4, r0, r1
 800460e:	42a2      	cmp	r2, r4
 8004610:	d113      	bne.n	800463a <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004612:	4c0c      	ldr	r4, [pc, #48]	; (8004644 <prvInsertBlockIntoFreeList+0x54>)
 8004614:	6824      	ldr	r4, [r4, #0]
 8004616:	42a2      	cmp	r2, r4
 8004618:	d00d      	beq.n	8004636 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800461a:	6852      	ldr	r2, [r2, #4]
 800461c:	4411      	add	r1, r2
 800461e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004626:	4298      	cmp	r0, r3
 8004628:	d000      	beq.n	800462c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800462a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800462c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004630:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004632:	4613      	mov	r3, r2
 8004634:	e7de      	b.n	80045f4 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004636:	6004      	str	r4, [r0, #0]
 8004638:	e7f5      	b.n	8004626 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800463a:	6002      	str	r2, [r0, #0]
 800463c:	e7f3      	b.n	8004626 <prvInsertBlockIntoFreeList+0x36>
 800463e:	bf00      	nop
 8004640:	20004878 	.word	0x20004878
 8004644:	20000c68 	.word	0x20000c68

08004648 <pvPortMalloc>:
{
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800464c:	f7ff faa0 	bl	8003b90 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004650:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <pvPortMalloc+0x100>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b1cb      	cbz	r3, 800468a <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004656:	4b3d      	ldr	r3, [pc, #244]	; (800474c <pvPortMalloc+0x104>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	421c      	tst	r4, r3
 800465c:	d169      	bne.n	8004732 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 800465e:	b1bc      	cbz	r4, 8004690 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8004660:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004662:	f014 0f07 	tst.w	r4, #7
 8004666:	d013      	beq.n	8004690 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004668:	f024 0407 	bic.w	r4, r4, #7
 800466c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800466e:	f004 0307 	and.w	r3, r4, #7
 8004672:	b16b      	cbz	r3, 8004690 <pvPortMalloc+0x48>
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	b672      	cpsid	i
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	b662      	cpsie	i
 8004688:	e7fe      	b.n	8004688 <pvPortMalloc+0x40>
			prvHeapInit();
 800468a:	f7ff ff7f 	bl	800458c <prvHeapInit>
 800468e:	e7e2      	b.n	8004656 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004690:	2c00      	cmp	r4, #0
 8004692:	d050      	beq.n	8004736 <pvPortMalloc+0xee>
 8004694:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <pvPortMalloc+0x108>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	429c      	cmp	r4, r3
 800469a:	d84e      	bhi.n	800473a <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <pvPortMalloc+0x10c>)
 800469e:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046a0:	e001      	b.n	80046a6 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 80046a2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80046a4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046a6:	686a      	ldr	r2, [r5, #4]
 80046a8:	4294      	cmp	r4, r2
 80046aa:	d902      	bls.n	80046b2 <pvPortMalloc+0x6a>
 80046ac:	682a      	ldr	r2, [r5, #0]
 80046ae:	2a00      	cmp	r2, #0
 80046b0:	d1f7      	bne.n	80046a2 <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 80046b2:	4a25      	ldr	r2, [pc, #148]	; (8004748 <pvPortMalloc+0x100>)
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	4295      	cmp	r5, r2
 80046b8:	d041      	beq.n	800473e <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046ba:	681e      	ldr	r6, [r3, #0]
 80046bc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046be:	682a      	ldr	r2, [r5, #0]
 80046c0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046c2:	686b      	ldr	r3, [r5, #4]
 80046c4:	1b1b      	subs	r3, r3, r4
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d912      	bls.n	80046f0 <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046ca:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046cc:	f010 0f07 	tst.w	r0, #7
 80046d0:	d00a      	beq.n	80046e8 <pvPortMalloc+0xa0>
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	b672      	cpsid	i
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	b662      	cpsie	i
 80046e6:	e7fe      	b.n	80046e6 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046e8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046ea:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046ec:	f7ff ff80 	bl	80045f0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046f0:	686a      	ldr	r2, [r5, #4]
 80046f2:	4917      	ldr	r1, [pc, #92]	; (8004750 <pvPortMalloc+0x108>)
 80046f4:	680b      	ldr	r3, [r1, #0]
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046fa:	4917      	ldr	r1, [pc, #92]	; (8004758 <pvPortMalloc+0x110>)
 80046fc:	6809      	ldr	r1, [r1, #0]
 80046fe:	428b      	cmp	r3, r1
 8004700:	d201      	bcs.n	8004706 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004702:	4915      	ldr	r1, [pc, #84]	; (8004758 <pvPortMalloc+0x110>)
 8004704:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <pvPortMalloc+0x104>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4313      	orrs	r3, r2
 800470c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004712:	f7ff fae5 	bl	8003ce0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004716:	f016 0f07 	tst.w	r6, #7
 800471a:	d012      	beq.n	8004742 <pvPortMalloc+0xfa>
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	b672      	cpsid	i
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	b662      	cpsie	i
 8004730:	e7fe      	b.n	8004730 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8004732:	2600      	movs	r6, #0
 8004734:	e7ed      	b.n	8004712 <pvPortMalloc+0xca>
 8004736:	2600      	movs	r6, #0
 8004738:	e7eb      	b.n	8004712 <pvPortMalloc+0xca>
 800473a:	2600      	movs	r6, #0
 800473c:	e7e9      	b.n	8004712 <pvPortMalloc+0xca>
 800473e:	2600      	movs	r6, #0
 8004740:	e7e7      	b.n	8004712 <pvPortMalloc+0xca>
}
 8004742:	4630      	mov	r0, r6
 8004744:	bd70      	pop	{r4, r5, r6, pc}
 8004746:	bf00      	nop
 8004748:	20000c68 	.word	0x20000c68
 800474c:	2000486c 	.word	0x2000486c
 8004750:	20004870 	.word	0x20004870
 8004754:	20004878 	.word	0x20004878
 8004758:	20004874 	.word	0x20004874

0800475c <vPortFree>:
	if( pv != NULL )
 800475c:	2800      	cmp	r0, #0
 800475e:	d034      	beq.n	80047ca <vPortFree+0x6e>
{
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8004764:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004768:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800476c:	4917      	ldr	r1, [pc, #92]	; (80047cc <vPortFree+0x70>)
 800476e:	6809      	ldr	r1, [r1, #0]
 8004770:	420a      	tst	r2, r1
 8004772:	d10a      	bne.n	800478a <vPortFree+0x2e>
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	b672      	cpsid	i
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	b662      	cpsie	i
 8004788:	e7fe      	b.n	8004788 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800478a:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800478e:	b150      	cbz	r0, 80047a6 <vPortFree+0x4a>
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	b672      	cpsid	i
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	b662      	cpsie	i
 80047a4:	e7fe      	b.n	80047a4 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047a6:	ea22 0201 	bic.w	r2, r2, r1
 80047aa:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 80047ae:	f7ff f9ef 	bl	8003b90 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047b2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80047b6:	4a06      	ldr	r2, [pc, #24]	; (80047d0 <vPortFree+0x74>)
 80047b8:	6813      	ldr	r3, [r2, #0]
 80047ba:	440b      	add	r3, r1
 80047bc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047be:	4628      	mov	r0, r5
 80047c0:	f7ff ff16 	bl	80045f0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80047c4:	f7ff fa8c 	bl	8003ce0 <xTaskResumeAll>
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
 80047ca:	4770      	bx	lr
 80047cc:	2000486c 	.word	0x2000486c
 80047d0:	20004870 	.word	0x20004870

080047d4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80047d4:	b510      	push	{r4, lr}
 80047d6:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80047d8:	680a      	ldr	r2, [r1, #0]
 80047da:	320c      	adds	r2, #12
 80047dc:	f001 fc28 	bl	8006030 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80047e0:	4603      	mov	r3, r0
 80047e2:	b908      	cbnz	r0, 80047e8 <netconn_apimsg+0x14>
    return apimsg->err;
 80047e4:	f994 3004 	ldrsb.w	r3, [r4, #4]
  }
  return err;
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd10      	pop	{r4, pc}

080047ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80047ec:	b500      	push	{lr}
 80047ee:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80047f0:	b160      	cbz	r0, 800480c <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80047f2:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80047f4:	f88d 100c 	strb.w	r1, [sp, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80047f8:	2329      	movs	r3, #41	; 0x29
 80047fa:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80047fe:	a901      	add	r1, sp, #4
 8004800:	4807      	ldr	r0, [pc, #28]	; (8004820 <netconn_close_shutdown+0x34>)
 8004802:	f7ff ffe7 	bl	80047d4 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8004806:	b007      	add	sp, #28
 8004808:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <netconn_close_shutdown+0x38>)
 800480e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004812:	4905      	ldr	r1, [pc, #20]	; (8004828 <netconn_close_shutdown+0x3c>)
 8004814:	4805      	ldr	r0, [pc, #20]	; (800482c <netconn_close_shutdown+0x40>)
 8004816:	f00a fb33 	bl	800ee80 <iprintf>
 800481a:	f06f 000f 	mvn.w	r0, #15
 800481e:	e7f2      	b.n	8004806 <netconn_close_shutdown+0x1a>
 8004820:	08005d0d 	.word	0x08005d0d
 8004824:	08010188 	.word	0x08010188
 8004828:	080101bc 	.word	0x080101bc
 800482c:	080101d8 	.word	0x080101d8

08004830 <netconn_recv_data>:
{
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	b086      	sub	sp, #24
  void *buf = NULL;
 8004834:	2300      	movs	r3, #0
 8004836:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004838:	b1b1      	cbz	r1, 8004868 <netconn_recv_data+0x38>
 800483a:	4604      	mov	r4, r0
 800483c:	460d      	mov	r5, r1
  *new_buf = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004842:	b1d8      	cbz	r0, 800487c <netconn_recv_data+0x4c>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004844:	7803      	ldrb	r3, [r0, #0]
 8004846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800484a:	2b10      	cmp	r3, #16
 800484c:	d020      	beq.n	8004890 <netconn_recv_data+0x60>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800484e:	f104 0610 	add.w	r6, r4, #16
 8004852:	4630      	mov	r0, r6
 8004854:	f009 fa3b 	bl	800dcce <sys_mbox_valid>
 8004858:	b340      	cbz	r0, 80048ac <netconn_recv_data+0x7c>
  if (ERR_IS_FATAL(conn->last_err)) {
 800485a:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800485e:	f110 0f0c 	cmn.w	r0, #12
 8004862:	da2d      	bge.n	80048c0 <netconn_recv_data+0x90>
}
 8004864:	b006      	add	sp, #24
 8004866:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004868:	4b3a      	ldr	r3, [pc, #232]	; (8004954 <netconn_recv_data+0x124>)
 800486a:	f240 12e7 	movw	r2, #487	; 0x1e7
 800486e:	493a      	ldr	r1, [pc, #232]	; (8004958 <netconn_recv_data+0x128>)
 8004870:	483a      	ldr	r0, [pc, #232]	; (800495c <netconn_recv_data+0x12c>)
 8004872:	f00a fb05 	bl	800ee80 <iprintf>
 8004876:	f06f 000f 	mvn.w	r0, #15
 800487a:	e7f3      	b.n	8004864 <netconn_recv_data+0x34>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800487c:	4b35      	ldr	r3, [pc, #212]	; (8004954 <netconn_recv_data+0x124>)
 800487e:	f240 12e9 	movw	r2, #489	; 0x1e9
 8004882:	4937      	ldr	r1, [pc, #220]	; (8004960 <netconn_recv_data+0x130>)
 8004884:	4835      	ldr	r0, [pc, #212]	; (800495c <netconn_recv_data+0x12c>)
 8004886:	f00a fafb 	bl	800ee80 <iprintf>
 800488a:	f06f 000f 	mvn.w	r0, #15
 800488e:	e7e9      	b.n	8004864 <netconn_recv_data+0x34>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8004890:	3010      	adds	r0, #16
 8004892:	f009 fa1c 	bl	800dcce <sys_mbox_valid>
 8004896:	2800      	cmp	r0, #0
 8004898:	d1d9      	bne.n	800484e <netconn_recv_data+0x1e>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800489a:	f104 0014 	add.w	r0, r4, #20
 800489e:	f009 fa16 	bl	800dcce <sys_mbox_valid>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d053      	beq.n	800494e <netconn_recv_data+0x11e>
 80048a6:	f06f 000a 	mvn.w	r0, #10
 80048aa:	e7db      	b.n	8004864 <netconn_recv_data+0x34>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80048ac:	4b29      	ldr	r3, [pc, #164]	; (8004954 <netconn_recv_data+0x124>)
 80048ae:	f240 12f5 	movw	r2, #501	; 0x1f5
 80048b2:	492c      	ldr	r1, [pc, #176]	; (8004964 <netconn_recv_data+0x134>)
 80048b4:	4829      	ldr	r0, [pc, #164]	; (800495c <netconn_recv_data+0x12c>)
 80048b6:	f00a fae3 	bl	800ee80 <iprintf>
 80048ba:	f06f 000a 	mvn.w	r0, #10
 80048be:	e7d1      	b.n	8004864 <netconn_recv_data+0x34>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80048c0:	2200      	movs	r2, #0
 80048c2:	a905      	add	r1, sp, #20
 80048c4:	4630      	mov	r0, r6
 80048c6:	f009 f9c2 	bl	800dc4e <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80048ca:	7823      	ldrb	r3, [r4, #0]
 80048cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d00e      	beq.n	80048f2 <netconn_recv_data+0xc2>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80048d4:	9b05      	ldr	r3, [sp, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d031      	beq.n	800493e <netconn_recv_data+0x10e>
    len = netbuf_len((struct netbuf*)buf);
 80048da:	9b05      	ldr	r3, [sp, #20]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80048e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048e2:	b113      	cbz	r3, 80048ea <netconn_recv_data+0xba>
 80048e4:	2101      	movs	r1, #1
 80048e6:	4620      	mov	r0, r4
 80048e8:	4798      	blx	r3
  *new_buf = buf;
 80048ea:	9b05      	ldr	r3, [sp, #20]
 80048ec:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 80048ee:	2000      	movs	r0, #0
 80048f0:	e7b8      	b.n	8004864 <netconn_recv_data+0x34>
    API_MSG_VAR_REF(msg).conn = conn;
 80048f2:	9400      	str	r4, [sp, #0]
    if (buf != NULL) {
 80048f4:	9b05      	ldr	r3, [sp, #20]
 80048f6:	b14b      	cbz	r3, 800490c <netconn_recv_data+0xdc>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 80048f8:	891b      	ldrh	r3, [r3, #8]
 80048fa:	9302      	str	r3, [sp, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 80048fc:	4669      	mov	r1, sp
 80048fe:	481a      	ldr	r0, [pc, #104]	; (8004968 <netconn_recv_data+0x138>)
 8004900:	f7ff ff68 	bl	80047d4 <netconn_apimsg>
    if (buf == NULL) {
 8004904:	9b05      	ldr	r3, [sp, #20]
 8004906:	b123      	cbz	r3, 8004912 <netconn_recv_data+0xe2>
    len = ((struct pbuf *)buf)->tot_len;
 8004908:	891a      	ldrh	r2, [r3, #8]
 800490a:	e7e9      	b.n	80048e0 <netconn_recv_data+0xb0>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800490c:	2301      	movs	r3, #1
 800490e:	9302      	str	r3, [sp, #8]
 8004910:	e7f4      	b.n	80048fc <netconn_recv_data+0xcc>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8004912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004914:	b11b      	cbz	r3, 800491e <netconn_recv_data+0xee>
 8004916:	2200      	movs	r2, #0
 8004918:	2101      	movs	r1, #1
 800491a:	4620      	mov	r0, r4
 800491c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800491e:	6863      	ldr	r3, [r4, #4]
 8004920:	b933      	cbnz	r3, 8004930 <netconn_recv_data+0x100>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8004922:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8004926:	2800      	cmp	r0, #0
 8004928:	d19c      	bne.n	8004864 <netconn_recv_data+0x34>
 800492a:	f06f 000d 	mvn.w	r0, #13
 800492e:	e799      	b.n	8004864 <netconn_recv_data+0x34>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8004930:	2101      	movs	r1, #1
 8004932:	4620      	mov	r0, r4
 8004934:	f7ff ff5a 	bl	80047ec <netconn_close_shutdown>
      return ERR_CLSD;
 8004938:	f06f 000e 	mvn.w	r0, #14
 800493c:	e792      	b.n	8004864 <netconn_recv_data+0x34>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <netconn_recv_data+0x124>)
 8004940:	f240 223e 	movw	r2, #574	; 0x23e
 8004944:	4909      	ldr	r1, [pc, #36]	; (800496c <netconn_recv_data+0x13c>)
 8004946:	4805      	ldr	r0, [pc, #20]	; (800495c <netconn_recv_data+0x12c>)
 8004948:	f00a fa9a 	bl	800ee80 <iprintf>
 800494c:	e7c5      	b.n	80048da <netconn_recv_data+0xaa>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800494e:	f06f 000e 	mvn.w	r0, #14
 8004952:	e787      	b.n	8004864 <netconn_recv_data+0x34>
 8004954:	08010188 	.word	0x08010188
 8004958:	0801029c 	.word	0x0801029c
 800495c:	080101d8 	.word	0x080101d8
 8004960:	080102bc 	.word	0x080102bc
 8004964:	080102d8 	.word	0x080102d8
 8004968:	08005bb5 	.word	0x08005bb5
 800496c:	080102f8 	.word	0x080102f8

08004970 <netconn_new_with_proto_and_callback>:
{
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	460d      	mov	r5, r1
  conn = netconn_alloc(t, callback);
 8004976:	4611      	mov	r1, r2
 8004978:	f000 fe5c 	bl	8005634 <netconn_alloc>
  if (conn != NULL) {
 800497c:	4604      	mov	r4, r0
 800497e:	b140      	cbz	r0, 8004992 <netconn_new_with_proto_and_callback+0x22>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8004980:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8004984:	a906      	add	r1, sp, #24
 8004986:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800498a:	4820      	ldr	r0, [pc, #128]	; (8004a0c <netconn_new_with_proto_and_callback+0x9c>)
 800498c:	f7ff ff22 	bl	80047d4 <netconn_apimsg>
    if (err != ERR_OK) {
 8004990:	b910      	cbnz	r0, 8004998 <netconn_new_with_proto_and_callback+0x28>
}
 8004992:	4620      	mov	r0, r4
 8004994:	b006      	add	sp, #24
 8004996:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8004998:	6863      	ldr	r3, [r4, #4]
 800499a:	b12b      	cbz	r3, 80049a8 <netconn_new_with_proto_and_callback+0x38>
 800499c:	4b1c      	ldr	r3, [pc, #112]	; (8004a10 <netconn_new_with_proto_and_callback+0xa0>)
 800499e:	2289      	movs	r2, #137	; 0x89
 80049a0:	491c      	ldr	r1, [pc, #112]	; (8004a14 <netconn_new_with_proto_and_callback+0xa4>)
 80049a2:	481d      	ldr	r0, [pc, #116]	; (8004a18 <netconn_new_with_proto_and_callback+0xa8>)
 80049a4:	f00a fa6c 	bl	800ee80 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80049a8:	f104 0510 	add.w	r5, r4, #16
 80049ac:	4628      	mov	r0, r5
 80049ae:	f009 f98e 	bl	800dcce <sys_mbox_valid>
 80049b2:	b1b0      	cbz	r0, 80049e2 <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80049b4:	f104 0014 	add.w	r0, r4, #20
 80049b8:	f009 f989 	bl	800dcce <sys_mbox_valid>
 80049bc:	b9c0      	cbnz	r0, 80049f0 <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80049be:	f104 060c 	add.w	r6, r4, #12
 80049c2:	4630      	mov	r0, r6
 80049c4:	f009 f9cd 	bl	800dd62 <sys_sem_valid>
 80049c8:	b1c8      	cbz	r0, 80049fe <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 80049ca:	4630      	mov	r0, r6
 80049cc:	f009 f9c4 	bl	800dd58 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 80049d0:	4628      	mov	r0, r5
 80049d2:	f009 f91d 	bl	800dc10 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80049d6:	4621      	mov	r1, r4
 80049d8:	2007      	movs	r0, #7
 80049da:	f001 fe63 	bl	80066a4 <memp_free>
      return NULL;
 80049de:	2400      	movs	r4, #0
 80049e0:	e7d7      	b.n	8004992 <netconn_new_with_proto_and_callback+0x22>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <netconn_new_with_proto_and_callback+0xa0>)
 80049e4:	228a      	movs	r2, #138	; 0x8a
 80049e6:	490d      	ldr	r1, [pc, #52]	; (8004a1c <netconn_new_with_proto_and_callback+0xac>)
 80049e8:	480b      	ldr	r0, [pc, #44]	; (8004a18 <netconn_new_with_proto_and_callback+0xa8>)
 80049ea:	f00a fa49 	bl	800ee80 <iprintf>
 80049ee:	e7e1      	b.n	80049b4 <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <netconn_new_with_proto_and_callback+0xa0>)
 80049f2:	228c      	movs	r2, #140	; 0x8c
 80049f4:	490a      	ldr	r1, [pc, #40]	; (8004a20 <netconn_new_with_proto_and_callback+0xb0>)
 80049f6:	4808      	ldr	r0, [pc, #32]	; (8004a18 <netconn_new_with_proto_and_callback+0xa8>)
 80049f8:	f00a fa42 	bl	800ee80 <iprintf>
 80049fc:	e7df      	b.n	80049be <netconn_new_with_proto_and_callback+0x4e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80049fe:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <netconn_new_with_proto_and_callback+0xa0>)
 8004a00:	228f      	movs	r2, #143	; 0x8f
 8004a02:	4908      	ldr	r1, [pc, #32]	; (8004a24 <netconn_new_with_proto_and_callback+0xb4>)
 8004a04:	4804      	ldr	r0, [pc, #16]	; (8004a18 <netconn_new_with_proto_and_callback+0xa8>)
 8004a06:	f00a fa3b 	bl	800ee80 <iprintf>
 8004a0a:	e7de      	b.n	80049ca <netconn_new_with_proto_and_callback+0x5a>
 8004a0c:	08005601 	.word	0x08005601
 8004a10:	08010188 	.word	0x08010188
 8004a14:	08010220 	.word	0x08010220
 8004a18:	080101d8 	.word	0x080101d8
 8004a1c:	08010244 	.word	0x08010244
 8004a20:	0801025c 	.word	0x0801025c
 8004a24:	08010280 	.word	0x08010280

08004a28 <netconn_delete>:
{
 8004a28:	b530      	push	{r4, r5, lr}
 8004a2a:	b087      	sub	sp, #28
  if (conn == NULL) {
 8004a2c:	b170      	cbz	r0, 8004a4c <netconn_delete+0x24>
 8004a2e:	4604      	mov	r4, r0
  API_MSG_VAR_REF(msg).conn = conn;
 8004a30:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004a32:	2329      	movs	r3, #41	; 0x29
 8004a34:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004a38:	a901      	add	r1, sp, #4
 8004a3a:	4806      	ldr	r0, [pc, #24]	; (8004a54 <netconn_delete+0x2c>)
 8004a3c:	f7ff feca 	bl	80047d4 <netconn_apimsg>
  if (err != ERR_OK) {
 8004a40:	4605      	mov	r5, r0
 8004a42:	b920      	cbnz	r0, 8004a4e <netconn_delete+0x26>
  netconn_free(conn);
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 fe3b 	bl	80056c0 <netconn_free>
  return ERR_OK;
 8004a4a:	e000      	b.n	8004a4e <netconn_delete+0x26>
    return ERR_OK;
 8004a4c:	2500      	movs	r5, #0
}
 8004a4e:	4628      	mov	r0, r5
 8004a50:	b007      	add	sp, #28
 8004a52:	bd30      	pop	{r4, r5, pc}
 8004a54:	080058e9 	.word	0x080058e9

08004a58 <netconn_bind>:
{
 8004a58:	b500      	push	{lr}
 8004a5a:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8004a5c:	b160      	cbz	r0, 8004a78 <netconn_bind+0x20>
 8004a5e:	4603      	mov	r3, r0
  if (addr == NULL) {
 8004a60:	b199      	cbz	r1, 8004a8a <netconn_bind+0x32>
  API_MSG_VAR_REF(msg).conn = conn;
 8004a62:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8004a64:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8004a66:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8004a6a:	a901      	add	r1, sp, #4
 8004a6c:	4808      	ldr	r0, [pc, #32]	; (8004a90 <netconn_bind+0x38>)
 8004a6e:	f7ff feb1 	bl	80047d4 <netconn_apimsg>
}
 8004a72:	b007      	add	sp, #28
 8004a74:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <netconn_bind+0x3c>)
 8004a7a:	22ff      	movs	r2, #255	; 0xff
 8004a7c:	4906      	ldr	r1, [pc, #24]	; (8004a98 <netconn_bind+0x40>)
 8004a7e:	4807      	ldr	r0, [pc, #28]	; (8004a9c <netconn_bind+0x44>)
 8004a80:	f00a f9fe 	bl	800ee80 <iprintf>
 8004a84:	f06f 000f 	mvn.w	r0, #15
 8004a88:	e7f3      	b.n	8004a72 <netconn_bind+0x1a>
    addr = IP4_ADDR_ANY;
 8004a8a:	4905      	ldr	r1, [pc, #20]	; (8004aa0 <netconn_bind+0x48>)
 8004a8c:	e7e9      	b.n	8004a62 <netconn_bind+0xa>
 8004a8e:	bf00      	nop
 8004a90:	08005a61 	.word	0x08005a61
 8004a94:	08010188 	.word	0x08010188
 8004a98:	0801016c 	.word	0x0801016c
 8004a9c:	080101d8 	.word	0x080101d8
 8004aa0:	08012444 	.word	0x08012444

08004aa4 <netconn_listen_with_backlog>:
{
 8004aa4:	b500      	push	{lr}
 8004aa6:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8004aa8:	b140      	cbz	r0, 8004abc <netconn_listen_with_backlog+0x18>
  API_MSG_VAR_REF(msg).conn = conn;
 8004aaa:	a906      	add	r1, sp, #24
 8004aac:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8004ab0:	4807      	ldr	r0, [pc, #28]	; (8004ad0 <netconn_listen_with_backlog+0x2c>)
 8004ab2:	f7ff fe8f 	bl	80047d4 <netconn_apimsg>
}
 8004ab6:	b007      	add	sp, #28
 8004ab8:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8004abc:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <netconn_listen_with_backlog+0x30>)
 8004abe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8004ac2:	4905      	ldr	r1, [pc, #20]	; (8004ad8 <netconn_listen_with_backlog+0x34>)
 8004ac4:	4805      	ldr	r0, [pc, #20]	; (8004adc <netconn_listen_with_backlog+0x38>)
 8004ac6:	f00a f9db 	bl	800ee80 <iprintf>
 8004aca:	f06f 000f 	mvn.w	r0, #15
 8004ace:	e7f2      	b.n	8004ab6 <netconn_listen_with_backlog+0x12>
 8004ad0:	08005ac5 	.word	0x08005ac5
 8004ad4:	08010188 	.word	0x08010188
 8004ad8:	08010200 	.word	0x08010200
 8004adc:	080101d8 	.word	0x080101d8

08004ae0 <netconn_accept>:
{
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8004ae4:	b159      	cbz	r1, 8004afe <netconn_accept+0x1e>
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	460d      	mov	r5, r1
  *new_conn = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8004aee:	b180      	cbz	r0, 8004b12 <netconn_accept+0x32>
  if (ERR_IS_FATAL(conn->last_err)) {
 8004af0:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8004af4:	f110 0f0c 	cmn.w	r0, #12
 8004af8:	da15      	bge.n	8004b26 <netconn_accept+0x46>
}
 8004afa:	b002      	add	sp, #8
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8004afe:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <netconn_accept+0xa4>)
 8004b00:	f240 128d 	movw	r2, #397	; 0x18d
 8004b04:	4920      	ldr	r1, [pc, #128]	; (8004b88 <netconn_accept+0xa8>)
 8004b06:	4821      	ldr	r0, [pc, #132]	; (8004b8c <netconn_accept+0xac>)
 8004b08:	f00a f9ba 	bl	800ee80 <iprintf>
 8004b0c:	f06f 000f 	mvn.w	r0, #15
 8004b10:	e7f3      	b.n	8004afa <netconn_accept+0x1a>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8004b12:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <netconn_accept+0xa4>)
 8004b14:	f240 128f 	movw	r2, #399	; 0x18f
 8004b18:	491d      	ldr	r1, [pc, #116]	; (8004b90 <netconn_accept+0xb0>)
 8004b1a:	481c      	ldr	r0, [pc, #112]	; (8004b8c <netconn_accept+0xac>)
 8004b1c:	f00a f9b0 	bl	800ee80 <iprintf>
 8004b20:	f06f 000f 	mvn.w	r0, #15
 8004b24:	e7e9      	b.n	8004afa <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8004b26:	f104 0614 	add.w	r6, r4, #20
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f009 f8cf 	bl	800dcce <sys_mbox_valid>
 8004b30:	b308      	cbz	r0, 8004b76 <netconn_accept+0x96>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8004b32:	2200      	movs	r2, #0
 8004b34:	a901      	add	r1, sp, #4
 8004b36:	4630      	mov	r0, r6
 8004b38:	f009 f889 	bl	800dc4e <sys_arch_mbox_fetch>
  newconn = (struct netconn *)accept_ptr;
 8004b3c:	9e01      	ldr	r6, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8004b3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b40:	b11b      	cbz	r3, 8004b4a <netconn_accept+0x6a>
 8004b42:	2200      	movs	r2, #0
 8004b44:	2101      	movs	r1, #1
 8004b46:	4620      	mov	r0, r4
 8004b48:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 8004b4a:	9a01      	ldr	r2, [sp, #4]
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <netconn_accept+0xb4>)
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d014      	beq.n	8004b7c <netconn_accept+0x9c>
  if (newconn == NULL) {
 8004b52:	b116      	cbz	r6, 8004b5a <netconn_accept+0x7a>
  *new_conn = newconn;
 8004b54:	602e      	str	r6, [r5, #0]
  return ERR_OK;
 8004b56:	2000      	movs	r0, #0
 8004b58:	e7cf      	b.n	8004afa <netconn_accept+0x1a>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8004b5a:	f009 f947 	bl	800ddec <sys_arch_protect>
 8004b5e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004b62:	f113 0f0c 	cmn.w	r3, #12
 8004b66:	db01      	blt.n	8004b6c <netconn_accept+0x8c>
 8004b68:	23f1      	movs	r3, #241	; 0xf1
 8004b6a:	7223      	strb	r3, [r4, #8]
 8004b6c:	f009 f94a 	bl	800de04 <sys_arch_unprotect>
    return ERR_CLSD;
 8004b70:	f06f 000e 	mvn.w	r0, #14
 8004b74:	e7c1      	b.n	8004afa <netconn_accept+0x1a>
    return ERR_CLSD;
 8004b76:	f06f 000e 	mvn.w	r0, #14
 8004b7a:	e7be      	b.n	8004afa <netconn_accept+0x1a>
    return ERR_ABRT;
 8004b7c:	f06f 000c 	mvn.w	r0, #12
 8004b80:	e7bb      	b.n	8004afa <netconn_accept+0x1a>
 8004b82:	bf00      	nop
 8004b84:	08010188 	.word	0x08010188
 8004b88:	0801012c 	.word	0x0801012c
 8004b8c:	080101d8 	.word	0x080101d8
 8004b90:	0801014c 	.word	0x0801014c
 8004b94:	20004ab8 	.word	0x20004ab8

08004b98 <netconn_recv>:
{
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004b9c:	b179      	cbz	r1, 8004bbe <netconn_recv+0x26>
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	460d      	mov	r5, r1
  *new_buf = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004ba6:	b1a0      	cbz	r0, 8004bd2 <netconn_recv+0x3a>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004ba8:	7803      	ldrb	r3, [r0, #0]
 8004baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d019      	beq.n	8004be6 <netconn_recv+0x4e>
    return netconn_recv_data(conn, (void **)new_buf);
 8004bb2:	f7ff fe3d 	bl	8004830 <netconn_recv_data>
 8004bb6:	4604      	mov	r4, r0
}
 8004bb8:	4620      	mov	r0, r4
 8004bba:	b002      	add	sp, #8
 8004bbc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004bbe:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <netconn_recv+0xa0>)
 8004bc0:	f44f 721d 	mov.w	r2, #628	; 0x274
 8004bc4:	491d      	ldr	r1, [pc, #116]	; (8004c3c <netconn_recv+0xa4>)
 8004bc6:	481e      	ldr	r0, [pc, #120]	; (8004c40 <netconn_recv+0xa8>)
 8004bc8:	f00a f95a 	bl	800ee80 <iprintf>
 8004bcc:	f06f 040f 	mvn.w	r4, #15
 8004bd0:	e7f2      	b.n	8004bb8 <netconn_recv+0x20>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004bd2:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <netconn_recv+0xa0>)
 8004bd4:	f240 2276 	movw	r2, #630	; 0x276
 8004bd8:	491a      	ldr	r1, [pc, #104]	; (8004c44 <netconn_recv+0xac>)
 8004bda:	4819      	ldr	r0, [pc, #100]	; (8004c40 <netconn_recv+0xa8>)
 8004bdc:	f00a f950 	bl	800ee80 <iprintf>
 8004be0:	f06f 040f 	mvn.w	r4, #15
 8004be4:	e7e8      	b.n	8004bb8 <netconn_recv+0x20>
    struct pbuf *p = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8004bea:	2006      	movs	r0, #6
 8004bec:	f001 fd40 	bl	8006670 <memp_malloc>
    if (buf == NULL) {
 8004bf0:	4606      	mov	r6, r0
 8004bf2:	b1e8      	cbz	r0, 8004c30 <netconn_recv+0x98>
    err = netconn_recv_data(conn, (void **)&p);
 8004bf4:	a901      	add	r1, sp, #4
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f7ff fe1a 	bl	8004830 <netconn_recv_data>
    if (err != ERR_OK) {
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	b950      	cbnz	r0, 8004c16 <netconn_recv+0x7e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004c00:	9b01      	ldr	r3, [sp, #4]
 8004c02:	b16b      	cbz	r3, 8004c20 <netconn_recv+0x88>
    buf->p = p;
 8004c04:	9b01      	ldr	r3, [sp, #4]
 8004c06:	6033      	str	r3, [r6, #0]
    buf->ptr = p;
 8004c08:	9b01      	ldr	r3, [sp, #4]
 8004c0a:	6073      	str	r3, [r6, #4]
    buf->port = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	81b3      	strh	r3, [r6, #12]
    ip_addr_set_zero(&buf->addr);
 8004c10:	60b3      	str	r3, [r6, #8]
    *new_buf = buf;
 8004c12:	602e      	str	r6, [r5, #0]
    return ERR_OK;
 8004c14:	e7d0      	b.n	8004bb8 <netconn_recv+0x20>
      memp_free(MEMP_NETBUF, buf);
 8004c16:	4631      	mov	r1, r6
 8004c18:	2006      	movs	r0, #6
 8004c1a:	f001 fd43 	bl	80066a4 <memp_free>
      return err;
 8004c1e:	e7cb      	b.n	8004bb8 <netconn_recv+0x20>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <netconn_recv+0xa0>)
 8004c22:	f240 228a 	movw	r2, #650	; 0x28a
 8004c26:	4908      	ldr	r1, [pc, #32]	; (8004c48 <netconn_recv+0xb0>)
 8004c28:	4805      	ldr	r0, [pc, #20]	; (8004c40 <netconn_recv+0xa8>)
 8004c2a:	f00a f929 	bl	800ee80 <iprintf>
 8004c2e:	e7e9      	b.n	8004c04 <netconn_recv+0x6c>
      return ERR_MEM;
 8004c30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004c34:	e7c0      	b.n	8004bb8 <netconn_recv+0x20>
 8004c36:	bf00      	nop
 8004c38:	08010188 	.word	0x08010188
 8004c3c:	0801029c 	.word	0x0801029c
 8004c40:	080101d8 	.word	0x080101d8
 8004c44:	080102bc 	.word	0x080102bc
 8004c48:	08011cc4 	.word	0x08011cc4

08004c4c <netconn_write_partly>:
{
 8004c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004c52:	b188      	cbz	r0, 8004c78 <netconn_write_partly+0x2c>
 8004c54:	4615      	mov	r5, r2
 8004c56:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8004c58:	7802      	ldrb	r2, [r0, #0]
 8004c5a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004c5e:	2a10      	cmp	r2, #16
 8004c60:	d114      	bne.n	8004c8c <netconn_write_partly+0x40>
  if (size == 0) {
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	d03d      	beq.n	8004ce2 <netconn_write_partly+0x96>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004c66:	7f02      	ldrb	r2, [r0, #28]
 8004c68:	f012 0f02 	tst.w	r2, #2
 8004c6c:	d118      	bne.n	8004ca0 <netconn_write_partly+0x54>
 8004c6e:	f013 0f04 	tst.w	r3, #4
 8004c72:	d031      	beq.n	8004cd8 <netconn_write_partly+0x8c>
 8004c74:	2201      	movs	r2, #1
 8004c76:	e014      	b.n	8004ca2 <netconn_write_partly+0x56>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004c78:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <netconn_write_partly+0xa4>)
 8004c7a:	f240 22e6 	movw	r2, #742	; 0x2e6
 8004c7e:	491d      	ldr	r1, [pc, #116]	; (8004cf4 <netconn_write_partly+0xa8>)
 8004c80:	481d      	ldr	r0, [pc, #116]	; (8004cf8 <netconn_write_partly+0xac>)
 8004c82:	f00a f8fd 	bl	800ee80 <iprintf>
 8004c86:	f06f 020f 	mvn.w	r2, #15
 8004c8a:	e02b      	b.n	8004ce4 <netconn_write_partly+0x98>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8004c8c:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <netconn_write_partly+0xa4>)
 8004c8e:	f240 22e7 	movw	r2, #743	; 0x2e7
 8004c92:	491a      	ldr	r1, [pc, #104]	; (8004cfc <netconn_write_partly+0xb0>)
 8004c94:	4818      	ldr	r0, [pc, #96]	; (8004cf8 <netconn_write_partly+0xac>)
 8004c96:	f00a f8f3 	bl	800ee80 <iprintf>
 8004c9a:	f06f 0205 	mvn.w	r2, #5
 8004c9e:	e021      	b.n	8004ce4 <netconn_write_partly+0x98>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004ca0:	2201      	movs	r2, #1
  if (dontblock && !bytes_written) {
 8004ca2:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 8004ca6:	2e00      	cmp	r6, #0
 8004ca8:	bf18      	it	ne
 8004caa:	2200      	movne	r2, #0
 8004cac:	b9ea      	cbnz	r2, 8004cea <netconn_write_partly+0x9e>
  API_MSG_VAR_REF(msg).conn = conn;
 8004cae:	9401      	str	r4, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8004cb0:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8004cb2:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8004cb6:	9504      	str	r5, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8004cb8:	a901      	add	r1, sp, #4
 8004cba:	4811      	ldr	r0, [pc, #68]	; (8004d00 <netconn_write_partly+0xb4>)
 8004cbc:	f7ff fd8a 	bl	80047d4 <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	1c33      	adds	r3, r6, #0
 8004cc4:	bf18      	it	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	bf0c      	ite	eq
 8004ccc:	4618      	moveq	r0, r3
 8004cce:	2000      	movne	r0, #0
 8004cd0:	b140      	cbz	r0, 8004ce4 <netconn_write_partly+0x98>
    if (dontblock) {
 8004cd2:	b91f      	cbnz	r7, 8004cdc <netconn_write_partly+0x90>
      *bytes_written = size;
 8004cd4:	6035      	str	r5, [r6, #0]
 8004cd6:	e005      	b.n	8004ce4 <netconn_write_partly+0x98>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004cd8:	2200      	movs	r2, #0
 8004cda:	e7e2      	b.n	8004ca2 <netconn_write_partly+0x56>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8004cdc:	9b04      	ldr	r3, [sp, #16]
 8004cde:	6033      	str	r3, [r6, #0]
 8004ce0:	e000      	b.n	8004ce4 <netconn_write_partly+0x98>
    return ERR_OK;
 8004ce2:	2200      	movs	r2, #0
}
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	b007      	add	sp, #28
 8004ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8004cea:	f06f 0205 	mvn.w	r2, #5
 8004cee:	e7f9      	b.n	8004ce4 <netconn_write_partly+0x98>
 8004cf0:	08010188 	.word	0x08010188
 8004cf4:	08010304 	.word	0x08010304
 8004cf8:	080101d8 	.word	0x080101d8
 8004cfc:	08010320 	.word	0x08010320
 8004d00:	08005c0d 	.word	0x08005c0d

08004d04 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8004d04:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8004d06:	2103      	movs	r1, #3
 8004d08:	f7ff fd70 	bl	80047ec <netconn_close_shutdown>
}
 8004d0c:	bd08      	pop	{r3, pc}
	...

08004d10 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8004d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d14:	4604      	mov	r4, r0
 8004d16:	4615      	mov	r5, r2
 8004d18:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8004d1a:	460e      	mov	r6, r1
 8004d1c:	b379      	cbz	r1, 8004d7e <recv_udp+0x6e>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004d1e:	2c00      	cmp	r4, #0
 8004d20:	d034      	beq.n	8004d8c <recv_udp+0x7c>
  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8004d22:	2c00      	cmp	r4, #0
 8004d24:	d039      	beq.n	8004d9a <recv_udp+0x8a>
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8004d26:	6863      	ldr	r3, [r4, #4]
 8004d28:	42b3      	cmp	r3, r6
 8004d2a:	d005      	beq.n	8004d38 <recv_udp+0x28>
 8004d2c:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <recv_udp+0xb0>)
 8004d2e:	22ba      	movs	r2, #186	; 0xba
 8004d30:	4924      	ldr	r1, [pc, #144]	; (8004dc4 <recv_udp+0xb4>)
 8004d32:	4825      	ldr	r0, [pc, #148]	; (8004dc8 <recv_udp+0xb8>)
 8004d34:	f00a f8a4 	bl	800ee80 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8004d38:	f104 0710 	add.w	r7, r4, #16
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	f008 ffc6 	bl	800dcce <sys_mbox_valid>
 8004d42:	b370      	cbz	r0, 8004da2 <recv_udp+0x92>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8004d44:	2006      	movs	r0, #6
 8004d46:	f001 fc93 	bl	8006670 <memp_malloc>
  if (buf == NULL) {
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	b370      	cbz	r0, 8004dac <recv_udp+0x9c>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 8004d4e:	6005      	str	r5, [r0, #0]
    buf->ptr = p;
 8004d50:	6045      	str	r5, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 8004d52:	f1b8 0f00 	cmp.w	r8, #0
 8004d56:	d02d      	beq.n	8004db4 <recv_udp+0xa4>
 8004d58:	f8d8 3000 	ldr.w	r3, [r8]
 8004d5c:	60b3      	str	r3, [r6, #8]
    buf->port = port;
 8004d5e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8004d62:	81b3      	strh	r3, [r6, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8004d64:	892d      	ldrh	r5, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8004d66:	4631      	mov	r1, r6
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f008 ff66 	bl	800dc3a <sys_mbox_trypost>
 8004d6e:	bb18      	cbnz	r0, 8004db8 <recv_udp+0xa8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004d70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d72:	b1cb      	cbz	r3, 8004da8 <recv_udp+0x98>
 8004d74:	462a      	mov	r2, r5
 8004d76:	2100      	movs	r1, #0
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4798      	blx	r3
 8004d7c:	e014      	b.n	8004da8 <recv_udp+0x98>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8004d7e:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <recv_udp+0xb0>)
 8004d80:	22b1      	movs	r2, #177	; 0xb1
 8004d82:	4912      	ldr	r1, [pc, #72]	; (8004dcc <recv_udp+0xbc>)
 8004d84:	4810      	ldr	r0, [pc, #64]	; (8004dc8 <recv_udp+0xb8>)
 8004d86:	f00a f87b 	bl	800ee80 <iprintf>
 8004d8a:	e7c8      	b.n	8004d1e <recv_udp+0xe>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <recv_udp+0xb0>)
 8004d8e:	22b2      	movs	r2, #178	; 0xb2
 8004d90:	490f      	ldr	r1, [pc, #60]	; (8004dd0 <recv_udp+0xc0>)
 8004d92:	480d      	ldr	r0, [pc, #52]	; (8004dc8 <recv_udp+0xb8>)
 8004d94:	f00a f874 	bl	800ee80 <iprintf>
 8004d98:	e7c3      	b.n	8004d22 <recv_udp+0x12>
    pbuf_free(p);
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f001 fe5c 	bl	8006a58 <pbuf_free>
    return;
 8004da0:	e002      	b.n	8004da8 <recv_udp+0x98>
    pbuf_free(p);
 8004da2:	4628      	mov	r0, r5
 8004da4:	f001 fe58 	bl	8006a58 <pbuf_free>
  }
}
 8004da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8004dac:	4628      	mov	r0, r5
 8004dae:	f001 fe53 	bl	8006a58 <pbuf_free>
    return;
 8004db2:	e7f9      	b.n	8004da8 <recv_udp+0x98>
    ip_addr_set(&buf->addr, addr);
 8004db4:	2300      	movs	r3, #0
 8004db6:	e7d1      	b.n	8004d5c <recv_udp+0x4c>
    netbuf_delete(buf);
 8004db8:	4630      	mov	r0, r6
 8004dba:	f001 f821 	bl	8005e00 <netbuf_delete>
    return;
 8004dbe:	e7f3      	b.n	8004da8 <recv_udp+0x98>
 8004dc0:	0801067c 	.word	0x0801067c
 8004dc4:	080106f4 	.word	0x080106f4
 8004dc8:	080101d8 	.word	0x080101d8
 8004dcc:	080106b0 	.word	0x080106b0
 8004dd0:	080106d4 	.word	0x080106d4

08004dd4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8004dd4:	b510      	push	{r4, lr}
 8004dd6:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8004dd8:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f002 fb6d 	bl	80074ba <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8004de0:	4908      	ldr	r1, [pc, #32]	; (8004e04 <setup_tcp+0x30>)
 8004de2:	4620      	mov	r0, r4
 8004de4:	f002 fb6c 	bl	80074c0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8004de8:	4907      	ldr	r1, [pc, #28]	; (8004e08 <setup_tcp+0x34>)
 8004dea:	4620      	mov	r0, r4
 8004dec:	f002 fb82 	bl	80074f4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8004df0:	2202      	movs	r2, #2
 8004df2:	4906      	ldr	r1, [pc, #24]	; (8004e0c <setup_tcp+0x38>)
 8004df4:	4620      	mov	r0, r4
 8004df6:	f002 fbb7 	bl	8007568 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8004dfa:	4905      	ldr	r1, [pc, #20]	; (8004e10 <setup_tcp+0x3c>)
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f002 fb91 	bl	8007524 <tcp_err>
}
 8004e02:	bd10      	pop	{r4, pc}
 8004e04:	08005531 	.word	0x08005531
 8004e08:	080054bd 	.word	0x080054bd
 8004e0c:	0800543d 	.word	0x0800543d
 8004e10:	08004e9d 	.word	0x08004e9d

08004e14 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4604      	mov	r4, r0
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8004e18:	6803      	ldr	r3, [r0, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	b133      	cbz	r3, 8004e2c <pcb_new+0x18>
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <pcb_new+0x78>)
 8004e20:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8004e24:	491a      	ldr	r1, [pc, #104]	; (8004e90 <pcb_new+0x7c>)
 8004e26:	481b      	ldr	r0, [pc, #108]	; (8004e94 <pcb_new+0x80>)
 8004e28:	f00a f82a 	bl	800ee80 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8004e2c:	6825      	ldr	r5, [r4, #0]
 8004e2e:	782b      	ldrb	r3, [r5, #0]
 8004e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d018      	beq.n	8004e6a <pcb_new+0x56>
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d121      	bne.n	8004e80 <pcb_new+0x6c>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f006 f843 	bl	800aec8 <udp_new_ip_type>
 8004e42:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	b142      	cbz	r2, 8004e5c <pcb_new+0x48>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b22      	cmp	r3, #34	; 0x22
 8004e4e:	d009      	beq.n	8004e64 <pcb_new+0x50>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	4910      	ldr	r1, [pc, #64]	; (8004e98 <pcb_new+0x84>)
 8004e56:	6858      	ldr	r0, [r3, #4]
 8004e58:	f006 f808 	bl	800ae6c <udp_recv>
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
    return;
  }
  if (msg->conn->pcb.ip == NULL) {
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	b18b      	cbz	r3, 8004e86 <pcb_new+0x72>
    msg->err = ERR_MEM;
  }
}
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8004e64:	2301      	movs	r3, #1
 8004e66:	7413      	strb	r3, [r2, #16]
 8004e68:	e7f2      	b.n	8004e50 <pcb_new+0x3c>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	f003 f8f4 	bl	8008058 <tcp_new_ip_type>
 8004e70:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004e72:	6820      	ldr	r0, [r4, #0]
 8004e74:	6843      	ldr	r3, [r0, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <pcb_new+0x48>
      setup_tcp(msg->conn);
 8004e7a:	f7ff ffab 	bl	8004dd4 <setup_tcp>
 8004e7e:	e7ed      	b.n	8004e5c <pcb_new+0x48>
    msg->err = ERR_VAL;
 8004e80:	23fa      	movs	r3, #250	; 0xfa
 8004e82:	7123      	strb	r3, [r4, #4]
    return;
 8004e84:	e7ed      	b.n	8004e62 <pcb_new+0x4e>
    msg->err = ERR_MEM;
 8004e86:	23ff      	movs	r3, #255	; 0xff
 8004e88:	7123      	strb	r3, [r4, #4]
 8004e8a:	e7ea      	b.n	8004e62 <pcb_new+0x4e>
 8004e8c:	0801067c 	.word	0x0801067c
 8004e90:	080105f8 	.word	0x080105f8
 8004e94:	080101d8 	.word	0x080101d8
 8004e98:	08004d11 	.word	0x08004d11

08004e9c <err_tcp>:
{
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	b1a0      	cbz	r0, 8004ece <err_tcp+0x32>
  conn->pcb.tcp = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6063      	str	r3, [r4, #4]
  old_state = conn->state;
 8004ea8:	7865      	ldrb	r5, [r4, #1]
  conn->state = NETCONN_NONE;
 8004eaa:	7063      	strb	r3, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 8004eac:	2d04      	cmp	r5, #4
 8004eae:	d116      	bne.n	8004ede <err_tcp+0x42>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8004eb0:	2c00      	cmp	r4, #0
 8004eb2:	d047      	beq.n	8004f44 <err_tcp+0xa8>
 8004eb4:	f008 ff9a 	bl	800ddec <sys_arch_protect>
 8004eb8:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004ebc:	f113 0f0c 	cmn.w	r3, #12
 8004ec0:	db01      	blt.n	8004ec6 <err_tcp+0x2a>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	7223      	strb	r3, [r4, #8]
 8004ec6:	f008 ff9d 	bl	800de04 <sys_arch_unprotect>
    err = ERR_OK;
 8004eca:	2600      	movs	r6, #0
 8004ecc:	e00c      	b.n	8004ee8 <err_tcp+0x4c>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004ece:	4b3d      	ldr	r3, [pc, #244]	; (8004fc4 <err_tcp+0x128>)
 8004ed0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8004ed4:	493c      	ldr	r1, [pc, #240]	; (8004fc8 <err_tcp+0x12c>)
 8004ed6:	483d      	ldr	r0, [pc, #244]	; (8004fcc <err_tcp+0x130>)
 8004ed8:	f009 ffd2 	bl	800ee80 <iprintf>
 8004edc:	e7e2      	b.n	8004ea4 <err_tcp+0x8>
    SYS_ARCH_SET(conn->last_err, err);
 8004ede:	f008 ff85 	bl	800ddec <sys_arch_protect>
 8004ee2:	7226      	strb	r6, [r4, #8]
 8004ee4:	f008 ff8e 	bl	800de04 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004ee8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004eea:	b11b      	cbz	r3, 8004ef4 <err_tcp+0x58>
 8004eec:	2200      	movs	r2, #0
 8004eee:	2104      	movs	r1, #4
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ef6:	b11b      	cbz	r3, 8004f00 <err_tcp+0x64>
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4611      	mov	r1, r2
 8004efc:	4620      	mov	r0, r4
 8004efe:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004f00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f02:	b11b      	cbz	r3, 8004f0c <err_tcp+0x70>
 8004f04:	2200      	movs	r2, #0
 8004f06:	2102      	movs	r1, #2
 8004f08:	4620      	mov	r0, r4
 8004f0a:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004f0c:	f104 0710 	add.w	r7, r4, #16
 8004f10:	4638      	mov	r0, r7
 8004f12:	f008 fedc 	bl	800dcce <sys_mbox_valid>
 8004f16:	b9b8      	cbnz	r0, 8004f48 <err_tcp+0xac>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004f18:	f104 0714 	add.w	r7, r4, #20
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	f008 fed6 	bl	800dcce <sys_mbox_valid>
 8004f22:	b9b0      	cbnz	r0, 8004f52 <err_tcp+0xb6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8004f24:	2d04      	cmp	r5, #4
 8004f26:	bf18      	it	ne
 8004f28:	2d01      	cmpne	r5, #1
 8004f2a:	d017      	beq.n	8004f5c <err_tcp+0xc0>
 8004f2c:	2d03      	cmp	r5, #3
 8004f2e:	d015      	beq.n	8004f5c <err_tcp+0xc0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8004f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f32:	b3ab      	cbz	r3, 8004fa0 <err_tcp+0x104>
 8004f34:	4b23      	ldr	r3, [pc, #140]	; (8004fc4 <err_tcp+0x128>)
 8004f36:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004f3a:	4925      	ldr	r1, [pc, #148]	; (8004fd0 <err_tcp+0x134>)
 8004f3c:	4823      	ldr	r0, [pc, #140]	; (8004fcc <err_tcp+0x130>)
 8004f3e:	f009 ff9f 	bl	800ee80 <iprintf>
}
 8004f42:	e02d      	b.n	8004fa0 <err_tcp+0x104>
    err = ERR_OK;
 8004f44:	2600      	movs	r6, #0
 8004f46:	e7cf      	b.n	8004ee8 <err_tcp+0x4c>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	f008 fe75 	bl	800dc3a <sys_mbox_trypost>
 8004f50:	e7e2      	b.n	8004f18 <err_tcp+0x7c>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8004f52:	2100      	movs	r1, #0
 8004f54:	4638      	mov	r0, r7
 8004f56:	f008 fe70 	bl	800dc3a <sys_mbox_trypost>
 8004f5a:	e7e3      	b.n	8004f24 <err_tcp+0x88>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8004f5c:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8004f5e:	f023 0204 	bic.w	r2, r3, #4
 8004f62:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8004f64:	f013 0f04 	tst.w	r3, #4
 8004f68:	d11a      	bne.n	8004fa0 <err_tcp+0x104>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f6c:	b1cb      	cbz	r3, 8004fa2 <err_tcp+0x106>
      conn->current_msg->err = err;
 8004f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f70:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f74:	681d      	ldr	r5, [r3, #0]
 8004f76:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f008 fef2 	bl	800dd62 <sys_sem_valid>
 8004f7e:	b1c0      	cbz	r0, 8004fb2 <err_tcp+0x116>
      conn->current_msg = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8004f84:	b14c      	cbz	r4, 8004f9a <err_tcp+0xfe>
 8004f86:	f008 ff31 	bl	800ddec <sys_arch_protect>
 8004f8a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004f8e:	f113 0f0c 	cmn.w	r3, #12
 8004f92:	db00      	blt.n	8004f96 <err_tcp+0xfa>
 8004f94:	7226      	strb	r6, [r4, #8]
 8004f96:	f008 ff35 	bl	800de04 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f008 fed7 	bl	800dd4e <sys_sem_signal>
}
 8004fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004fa2:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <err_tcp+0x128>)
 8004fa4:	f240 12b3 	movw	r2, #435	; 0x1b3
 8004fa8:	490a      	ldr	r1, [pc, #40]	; (8004fd4 <err_tcp+0x138>)
 8004faa:	4808      	ldr	r0, [pc, #32]	; (8004fcc <err_tcp+0x130>)
 8004fac:	f009 ff68 	bl	800ee80 <iprintf>
 8004fb0:	e7dd      	b.n	8004f6e <err_tcp+0xd2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8004fb2:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <err_tcp+0x128>)
 8004fb4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8004fb8:	4907      	ldr	r1, [pc, #28]	; (8004fd8 <err_tcp+0x13c>)
 8004fba:	4804      	ldr	r0, [pc, #16]	; (8004fcc <err_tcp+0x130>)
 8004fbc:	f009 ff60 	bl	800ee80 <iprintf>
 8004fc0:	e7de      	b.n	8004f80 <err_tcp+0xe4>
 8004fc2:	bf00      	nop
 8004fc4:	0801067c 	.word	0x0801067c
 8004fc8:	08010344 	.word	0x08010344
 8004fcc:	080101d8 	.word	0x080101d8
 8004fd0:	0801038c 	.word	0x0801038c
 8004fd4:	08010354 	.word	0x08010354
 8004fd8:	08010370 	.word	0x08010370

08004fdc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8004fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe0:	4688      	mov	r8, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	b1b8      	cbz	r0, 8005016 <lwip_netconn_do_writemore+0x3a>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8004fe6:	7863      	ldrb	r3, [r4, #1]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d11c      	bne.n	8005026 <lwip_netconn_do_writemore+0x4a>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fee:	b313      	cbz	r3, 8005036 <lwip_netconn_do_writemore+0x5a>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8004ff0:	6863      	ldr	r3, [r4, #4]
 8004ff2:	b343      	cbz	r3, 8005046 <lwip_netconn_do_writemore+0x6a>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8004ff4:	6a22      	ldr	r2, [r4, #32]
 8004ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d22b      	bcs.n	8005056 <lwip_netconn_do_writemore+0x7a>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8004ffe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005000:	f892 9010 	ldrb.w	r9, [r2, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005004:	7f23      	ldrb	r3, [r4, #28]
 8005006:	f013 0f02 	tst.w	r3, #2
 800500a:	d12c      	bne.n	8005066 <lwip_netconn_do_writemore+0x8a>
 800500c:	f019 0f04 	tst.w	r9, #4
 8005010:	d041      	beq.n	8005096 <lwip_netconn_do_writemore+0xba>
 8005012:	2701      	movs	r7, #1
 8005014:	e028      	b.n	8005068 <lwip_netconn_do_writemore+0x8c>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8005016:	4b74      	ldr	r3, [pc, #464]	; (80051e8 <lwip_netconn_do_writemore+0x20c>)
 8005018:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800501c:	4973      	ldr	r1, [pc, #460]	; (80051ec <lwip_netconn_do_writemore+0x210>)
 800501e:	4874      	ldr	r0, [pc, #464]	; (80051f0 <lwip_netconn_do_writemore+0x214>)
 8005020:	f009 ff2e 	bl	800ee80 <iprintf>
 8005024:	e7df      	b.n	8004fe6 <lwip_netconn_do_writemore+0xa>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8005026:	4b70      	ldr	r3, [pc, #448]	; (80051e8 <lwip_netconn_do_writemore+0x20c>)
 8005028:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800502c:	4971      	ldr	r1, [pc, #452]	; (80051f4 <lwip_netconn_do_writemore+0x218>)
 800502e:	4870      	ldr	r0, [pc, #448]	; (80051f0 <lwip_netconn_do_writemore+0x214>)
 8005030:	f009 ff26 	bl	800ee80 <iprintf>
 8005034:	e7da      	b.n	8004fec <lwip_netconn_do_writemore+0x10>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005036:	4b6c      	ldr	r3, [pc, #432]	; (80051e8 <lwip_netconn_do_writemore+0x20c>)
 8005038:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800503c:	496e      	ldr	r1, [pc, #440]	; (80051f8 <lwip_netconn_do_writemore+0x21c>)
 800503e:	486c      	ldr	r0, [pc, #432]	; (80051f0 <lwip_netconn_do_writemore+0x214>)
 8005040:	f009 ff1e 	bl	800ee80 <iprintf>
 8005044:	e7d4      	b.n	8004ff0 <lwip_netconn_do_writemore+0x14>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8005046:	4b68      	ldr	r3, [pc, #416]	; (80051e8 <lwip_netconn_do_writemore+0x20c>)
 8005048:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800504c:	496b      	ldr	r1, [pc, #428]	; (80051fc <lwip_netconn_do_writemore+0x220>)
 800504e:	4868      	ldr	r0, [pc, #416]	; (80051f0 <lwip_netconn_do_writemore+0x214>)
 8005050:	f009 ff16 	bl	800ee80 <iprintf>
 8005054:	e7ce      	b.n	8004ff4 <lwip_netconn_do_writemore+0x18>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8005056:	4b64      	ldr	r3, [pc, #400]	; (80051e8 <lwip_netconn_do_writemore+0x20c>)
 8005058:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800505c:	4968      	ldr	r1, [pc, #416]	; (8005200 <lwip_netconn_do_writemore+0x224>)
 800505e:	4864      	ldr	r0, [pc, #400]	; (80051f0 <lwip_netconn_do_writemore+0x214>)
 8005060:	f009 ff0e 	bl	800ee80 <iprintf>
 8005064:	e7cb      	b.n	8004ffe <lwip_netconn_do_writemore+0x22>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005066:	2701      	movs	r7, #1
 8005068:	b2ff      	uxtb	r7, r7
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800506a:	6896      	ldr	r6, [r2, #8]
 800506c:	6a23      	ldr	r3, [r4, #32]
 800506e:	441e      	add	r6, r3
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8005070:	68d2      	ldr	r2, [r2, #12]
 8005072:	1ad5      	subs	r5, r2, r3
    if (diff > 0xffffUL) { /* max_u16_t */
 8005074:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8005078:	d30f      	bcc.n	800509a <lwip_netconn_do_writemore+0xbe>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 800507a:	f049 0902 	orr.w	r9, r9, #2
      len = 0xffff;
 800507e:	f64f 75ff 	movw	r5, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8005082:	6861      	ldr	r1, [r4, #4]
 8005084:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
    if (available < len) {
 8005088:	428d      	cmp	r5, r1
 800508a:	d90b      	bls.n	80050a4 <lwip_netconn_do_writemore+0xc8>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 800508c:	b13f      	cbz	r7, 800509e <lwip_netconn_do_writemore+0xc2>
        if (!len) {
 800508e:	2900      	cmp	r1, #0
 8005090:	d03e      	beq.n	8005110 <lwip_netconn_do_writemore+0x134>
      len = available;
 8005092:	460d      	mov	r5, r1
 8005094:	e006      	b.n	80050a4 <lwip_netconn_do_writemore+0xc8>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005096:	2700      	movs	r7, #0
 8005098:	e7e6      	b.n	8005068 <lwip_netconn_do_writemore+0x8c>
      len = (u16_t)diff;
 800509a:	b2ad      	uxth	r5, r5
 800509c:	e7f1      	b.n	8005082 <lwip_netconn_do_writemore+0xa6>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800509e:	f049 0902 	orr.w	r9, r9, #2
      len = available;
 80050a2:	460d      	mov	r5, r1
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80050a4:	442b      	add	r3, r5
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d32a      	bcc.n	8005100 <lwip_netconn_do_writemore+0x124>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80050aa:	464b      	mov	r3, r9
 80050ac:	462a      	mov	r2, r5
 80050ae:	4631      	mov	r1, r6
 80050b0:	6860      	ldr	r0, [r4, #4]
 80050b2:	f004 fd97 	bl	8009be4 <tcp_write>
 80050b6:	4606      	mov	r6, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d92a      	bls.n	8005116 <lwip_netconn_do_writemore+0x13a>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 80050c0:	2e00      	cmp	r6, #0
 80050c2:	d14a      	bne.n	800515a <lwip_netconn_do_writemore+0x17e>
      err_t out_err;
      conn->write_offset += len;
 80050c4:	6a23      	ldr	r3, [r4, #32]
 80050c6:	441d      	add	r5, r3
 80050c8:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80050ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	4295      	cmp	r5, r2
 80050d0:	d000      	beq.n	80050d4 <lwip_netconn_do_writemore+0xf8>
 80050d2:	b10f      	cbz	r7, 80050d8 <lwip_netconn_do_writemore+0xfc>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 80050d4:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80050d6:	2701      	movs	r7, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 80050d8:	6860      	ldr	r0, [r4, #4]
 80050da:	f005 f915 	bl	800a308 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80050de:	f110 0f0c 	cmn.w	r0, #12
 80050e2:	bfac      	ite	ge
 80050e4:	2200      	movge	r2, #0
 80050e6:	2201      	movlt	r2, #1
 80050e8:	f110 0f04 	cmn.w	r0, #4
 80050ec:	bf14      	ite	ne
 80050ee:	2300      	movne	r3, #0
 80050f0:	2301      	moveq	r3, #1
 80050f2:	4313      	orrs	r3, r2
 80050f4:	d06e      	beq.n	80051d4 <lwip_netconn_do_writemore+0x1f8>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 80050f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f8:	2200      	movs	r2, #0
 80050fa:	60da      	str	r2, [r3, #12]
        err = out_err;
 80050fc:	4606      	mov	r6, r0
 80050fe:	e032      	b.n	8005166 <lwip_netconn_do_writemore+0x18a>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8005100:	4b39      	ldr	r3, [pc, #228]	; (80051e8 <lwip_netconn_do_writemore+0x20c>)
 8005102:	f240 6213 	movw	r2, #1555	; 0x613
 8005106:	493f      	ldr	r1, [pc, #252]	; (8005204 <lwip_netconn_do_writemore+0x228>)
 8005108:	4839      	ldr	r0, [pc, #228]	; (80051f0 <lwip_netconn_do_writemore+0x214>)
 800510a:	f009 feb9 	bl	800ee80 <iprintf>
 800510e:	e7cc      	b.n	80050aa <lwip_netconn_do_writemore+0xce>
      len = available;
 8005110:	460d      	mov	r5, r1
          err = ERR_WOULDBLOCK;
 8005112:	f06f 0606 	mvn.w	r6, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8005116:	b177      	cbz	r7, 8005136 <lwip_netconn_do_writemore+0x15a>
 8005118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	429d      	cmp	r5, r3
 800511e:	d20a      	bcs.n	8005136 <lwip_netconn_do_writemore+0x15a>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8005120:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005122:	b11b      	cbz	r3, 800512c <lwip_netconn_do_writemore+0x150>
 8005124:	462a      	mov	r2, r5
 8005126:	2103      	movs	r1, #3
 8005128:	4620      	mov	r0, r4
 800512a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800512c:	7f23      	ldrb	r3, [r4, #28]
 800512e:	f043 0310 	orr.w	r3, r3, #16
 8005132:	7723      	strb	r3, [r4, #28]
 8005134:	e7c4      	b.n	80050c0 <lwip_netconn_do_writemore+0xe4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800513c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005140:	d303      	bcc.n	800514a <lwip_netconn_do_writemore+0x16e>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8005142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8005146:	2b04      	cmp	r3, #4
 8005148:	d9ba      	bls.n	80050c0 <lwip_netconn_do_writemore+0xe4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800514a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0b7      	beq.n	80050c0 <lwip_netconn_do_writemore+0xe4>
 8005150:	462a      	mov	r2, r5
 8005152:	2103      	movs	r1, #3
 8005154:	4620      	mov	r0, r4
 8005156:	4798      	blx	r3
 8005158:	e7b2      	b.n	80050c0 <lwip_netconn_do_writemore+0xe4>
      }
    } else if (err == ERR_MEM) {
 800515a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800515e:	d01d      	beq.n	800519c <lwip_netconn_do_writemore+0x1c0>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 8005160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005162:	2200      	movs	r2, #0
 8005164:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	f100 050c 	add.w	r5, r0, #12
    conn->current_msg->err = err;
 800516e:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 8005174:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8005176:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8005178:	b14c      	cbz	r4, 800518e <lwip_netconn_do_writemore+0x1b2>
 800517a:	f008 fe37 	bl	800ddec <sys_arch_protect>
 800517e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8005182:	f113 0f0c 	cmn.w	r3, #12
 8005186:	db00      	blt.n	800518a <lwip_netconn_do_writemore+0x1ae>
 8005188:	7226      	strb	r6, [r4, #8]
 800518a:	f008 fe3b 	bl	800de04 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800518e:	f1b8 0f00 	cmp.w	r8, #0
 8005192:	d124      	bne.n	80051de <lwip_netconn_do_writemore+0x202>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8005194:	2600      	movs	r6, #0
}
 8005196:	4630      	mov	r0, r6
 8005198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      err_t out_err = tcp_output(conn->pcb.tcp);
 800519c:	6860      	ldr	r0, [r4, #4]
 800519e:	f005 f8b3 	bl	800a308 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80051a2:	f110 0f0c 	cmn.w	r0, #12
 80051a6:	bfac      	ite	ge
 80051a8:	2200      	movge	r2, #0
 80051aa:	2201      	movlt	r2, #1
 80051ac:	f110 0f04 	cmn.w	r0, #4
 80051b0:	bf14      	ite	ne
 80051b2:	2300      	movne	r3, #0
 80051b4:	2301      	moveq	r3, #1
 80051b6:	4313      	orrs	r3, r2
 80051b8:	d004      	beq.n	80051c4 <lwip_netconn_do_writemore+0x1e8>
        conn->current_msg->msg.w.len = 0;
 80051ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051bc:	2200      	movs	r2, #0
 80051be:	60da      	str	r2, [r3, #12]
        err = out_err;
 80051c0:	4606      	mov	r6, r0
 80051c2:	e7d0      	b.n	8005166 <lwip_netconn_do_writemore+0x18a>
      } else if (dontblock) {
 80051c4:	2f00      	cmp	r7, #0
 80051c6:	d0e6      	beq.n	8005196 <lwip_netconn_do_writemore+0x1ba>
        conn->current_msg->msg.w.len = 0;
 80051c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ca:	2200      	movs	r2, #0
 80051cc:	60da      	str	r2, [r3, #12]
        err = ERR_WOULDBLOCK;
 80051ce:	f06f 0606 	mvn.w	r6, #6
 80051d2:	e7c8      	b.n	8005166 <lwip_netconn_do_writemore+0x18a>
  if (write_finished) {
 80051d4:	2f00      	cmp	r7, #0
 80051d6:	d1c6      	bne.n	8005166 <lwip_netconn_do_writemore+0x18a>
    return ERR_MEM;
 80051d8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80051dc:	e7db      	b.n	8005196 <lwip_netconn_do_writemore+0x1ba>
      sys_sem_signal(op_completed_sem);
 80051de:	4628      	mov	r0, r5
 80051e0:	f008 fdb5 	bl	800dd4e <sys_sem_signal>
  return ERR_OK;
 80051e4:	2600      	movs	r6, #0
 80051e6:	e7d6      	b.n	8005196 <lwip_netconn_do_writemore+0x1ba>
 80051e8:	0801067c 	.word	0x0801067c
 80051ec:	08010344 	.word	0x08010344
 80051f0:	080101d8 	.word	0x080101d8
 80051f4:	08010490 	.word	0x08010490
 80051f8:	08010354 	.word	0x08010354
 80051fc:	080104b0 	.word	0x080104b0
 8005200:	080104c8 	.word	0x080104c8
 8005204:	080104fc 	.word	0x080104fc

08005208 <lwip_netconn_do_close_internal>:
{
 8005208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	4688      	mov	r8, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800520e:	4604      	mov	r4, r0
 8005210:	2800      	cmp	r0, #0
 8005212:	d07c      	beq.n	800530e <lwip_netconn_do_close_internal+0x106>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8005214:	7823      	ldrb	r3, [r4, #0]
 8005216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521a:	2b10      	cmp	r3, #16
 800521c:	d17f      	bne.n	800531e <lwip_netconn_do_close_internal+0x116>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800521e:	7863      	ldrb	r3, [r4, #1]
 8005220:	2b04      	cmp	r3, #4
 8005222:	f040 8084 	bne.w	800532e <lwip_netconn_do_close_internal+0x126>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8005226:	6863      	ldr	r3, [r4, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8088 	beq.w	800533e <lwip_netconn_do_close_internal+0x136>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800522e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 808c 	beq.w	800534e <lwip_netconn_do_close_internal+0x146>
  tpcb = conn->pcb.tcp;
 8005236:	6866      	ldr	r6, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8005238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800523a:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 800523c:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8005240:	f003 0702 	and.w	r7, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8005244:	2b03      	cmp	r3, #3
 8005246:	d00f      	beq.n	8005268 <lwip_netconn_do_close_internal+0x60>
  } else if (shut_rx &&
 8005248:	f1b9 0f00 	cmp.w	r9, #0
 800524c:	d006      	beq.n	800525c <lwip_netconn_do_close_internal+0x54>
             ((tpcb->state == FIN_WAIT_1) ||
 800524e:	7d32      	ldrb	r2, [r6, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8005250:	1f53      	subs	r3, r2, #5
 8005252:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 8005254:	2a08      	cmp	r2, #8
 8005256:	bf18      	it	ne
 8005258:	2b01      	cmpne	r3, #1
 800525a:	d905      	bls.n	8005268 <lwip_netconn_do_close_internal+0x60>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800525c:	2f00      	cmp	r7, #0
 800525e:	d07e      	beq.n	800535e <lwip_netconn_do_close_internal+0x156>
 8005260:	7eb3      	ldrb	r3, [r6, #26]
 8005262:	f013 0f10 	tst.w	r3, #16
 8005266:	d07c      	beq.n	8005362 <lwip_netconn_do_close_internal+0x15a>
    tcp_arg(tpcb, NULL);
 8005268:	2100      	movs	r1, #0
 800526a:	4630      	mov	r0, r6
 800526c:	f002 f925 	bl	80074ba <tcp_arg>
 8005270:	f04f 0a01 	mov.w	sl, #1
  if (tpcb->state == LISTEN) {
 8005274:	7d33      	ldrb	r3, [r6, #20]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d076      	beq.n	8005368 <lwip_netconn_do_close_internal+0x160>
    if (shut_rx) {
 800527a:	f1b9 0f00 	cmp.w	r9, #0
 800527e:	d178      	bne.n	8005372 <lwip_netconn_do_close_internal+0x16a>
    if (shut_tx) {
 8005280:	2f00      	cmp	r7, #0
 8005282:	d17f      	bne.n	8005384 <lwip_netconn_do_close_internal+0x17c>
    if (close) {
 8005284:	f1ba 0f00 	cmp.w	sl, #0
 8005288:	f040 8081 	bne.w	800538e <lwip_netconn_do_close_internal+0x186>
  if (close) {
 800528c:	f1ba 0f00 	cmp.w	sl, #0
 8005290:	f000 8087 	beq.w	80053a2 <lwip_netconn_do_close_internal+0x19a>
      err = tcp_close(tpcb);
 8005294:	4630      	mov	r0, r6
 8005296:	f002 fca7 	bl	8007be8 <tcp_close>
 800529a:	4605      	mov	r5, r0
  if (err == ERR_OK) {
 800529c:	b11d      	cbz	r5, 80052a6 <lwip_netconn_do_close_internal+0x9e>
    if (err == ERR_MEM) {
 800529e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80052a2:	f000 8085 	beq.w	80053b0 <lwip_netconn_do_close_internal+0x1a8>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80052a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a8:	681e      	ldr	r6, [r3, #0]
 80052aa:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 80052ac:	711d      	strb	r5, [r3, #4]
    conn->current_msg = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80052b2:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80052b4:	b9cd      	cbnz	r5, 80052ea <lwip_netconn_do_close_internal+0xe2>
      if (close) {
 80052b6:	f1ba 0f00 	cmp.w	sl, #0
 80052ba:	d006      	beq.n	80052ca <lwip_netconn_do_close_internal+0xc2>
        conn->pcb.tcp = NULL;
 80052bc:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80052be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052c0:	b11b      	cbz	r3, 80052ca <lwip_netconn_do_close_internal+0xc2>
 80052c2:	2200      	movs	r2, #0
 80052c4:	2104      	movs	r1, #4
 80052c6:	4620      	mov	r0, r4
 80052c8:	4798      	blx	r3
      if (shut_rx) {
 80052ca:	f1b9 0f00 	cmp.w	r9, #0
 80052ce:	d005      	beq.n	80052dc <lwip_netconn_do_close_internal+0xd4>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80052d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052d2:	b11b      	cbz	r3, 80052dc <lwip_netconn_do_close_internal+0xd4>
 80052d4:	2200      	movs	r2, #0
 80052d6:	4611      	mov	r1, r2
 80052d8:	4620      	mov	r0, r4
 80052da:	4798      	blx	r3
      if (shut_tx) {
 80052dc:	b12f      	cbz	r7, 80052ea <lwip_netconn_do_close_internal+0xe2>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80052de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052e0:	b11b      	cbz	r3, 80052ea <lwip_netconn_do_close_internal+0xe2>
 80052e2:	2200      	movs	r2, #0
 80052e4:	2102      	movs	r1, #2
 80052e6:	4620      	mov	r0, r4
 80052e8:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 80052ea:	b14c      	cbz	r4, 8005300 <lwip_netconn_do_close_internal+0xf8>
 80052ec:	f008 fd7e 	bl	800ddec <sys_arch_protect>
 80052f0:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80052f4:	f113 0f0c 	cmn.w	r3, #12
 80052f8:	db00      	blt.n	80052fc <lwip_netconn_do_close_internal+0xf4>
 80052fa:	7225      	strb	r5, [r4, #8]
 80052fc:	f008 fd82 	bl	800de04 <sys_arch_unprotect>
    if (delayed)
 8005300:	f1b8 0f00 	cmp.w	r8, #0
 8005304:	d172      	bne.n	80053ec <lwip_netconn_do_close_internal+0x1e4>
    return ERR_OK;
 8005306:	2500      	movs	r5, #0
}
 8005308:	4628      	mov	r0, r5
 800530a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800530e:	4b40      	ldr	r3, [pc, #256]	; (8005410 <lwip_netconn_do_close_internal+0x208>)
 8005310:	f240 3243 	movw	r2, #835	; 0x343
 8005314:	493f      	ldr	r1, [pc, #252]	; (8005414 <lwip_netconn_do_close_internal+0x20c>)
 8005316:	4840      	ldr	r0, [pc, #256]	; (8005418 <lwip_netconn_do_close_internal+0x210>)
 8005318:	f009 fdb2 	bl	800ee80 <iprintf>
 800531c:	e77a      	b.n	8005214 <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800531e:	4b3c      	ldr	r3, [pc, #240]	; (8005410 <lwip_netconn_do_close_internal+0x208>)
 8005320:	f44f 7251 	mov.w	r2, #836	; 0x344
 8005324:	493d      	ldr	r1, [pc, #244]	; (800541c <lwip_netconn_do_close_internal+0x214>)
 8005326:	483c      	ldr	r0, [pc, #240]	; (8005418 <lwip_netconn_do_close_internal+0x210>)
 8005328:	f009 fdaa 	bl	800ee80 <iprintf>
 800532c:	e777      	b.n	800521e <lwip_netconn_do_close_internal+0x16>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800532e:	4b38      	ldr	r3, [pc, #224]	; (8005410 <lwip_netconn_do_close_internal+0x208>)
 8005330:	f240 3245 	movw	r2, #837	; 0x345
 8005334:	493a      	ldr	r1, [pc, #232]	; (8005420 <lwip_netconn_do_close_internal+0x218>)
 8005336:	4838      	ldr	r0, [pc, #224]	; (8005418 <lwip_netconn_do_close_internal+0x210>)
 8005338:	f009 fda2 	bl	800ee80 <iprintf>
 800533c:	e773      	b.n	8005226 <lwip_netconn_do_close_internal+0x1e>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800533e:	4b34      	ldr	r3, [pc, #208]	; (8005410 <lwip_netconn_do_close_internal+0x208>)
 8005340:	f240 3246 	movw	r2, #838	; 0x346
 8005344:	4937      	ldr	r1, [pc, #220]	; (8005424 <lwip_netconn_do_close_internal+0x21c>)
 8005346:	4834      	ldr	r0, [pc, #208]	; (8005418 <lwip_netconn_do_close_internal+0x210>)
 8005348:	f009 fd9a 	bl	800ee80 <iprintf>
 800534c:	e76f      	b.n	800522e <lwip_netconn_do_close_internal+0x26>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800534e:	4b30      	ldr	r3, [pc, #192]	; (8005410 <lwip_netconn_do_close_internal+0x208>)
 8005350:	f240 3247 	movw	r2, #839	; 0x347
 8005354:	4934      	ldr	r1, [pc, #208]	; (8005428 <lwip_netconn_do_close_internal+0x220>)
 8005356:	4830      	ldr	r0, [pc, #192]	; (8005418 <lwip_netconn_do_close_internal+0x210>)
 8005358:	f009 fd92 	bl	800ee80 <iprintf>
 800535c:	e76b      	b.n	8005236 <lwip_netconn_do_close_internal+0x2e>
 800535e:	46ba      	mov	sl, r7
 8005360:	e788      	b.n	8005274 <lwip_netconn_do_close_internal+0x6c>
 8005362:	f04f 0a00 	mov.w	sl, #0
 8005366:	e785      	b.n	8005274 <lwip_netconn_do_close_internal+0x6c>
    tcp_accept(tpcb, NULL);
 8005368:	2100      	movs	r1, #0
 800536a:	4630      	mov	r0, r6
 800536c:	f002 f8f4 	bl	8007558 <tcp_accept>
 8005370:	e78c      	b.n	800528c <lwip_netconn_do_close_internal+0x84>
      tcp_recv(tpcb, NULL);
 8005372:	2100      	movs	r1, #0
 8005374:	4630      	mov	r0, r6
 8005376:	f002 f8a3 	bl	80074c0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800537a:	2100      	movs	r1, #0
 800537c:	4630      	mov	r0, r6
 800537e:	f002 f8eb 	bl	8007558 <tcp_accept>
 8005382:	e77d      	b.n	8005280 <lwip_netconn_do_close_internal+0x78>
      tcp_sent(tpcb, NULL);
 8005384:	2100      	movs	r1, #0
 8005386:	4630      	mov	r0, r6
 8005388:	f002 f8b4 	bl	80074f4 <tcp_sent>
 800538c:	e77a      	b.n	8005284 <lwip_netconn_do_close_internal+0x7c>
      tcp_poll(tpcb, NULL, 0);
 800538e:	2200      	movs	r2, #0
 8005390:	4611      	mov	r1, r2
 8005392:	4630      	mov	r0, r6
 8005394:	f002 f8e8 	bl	8007568 <tcp_poll>
      tcp_err(tpcb, NULL);
 8005398:	2100      	movs	r1, #0
 800539a:	4630      	mov	r0, r6
 800539c:	f002 f8c2 	bl	8007524 <tcp_err>
 80053a0:	e774      	b.n	800528c <lwip_netconn_do_close_internal+0x84>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80053a2:	463a      	mov	r2, r7
 80053a4:	4649      	mov	r1, r9
 80053a6:	4630      	mov	r0, r6
 80053a8:	f002 fcc4 	bl	8007d34 <tcp_shutdown>
 80053ac:	4605      	mov	r5, r0
 80053ae:	e775      	b.n	800529c <lwip_netconn_do_close_internal+0x94>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80053b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b2:	7a5b      	ldrb	r3, [r3, #9]
 80053b4:	b943      	cbnz	r3, 80053c8 <lwip_netconn_do_close_internal+0x1c0>
        if (close) {
 80053b6:	f1ba 0f00 	cmp.w	sl, #0
 80053ba:	f43f af74 	beq.w	80052a6 <lwip_netconn_do_close_internal+0x9e>
          tcp_abort(tpcb);
 80053be:	4630      	mov	r0, r6
 80053c0:	f002 fd60 	bl	8007e84 <tcp_abort>
          err = ERR_OK;
 80053c4:	2500      	movs	r5, #0
 80053c6:	e76e      	b.n	80052a6 <lwip_netconn_do_close_internal+0x9e>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80053c8:	7d33      	ldrb	r3, [r6, #20]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d013      	beq.n	80053f6 <lwip_netconn_do_close_internal+0x1ee>
    if (shut_tx) {
 80053ce:	b9d7      	cbnz	r7, 8005406 <lwip_netconn_do_close_internal+0x1fe>
    tcp_poll(tpcb, poll_tcp, 1);
 80053d0:	2201      	movs	r2, #1
 80053d2:	4916      	ldr	r1, [pc, #88]	; (800542c <lwip_netconn_do_close_internal+0x224>)
 80053d4:	4630      	mov	r0, r6
 80053d6:	f002 f8c7 	bl	8007568 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80053da:	4915      	ldr	r1, [pc, #84]	; (8005430 <lwip_netconn_do_close_internal+0x228>)
 80053dc:	4630      	mov	r0, r6
 80053de:	f002 f8a1 	bl	8007524 <tcp_err>
    tcp_arg(tpcb, conn);
 80053e2:	4621      	mov	r1, r4
 80053e4:	4630      	mov	r0, r6
 80053e6:	f002 f868 	bl	80074ba <tcp_arg>
  return err;
 80053ea:	e78d      	b.n	8005308 <lwip_netconn_do_close_internal+0x100>
      sys_sem_signal(op_completed_sem);
 80053ec:	4630      	mov	r0, r6
 80053ee:	f008 fcae 	bl	800dd4e <sys_sem_signal>
    return ERR_OK;
 80053f2:	2500      	movs	r5, #0
 80053f4:	e788      	b.n	8005308 <lwip_netconn_do_close_internal+0x100>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80053f6:	4b06      	ldr	r3, [pc, #24]	; (8005410 <lwip_netconn_do_close_internal+0x208>)
 80053f8:	f240 32e3 	movw	r2, #995	; 0x3e3
 80053fc:	490d      	ldr	r1, [pc, #52]	; (8005434 <lwip_netconn_do_close_internal+0x22c>)
 80053fe:	4806      	ldr	r0, [pc, #24]	; (8005418 <lwip_netconn_do_close_internal+0x210>)
 8005400:	f009 fd3e 	bl	800ee80 <iprintf>
 8005404:	e7e3      	b.n	80053ce <lwip_netconn_do_close_internal+0x1c6>
      tcp_sent(tpcb, sent_tcp);
 8005406:	490c      	ldr	r1, [pc, #48]	; (8005438 <lwip_netconn_do_close_internal+0x230>)
 8005408:	4630      	mov	r0, r6
 800540a:	f002 f873 	bl	80074f4 <tcp_sent>
 800540e:	e7df      	b.n	80053d0 <lwip_netconn_do_close_internal+0x1c8>
 8005410:	0801067c 	.word	0x0801067c
 8005414:	08010210 	.word	0x08010210
 8005418:	080101d8 	.word	0x080101d8
 800541c:	080103a8 	.word	0x080103a8
 8005420:	080103c8 	.word	0x080103c8
 8005424:	080103ec 	.word	0x080103ec
 8005428:	08010354 	.word	0x08010354
 800542c:	0800543d 	.word	0x0800543d
 8005430:	08004e9d 	.word	0x08004e9d
 8005434:	08010400 	.word	0x08010400
 8005438:	080054bd 	.word	0x080054bd

0800543c <poll_tcp>:
{
 800543c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800543e:	4604      	mov	r4, r0
 8005440:	b1f0      	cbz	r0, 8005480 <poll_tcp+0x44>
  if (conn->state == NETCONN_WRITE) {
 8005442:	7863      	ldrb	r3, [r4, #1]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d023      	beq.n	8005490 <poll_tcp+0x54>
  } else if (conn->state == NETCONN_CLOSE) {
 8005448:	2b04      	cmp	r3, #4
 800544a:	d026      	beq.n	800549a <poll_tcp+0x5e>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800544c:	7f23      	ldrb	r3, [r4, #28]
 800544e:	f013 0f10 	tst.w	r3, #16
 8005452:	d013      	beq.n	800547c <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005454:	6862      	ldr	r2, [r4, #4]
 8005456:	b18a      	cbz	r2, 800547c <poll_tcp+0x40>
 8005458:	f8b2 1060 	ldrh.w	r1, [r2, #96]	; 0x60
 800545c:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8005460:	d30c      	bcc.n	800547c <poll_tcp+0x40>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8005462:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005466:	2a04      	cmp	r2, #4
 8005468:	d808      	bhi.n	800547c <poll_tcp+0x40>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800546a:	f023 0310 	bic.w	r3, r3, #16
 800546e:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005470:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005472:	b11b      	cbz	r3, 800547c <poll_tcp+0x40>
 8005474:	2200      	movs	r2, #0
 8005476:	2102      	movs	r1, #2
 8005478:	4620      	mov	r0, r4
 800547a:	4798      	blx	r3
}
 800547c:	2000      	movs	r0, #0
 800547e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <poll_tcp+0x74>)
 8005482:	f44f 729c 	mov.w	r2, #312	; 0x138
 8005486:	490b      	ldr	r1, [pc, #44]	; (80054b4 <poll_tcp+0x78>)
 8005488:	480b      	ldr	r0, [pc, #44]	; (80054b8 <poll_tcp+0x7c>)
 800548a:	f009 fcf9 	bl	800ee80 <iprintf>
 800548e:	e7d8      	b.n	8005442 <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005490:	2101      	movs	r1, #1
 8005492:	4620      	mov	r0, r4
 8005494:	f7ff fda2 	bl	8004fdc <lwip_netconn_do_writemore>
 8005498:	e7d8      	b.n	800544c <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800549a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800549c:	b11b      	cbz	r3, 80054a6 <poll_tcp+0x6a>
 800549e:	7a5a      	ldrb	r2, [r3, #9]
 80054a0:	b10a      	cbz	r2, 80054a6 <poll_tcp+0x6a>
      conn->current_msg->msg.sd.polls_left--;
 80054a2:	3a01      	subs	r2, #1
 80054a4:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80054a6:	2101      	movs	r1, #1
 80054a8:	4620      	mov	r0, r4
 80054aa:	f7ff fead 	bl	8005208 <lwip_netconn_do_close_internal>
 80054ae:	e7cd      	b.n	800544c <poll_tcp+0x10>
 80054b0:	0801067c 	.word	0x0801067c
 80054b4:	08010344 	.word	0x08010344
 80054b8:	080101d8 	.word	0x080101d8

080054bc <sent_tcp>:
{
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80054c0:	4604      	mov	r4, r0
 80054c2:	b1e0      	cbz	r0, 80054fe <sent_tcp+0x42>
  if (conn) {
 80054c4:	b1cc      	cbz	r4, 80054fa <sent_tcp+0x3e>
    if (conn->state == NETCONN_WRITE) {
 80054c6:	7863      	ldrb	r3, [r4, #1]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d020      	beq.n	800550e <sent_tcp+0x52>
    } else if (conn->state == NETCONN_CLOSE) {
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d023      	beq.n	8005518 <sent_tcp+0x5c>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	b193      	cbz	r3, 80054fa <sent_tcp+0x3e>
 80054d4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80054d8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80054dc:	d30d      	bcc.n	80054fa <sent_tcp+0x3e>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80054de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d809      	bhi.n	80054fa <sent_tcp+0x3e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80054e6:	7f23      	ldrb	r3, [r4, #28]
 80054e8:	f023 0310 	bic.w	r3, r3, #16
 80054ec:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80054ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054f0:	b11b      	cbz	r3, 80054fa <sent_tcp+0x3e>
 80054f2:	462a      	mov	r2, r5
 80054f4:	2102      	movs	r1, #2
 80054f6:	4620      	mov	r0, r4
 80054f8:	4798      	blx	r3
}
 80054fa:	2000      	movs	r0, #0
 80054fc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <sent_tcp+0x68>)
 8005500:	f240 1261 	movw	r2, #353	; 0x161
 8005504:	4908      	ldr	r1, [pc, #32]	; (8005528 <sent_tcp+0x6c>)
 8005506:	4809      	ldr	r0, [pc, #36]	; (800552c <sent_tcp+0x70>)
 8005508:	f009 fcba 	bl	800ee80 <iprintf>
 800550c:	e7da      	b.n	80054c4 <sent_tcp+0x8>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800550e:	2101      	movs	r1, #1
 8005510:	4620      	mov	r0, r4
 8005512:	f7ff fd63 	bl	8004fdc <lwip_netconn_do_writemore>
 8005516:	e7db      	b.n	80054d0 <sent_tcp+0x14>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005518:	2101      	movs	r1, #1
 800551a:	4620      	mov	r0, r4
 800551c:	f7ff fe74 	bl	8005208 <lwip_netconn_do_close_internal>
 8005520:	e7d6      	b.n	80054d0 <sent_tcp+0x14>
 8005522:	bf00      	nop
 8005524:	0801067c 	.word	0x0801067c
 8005528:	08010344 	.word	0x08010344
 800552c:	080101d8 	.word	0x080101d8

08005530 <recv_tcp>:
{
 8005530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005534:	4604      	mov	r4, r0
 8005536:	4615      	mov	r5, r2
 8005538:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800553a:	460f      	mov	r7, r1
 800553c:	b1e9      	cbz	r1, 800557a <recv_tcp+0x4a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800553e:	b31c      	cbz	r4, 8005588 <recv_tcp+0x58>
  if (conn == NULL) {
 8005540:	2c00      	cmp	r4, #0
 8005542:	d04a      	beq.n	80055da <recv_tcp+0xaa>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	42bb      	cmp	r3, r7
 8005548:	d006      	beq.n	8005558 <recv_tcp+0x28>
 800554a:	4b28      	ldr	r3, [pc, #160]	; (80055ec <recv_tcp+0xbc>)
 800554c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005550:	4927      	ldr	r1, [pc, #156]	; (80055f0 <recv_tcp+0xc0>)
 8005552:	4828      	ldr	r0, [pc, #160]	; (80055f4 <recv_tcp+0xc4>)
 8005554:	f009 fc94 	bl	800ee80 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8005558:	f104 0610 	add.w	r6, r4, #16
 800555c:	4630      	mov	r0, r6
 800555e:	f008 fbb6 	bl	800dcce <sys_mbox_valid>
 8005562:	b9c0      	cbnz	r0, 8005596 <recv_tcp+0x66>
    if (p != NULL) {
 8005564:	2d00      	cmp	r5, #0
 8005566:	d03b      	beq.n	80055e0 <recv_tcp+0xb0>
      tcp_recved(pcb, p->tot_len);
 8005568:	8929      	ldrh	r1, [r5, #8]
 800556a:	4638      	mov	r0, r7
 800556c:	f001 ff38 	bl	80073e0 <tcp_recved>
      pbuf_free(p);
 8005570:	4628      	mov	r0, r5
 8005572:	f001 fa71 	bl	8006a58 <pbuf_free>
    return ERR_OK;
 8005576:	2500      	movs	r5, #0
 8005578:	e01e      	b.n	80055b8 <recv_tcp+0x88>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800557a:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <recv_tcp+0xbc>)
 800557c:	22f9      	movs	r2, #249	; 0xf9
 800557e:	491e      	ldr	r1, [pc, #120]	; (80055f8 <recv_tcp+0xc8>)
 8005580:	481c      	ldr	r0, [pc, #112]	; (80055f4 <recv_tcp+0xc4>)
 8005582:	f009 fc7d 	bl	800ee80 <iprintf>
 8005586:	e7da      	b.n	800553e <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8005588:	4b18      	ldr	r3, [pc, #96]	; (80055ec <recv_tcp+0xbc>)
 800558a:	22fa      	movs	r2, #250	; 0xfa
 800558c:	491b      	ldr	r1, [pc, #108]	; (80055fc <recv_tcp+0xcc>)
 800558e:	4819      	ldr	r0, [pc, #100]	; (80055f4 <recv_tcp+0xc4>)
 8005590:	f009 fc76 	bl	800ee80 <iprintf>
 8005594:	e7d4      	b.n	8005540 <recv_tcp+0x10>
  if (err != ERR_OK) {
 8005596:	f1b8 0f00 	cmp.w	r8, #0
 800559a:	d110      	bne.n	80055be <recv_tcp+0x8e>
  if (p != NULL) {
 800559c:	b1dd      	cbz	r5, 80055d6 <recv_tcp+0xa6>
    len = p->tot_len;
 800559e:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 80055a0:	4629      	mov	r1, r5
 80055a2:	4630      	mov	r0, r6
 80055a4:	f008 fb49 	bl	800dc3a <sys_mbox_trypost>
 80055a8:	4605      	mov	r5, r0
 80055aa:	b9d8      	cbnz	r0, 80055e4 <recv_tcp+0xb4>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80055ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055ae:	b11b      	cbz	r3, 80055b8 <recv_tcp+0x88>
 80055b0:	463a      	mov	r2, r7
 80055b2:	2100      	movs	r1, #0
 80055b4:	4620      	mov	r0, r4
 80055b6:	4798      	blx	r3
}
 80055b8:	4628      	mov	r0, r5
 80055ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 80055be:	f008 fc15 	bl	800ddec <sys_arch_protect>
 80055c2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80055c6:	f113 0f0c 	cmn.w	r3, #12
 80055ca:	db01      	blt.n	80055d0 <recv_tcp+0xa0>
 80055cc:	f884 8008 	strb.w	r8, [r4, #8]
 80055d0:	f008 fc18 	bl	800de04 <sys_arch_unprotect>
 80055d4:	e7e2      	b.n	800559c <recv_tcp+0x6c>
    len = 0;
 80055d6:	2700      	movs	r7, #0
 80055d8:	e7e2      	b.n	80055a0 <recv_tcp+0x70>
    return ERR_VAL;
 80055da:	f06f 0505 	mvn.w	r5, #5
 80055de:	e7eb      	b.n	80055b8 <recv_tcp+0x88>
    return ERR_OK;
 80055e0:	2500      	movs	r5, #0
 80055e2:	e7e9      	b.n	80055b8 <recv_tcp+0x88>
    return ERR_MEM;
 80055e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80055e8:	e7e6      	b.n	80055b8 <recv_tcp+0x88>
 80055ea:	bf00      	nop
 80055ec:	0801067c 	.word	0x0801067c
 80055f0:	0801065c 	.word	0x0801065c
 80055f4:	080101d8 	.word	0x080101d8
 80055f8:	08010618 	.word	0x08010618
 80055fc:	0801063c 	.word	0x0801063c

08005600 <lwip_netconn_do_newconn>:
{
 8005600:	b510      	push	{r4, lr}
 8005602:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8005608:	6803      	ldr	r3, [r0, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	b17b      	cbz	r3, 800562e <lwip_netconn_do_newconn+0x2e>
  TCPIP_APIMSG_ACK(msg);
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	b163      	cbz	r3, 800562c <lwip_netconn_do_newconn+0x2c>
 8005612:	f008 fbeb 	bl	800ddec <sys_arch_protect>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800561c:	f112 0f0c 	cmn.w	r2, #12
 8005620:	db02      	blt.n	8005628 <lwip_netconn_do_newconn+0x28>
 8005622:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8005626:	721a      	strb	r2, [r3, #8]
 8005628:	f008 fbec 	bl	800de04 <sys_arch_unprotect>
}
 800562c:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 800562e:	f7ff fbf1 	bl	8004e14 <pcb_new>
 8005632:	e7ec      	b.n	800560e <lwip_netconn_do_newconn+0xe>

08005634 <netconn_alloc>:
{
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	4605      	mov	r5, r0
 8005638:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800563a:	2007      	movs	r0, #7
 800563c:	f001 f818 	bl	8006670 <memp_malloc>
  if (conn == NULL) {
 8005640:	4604      	mov	r4, r0
 8005642:	b318      	cbz	r0, 800568c <netconn_alloc+0x58>
  conn->last_err = ERR_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8005648:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 800564a:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 800564c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005650:	2d10      	cmp	r5, #16
 8005652:	d001      	beq.n	8005658 <netconn_alloc+0x24>
 8005654:	2d20      	cmp	r5, #32
 8005656:	d11b      	bne.n	8005690 <netconn_alloc+0x5c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8005658:	f104 0510 	add.w	r5, r4, #16
 800565c:	2106      	movs	r1, #6
 800565e:	4628      	mov	r0, r5
 8005660:	f008 fac4 	bl	800dbec <sys_mbox_new>
 8005664:	b9d8      	cbnz	r0, 800569e <netconn_alloc+0x6a>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8005666:	2100      	movs	r1, #0
 8005668:	f104 000c 	add.w	r0, r4, #12
 800566c:	f008 fb38 	bl	800dce0 <sys_sem_new>
 8005670:	b9d8      	cbnz	r0, 80056aa <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8005672:	f104 0014 	add.w	r0, r4, #20
 8005676:	f008 fb30 	bl	800dcda <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 800567a:	2300      	movs	r3, #0
 800567c:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 800567e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005682:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8005684:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 8005686:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8005688:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 800568a:	7723      	strb	r3, [r4, #28]
}
 800568c:	4620      	mov	r0, r4
 800568e:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8005690:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <netconn_alloc+0x80>)
 8005692:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8005696:	4908      	ldr	r1, [pc, #32]	; (80056b8 <netconn_alloc+0x84>)
 8005698:	4808      	ldr	r0, [pc, #32]	; (80056bc <netconn_alloc+0x88>)
 800569a:	f009 fbf1 	bl	800ee80 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800569e:	4621      	mov	r1, r4
 80056a0:	2007      	movs	r0, #7
 80056a2:	f000 ffff 	bl	80066a4 <memp_free>
  return NULL;
 80056a6:	2400      	movs	r4, #0
 80056a8:	e7f0      	b.n	800568c <netconn_alloc+0x58>
    sys_mbox_free(&conn->recvmbox);
 80056aa:	4628      	mov	r0, r5
 80056ac:	f008 fab0 	bl	800dc10 <sys_mbox_free>
    goto free_and_return;
 80056b0:	e7f5      	b.n	800569e <netconn_alloc+0x6a>
 80056b2:	bf00      	nop
 80056b4:	0801067c 	.word	0x0801067c
 80056b8:	08010528 	.word	0x08010528
 80056bc:	080101d8 	.word	0x080101d8

080056c0 <netconn_free>:
{
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80056c4:	6843      	ldr	r3, [r0, #4]
 80056c6:	b133      	cbz	r3, 80056d6 <netconn_free+0x16>
 80056c8:	4b16      	ldr	r3, [pc, #88]	; (8005724 <netconn_free+0x64>)
 80056ca:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80056ce:	4916      	ldr	r1, [pc, #88]	; (8005728 <netconn_free+0x68>)
 80056d0:	4816      	ldr	r0, [pc, #88]	; (800572c <netconn_free+0x6c>)
 80056d2:	f009 fbd5 	bl	800ee80 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80056d6:	f104 0010 	add.w	r0, r4, #16
 80056da:	f008 faf8 	bl	800dcce <sys_mbox_valid>
 80056de:	b988      	cbnz	r0, 8005704 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80056e0:	f104 0014 	add.w	r0, r4, #20
 80056e4:	f008 faf3 	bl	800dcce <sys_mbox_valid>
 80056e8:	b9a0      	cbnz	r0, 8005714 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 80056ea:	f104 050c 	add.w	r5, r4, #12
 80056ee:	4628      	mov	r0, r5
 80056f0:	f008 fb32 	bl	800dd58 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80056f4:	4628      	mov	r0, r5
 80056f6:	f008 fb3a 	bl	800dd6e <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 80056fa:	4621      	mov	r1, r4
 80056fc:	2007      	movs	r0, #7
 80056fe:	f000 ffd1 	bl	80066a4 <memp_free>
}
 8005702:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <netconn_free+0x64>)
 8005706:	f240 22e2 	movw	r2, #738	; 0x2e2
 800570a:	4909      	ldr	r1, [pc, #36]	; (8005730 <netconn_free+0x70>)
 800570c:	4807      	ldr	r0, [pc, #28]	; (800572c <netconn_free+0x6c>)
 800570e:	f009 fbb7 	bl	800ee80 <iprintf>
 8005712:	e7e5      	b.n	80056e0 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8005714:	4b03      	ldr	r3, [pc, #12]	; (8005724 <netconn_free+0x64>)
 8005716:	f240 22e5 	movw	r2, #741	; 0x2e5
 800571a:	4906      	ldr	r1, [pc, #24]	; (8005734 <netconn_free+0x74>)
 800571c:	4803      	ldr	r0, [pc, #12]	; (800572c <netconn_free+0x6c>)
 800571e:	f009 fbaf 	bl	800ee80 <iprintf>
 8005722:	e7e2      	b.n	80056ea <netconn_free+0x2a>
 8005724:	0801067c 	.word	0x0801067c
 8005728:	08010550 	.word	0x08010550
 800572c:	080101d8 	.word	0x080101d8
 8005730:	08010580 	.word	0x08010580
 8005734:	080105bc 	.word	0x080105bc

08005738 <netconn_drain>:
{
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 800573e:	f100 0510 	add.w	r5, r0, #16
 8005742:	4628      	mov	r0, r5
 8005744:	f008 fac3 	bl	800dcce <sys_mbox_valid>
 8005748:	bb00      	cbnz	r0, 800578c <netconn_drain+0x54>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800574a:	3414      	adds	r4, #20
 800574c:	4620      	mov	r0, r4
 800574e:	f008 fabe 	bl	800dcce <sys_mbox_valid>
 8005752:	2800      	cmp	r0, #0
 8005754:	d03f      	beq.n	80057d6 <netconn_drain+0x9e>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8005756:	a901      	add	r1, sp, #4
 8005758:	4620      	mov	r0, r4
 800575a:	f008 faa5 	bl	800dca8 <sys_arch_mbox_tryfetch>
 800575e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005762:	d032      	beq.n	80057ca <netconn_drain+0x92>
      if (mem != &netconn_aborted) {
 8005764:	9d01      	ldr	r5, [sp, #4]
 8005766:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <netconn_drain+0xa4>)
 8005768:	429d      	cmp	r5, r3
 800576a:	d0f4      	beq.n	8005756 <netconn_drain+0x1e>
        netconn_drain(newconn);
 800576c:	4628      	mov	r0, r5
 800576e:	f7ff ffe3 	bl	8005738 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8005772:	6868      	ldr	r0, [r5, #4]
 8005774:	b118      	cbz	r0, 800577e <netconn_drain+0x46>
          tcp_abort(newconn->pcb.tcp);
 8005776:	f002 fb85 	bl	8007e84 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	606b      	str	r3, [r5, #4]
        netconn_free(newconn);
 800577e:	4628      	mov	r0, r5
 8005780:	f7ff ff9e 	bl	80056c0 <netconn_free>
 8005784:	e7e7      	b.n	8005756 <netconn_drain+0x1e>
        netbuf_delete((struct netbuf *)mem);
 8005786:	9801      	ldr	r0, [sp, #4]
 8005788:	f000 fb3a 	bl	8005e00 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800578c:	a901      	add	r1, sp, #4
 800578e:	4628      	mov	r0, r5
 8005790:	f008 fa8a 	bl	800dca8 <sys_arch_mbox_tryfetch>
 8005794:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005798:	d010      	beq.n	80057bc <netconn_drain+0x84>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800579a:	7823      	ldrb	r3, [r4, #0]
 800579c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d1f0      	bne.n	8005786 <netconn_drain+0x4e>
        if (mem != NULL) {
 80057a4:	9e01      	ldr	r6, [sp, #4]
 80057a6:	2e00      	cmp	r6, #0
 80057a8:	d0f0      	beq.n	800578c <netconn_drain+0x54>
          if (conn->pcb.tcp != NULL) {
 80057aa:	6860      	ldr	r0, [r4, #4]
 80057ac:	b110      	cbz	r0, 80057b4 <netconn_drain+0x7c>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 80057ae:	8931      	ldrh	r1, [r6, #8]
 80057b0:	f001 fe16 	bl	80073e0 <tcp_recved>
          pbuf_free(p);
 80057b4:	4630      	mov	r0, r6
 80057b6:	f001 f94f 	bl	8006a58 <pbuf_free>
 80057ba:	e7e7      	b.n	800578c <netconn_drain+0x54>
    sys_mbox_free(&conn->recvmbox);
 80057bc:	4628      	mov	r0, r5
 80057be:	f008 fa27 	bl	800dc10 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80057c2:	4628      	mov	r0, r5
 80057c4:	f008 fa89 	bl	800dcda <sys_mbox_set_invalid>
 80057c8:	e7bf      	b.n	800574a <netconn_drain+0x12>
    sys_mbox_free(&conn->acceptmbox);
 80057ca:	4620      	mov	r0, r4
 80057cc:	f008 fa20 	bl	800dc10 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80057d0:	4620      	mov	r0, r4
 80057d2:	f008 fa82 	bl	800dcda <sys_mbox_set_invalid>
}
 80057d6:	b002      	add	sp, #8
 80057d8:	bd70      	pop	{r4, r5, r6, pc}
 80057da:	bf00      	nop
 80057dc:	20004ab8 	.word	0x20004ab8

080057e0 <accept_function>:
{
 80057e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d06a      	beq.n	80058be <accept_function+0xde>
 80057e8:	4604      	mov	r4, r0
 80057ea:	4616      	mov	r6, r2
 80057ec:	460d      	mov	r5, r1
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80057ee:	f100 0714 	add.w	r7, r0, #20
 80057f2:	4638      	mov	r0, r7
 80057f4:	f008 fa6b 	bl	800dcce <sys_mbox_valid>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d063      	beq.n	80058c4 <accept_function+0xe4>
  if (newpcb == NULL) {
 80057fc:	b1cd      	cbz	r5, 8005832 <accept_function+0x52>
  newconn = netconn_alloc(conn->type, conn->callback);
 80057fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005800:	7820      	ldrb	r0, [r4, #0]
 8005802:	f7ff ff17 	bl	8005634 <netconn_alloc>
  if (newconn == NULL) {
 8005806:	4680      	mov	r8, r0
 8005808:	b318      	cbz	r0, 8005852 <accept_function+0x72>
  newconn->pcb.tcp = newpcb;
 800580a:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 800580c:	f7ff fae2 	bl	8004dd4 <setup_tcp>
  newconn->last_err = err;
 8005810:	f888 6008 	strb.w	r6, [r8, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8005814:	4641      	mov	r1, r8
 8005816:	4638      	mov	r0, r7
 8005818:	f008 fa0f 	bl	800dc3a <sys_mbox_trypost>
 800581c:	4605      	mov	r5, r0
 800581e:	bb30      	cbnz	r0, 800586e <accept_function+0x8e>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005820:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005822:	b11b      	cbz	r3, 800582c <accept_function+0x4c>
 8005824:	2200      	movs	r2, #0
 8005826:	4611      	mov	r1, r2
 8005828:	4620      	mov	r0, r4
 800582a:	4798      	blx	r3
}
 800582c:	4628      	mov	r0, r5
 800582e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8005832:	492c      	ldr	r1, [pc, #176]	; (80058e4 <accept_function+0x104>)
 8005834:	4638      	mov	r0, r7
 8005836:	f008 fa00 	bl	800dc3a <sys_mbox_trypost>
 800583a:	2800      	cmp	r0, #0
 800583c:	d145      	bne.n	80058ca <accept_function+0xea>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800583e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	d045      	beq.n	80058d0 <accept_function+0xf0>
 8005844:	2200      	movs	r2, #0
 8005846:	4611      	mov	r1, r2
 8005848:	4620      	mov	r0, r4
 800584a:	4798      	blx	r3
    return ERR_VAL;
 800584c:	f06f 0505 	mvn.w	r5, #5
 8005850:	e7ec      	b.n	800582c <accept_function+0x4c>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8005852:	4924      	ldr	r1, [pc, #144]	; (80058e4 <accept_function+0x104>)
 8005854:	4638      	mov	r0, r7
 8005856:	f008 f9f0 	bl	800dc3a <sys_mbox_trypost>
 800585a:	bbe0      	cbnz	r0, 80058d6 <accept_function+0xf6>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800585c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800585e:	b3eb      	cbz	r3, 80058dc <accept_function+0xfc>
 8005860:	2200      	movs	r2, #0
 8005862:	4611      	mov	r1, r2
 8005864:	4620      	mov	r0, r4
 8005866:	4798      	blx	r3
    return ERR_MEM;
 8005868:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800586c:	e7de      	b.n	800582c <accept_function+0x4c>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800586e:	f8d8 4004 	ldr.w	r4, [r8, #4]
    tcp_arg(pcb, NULL);
 8005872:	2100      	movs	r1, #0
 8005874:	4620      	mov	r0, r4
 8005876:	f001 fe20 	bl	80074ba <tcp_arg>
    tcp_recv(pcb, NULL);
 800587a:	2100      	movs	r1, #0
 800587c:	4620      	mov	r0, r4
 800587e:	f001 fe1f 	bl	80074c0 <tcp_recv>
    tcp_sent(pcb, NULL);
 8005882:	2100      	movs	r1, #0
 8005884:	4620      	mov	r0, r4
 8005886:	f001 fe35 	bl	80074f4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800588a:	2200      	movs	r2, #0
 800588c:	4611      	mov	r1, r2
 800588e:	4620      	mov	r0, r4
 8005890:	f001 fe6a 	bl	8007568 <tcp_poll>
    tcp_err(pcb, NULL);
 8005894:	2100      	movs	r1, #0
 8005896:	4620      	mov	r0, r4
 8005898:	f001 fe44 	bl	8007524 <tcp_err>
    newconn->pcb.tcp = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	f8c8 3004 	str.w	r3, [r8, #4]
    sys_mbox_free(&newconn->recvmbox);
 80058a2:	f108 0410 	add.w	r4, r8, #16
 80058a6:	4620      	mov	r0, r4
 80058a8:	f008 f9b2 	bl	800dc10 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80058ac:	4620      	mov	r0, r4
 80058ae:	f008 fa14 	bl	800dcda <sys_mbox_set_invalid>
    netconn_free(newconn);
 80058b2:	4640      	mov	r0, r8
 80058b4:	f7ff ff04 	bl	80056c0 <netconn_free>
    return ERR_MEM;
 80058b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80058bc:	e7b6      	b.n	800582c <accept_function+0x4c>
    return ERR_VAL;
 80058be:	f06f 0505 	mvn.w	r5, #5
 80058c2:	e7b3      	b.n	800582c <accept_function+0x4c>
    return ERR_VAL;
 80058c4:	f06f 0505 	mvn.w	r5, #5
 80058c8:	e7b0      	b.n	800582c <accept_function+0x4c>
    return ERR_VAL;
 80058ca:	f06f 0505 	mvn.w	r5, #5
 80058ce:	e7ad      	b.n	800582c <accept_function+0x4c>
 80058d0:	f06f 0505 	mvn.w	r5, #5
 80058d4:	e7aa      	b.n	800582c <accept_function+0x4c>
    return ERR_MEM;
 80058d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80058da:	e7a7      	b.n	800582c <accept_function+0x4c>
 80058dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80058e0:	e7a4      	b.n	800582c <accept_function+0x4c>
 80058e2:	bf00      	nop
 80058e4:	20004ab8 	.word	0x20004ab8

080058e8 <lwip_netconn_do_delconn>:
{
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 80058ec:	6803      	ldr	r3, [r0, #0]
 80058ee:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80058f0:	b125      	cbz	r5, 80058fc <lwip_netconn_do_delconn+0x14>
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d11f      	bne.n	800593c <lwip_netconn_do_delconn+0x54>
       (state != NETCONN_LISTEN) &&
 80058fc:	1eab      	subs	r3, r5, #2
 80058fe:	bf18      	it	ne
 8005900:	2301      	movne	r3, #1
  if (((state != NETCONN_NONE) &&
 8005902:	2d00      	cmp	r5, #0
 8005904:	bf08      	it	eq
 8005906:	2300      	moveq	r3, #0
 8005908:	b303      	cbz	r3, 800594c <lwip_netconn_do_delconn+0x64>
       (state != NETCONN_LISTEN) &&
 800590a:	2d03      	cmp	r5, #3
 800590c:	d01e      	beq.n	800594c <lwip_netconn_do_delconn+0x64>
    msg->err = ERR_INPROGRESS;
 800590e:	23fb      	movs	r3, #251	; 0xfb
 8005910:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	300c      	adds	r0, #12
 8005916:	f008 fa24 	bl	800dd62 <sys_sem_valid>
 800591a:	b170      	cbz	r0, 800593a <lwip_netconn_do_delconn+0x52>
    TCPIP_APIMSG_ACK(msg);
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	b163      	cbz	r3, 800593a <lwip_netconn_do_delconn+0x52>
 8005920:	f008 fa64 	bl	800ddec <sys_arch_protect>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800592a:	f112 0f0c 	cmn.w	r2, #12
 800592e:	db02      	blt.n	8005936 <lwip_netconn_do_delconn+0x4e>
 8005930:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8005934:	721a      	strb	r2, [r3, #8]
 8005936:	f008 fa65 	bl	800de04 <sys_arch_unprotect>
}
 800593a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800593c:	4b41      	ldr	r3, [pc, #260]	; (8005a44 <lwip_netconn_do_delconn+0x15c>)
 800593e:	f240 4201 	movw	r2, #1025	; 0x401
 8005942:	4941      	ldr	r1, [pc, #260]	; (8005a48 <lwip_netconn_do_delconn+0x160>)
 8005944:	4841      	ldr	r0, [pc, #260]	; (8005a4c <lwip_netconn_do_delconn+0x164>)
 8005946:	f009 fa9b 	bl	800ee80 <iprintf>
 800594a:	e7d7      	b.n	80058fc <lwip_netconn_do_delconn+0x14>
       (state != NETCONN_CONNECT)) ||
 800594c:	2d03      	cmp	r5, #3
 800594e:	d027      	beq.n	80059a0 <lwip_netconn_do_delconn+0xb8>
    LWIP_ASSERT("blocking connect in progress",
 8005950:	2d03      	cmp	r5, #3
 8005952:	d02b      	beq.n	80059ac <lwip_netconn_do_delconn+0xc4>
    msg->err = ERR_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 8005958:	6820      	ldr	r0, [r4, #0]
 800595a:	f7ff feed 	bl	8005738 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	6851      	ldr	r1, [r2, #4]
 8005962:	b179      	cbz	r1, 8005984 <lwip_netconn_do_delconn+0x9c>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005964:	7813      	ldrb	r3, [r2, #0]
 8005966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800596a:	2b10      	cmp	r3, #16
 800596c:	d02b      	beq.n	80059c6 <lwip_netconn_do_delconn+0xde>
 800596e:	2b20      	cmp	r3, #32
 8005970:	d105      	bne.n	800597e <lwip_netconn_do_delconn+0x96>
        msg->conn->pcb.udp->recv_arg = NULL;
 8005972:	2300      	movs	r3, #0
 8005974:	61cb      	str	r3, [r1, #28]
        udp_remove(msg->conn->pcb.udp);
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	6858      	ldr	r0, [r3, #4]
 800597a:	f005 fa7b 	bl	800ae74 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	2200      	movs	r2, #0
 8005982:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8005984:	6820      	ldr	r0, [r4, #0]
 8005986:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005988:	b113      	cbz	r3, 8005990 <lwip_netconn_do_delconn+0xa8>
 800598a:	2200      	movs	r2, #0
 800598c:	4611      	mov	r1, r2
 800598e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0bc      	beq.n	8005912 <lwip_netconn_do_delconn+0x2a>
 8005998:	2200      	movs	r2, #0
 800599a:	2102      	movs	r1, #2
 800599c:	4798      	blx	r3
 800599e:	e7b8      	b.n	8005912 <lwip_netconn_do_delconn+0x2a>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	7f1b      	ldrb	r3, [r3, #28]
 80059a4:	f013 0f04 	tst.w	r3, #4
 80059a8:	d1d2      	bne.n	8005950 <lwip_netconn_do_delconn+0x68>
 80059aa:	e7b0      	b.n	800590e <lwip_netconn_do_delconn+0x26>
    LWIP_ASSERT("blocking connect in progress",
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	7f1b      	ldrb	r3, [r3, #28]
 80059b0:	f013 0f04 	tst.w	r3, #4
 80059b4:	d1ce      	bne.n	8005954 <lwip_netconn_do_delconn+0x6c>
 80059b6:	4b23      	ldr	r3, [pc, #140]	; (8005a44 <lwip_netconn_do_delconn+0x15c>)
 80059b8:	f240 421f 	movw	r2, #1055	; 0x41f
 80059bc:	4924      	ldr	r1, [pc, #144]	; (8005a50 <lwip_netconn_do_delconn+0x168>)
 80059be:	4823      	ldr	r0, [pc, #140]	; (8005a4c <lwip_netconn_do_delconn+0x164>)
 80059c0:	f009 fa5e 	bl	800ee80 <iprintf>
 80059c4:	e7c6      	b.n	8005954 <lwip_netconn_do_delconn+0x6c>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80059c6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d02f      	beq.n	8005a2c <lwip_netconn_do_delconn+0x144>
 80059cc:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <lwip_netconn_do_delconn+0x15c>)
 80059ce:	f240 4235 	movw	r2, #1077	; 0x435
 80059d2:	4920      	ldr	r1, [pc, #128]	; (8005a54 <lwip_netconn_do_delconn+0x16c>)
 80059d4:	481d      	ldr	r0, [pc, #116]	; (8005a4c <lwip_netconn_do_delconn+0x164>)
 80059d6:	f009 fa53 	bl	800ee80 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	2204      	movs	r2, #4
 80059de:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80059e0:	2303      	movs	r3, #3
 80059e2:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	625c      	str	r4, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80059e8:	2100      	movs	r1, #0
 80059ea:	6820      	ldr	r0, [r4, #0]
 80059ec:	f7ff fc0c 	bl	8005208 <lwip_netconn_do_close_internal>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d0a2      	beq.n	800593a <lwip_netconn_do_delconn+0x52>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d11b      	bne.n	8005a34 <lwip_netconn_do_delconn+0x14c>
          UNLOCK_TCPIP_CORE();
 80059fc:	4d16      	ldr	r5, [pc, #88]	; (8005a58 <lwip_netconn_do_delconn+0x170>)
 80059fe:	4628      	mov	r0, r5
 8005a00:	f008 f9dc 	bl	800ddbc <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	2100      	movs	r1, #0
 8005a08:	300c      	adds	r0, #12
 8005a0a:	f008 f982 	bl	800dd12 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f008 f9cd 	bl	800ddae <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d08e      	beq.n	800593a <lwip_netconn_do_delconn+0x52>
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <lwip_netconn_do_delconn+0x15c>)
 8005a1e:	f240 423f 	movw	r2, #1087	; 0x43f
 8005a22:	490e      	ldr	r1, [pc, #56]	; (8005a5c <lwip_netconn_do_delconn+0x174>)
 8005a24:	4809      	ldr	r0, [pc, #36]	; (8005a4c <lwip_netconn_do_delconn+0x164>)
 8005a26:	f009 fa2b 	bl	800ee80 <iprintf>
 8005a2a:	e786      	b.n	800593a <lwip_netconn_do_delconn+0x52>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005a2c:	6a13      	ldr	r3, [r2, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0d3      	beq.n	80059da <lwip_netconn_do_delconn+0xf2>
 8005a32:	e7cb      	b.n	80059cc <lwip_netconn_do_delconn+0xe4>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005a34:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <lwip_netconn_do_delconn+0x15c>)
 8005a36:	f240 423b 	movw	r2, #1083	; 0x43b
 8005a3a:	4908      	ldr	r1, [pc, #32]	; (8005a5c <lwip_netconn_do_delconn+0x174>)
 8005a3c:	4803      	ldr	r0, [pc, #12]	; (8005a4c <lwip_netconn_do_delconn+0x164>)
 8005a3e:	f009 fa1f 	bl	800ee80 <iprintf>
 8005a42:	e7db      	b.n	80059fc <lwip_netconn_do_delconn+0x114>
 8005a44:	0801067c 	.word	0x0801067c
 8005a48:	08010424 	.word	0x08010424
 8005a4c:	080101d8 	.word	0x080101d8
 8005a50:	08010438 	.word	0x08010438
 8005a54:	08010458 	.word	0x08010458
 8005a58:	20004abc 	.word	0x20004abc
 8005a5c:	08010474 	.word	0x08010474

08005a60 <lwip_netconn_do_bind>:
{
 8005a60:	b510      	push	{r4, lr}
 8005a62:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8005a64:	6803      	ldr	r3, [r0, #0]
 8005a66:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005a6a:	f112 0f0c 	cmn.w	r2, #12
 8005a6e:	da10      	bge.n	8005a92 <lwip_netconn_do_bind+0x32>
    msg->err = msg->conn->last_err;
 8005a70:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	b163      	cbz	r3, 8005a90 <lwip_netconn_do_bind+0x30>
 8005a76:	f008 f9b9 	bl	800ddec <sys_arch_protect>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005a80:	f112 0f0c 	cmn.w	r2, #12
 8005a84:	db02      	blt.n	8005a8c <lwip_netconn_do_bind+0x2c>
 8005a86:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8005a8a:	721a      	strb	r2, [r3, #8]
 8005a8c:	f008 f9ba 	bl	800de04 <sys_arch_unprotect>
}
 8005a90:	bd10      	pop	{r4, pc}
    msg->err = ERR_VAL;
 8005a92:	22fa      	movs	r2, #250	; 0xfa
 8005a94:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8005a96:	6858      	ldr	r0, [r3, #4]
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d0ea      	beq.n	8005a72 <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d007      	beq.n	8005ab6 <lwip_netconn_do_bind+0x56>
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d1e3      	bne.n	8005a72 <lwip_netconn_do_bind+0x12>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8005aaa:	89a2      	ldrh	r2, [r4, #12]
 8005aac:	68a1      	ldr	r1, [r4, #8]
 8005aae:	f005 f8d3 	bl	800ac58 <udp_bind>
 8005ab2:	7120      	strb	r0, [r4, #4]
        break;
 8005ab4:	e7dd      	b.n	8005a72 <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8005ab6:	89a2      	ldrh	r2, [r4, #12]
 8005ab8:	68a1      	ldr	r1, [r4, #8]
 8005aba:	f001 fb9d 	bl	80071f8 <tcp_bind>
 8005abe:	7120      	strb	r0, [r4, #4]
        break;
 8005ac0:	e7d7      	b.n	8005a72 <lwip_netconn_do_bind+0x12>
	...

08005ac4 <lwip_netconn_do_listen>:
{
 8005ac4:	b530      	push	{r4, r5, lr}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8005aca:	6803      	ldr	r3, [r0, #0]
 8005acc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005ad0:	f112 0f0c 	cmn.w	r2, #12
 8005ad4:	da11      	bge.n	8005afa <lwip_netconn_do_listen+0x36>
    msg->err = msg->conn->last_err;
 8005ad6:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	b163      	cbz	r3, 8005af6 <lwip_netconn_do_listen+0x32>
 8005adc:	f008 f986 	bl	800ddec <sys_arch_protect>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005ae6:	f112 0f0c 	cmn.w	r2, #12
 8005aea:	db02      	blt.n	8005af2 <lwip_netconn_do_listen+0x2e>
 8005aec:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8005af0:	721a      	strb	r2, [r3, #8]
 8005af2:	f008 f987 	bl	800de04 <sys_arch_unprotect>
}
 8005af6:	b003      	add	sp, #12
 8005af8:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 8005afa:	22f5      	movs	r2, #245	; 0xf5
 8005afc:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8005afe:	6858      	ldr	r0, [r3, #4]
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d0e9      	beq.n	8005ad8 <lwip_netconn_do_listen+0x14>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005b0a:	2a10      	cmp	r2, #16
 8005b0c:	d002      	beq.n	8005b14 <lwip_netconn_do_listen+0x50>
        msg->err = ERR_ARG;
 8005b0e:	23f0      	movs	r3, #240	; 0xf0
 8005b10:	7123      	strb	r3, [r4, #4]
 8005b12:	e7e1      	b.n	8005ad8 <lwip_netconn_do_listen+0x14>
        if (msg->conn->state == NETCONN_NONE) {
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d145      	bne.n	8005ba6 <lwip_netconn_do_listen+0xe2>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8005b1a:	7d03      	ldrb	r3, [r0, #20]
 8005b1c:	b113      	cbz	r3, 8005b24 <lwip_netconn_do_listen+0x60>
            msg->err = ERR_VAL;
 8005b1e:	23fa      	movs	r3, #250	; 0xfa
 8005b20:	7123      	strb	r3, [r4, #4]
 8005b22:	e7d9      	b.n	8005ad8 <lwip_netconn_do_listen+0x14>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8005b24:	f10d 0207 	add.w	r2, sp, #7
 8005b28:	21ff      	movs	r1, #255	; 0xff
 8005b2a:	f001 fbc9 	bl	80072c0 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8005b2e:	4605      	mov	r5, r0
 8005b30:	b1f0      	cbz	r0, 8005b70 <lwip_netconn_do_listen+0xac>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8005b32:	6820      	ldr	r0, [r4, #0]
 8005b34:	3010      	adds	r0, #16
 8005b36:	f008 f8ca 	bl	800dcce <sys_mbox_valid>
 8005b3a:	b9e8      	cbnz	r0, 8005b78 <lwip_netconn_do_listen+0xb4>
              msg->err = ERR_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	3014      	adds	r0, #20
 8005b44:	f008 f8c3 	bl	800dcce <sys_mbox_valid>
 8005b48:	b1f8      	cbz	r0, 8005b8a <lwip_netconn_do_listen+0xc6>
              if (msg->err == ERR_OK) {
 8005b4a:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8005b4e:	bb1b      	cbnz	r3, 8005b98 <lwip_netconn_do_listen+0xd4>
                msg->conn->state = NETCONN_LISTEN;
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	2202      	movs	r2, #2
 8005b54:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6858      	ldr	r0, [r3, #4]
 8005b60:	f001 fcab 	bl	80074ba <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	4912      	ldr	r1, [pc, #72]	; (8005bb0 <lwip_netconn_do_listen+0xec>)
 8005b68:	6858      	ldr	r0, [r3, #4]
 8005b6a:	f001 fcf5 	bl	8007558 <tcp_accept>
 8005b6e:	e7b3      	b.n	8005ad8 <lwip_netconn_do_listen+0x14>
              msg->err = err;
 8005b70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b74:	7123      	strb	r3, [r4, #4]
 8005b76:	e7af      	b.n	8005ad8 <lwip_netconn_do_listen+0x14>
                sys_mbox_free(&msg->conn->recvmbox);
 8005b78:	6820      	ldr	r0, [r4, #0]
 8005b7a:	3010      	adds	r0, #16
 8005b7c:	f008 f848 	bl	800dc10 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	3010      	adds	r0, #16
 8005b84:	f008 f8a9 	bl	800dcda <sys_mbox_set_invalid>
 8005b88:	e7d8      	b.n	8005b3c <lwip_netconn_do_listen+0x78>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8005b8a:	6820      	ldr	r0, [r4, #0]
 8005b8c:	2106      	movs	r1, #6
 8005b8e:	3014      	adds	r0, #20
 8005b90:	f008 f82c 	bl	800dbec <sys_mbox_new>
 8005b94:	7120      	strb	r0, [r4, #4]
 8005b96:	e7d8      	b.n	8005b4a <lwip_netconn_do_listen+0x86>
                tcp_close(lpcb);
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f002 f825 	bl	8007be8 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	e798      	b.n	8005ad8 <lwip_netconn_do_listen+0x14>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d196      	bne.n	8005ad8 <lwip_netconn_do_listen+0x14>
          msg->err = ERR_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	7123      	strb	r3, [r4, #4]
 8005bae:	e793      	b.n	8005ad8 <lwip_netconn_do_listen+0x14>
 8005bb0:	080057e1 	.word	0x080057e1

08005bb4 <lwip_netconn_do_recv>:
{
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4605      	mov	r5, r0
  msg->err = ERR_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8005bbc:	6803      	ldr	r3, [r0, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	b122      	cbz	r2, 8005bcc <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d00f      	beq.n	8005bec <lwip_netconn_do_recv+0x38>
  TCPIP_APIMSG_ACK(msg);
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b163      	cbz	r3, 8005bea <lwip_netconn_do_recv+0x36>
 8005bd0:	f008 f90c 	bl	800ddec <sys_arch_protect>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005bda:	f112 0f0c 	cmn.w	r2, #12
 8005bde:	db02      	blt.n	8005be6 <lwip_netconn_do_recv+0x32>
 8005be0:	f995 2004 	ldrsb.w	r2, [r5, #4]
 8005be4:	721a      	strb	r2, [r3, #8]
 8005be6:	f008 f90d 	bl	800de04 <sys_arch_unprotect>
}
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
      u32_t remaining = msg->msg.r.len;
 8005bec:	6884      	ldr	r4, [r0, #8]
 8005bee:	e008      	b.n	8005c02 <lwip_netconn_do_recv+0x4e>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8005bf0:	f64f 76ff 	movw	r6, #65535	; 0xffff
        tcp_recved(msg->conn->pcb.tcp, recved);
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	6858      	ldr	r0, [r3, #4]
 8005bfa:	f001 fbf1 	bl	80073e0 <tcp_recved>
      } while (remaining != 0);
 8005bfe:	1ba4      	subs	r4, r4, r6
 8005c00:	d0e4      	beq.n	8005bcc <lwip_netconn_do_recv+0x18>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8005c02:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005c06:	d2f3      	bcs.n	8005bf0 <lwip_netconn_do_recv+0x3c>
 8005c08:	b2a6      	uxth	r6, r4
 8005c0a:	e7f3      	b.n	8005bf4 <lwip_netconn_do_recv+0x40>

08005c0c <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8005c10:	6803      	ldr	r3, [r0, #0]
 8005c12:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005c16:	f112 0f0c 	cmn.w	r2, #12
 8005c1a:	da0f      	bge.n	8005c3c <lwip_netconn_do_write+0x30>
    msg->err = msg->conn->last_err;
 8005c1c:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8005c1e:	b163      	cbz	r3, 8005c3a <lwip_netconn_do_write+0x2e>
 8005c20:	f008 f8e4 	bl	800ddec <sys_arch_protect>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005c2a:	f112 0f0c 	cmn.w	r2, #12
 8005c2e:	db02      	blt.n	8005c36 <lwip_netconn_do_write+0x2a>
 8005c30:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8005c34:	721a      	strb	r2, [r3, #8]
 8005c36:	f008 f8e5 	bl	800de04 <sys_arch_unprotect>
}
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005c3c:	781a      	ldrb	r2, [r3, #0]
 8005c3e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005c42:	2a10      	cmp	r2, #16
 8005c44:	d002      	beq.n	8005c4c <lwip_netconn_do_write+0x40>
      msg->err = ERR_VAL;
 8005c46:	22fa      	movs	r2, #250	; 0xfa
 8005c48:	7102      	strb	r2, [r0, #4]
 8005c4a:	e7e8      	b.n	8005c1e <lwip_netconn_do_write+0x12>
      if (msg->conn->state != NETCONN_NONE) {
 8005c4c:	785a      	ldrb	r2, [r3, #1]
 8005c4e:	b112      	cbz	r2, 8005c56 <lwip_netconn_do_write+0x4a>
        msg->err = ERR_INPROGRESS;
 8005c50:	22fb      	movs	r2, #251	; 0xfb
 8005c52:	7102      	strb	r2, [r0, #4]
 8005c54:	e7e3      	b.n	8005c1e <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	2a00      	cmp	r2, #0
 8005c5a:	d048      	beq.n	8005cee <lwip_netconn_do_write+0xe2>
        msg->conn->state = NETCONN_WRITE;
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005c60:	6803      	ldr	r3, [r0, #0]
 8005c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d02e      	beq.n	8005cc6 <lwip_netconn_do_write+0xba>
 8005c68:	4b22      	ldr	r3, [pc, #136]	; (8005cf4 <lwip_netconn_do_write+0xe8>)
 8005c6a:	f240 6283 	movw	r2, #1667	; 0x683
 8005c6e:	4922      	ldr	r1, [pc, #136]	; (8005cf8 <lwip_netconn_do_write+0xec>)
 8005c70:	4822      	ldr	r0, [pc, #136]	; (8005cfc <lwip_netconn_do_write+0xf0>)
 8005c72:	f009 f905 	bl	800ee80 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8005c76:	68e3      	ldr	r3, [r4, #12]
 8005c78:	b34b      	cbz	r3, 8005cce <lwip_netconn_do_write+0xc2>
        msg->conn->current_msg = msg;
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	625c      	str	r4, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	2100      	movs	r1, #0
 8005c82:	6219      	str	r1, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	f7ff f9a9 	bl	8004fdc <lwip_netconn_do_writemore>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d0d5      	beq.n	8005c3a <lwip_netconn_do_write+0x2e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d123      	bne.n	8005cde <lwip_netconn_do_write+0xd2>
          UNLOCK_TCPIP_CORE();
 8005c96:	4d1a      	ldr	r5, [pc, #104]	; (8005d00 <lwip_netconn_do_write+0xf4>)
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f008 f88f 	bl	800ddbc <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005c9e:	6820      	ldr	r0, [r4, #0]
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	300c      	adds	r0, #12
 8005ca4:	f008 f835 	bl	800dd12 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f008 f880 	bl	800ddae <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d1c1      	bne.n	8005c3a <lwip_netconn_do_write+0x2e>
 8005cb6:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <lwip_netconn_do_write+0xe8>)
 8005cb8:	f240 628d 	movw	r2, #1677	; 0x68d
 8005cbc:	4911      	ldr	r1, [pc, #68]	; (8005d04 <lwip_netconn_do_write+0xf8>)
 8005cbe:	480f      	ldr	r0, [pc, #60]	; (8005cfc <lwip_netconn_do_write+0xf0>)
 8005cc0:	f009 f8de 	bl	800ee80 <iprintf>
 8005cc4:	e7b9      	b.n	8005c3a <lwip_netconn_do_write+0x2e>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0d4      	beq.n	8005c76 <lwip_netconn_do_write+0x6a>
 8005ccc:	e7cc      	b.n	8005c68 <lwip_netconn_do_write+0x5c>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <lwip_netconn_do_write+0xe8>)
 8005cd0:	f240 6284 	movw	r2, #1668	; 0x684
 8005cd4:	490c      	ldr	r1, [pc, #48]	; (8005d08 <lwip_netconn_do_write+0xfc>)
 8005cd6:	4809      	ldr	r0, [pc, #36]	; (8005cfc <lwip_netconn_do_write+0xf0>)
 8005cd8:	f009 f8d2 	bl	800ee80 <iprintf>
 8005cdc:	e7cd      	b.n	8005c7a <lwip_netconn_do_write+0x6e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <lwip_netconn_do_write+0xe8>)
 8005ce0:	f240 6289 	movw	r2, #1673	; 0x689
 8005ce4:	4907      	ldr	r1, [pc, #28]	; (8005d04 <lwip_netconn_do_write+0xf8>)
 8005ce6:	4805      	ldr	r0, [pc, #20]	; (8005cfc <lwip_netconn_do_write+0xf0>)
 8005ce8:	f009 f8ca 	bl	800ee80 <iprintf>
 8005cec:	e7d3      	b.n	8005c96 <lwip_netconn_do_write+0x8a>
        msg->err = ERR_CONN;
 8005cee:	22f5      	movs	r2, #245	; 0xf5
 8005cf0:	7102      	strb	r2, [r0, #4]
 8005cf2:	e794      	b.n	8005c1e <lwip_netconn_do_write+0x12>
 8005cf4:	0801067c 	.word	0x0801067c
 8005cf8:	08010458 	.word	0x08010458
 8005cfc:	080101d8 	.word	0x080101d8
 8005d00:	20004abc 	.word	0x20004abc
 8005d04:	08010474 	.word	0x08010474
 8005d08:	0801047c 	.word	0x0801047c

08005d0c <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8005d10:	6800      	ldr	r0, [r0, #0]
 8005d12:	7842      	ldrb	r2, [r0, #1]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8005d14:	6843      	ldr	r3, [r0, #4]
 8005d16:	b123      	cbz	r3, 8005d22 <lwip_netconn_do_close+0x16>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8005d18:	7803      	ldrb	r3, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 8005d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d010      	beq.n	8005d44 <lwip_netconn_do_close+0x38>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8005d22:	23f5      	movs	r3, #245	; 0xf5
 8005d24:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8005d26:	b160      	cbz	r0, 8005d42 <lwip_netconn_do_close+0x36>
 8005d28:	f008 f860 	bl	800ddec <sys_arch_protect>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005d32:	f112 0f0c 	cmn.w	r2, #12
 8005d36:	db02      	blt.n	8005d3e <lwip_netconn_do_close+0x32>
 8005d38:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8005d3c:	721a      	strb	r2, [r3, #8]
 8005d3e:	f008 f861 	bl	800de04 <sys_arch_unprotect>
}
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8005d44:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d001      	beq.n	8005d4e <lwip_netconn_do_close+0x42>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8005d4a:	2a02      	cmp	r2, #2
 8005d4c:	d0e9      	beq.n	8005d22 <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 8005d4e:	2a03      	cmp	r2, #3
 8005d50:	d036      	beq.n	8005dc0 <lwip_netconn_do_close+0xb4>
    } else if (state == NETCONN_WRITE) {
 8005d52:	2a01      	cmp	r2, #1
 8005d54:	d037      	beq.n	8005dc6 <lwip_netconn_do_close+0xba>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8005d56:	f013 0f01 	tst.w	r3, #1
 8005d5a:	d137      	bne.n	8005dcc <lwip_netconn_do_close+0xc0>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	d036      	beq.n	8005dd2 <lwip_netconn_do_close+0xc6>
 8005d64:	4b21      	ldr	r3, [pc, #132]	; (8005dec <lwip_netconn_do_close+0xe0>)
 8005d66:	f240 721c 	movw	r2, #1820	; 0x71c
 8005d6a:	4921      	ldr	r1, [pc, #132]	; (8005df0 <lwip_netconn_do_close+0xe4>)
 8005d6c:	4821      	ldr	r0, [pc, #132]	; (8005df4 <lwip_netconn_do_close+0xe8>)
 8005d6e:	f009 f887 	bl	800ee80 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	2204      	movs	r2, #4
 8005d76:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	625c      	str	r4, [r3, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	6820      	ldr	r0, [r4, #0]
 8005d80:	f7ff fa42 	bl	8005208 <lwip_netconn_do_close_internal>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d0dc      	beq.n	8005d42 <lwip_netconn_do_close+0x36>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d124      	bne.n	8005dda <lwip_netconn_do_close+0xce>
        UNLOCK_TCPIP_CORE();
 8005d90:	4d19      	ldr	r5, [pc, #100]	; (8005df8 <lwip_netconn_do_close+0xec>)
 8005d92:	4628      	mov	r0, r5
 8005d94:	f008 f812 	bl	800ddbc <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005d98:	6820      	ldr	r0, [r4, #0]
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	300c      	adds	r0, #12
 8005d9e:	f007 ffb8 	bl	800dd12 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8005da2:	4628      	mov	r0, r5
 8005da4:	f008 f803 	bl	800ddae <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0c8      	beq.n	8005d42 <lwip_netconn_do_close+0x36>
 8005db0:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <lwip_netconn_do_close+0xe0>)
 8005db2:	f240 7225 	movw	r2, #1829	; 0x725
 8005db6:	4911      	ldr	r1, [pc, #68]	; (8005dfc <lwip_netconn_do_close+0xf0>)
 8005db8:	480e      	ldr	r0, [pc, #56]	; (8005df4 <lwip_netconn_do_close+0xe8>)
 8005dba:	f009 f861 	bl	800ee80 <iprintf>
 8005dbe:	e7c0      	b.n	8005d42 <lwip_netconn_do_close+0x36>
      msg->err = ERR_CONN;
 8005dc0:	23f5      	movs	r3, #245	; 0xf5
 8005dc2:	7123      	strb	r3, [r4, #4]
 8005dc4:	e7af      	b.n	8005d26 <lwip_netconn_do_close+0x1a>
      msg->err = ERR_INPROGRESS;
 8005dc6:	23fb      	movs	r3, #251	; 0xfb
 8005dc8:	7123      	strb	r3, [r4, #4]
 8005dca:	e7ac      	b.n	8005d26 <lwip_netconn_do_close+0x1a>
        netconn_drain(msg->conn);
 8005dcc:	f7ff fcb4 	bl	8005738 <netconn_drain>
 8005dd0:	e7c4      	b.n	8005d5c <lwip_netconn_do_close+0x50>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0cc      	beq.n	8005d72 <lwip_netconn_do_close+0x66>
 8005dd8:	e7c4      	b.n	8005d64 <lwip_netconn_do_close+0x58>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005dda:	4b04      	ldr	r3, [pc, #16]	; (8005dec <lwip_netconn_do_close+0xe0>)
 8005ddc:	f240 7221 	movw	r2, #1825	; 0x721
 8005de0:	4906      	ldr	r1, [pc, #24]	; (8005dfc <lwip_netconn_do_close+0xf0>)
 8005de2:	4804      	ldr	r0, [pc, #16]	; (8005df4 <lwip_netconn_do_close+0xe8>)
 8005de4:	f009 f84c 	bl	800ee80 <iprintf>
 8005de8:	e7d2      	b.n	8005d90 <lwip_netconn_do_close+0x84>
 8005dea:	bf00      	nop
 8005dec:	0801067c 	.word	0x0801067c
 8005df0:	08010458 	.word	0x08010458
 8005df4:	080101d8 	.word	0x080101d8
 8005df8:	20004abc 	.word	0x20004abc
 8005dfc:	08010474 	.word	0x08010474

08005e00 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8005e00:	b168      	cbz	r0, 8005e1e <netbuf_delete+0x1e>
{
 8005e02:	b510      	push	{r4, lr}
 8005e04:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 8005e06:	6800      	ldr	r0, [r0, #0]
 8005e08:	b120      	cbz	r0, 8005e14 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8005e0a:	f000 fe25 	bl	8006a58 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6063      	str	r3, [r4, #4]
 8005e12:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8005e14:	4621      	mov	r1, r4
 8005e16:	2006      	movs	r0, #6
 8005e18:	f000 fc44 	bl	80066a4 <memp_free>
  }
}
 8005e1c:	bd10      	pop	{r4, pc}
 8005e1e:	4770      	bx	lr

08005e20 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8005e20:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8005e22:	b158      	cbz	r0, 8005e3c <netbuf_data+0x1c>
 8005e24:	4603      	mov	r3, r0
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005e26:	b191      	cbz	r1, 8005e4e <netbuf_data+0x2e>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8005e28:	b1d2      	cbz	r2, 8005e60 <netbuf_data+0x40>

  if (buf->ptr == NULL) {
 8005e2a:	6840      	ldr	r0, [r0, #4]
 8005e2c:	b308      	cbz	r0, 8005e72 <netbuf_data+0x52>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 8005e2e:	6840      	ldr	r0, [r0, #4]
 8005e30:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	895b      	ldrh	r3, [r3, #10]
 8005e36:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8005e38:	2000      	movs	r0, #0
}
 8005e3a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8005e3c:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <netbuf_data+0x58>)
 8005e3e:	22c2      	movs	r2, #194	; 0xc2
 8005e40:	490e      	ldr	r1, [pc, #56]	; (8005e7c <netbuf_data+0x5c>)
 8005e42:	480f      	ldr	r0, [pc, #60]	; (8005e80 <netbuf_data+0x60>)
 8005e44:	f009 f81c 	bl	800ee80 <iprintf>
 8005e48:	f06f 000f 	mvn.w	r0, #15
 8005e4c:	e7f5      	b.n	8005e3a <netbuf_data+0x1a>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <netbuf_data+0x58>)
 8005e50:	22c3      	movs	r2, #195	; 0xc3
 8005e52:	490c      	ldr	r1, [pc, #48]	; (8005e84 <netbuf_data+0x64>)
 8005e54:	480a      	ldr	r0, [pc, #40]	; (8005e80 <netbuf_data+0x60>)
 8005e56:	f009 f813 	bl	800ee80 <iprintf>
 8005e5a:	f06f 000f 	mvn.w	r0, #15
 8005e5e:	e7ec      	b.n	8005e3a <netbuf_data+0x1a>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <netbuf_data+0x58>)
 8005e62:	22c4      	movs	r2, #196	; 0xc4
 8005e64:	4908      	ldr	r1, [pc, #32]	; (8005e88 <netbuf_data+0x68>)
 8005e66:	4806      	ldr	r0, [pc, #24]	; (8005e80 <netbuf_data+0x60>)
 8005e68:	f009 f80a 	bl	800ee80 <iprintf>
 8005e6c:	f06f 000f 	mvn.w	r0, #15
 8005e70:	e7e3      	b.n	8005e3a <netbuf_data+0x1a>
    return ERR_BUF;
 8005e72:	f06f 0001 	mvn.w	r0, #1
 8005e76:	e7e0      	b.n	8005e3a <netbuf_data+0x1a>
 8005e78:	08010714 	.word	0x08010714
 8005e7c:	08010788 	.word	0x08010788
 8005e80:	080101d8 	.word	0x080101d8
 8005e84:	080107a4 	.word	0x080107a4
 8005e88:	080107c4 	.word	0x080107c4

08005e8c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8005e8c:	b500      	push	{lr}
 8005e8e:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8005e90:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <tcpip_thread+0x88>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	b113      	cbz	r3, 8005e9c <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 8005e96:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <tcpip_thread+0x8c>)
 8005e98:	6810      	ldr	r0, [r2, #0]
 8005e9a:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8005e9c:	481f      	ldr	r0, [pc, #124]	; (8005f1c <tcpip_thread+0x90>)
 8005e9e:	f007 ff86 	bl	800ddae <sys_mutex_lock>
 8005ea2:	e00e      	b.n	8005ec2 <tcpip_thread+0x36>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005ea4:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <tcpip_thread+0x94>)
 8005ea6:	2269      	movs	r2, #105	; 0x69
 8005ea8:	491e      	ldr	r1, [pc, #120]	; (8005f24 <tcpip_thread+0x98>)
 8005eaa:	481f      	ldr	r0, [pc, #124]	; (8005f28 <tcpip_thread+0x9c>)
 8005eac:	f008 ffe8 	bl	800ee80 <iprintf>
      continue;
 8005eb0:	e007      	b.n	8005ec2 <tcpip_thread+0x36>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	6899      	ldr	r1, [r3, #8]
 8005eb6:	6858      	ldr	r0, [r3, #4]
 8005eb8:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005eba:	9901      	ldr	r1, [sp, #4]
 8005ebc:	2009      	movs	r0, #9
 8005ebe:	f000 fbf1 	bl	80066a4 <memp_free>
    UNLOCK_TCPIP_CORE();
 8005ec2:	4c16      	ldr	r4, [pc, #88]	; (8005f1c <tcpip_thread+0x90>)
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f007 ff79 	bl	800ddbc <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8005eca:	a901      	add	r1, sp, #4
 8005ecc:	4817      	ldr	r0, [pc, #92]	; (8005f2c <tcpip_thread+0xa0>)
 8005ece:	f004 fdb9 	bl	800aa44 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f007 ff6b 	bl	800ddae <sys_mutex_lock>
    if (msg == NULL) {
 8005ed8:	9b01      	ldr	r3, [sp, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0e2      	beq.n	8005ea4 <tcpip_thread+0x18>
    switch (msg->type) {
 8005ede:	781a      	ldrb	r2, [r3, #0]
 8005ee0:	2a03      	cmp	r2, #3
 8005ee2:	d00a      	beq.n	8005efa <tcpip_thread+0x6e>
 8005ee4:	2a04      	cmp	r2, #4
 8005ee6:	d010      	beq.n	8005f0a <tcpip_thread+0x7e>
 8005ee8:	2a02      	cmp	r2, #2
 8005eea:	d0e2      	beq.n	8005eb2 <tcpip_thread+0x26>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <tcpip_thread+0x94>)
 8005eee:	229b      	movs	r2, #155	; 0x9b
 8005ef0:	490c      	ldr	r1, [pc, #48]	; (8005f24 <tcpip_thread+0x98>)
 8005ef2:	480d      	ldr	r0, [pc, #52]	; (8005f28 <tcpip_thread+0x9c>)
 8005ef4:	f008 ffc4 	bl	800ee80 <iprintf>
      break;
 8005ef8:	e7e3      	b.n	8005ec2 <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	6898      	ldr	r0, [r3, #8]
 8005efe:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005f00:	9901      	ldr	r1, [sp, #4]
 8005f02:	2008      	movs	r0, #8
 8005f04:	f000 fbce 	bl	80066a4 <memp_free>
      break;
 8005f08:	e7db      	b.n	8005ec2 <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	6898      	ldr	r0, [r3, #8]
 8005f0e:	4790      	blx	r2
      break;
 8005f10:	e7d7      	b.n	8005ec2 <tcpip_thread+0x36>
 8005f12:	bf00      	nop
 8005f14:	20004884 	.word	0x20004884
 8005f18:	20004888 	.word	0x20004888
 8005f1c:	20004abc 	.word	0x20004abc
 8005f20:	08010848 	.word	0x08010848
 8005f24:	08010878 	.word	0x08010878
 8005f28:	080101d8 	.word	0x080101d8
 8005f2c:	20004880 	.word	0x20004880

08005f30 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	4607      	mov	r7, r0
 8005f34:	460e      	mov	r6, r1
 8005f36:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005f38:	4813      	ldr	r0, [pc, #76]	; (8005f88 <tcpip_inpkt+0x58>)
 8005f3a:	f007 fec8 	bl	800dcce <sys_mbox_valid>
 8005f3e:	b188      	cbz	r0, 8005f64 <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8005f40:	2009      	movs	r0, #9
 8005f42:	f000 fb95 	bl	8006670 <memp_malloc>
  if (msg == NULL) {
 8005f46:	4604      	mov	r4, r0
 8005f48:	b1d0      	cbz	r0, 8005f80 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8005f4e:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8005f50:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8005f52:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005f54:	4601      	mov	r1, r0
 8005f56:	480c      	ldr	r0, [pc, #48]	; (8005f88 <tcpip_inpkt+0x58>)
 8005f58:	f007 fe6f 	bl	800dc3a <sys_mbox_trypost>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	b940      	cbnz	r0, 8005f72 <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <tcpip_inpkt+0x5c>)
 8005f66:	22b5      	movs	r2, #181	; 0xb5
 8005f68:	4909      	ldr	r1, [pc, #36]	; (8005f90 <tcpip_inpkt+0x60>)
 8005f6a:	480a      	ldr	r0, [pc, #40]	; (8005f94 <tcpip_inpkt+0x64>)
 8005f6c:	f008 ff88 	bl	800ee80 <iprintf>
 8005f70:	e7e6      	b.n	8005f40 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005f72:	4621      	mov	r1, r4
 8005f74:	2009      	movs	r0, #9
 8005f76:	f000 fb95 	bl	80066a4 <memp_free>
    return ERR_MEM;
 8005f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f7e:	e7ef      	b.n	8005f60 <tcpip_inpkt+0x30>
    return ERR_MEM;
 8005f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f84:	e7ec      	b.n	8005f60 <tcpip_inpkt+0x30>
 8005f86:	bf00      	nop
 8005f88:	20004880 	.word	0x20004880
 8005f8c:	08010848 	.word	0x08010848
 8005f90:	08010838 	.word	0x08010838
 8005f94:	080101d8 	.word	0x080101d8

08005f98 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8005f98:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8005f9a:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8005f9e:	f013 0f18 	tst.w	r3, #24
 8005fa2:	d103      	bne.n	8005fac <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8005fa4:	4a03      	ldr	r2, [pc, #12]	; (8005fb4 <tcpip_input+0x1c>)
 8005fa6:	f7ff ffc3 	bl	8005f30 <tcpip_inpkt>
}
 8005faa:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 8005fac:	4a02      	ldr	r2, [pc, #8]	; (8005fb8 <tcpip_input+0x20>)
 8005fae:	f7ff ffbf 	bl	8005f30 <tcpip_inpkt>
 8005fb2:	e7fa      	b.n	8005faa <tcpip_input+0x12>
 8005fb4:	0800cfcd 	.word	0x0800cfcd
 8005fb8:	0800dad5 	.word	0x0800dad5

08005fbc <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	460e      	mov	r6, r1
 8005fc2:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005fc4:	4816      	ldr	r0, [pc, #88]	; (8006020 <tcpip_callback_with_block+0x64>)
 8005fc6:	f007 fe82 	bl	800dcce <sys_mbox_valid>
 8005fca:	b188      	cbz	r0, 8005ff0 <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8005fcc:	2008      	movs	r0, #8
 8005fce:	f000 fb4f 	bl	8006670 <memp_malloc>
  if (msg == NULL) {
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	b300      	cbz	r0, 8006018 <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8005fda:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8005fdc:	6086      	str	r6, [r0, #8]
  if (block) {
 8005fde:	b975      	cbnz	r5, 8005ffe <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005fe0:	4601      	mov	r1, r0
 8005fe2:	480f      	ldr	r0, [pc, #60]	; (8006020 <tcpip_callback_with_block+0x64>)
 8005fe4:	f007 fe29 	bl	800dc3a <sys_mbox_trypost>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	b970      	cbnz	r0, 800600a <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <tcpip_callback_with_block+0x68>)
 8005ff2:	22ee      	movs	r2, #238	; 0xee
 8005ff4:	490c      	ldr	r1, [pc, #48]	; (8006028 <tcpip_callback_with_block+0x6c>)
 8005ff6:	480d      	ldr	r0, [pc, #52]	; (800602c <tcpip_callback_with_block+0x70>)
 8005ff8:	f008 ff42 	bl	800ee80 <iprintf>
 8005ffc:	e7e6      	b.n	8005fcc <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 8005ffe:	4601      	mov	r1, r0
 8006000:	4807      	ldr	r0, [pc, #28]	; (8006020 <tcpip_callback_with_block+0x64>)
 8006002:	f007 fe0e 	bl	800dc22 <sys_mbox_post>
  return ERR_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e7f0      	b.n	8005fec <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800600a:	4621      	mov	r1, r4
 800600c:	2008      	movs	r0, #8
 800600e:	f000 fb49 	bl	80066a4 <memp_free>
      return ERR_MEM;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006016:	e7e9      	b.n	8005fec <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 8006018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800601c:	e7e6      	b.n	8005fec <tcpip_callback_with_block+0x30>
 800601e:	bf00      	nop
 8006020:	20004880 	.word	0x20004880
 8006024:	08010848 	.word	0x08010848
 8006028:	08010838 	.word	0x08010838
 800602c:	080101d8 	.word	0x080101d8

08006030 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4605      	mov	r5, r0
 8006034:	460e      	mov	r6, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8006036:	4c05      	ldr	r4, [pc, #20]	; (800604c <tcpip_send_msg_wait_sem+0x1c>)
 8006038:	4620      	mov	r0, r4
 800603a:	f007 feb8 	bl	800ddae <sys_mutex_lock>
  fn(apimsg);
 800603e:	4630      	mov	r0, r6
 8006040:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 8006042:	4620      	mov	r0, r4
 8006044:	f007 feba 	bl	800ddbc <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8006048:	2000      	movs	r0, #0
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	20004abc 	.word	0x20004abc

08006050 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006050:	b530      	push	{r4, r5, lr}
 8006052:	b083      	sub	sp, #12
 8006054:	4605      	mov	r5, r0
 8006056:	460c      	mov	r4, r1
  lwip_init();
 8006058:	f000 f84b 	bl	80060f2 <lwip_init>

  tcpip_init_done = initfunc;
 800605c:	4b13      	ldr	r3, [pc, #76]	; (80060ac <tcpip_init+0x5c>)
 800605e:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8006060:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <tcpip_init+0x60>)
 8006062:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006064:	2106      	movs	r1, #6
 8006066:	4813      	ldr	r0, [pc, #76]	; (80060b4 <tcpip_init+0x64>)
 8006068:	f007 fdc0 	bl	800dbec <sys_mbox_new>
 800606c:	b970      	cbnz	r0, 800608c <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800606e:	4812      	ldr	r0, [pc, #72]	; (80060b8 <tcpip_init+0x68>)
 8006070:	f007 fe8c 	bl	800dd8c <sys_mutex_new>
 8006074:	b990      	cbnz	r0, 800609c <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006076:	2303      	movs	r3, #3
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800607e:	2200      	movs	r2, #0
 8006080:	490e      	ldr	r1, [pc, #56]	; (80060bc <tcpip_init+0x6c>)
 8006082:	480f      	ldr	r0, [pc, #60]	; (80060c0 <tcpip_init+0x70>)
 8006084:	f007 fe9f 	bl	800ddc6 <sys_thread_new>
}
 8006088:	b003      	add	sp, #12
 800608a:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800608c:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <tcpip_init+0x74>)
 800608e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8006092:	490d      	ldr	r1, [pc, #52]	; (80060c8 <tcpip_init+0x78>)
 8006094:	480d      	ldr	r0, [pc, #52]	; (80060cc <tcpip_init+0x7c>)
 8006096:	f008 fef3 	bl	800ee80 <iprintf>
 800609a:	e7e8      	b.n	800606e <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <tcpip_init+0x74>)
 800609e:	f240 12d9 	movw	r2, #473	; 0x1d9
 80060a2:	490b      	ldr	r1, [pc, #44]	; (80060d0 <tcpip_init+0x80>)
 80060a4:	4809      	ldr	r0, [pc, #36]	; (80060cc <tcpip_init+0x7c>)
 80060a6:	f008 feeb 	bl	800ee80 <iprintf>
 80060aa:	e7e4      	b.n	8006076 <tcpip_init+0x26>
 80060ac:	20004884 	.word	0x20004884
 80060b0:	20004888 	.word	0x20004888
 80060b4:	20004880 	.word	0x20004880
 80060b8:	20004abc 	.word	0x20004abc
 80060bc:	08005e8d 	.word	0x08005e8d
 80060c0:	08010828 	.word	0x08010828
 80060c4:	08010848 	.word	0x08010848
 80060c8:	080107e0 	.word	0x080107e0
 80060cc:	080101d8 	.word	0x080101d8
 80060d0:	08010804 	.word	0x08010804

080060d4 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 80060d4:	ba40      	rev16	r0, r0
}
 80060d6:	b280      	uxth	r0, r0
 80060d8:	4770      	bx	lr

080060da <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 80060da:	0203      	lsls	r3, r0, #8
 80060dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060e0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80060e4:	0a02      	lsrs	r2, r0, #8
 80060e6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80060ea:	4313      	orrs	r3, r2
}
 80060ec:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 80060f0:	4770      	bx	lr

080060f2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80060f2:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80060f4:	f007 fe3e 	bl	800dd74 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80060f8:	f000 f87c 	bl	80061f4 <mem_init>
  memp_init();
 80060fc:	f000 faa8 	bl	8006650 <memp_init>
  pbuf_init();
  netif_init();
 8006100:	f000 fafb 	bl	80066fa <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006104:	f004 fd0c 	bl	800ab20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006108:	f001 f874 	bl	80071f4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800610c:	f004 fc74 	bl	800a9f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006110:	bd08      	pop	{r3, pc}
	...

08006114 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006114:	b510      	push	{r4, lr}
 8006116:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006118:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <plug_holes+0xbc>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4283      	cmp	r3, r0
 800611e:	d831      	bhi.n	8006184 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006120:	4b2c      	ldr	r3, [pc, #176]	; (80061d4 <plug_holes+0xc0>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	42a3      	cmp	r3, r4
 8006126:	d935      	bls.n	8006194 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006128:	7923      	ldrb	r3, [r4, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d13a      	bne.n	80061a4 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800612e:	8823      	ldrh	r3, [r4, #0]
 8006130:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006134:	d83e      	bhi.n	80061b4 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8006136:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <plug_holes+0xbc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	8821      	ldrh	r1, [r4, #0]
 800613c:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800613e:	4294      	cmp	r4, r2
 8006140:	d00f      	beq.n	8006162 <plug_holes+0x4e>
 8006142:	7910      	ldrb	r0, [r2, #4]
 8006144:	b968      	cbnz	r0, 8006162 <plug_holes+0x4e>
 8006146:	4823      	ldr	r0, [pc, #140]	; (80061d4 <plug_holes+0xc0>)
 8006148:	6800      	ldr	r0, [r0, #0]
 800614a:	4290      	cmp	r0, r2
 800614c:	d009      	beq.n	8006162 <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800614e:	4822      	ldr	r0, [pc, #136]	; (80061d8 <plug_holes+0xc4>)
 8006150:	6800      	ldr	r0, [r0, #0]
 8006152:	4290      	cmp	r0, r2
 8006154:	d036      	beq.n	80061c4 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 8006156:	5a5a      	ldrh	r2, [r3, r1]
 8006158:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800615a:	1ae0      	subs	r0, r4, r3
 800615c:	5a5a      	ldrh	r2, [r3, r1]
 800615e:	441a      	add	r2, r3
 8006160:	8050      	strh	r0, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006162:	8861      	ldrh	r1, [r4, #2]
 8006164:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8006166:	4294      	cmp	r4, r2
 8006168:	d00b      	beq.n	8006182 <plug_holes+0x6e>
 800616a:	7910      	ldrb	r0, [r2, #4]
 800616c:	b948      	cbnz	r0, 8006182 <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800616e:	481a      	ldr	r0, [pc, #104]	; (80061d8 <plug_holes+0xc4>)
 8006170:	6800      	ldr	r0, [r0, #0]
 8006172:	42a0      	cmp	r0, r4
 8006174:	d029      	beq.n	80061ca <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 8006176:	8820      	ldrh	r0, [r4, #0]
 8006178:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800617a:	1ad2      	subs	r2, r2, r3
 800617c:	8821      	ldrh	r1, [r4, #0]
 800617e:	440b      	add	r3, r1
 8006180:	805a      	strh	r2, [r3, #2]
  }
}
 8006182:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006184:	4b15      	ldr	r3, [pc, #84]	; (80061dc <plug_holes+0xc8>)
 8006186:	f240 125d 	movw	r2, #349	; 0x15d
 800618a:	4915      	ldr	r1, [pc, #84]	; (80061e0 <plug_holes+0xcc>)
 800618c:	4815      	ldr	r0, [pc, #84]	; (80061e4 <plug_holes+0xd0>)
 800618e:	f008 fe77 	bl	800ee80 <iprintf>
 8006192:	e7c5      	b.n	8006120 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006194:	4b11      	ldr	r3, [pc, #68]	; (80061dc <plug_holes+0xc8>)
 8006196:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800619a:	4913      	ldr	r1, [pc, #76]	; (80061e8 <plug_holes+0xd4>)
 800619c:	4811      	ldr	r0, [pc, #68]	; (80061e4 <plug_holes+0xd0>)
 800619e:	f008 fe6f 	bl	800ee80 <iprintf>
 80061a2:	e7c1      	b.n	8006128 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80061a4:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <plug_holes+0xc8>)
 80061a6:	f240 125f 	movw	r2, #351	; 0x15f
 80061aa:	4910      	ldr	r1, [pc, #64]	; (80061ec <plug_holes+0xd8>)
 80061ac:	480d      	ldr	r0, [pc, #52]	; (80061e4 <plug_holes+0xd0>)
 80061ae:	f008 fe67 	bl	800ee80 <iprintf>
 80061b2:	e7bc      	b.n	800612e <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80061b4:	4b09      	ldr	r3, [pc, #36]	; (80061dc <plug_holes+0xc8>)
 80061b6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80061ba:	490d      	ldr	r1, [pc, #52]	; (80061f0 <plug_holes+0xdc>)
 80061bc:	4809      	ldr	r0, [pc, #36]	; (80061e4 <plug_holes+0xd0>)
 80061be:	f008 fe5f 	bl	800ee80 <iprintf>
 80061c2:	e7b8      	b.n	8006136 <plug_holes+0x22>
      lfree = mem;
 80061c4:	4a04      	ldr	r2, [pc, #16]	; (80061d8 <plug_holes+0xc4>)
 80061c6:	6014      	str	r4, [r2, #0]
 80061c8:	e7c5      	b.n	8006156 <plug_holes+0x42>
      lfree = pmem;
 80061ca:	4803      	ldr	r0, [pc, #12]	; (80061d8 <plug_holes+0xc4>)
 80061cc:	6002      	str	r2, [r0, #0]
 80061ce:	e7d2      	b.n	8006176 <plug_holes+0x62>
 80061d0:	20004894 	.word	0x20004894
 80061d4:	20004898 	.word	0x20004898
 80061d8:	2000488c 	.word	0x2000488c
 80061dc:	080109dc 	.word	0x080109dc
 80061e0:	08010a0c 	.word	0x08010a0c
 80061e4:	080101d8 	.word	0x080101d8
 80061e8:	08010a24 	.word	0x08010a24
 80061ec:	08010a40 	.word	0x08010a40
 80061f0:	08010a5c 	.word	0x08010a5c

080061f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80061f4:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80061f6:	4b11      	ldr	r3, [pc, #68]	; (800623c <mem_init+0x48>)
 80061f8:	f023 0303 	bic.w	r3, r3, #3
 80061fc:	4a10      	ldr	r2, [pc, #64]	; (8006240 <mem_init+0x4c>)
 80061fe:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8006200:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8006204:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8006206:	2200      	movs	r2, #0
 8006208:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800620a:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800620c:	185a      	adds	r2, r3, r1
 800620e:	480d      	ldr	r0, [pc, #52]	; (8006244 <mem_init+0x50>)
 8006210:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8006212:	2001      	movs	r0, #1
 8006214:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006216:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 800621a:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800621c:	4a0a      	ldr	r2, [pc, #40]	; (8006248 <mem_init+0x54>)
 800621e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006220:	480a      	ldr	r0, [pc, #40]	; (800624c <mem_init+0x58>)
 8006222:	f007 fdb3 	bl	800dd8c <sys_mutex_new>
 8006226:	b900      	cbnz	r0, 800622a <mem_init+0x36>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006228:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <mem_init+0x5c>)
 800622c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006230:	4908      	ldr	r1, [pc, #32]	; (8006254 <mem_init+0x60>)
 8006232:	4809      	ldr	r0, [pc, #36]	; (8006258 <mem_init+0x64>)
 8006234:	f008 fe24 	bl	800ee80 <iprintf>
}
 8006238:	e7f6      	b.n	8006228 <mem_init+0x34>
 800623a:	bf00      	nop
 800623c:	20004adb 	.word	0x20004adb
 8006240:	20004894 	.word	0x20004894
 8006244:	20004898 	.word	0x20004898
 8006248:	2000488c 	.word	0x2000488c
 800624c:	20004890 	.word	0x20004890
 8006250:	080109dc 	.word	0x080109dc
 8006254:	080108e8 	.word	0x080108e8
 8006258:	080101d8 	.word	0x080101d8

0800625c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800625c:	2800      	cmp	r0, #0
 800625e:	d048      	beq.n	80062f2 <mem_free+0x96>
{
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006264:	f010 0f03 	tst.w	r0, #3
 8006268:	d11b      	bne.n	80062a2 <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800626a:	4b22      	ldr	r3, [pc, #136]	; (80062f4 <mem_free+0x98>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	42a3      	cmp	r3, r4
 8006270:	d803      	bhi.n	800627a <mem_free+0x1e>
 8006272:	4b21      	ldr	r3, [pc, #132]	; (80062f8 <mem_free+0x9c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	42a3      	cmp	r3, r4
 8006278:	d806      	bhi.n	8006288 <mem_free+0x2c>
 800627a:	4b20      	ldr	r3, [pc, #128]	; (80062fc <mem_free+0xa0>)
 800627c:	f240 12af 	movw	r2, #431	; 0x1af
 8006280:	491f      	ldr	r1, [pc, #124]	; (8006300 <mem_free+0xa4>)
 8006282:	4820      	ldr	r0, [pc, #128]	; (8006304 <mem_free+0xa8>)
 8006284:	f008 fdfc 	bl	800ee80 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <mem_free+0x98>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	42a3      	cmp	r3, r4
 800628e:	d803      	bhi.n	8006298 <mem_free+0x3c>
 8006290:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <mem_free+0x9c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	42a3      	cmp	r3, r4
 8006296:	d80c      	bhi.n	80062b2 <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8006298:	f007 fda8 	bl	800ddec <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800629c:	f007 fdb2 	bl	800de04 <sys_arch_unprotect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80062a0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80062a2:	4b16      	ldr	r3, [pc, #88]	; (80062fc <mem_free+0xa0>)
 80062a4:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80062a8:	4917      	ldr	r1, [pc, #92]	; (8006308 <mem_free+0xac>)
 80062aa:	4816      	ldr	r0, [pc, #88]	; (8006304 <mem_free+0xa8>)
 80062ac:	f008 fde8 	bl	800ee80 <iprintf>
 80062b0:	e7db      	b.n	800626a <mem_free+0xe>
  LWIP_MEM_FREE_PROTECT();
 80062b2:	4816      	ldr	r0, [pc, #88]	; (800630c <mem_free+0xb0>)
 80062b4:	f007 fd7b 	bl	800ddae <sys_mutex_lock>
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80062b8:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80062bc:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80062c0:	b17b      	cbz	r3, 80062e2 <mem_free+0x86>
  mem->used = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 80062c8:	4b11      	ldr	r3, [pc, #68]	; (8006310 <mem_free+0xb4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	42ab      	cmp	r3, r5
 80062ce:	d901      	bls.n	80062d4 <mem_free+0x78>
    lfree = mem;
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <mem_free+0xb4>)
 80062d2:	601d      	str	r5, [r3, #0]
  plug_holes(mem);
 80062d4:	4628      	mov	r0, r5
 80062d6:	f7ff ff1d 	bl	8006114 <plug_holes>
  LWIP_MEM_FREE_UNPROTECT();
 80062da:	480c      	ldr	r0, [pc, #48]	; (800630c <mem_free+0xb0>)
 80062dc:	f007 fd6e 	bl	800ddbc <sys_mutex_unlock>
 80062e0:	e7de      	b.n	80062a0 <mem_free+0x44>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80062e2:	4b06      	ldr	r3, [pc, #24]	; (80062fc <mem_free+0xa0>)
 80062e4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80062e8:	490a      	ldr	r1, [pc, #40]	; (8006314 <mem_free+0xb8>)
 80062ea:	4806      	ldr	r0, [pc, #24]	; (8006304 <mem_free+0xa8>)
 80062ec:	f008 fdc8 	bl	800ee80 <iprintf>
 80062f0:	e7e7      	b.n	80062c2 <mem_free+0x66>
 80062f2:	4770      	bx	lr
 80062f4:	20004894 	.word	0x20004894
 80062f8:	20004898 	.word	0x20004898
 80062fc:	080109dc 	.word	0x080109dc
 8006300:	080108bc 	.word	0x080108bc
 8006304:	080101d8 	.word	0x080101d8
 8006308:	08010898 	.word	0x08010898
 800630c:	20004890 	.word	0x20004890
 8006310:	2000488c 	.word	0x2000488c
 8006314:	080108d4 	.word	0x080108d4

08006318 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800631c:	1ccc      	adds	r4, r1, #3
 800631e:	b2a4      	uxth	r4, r4
 8006320:	f024 0403 	bic.w	r4, r4, #3
 8006324:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8006326:	2c0b      	cmp	r4, #11
 8006328:	d904      	bls.n	8006334 <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800632a:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 800632e:	d902      	bls.n	8006336 <mem_trim+0x1e>
    return NULL;
 8006330:	2500      	movs	r5, #0
 8006332:	e04e      	b.n	80063d2 <mem_trim+0xba>
    newsize = MIN_SIZE_ALIGNED;
 8006334:	240c      	movs	r4, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006336:	4b3e      	ldr	r3, [pc, #248]	; (8006430 <mem_trim+0x118>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	42ab      	cmp	r3, r5
 800633c:	d803      	bhi.n	8006346 <mem_trim+0x2e>
 800633e:	4b3d      	ldr	r3, [pc, #244]	; (8006434 <mem_trim+0x11c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	42ab      	cmp	r3, r5
 8006344:	d806      	bhi.n	8006354 <mem_trim+0x3c>
 8006346:	4b3c      	ldr	r3, [pc, #240]	; (8006438 <mem_trim+0x120>)
 8006348:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800634c:	493b      	ldr	r1, [pc, #236]	; (800643c <mem_trim+0x124>)
 800634e:	483c      	ldr	r0, [pc, #240]	; (8006440 <mem_trim+0x128>)
 8006350:	f008 fd96 	bl	800ee80 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006354:	4b36      	ldr	r3, [pc, #216]	; (8006430 <mem_trim+0x118>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	42ab      	cmp	r3, r5
 800635a:	d836      	bhi.n	80063ca <mem_trim+0xb2>
 800635c:	4a35      	ldr	r2, [pc, #212]	; (8006434 <mem_trim+0x11c>)
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	42aa      	cmp	r2, r5
 8006362:	d932      	bls.n	80063ca <mem_trim+0xb2>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006364:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006368:	1aff      	subs	r7, r7, r3
 800636a:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800636c:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8006370:	1bf6      	subs	r6, r6, r7
 8006372:	b2b6      	uxth	r6, r6
 8006374:	3e08      	subs	r6, #8
 8006376:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006378:	42b4      	cmp	r4, r6
 800637a:	d82c      	bhi.n	80063d6 <mem_trim+0xbe>
  if (newsize > size) {
 800637c:	42b4      	cmp	r4, r6
 800637e:	d854      	bhi.n	800642a <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8006380:	d027      	beq.n	80063d2 <mem_trim+0xba>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006382:	4830      	ldr	r0, [pc, #192]	; (8006444 <mem_trim+0x12c>)
 8006384:	f007 fd13 	bl	800ddae <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006388:	4b29      	ldr	r3, [pc, #164]	; (8006430 <mem_trim+0x118>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8006390:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8006392:	7908      	ldrb	r0, [r1, #4]
 8006394:	bb58      	cbnz	r0, 80063ee <mem_trim+0xd6>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8006396:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006398:	19e3      	adds	r3, r4, r7
 800639a:	b29b      	uxth	r3, r3
 800639c:	3308      	adds	r3, #8
 800639e:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 80063a0:	4c29      	ldr	r4, [pc, #164]	; (8006448 <mem_trim+0x130>)
 80063a2:	6824      	ldr	r4, [r4, #0]
 80063a4:	428c      	cmp	r4, r1
 80063a6:	d01e      	beq.n	80063e6 <mem_trim+0xce>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80063a8:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 80063aa:	2400      	movs	r4, #0
 80063ac:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 80063ae:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 80063b0:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 80063b2:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80063b6:	5ad1      	ldrh	r1, [r2, r3]
 80063b8:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 80063bc:	d001      	beq.n	80063c2 <mem_trim+0xaa>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80063be:	440a      	add	r2, r1
 80063c0:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80063c2:	4820      	ldr	r0, [pc, #128]	; (8006444 <mem_trim+0x12c>)
 80063c4:	f007 fcfa 	bl	800ddbc <sys_mutex_unlock>
  return rmem;
 80063c8:	e003      	b.n	80063d2 <mem_trim+0xba>
    SYS_ARCH_PROTECT(lev);
 80063ca:	f007 fd0f 	bl	800ddec <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 80063ce:	f007 fd19 	bl	800de04 <sys_arch_unprotect>
}
 80063d2:	4628      	mov	r0, r5
 80063d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80063d6:	4b18      	ldr	r3, [pc, #96]	; (8006438 <mem_trim+0x120>)
 80063d8:	f240 2206 	movw	r2, #518	; 0x206
 80063dc:	491b      	ldr	r1, [pc, #108]	; (800644c <mem_trim+0x134>)
 80063de:	4818      	ldr	r0, [pc, #96]	; (8006440 <mem_trim+0x128>)
 80063e0:	f008 fd4e 	bl	800ee80 <iprintf>
 80063e4:	e7ca      	b.n	800637c <mem_trim+0x64>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80063e6:	18d1      	adds	r1, r2, r3
 80063e8:	4c17      	ldr	r4, [pc, #92]	; (8006448 <mem_trim+0x130>)
 80063ea:	6021      	str	r1, [r4, #0]
 80063ec:	e7dc      	b.n	80063a8 <mem_trim+0x90>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80063ee:	f104 0314 	add.w	r3, r4, #20
 80063f2:	42b3      	cmp	r3, r6
 80063f4:	d8e5      	bhi.n	80063c2 <mem_trim+0xaa>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80063f6:	19e3      	adds	r3, r4, r7
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3308      	adds	r3, #8
 80063fc:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80063fe:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8006400:	4811      	ldr	r0, [pc, #68]	; (8006448 <mem_trim+0x130>)
 8006402:	6800      	ldr	r0, [r0, #0]
 8006404:	4288      	cmp	r0, r1
 8006406:	d901      	bls.n	800640c <mem_trim+0xf4>
      lfree = mem2;
 8006408:	480f      	ldr	r0, [pc, #60]	; (8006448 <mem_trim+0x130>)
 800640a:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 800640c:	2000      	movs	r0, #0
 800640e:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8006410:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8006414:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8006416:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8006418:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800641c:	5ad1      	ldrh	r1, [r2, r3]
 800641e:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8006422:	d0ce      	beq.n	80063c2 <mem_trim+0xaa>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006424:	440a      	add	r2, r1
 8006426:	8053      	strh	r3, [r2, #2]
 8006428:	e7cb      	b.n	80063c2 <mem_trim+0xaa>
    return NULL;
 800642a:	2500      	movs	r5, #0
 800642c:	e7d1      	b.n	80063d2 <mem_trim+0xba>
 800642e:	bf00      	nop
 8006430:	20004894 	.word	0x20004894
 8006434:	20004898 	.word	0x20004898
 8006438:	080109dc 	.word	0x080109dc
 800643c:	080109a4 	.word	0x080109a4
 8006440:	080101d8 	.word	0x080101d8
 8006444:	20004890 	.word	0x20004890
 8006448:	2000488c 	.word	0x2000488c
 800644c:	080109bc 	.word	0x080109bc

08006450 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8006450:	2800      	cmp	r0, #0
 8006452:	f000 808f 	beq.w	8006574 <mem_malloc+0x124>
{
 8006456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006458:	4604      	mov	r4, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800645a:	3403      	adds	r4, #3
 800645c:	b2a4      	uxth	r4, r4
 800645e:	f024 0403 	bic.w	r4, r4, #3
 8006462:	b2a4      	uxth	r4, r4

  if (size < MIN_SIZE_ALIGNED) {
 8006464:	2c0b      	cmp	r4, #11
 8006466:	d90d      	bls.n	8006484 <mem_malloc+0x34>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8006468:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 800646c:	f200 8084 	bhi.w	8006578 <mem_malloc+0x128>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8006470:	4842      	ldr	r0, [pc, #264]	; (800657c <mem_malloc+0x12c>)
 8006472:	f007 fc9c 	bl	800ddae <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006476:	4b42      	ldr	r3, [pc, #264]	; (8006580 <mem_malloc+0x130>)
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	4b42      	ldr	r3, [pc, #264]	; (8006584 <mem_malloc+0x134>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	1a1b      	subs	r3, r3, r0
 8006480:	b29b      	uxth	r3, r3
 8006482:	e04b      	b.n	800651c <mem_malloc+0xcc>
    size = MIN_SIZE_ALIGNED;
 8006484:	240c      	movs	r4, #12
 8006486:	e7f3      	b.n	8006470 <mem_malloc+0x20>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006488:	2301      	movs	r3, #1
 800648a:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800648c:	4b3d      	ldr	r3, [pc, #244]	; (8006584 <mem_malloc+0x134>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	42ab      	cmp	r3, r5
 8006492:	d014      	beq.n	80064be <mem_malloc+0x6e>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8006494:	4839      	ldr	r0, [pc, #228]	; (800657c <mem_malloc+0x12c>)
 8006496:	f007 fc91 	bl	800ddbc <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800649a:	442e      	add	r6, r5
 800649c:	3608      	adds	r6, #8
 800649e:	4b3a      	ldr	r3, [pc, #232]	; (8006588 <mem_malloc+0x138>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	429e      	cmp	r6, r3
 80064a4:	d821      	bhi.n	80064ea <mem_malloc+0x9a>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80064a6:	f015 0403 	ands.w	r4, r5, #3
 80064aa:	d126      	bne.n	80064fa <mem_malloc+0xaa>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80064ac:	2c00      	cmp	r4, #0
 80064ae:	d12c      	bne.n	800650a <mem_malloc+0xba>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80064b0:	f105 0008 	add.w	r0, r5, #8
 80064b4:	e05d      	b.n	8006572 <mem_malloc+0x122>
            cur = (struct mem *)(void *)&ram[cur->next];
 80064b6:	4a32      	ldr	r2, [pc, #200]	; (8006580 <mem_malloc+0x130>)
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 80064be:	791a      	ldrb	r2, [r3, #4]
 80064c0:	b11a      	cbz	r2, 80064ca <mem_malloc+0x7a>
 80064c2:	4931      	ldr	r1, [pc, #196]	; (8006588 <mem_malloc+0x138>)
 80064c4:	6809      	ldr	r1, [r1, #0]
 80064c6:	4299      	cmp	r1, r3
 80064c8:	d1f5      	bne.n	80064b6 <mem_malloc+0x66>
          lfree = cur;
 80064ca:	492e      	ldr	r1, [pc, #184]	; (8006584 <mem_malloc+0x134>)
 80064cc:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80064ce:	492e      	ldr	r1, [pc, #184]	; (8006588 <mem_malloc+0x138>)
 80064d0:	6809      	ldr	r1, [r1, #0]
 80064d2:	4299      	cmp	r1, r3
 80064d4:	d0de      	beq.n	8006494 <mem_malloc+0x44>
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	d0dc      	beq.n	8006494 <mem_malloc+0x44>
 80064da:	4b2c      	ldr	r3, [pc, #176]	; (800658c <mem_malloc+0x13c>)
 80064dc:	f240 22cf 	movw	r2, #719	; 0x2cf
 80064e0:	492b      	ldr	r1, [pc, #172]	; (8006590 <mem_malloc+0x140>)
 80064e2:	482c      	ldr	r0, [pc, #176]	; (8006594 <mem_malloc+0x144>)
 80064e4:	f008 fccc 	bl	800ee80 <iprintf>
 80064e8:	e7d4      	b.n	8006494 <mem_malloc+0x44>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80064ea:	4b28      	ldr	r3, [pc, #160]	; (800658c <mem_malloc+0x13c>)
 80064ec:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80064f0:	4929      	ldr	r1, [pc, #164]	; (8006598 <mem_malloc+0x148>)
 80064f2:	4828      	ldr	r0, [pc, #160]	; (8006594 <mem_malloc+0x144>)
 80064f4:	f008 fcc4 	bl	800ee80 <iprintf>
 80064f8:	e7d5      	b.n	80064a6 <mem_malloc+0x56>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80064fa:	4b24      	ldr	r3, [pc, #144]	; (800658c <mem_malloc+0x13c>)
 80064fc:	f240 22d6 	movw	r2, #726	; 0x2d6
 8006500:	4926      	ldr	r1, [pc, #152]	; (800659c <mem_malloc+0x14c>)
 8006502:	4824      	ldr	r0, [pc, #144]	; (8006594 <mem_malloc+0x144>)
 8006504:	f008 fcbc 	bl	800ee80 <iprintf>
 8006508:	e7d0      	b.n	80064ac <mem_malloc+0x5c>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800650a:	4b20      	ldr	r3, [pc, #128]	; (800658c <mem_malloc+0x13c>)
 800650c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8006510:	4923      	ldr	r1, [pc, #140]	; (80065a0 <mem_malloc+0x150>)
 8006512:	4820      	ldr	r0, [pc, #128]	; (8006594 <mem_malloc+0x144>)
 8006514:	f008 fcb4 	bl	800ee80 <iprintf>
 8006518:	e7ca      	b.n	80064b0 <mem_malloc+0x60>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800651a:	882b      	ldrh	r3, [r5, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800651c:	461f      	mov	r7, r3
 800651e:	4626      	mov	r6, r4
 8006520:	f5c4 61c8 	rsb	r1, r4, #1600	; 0x640
 8006524:	428b      	cmp	r3, r1
 8006526:	d220      	bcs.n	800656a <mem_malloc+0x11a>
      mem = (struct mem *)(void *)&ram[ptr];
 8006528:	18c5      	adds	r5, r0, r3
      if ((!mem->used) &&
 800652a:	7929      	ldrb	r1, [r5, #4]
 800652c:	2900      	cmp	r1, #0
 800652e:	d1f4      	bne.n	800651a <mem_malloc+0xca>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006530:	5ac2      	ldrh	r2, [r0, r3]
 8006532:	1bd2      	subs	r2, r2, r7
 8006534:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 8006536:	42b2      	cmp	r2, r6
 8006538:	d3ef      	bcc.n	800651a <mem_malloc+0xca>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800653a:	f106 0114 	add.w	r1, r6, #20
 800653e:	428a      	cmp	r2, r1
 8006540:	d3a2      	bcc.n	8006488 <mem_malloc+0x38>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8006542:	18e2      	adds	r2, r4, r3
 8006544:	b292      	uxth	r2, r2
 8006546:	3208      	adds	r2, #8
 8006548:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800654a:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 800654c:	2400      	movs	r4, #0
 800654e:	710c      	strb	r4, [r1, #4]
          mem2->next = mem->next;
 8006550:	882c      	ldrh	r4, [r5, #0]
 8006552:	5284      	strh	r4, [r0, r2]
          mem2->prev = ptr;
 8006554:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8006556:	802a      	strh	r2, [r5, #0]
          mem->used = 1;
 8006558:	2301      	movs	r3, #1
 800655a:	712b      	strb	r3, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800655c:	5a83      	ldrh	r3, [r0, r2]
 800655e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006562:	d093      	beq.n	800648c <mem_malloc+0x3c>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006564:	4418      	add	r0, r3
 8006566:	8042      	strh	r2, [r0, #2]
 8006568:	e790      	b.n	800648c <mem_malloc+0x3c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800656a:	4804      	ldr	r0, [pc, #16]	; (800657c <mem_malloc+0x12c>)
 800656c:	f007 fc26 	bl	800ddbc <sys_mutex_unlock>
  return NULL;
 8006570:	2000      	movs	r0, #0
}
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8006574:	2000      	movs	r0, #0
}
 8006576:	4770      	bx	lr
    return NULL;
 8006578:	2000      	movs	r0, #0
 800657a:	e7fa      	b.n	8006572 <mem_malloc+0x122>
 800657c:	20004890 	.word	0x20004890
 8006580:	20004894 	.word	0x20004894
 8006584:	2000488c 	.word	0x2000488c
 8006588:	20004898 	.word	0x20004898
 800658c:	080109dc 	.word	0x080109dc
 8006590:	08010904 	.word	0x08010904
 8006594:	080101d8 	.word	0x080101d8
 8006598:	08010920 	.word	0x08010920
 800659c:	08010950 	.word	0x08010950
 80065a0:	08010980 	.word	0x08010980

080065a4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80065a8:	f007 fc20 	bl	800ddec <sys_arch_protect>
 80065ac:	4605      	mov	r5, r0

  memp = *desc->tab;
 80065ae:	68a3      	ldr	r3, [r4, #8]
 80065b0:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80065b2:	b18c      	cbz	r4, 80065d8 <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80065b8:	f014 0f03 	tst.w	r4, #3
 80065bc:	d104      	bne.n	80065c8 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80065be:	4628      	mov	r0, r5
 80065c0:	f007 fc20 	bl	800de04 <sys_arch_unprotect>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 80065c4:	4620      	mov	r0, r4
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <do_memp_malloc_pool+0x3c>)
 80065ca:	f240 1249 	movw	r2, #329	; 0x149
 80065ce:	4905      	ldr	r1, [pc, #20]	; (80065e4 <do_memp_malloc_pool+0x40>)
 80065d0:	4805      	ldr	r0, [pc, #20]	; (80065e8 <do_memp_malloc_pool+0x44>)
 80065d2:	f008 fc55 	bl	800ee80 <iprintf>
 80065d6:	e7f2      	b.n	80065be <do_memp_malloc_pool+0x1a>
  SYS_ARCH_UNPROTECT(old_level);
 80065d8:	f007 fc14 	bl	800de04 <sys_arch_unprotect>
  return NULL;
 80065dc:	2400      	movs	r4, #0
 80065de:	e7f1      	b.n	80065c4 <do_memp_malloc_pool+0x20>
 80065e0:	08010aa8 	.word	0x08010aa8
 80065e4:	08010ad8 	.word	0x08010ad8
 80065e8:	080101d8 	.word	0x080101d8

080065ec <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4605      	mov	r5, r0
 80065f0:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80065f2:	f011 0f03 	tst.w	r1, #3
 80065f6:	d109      	bne.n	800660c <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80065f8:	f007 fbf8 	bl	800ddec <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80065fc:	68ab      	ldr	r3, [r5, #8]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8006602:	68ab      	ldr	r3, [r5, #8]
 8006604:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8006606:	f007 fbfd 	bl	800de04 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800660a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 800660c:	4b03      	ldr	r3, [pc, #12]	; (800661c <do_memp_free_pool+0x30>)
 800660e:	f240 129d 	movw	r2, #413	; 0x19d
 8006612:	4903      	ldr	r1, [pc, #12]	; (8006620 <do_memp_free_pool+0x34>)
 8006614:	4803      	ldr	r0, [pc, #12]	; (8006624 <do_memp_free_pool+0x38>)
 8006616:	f008 fc33 	bl	800ee80 <iprintf>
 800661a:	e7ed      	b.n	80065f8 <do_memp_free_pool+0xc>
 800661c:	08010aa8 	.word	0x08010aa8
 8006620:	08010a88 	.word	0x08010a88
 8006624:	080101d8 	.word	0x080101d8

08006628 <memp_init_pool>:
  *desc->tab = NULL;
 8006628:	6883      	ldr	r3, [r0, #8]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800662e:	6843      	ldr	r3, [r0, #4]
 8006630:	3303      	adds	r3, #3
 8006632:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8006636:	e007      	b.n	8006648 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8006638:	6881      	ldr	r1, [r0, #8]
 800663a:	6809      	ldr	r1, [r1, #0]
 800663c:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 800663e:	6881      	ldr	r1, [r0, #8]
 8006640:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006642:	8801      	ldrh	r1, [r0, #0]
 8006644:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8006646:	3201      	adds	r2, #1
 8006648:	8841      	ldrh	r1, [r0, #2]
 800664a:	4291      	cmp	r1, r2
 800664c:	dcf4      	bgt.n	8006638 <memp_init_pool+0x10>
}
 800664e:	4770      	bx	lr

08006650 <memp_init>:
{
 8006650:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006652:	2400      	movs	r4, #0
 8006654:	e006      	b.n	8006664 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <memp_init+0x1c>)
 8006658:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800665c:	f7ff ffe4 	bl	8006628 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006660:	3401      	adds	r4, #1
 8006662:	b2a4      	uxth	r4, r4
 8006664:	2c0c      	cmp	r4, #12
 8006666:	d9f6      	bls.n	8006656 <memp_init+0x6>
}
 8006668:	bd10      	pop	{r4, pc}
 800666a:	bf00      	nop
 800666c:	08010bd4 	.word	0x08010bd4

08006670 <memp_malloc>:
{
 8006670:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006672:	280c      	cmp	r0, #12
 8006674:	d805      	bhi.n	8006682 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006676:	4b07      	ldr	r3, [pc, #28]	; (8006694 <memp_malloc+0x24>)
 8006678:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800667c:	f7ff ff92 	bl	80065a4 <do_memp_malloc_pool>
}
 8006680:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <memp_malloc+0x28>)
 8006684:	f240 1287 	movw	r2, #391	; 0x187
 8006688:	4904      	ldr	r1, [pc, #16]	; (800669c <memp_malloc+0x2c>)
 800668a:	4805      	ldr	r0, [pc, #20]	; (80066a0 <memp_malloc+0x30>)
 800668c:	f008 fbf8 	bl	800ee80 <iprintf>
 8006690:	2000      	movs	r0, #0
 8006692:	e7f5      	b.n	8006680 <memp_malloc+0x10>
 8006694:	08010bd4 	.word	0x08010bd4
 8006698:	08010aa8 	.word	0x08010aa8
 800669c:	08010bb4 	.word	0x08010bb4
 80066a0:	080101d8 	.word	0x080101d8

080066a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80066a4:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80066a6:	280c      	cmp	r0, #12
 80066a8:	d806      	bhi.n	80066b8 <memp_free+0x14>

  if (mem == NULL) {
 80066aa:	b121      	cbz	r1, 80066b6 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80066ac:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <memp_free+0x24>)
 80066ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80066b2:	f7ff ff9b 	bl	80065ec <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80066b6:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <memp_free+0x28>)
 80066ba:	f240 12db 	movw	r2, #475	; 0x1db
 80066be:	4904      	ldr	r1, [pc, #16]	; (80066d0 <memp_free+0x2c>)
 80066c0:	4804      	ldr	r0, [pc, #16]	; (80066d4 <memp_free+0x30>)
 80066c2:	f008 fbdd 	bl	800ee80 <iprintf>
 80066c6:	e7f6      	b.n	80066b6 <memp_free+0x12>
 80066c8:	08010bd4 	.word	0x08010bd4
 80066cc:	08010aa8 	.word	0x08010aa8
 80066d0:	08010b98 	.word	0x08010b98
 80066d4:	080101d8 	.word	0x080101d8

080066d8 <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80066d8:	f011 0f01 	tst.w	r1, #1
 80066dc:	d00c      	beq.n	80066f8 <netif_issue_reports+0x20>
{
 80066de:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80066e0:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80066e2:	b123      	cbz	r3, 80066ee <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80066e4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80066e8:	f013 0f08 	tst.w	r3, #8
 80066ec:	d100      	bne.n	80066f0 <netif_issue_reports+0x18>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80066ee:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 80066f0:	1d01      	adds	r1, r0, #4
 80066f2:	f006 f8d1 	bl	800c898 <etharp_request>
}
 80066f6:	e7fa      	b.n	80066ee <netif_issue_reports+0x16>
 80066f8:	4770      	bx	lr

080066fa <netif_init>:
}
 80066fa:	4770      	bx	lr

080066fc <netif_set_ipaddr>:
{
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	b082      	sub	sp, #8
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006700:	460d      	mov	r5, r1
 8006702:	b1c1      	cbz	r1, 8006736 <netif_set_ipaddr+0x3a>
 8006704:	680a      	ldr	r2, [r1, #0]
 8006706:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8006708:	6842      	ldr	r2, [r0, #4]
 800670a:	9901      	ldr	r1, [sp, #4]
 800670c:	4291      	cmp	r1, r2
 800670e:	d010      	beq.n	8006732 <netif_set_ipaddr+0x36>
 8006710:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006712:	1d06      	adds	r6, r0, #4
 8006714:	a901      	add	r1, sp, #4
 8006716:	4630      	mov	r0, r6
 8006718:	f001 fcc0 	bl	800809c <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800671c:	a901      	add	r1, sp, #4
 800671e:	4630      	mov	r0, r6
 8006720:	f004 fbd6 	bl	800aed0 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006724:	b15d      	cbz	r5, 800673e <netif_set_ipaddr+0x42>
 8006726:	682b      	ldr	r3, [r5, #0]
 8006728:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800672a:	2101      	movs	r1, #1
 800672c:	4620      	mov	r0, r4
 800672e:	f7ff ffd3 	bl	80066d8 <netif_issue_reports>
}
 8006732:	b002      	add	sp, #8
 8006734:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006736:	4a03      	ldr	r2, [pc, #12]	; (8006744 <netif_set_ipaddr+0x48>)
 8006738:	6812      	ldr	r2, [r2, #0]
 800673a:	9201      	str	r2, [sp, #4]
 800673c:	e7e4      	b.n	8006708 <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800673e:	2300      	movs	r3, #0
 8006740:	e7f2      	b.n	8006728 <netif_set_ipaddr+0x2c>
 8006742:	bf00      	nop
 8006744:	08012444 	.word	0x08012444

08006748 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006748:	b111      	cbz	r1, 8006750 <netif_set_gw+0x8>
 800674a:	680b      	ldr	r3, [r1, #0]
 800674c:	60c3      	str	r3, [r0, #12]
}
 800674e:	4770      	bx	lr
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006750:	2300      	movs	r3, #0
 8006752:	e7fb      	b.n	800674c <netif_set_gw+0x4>

08006754 <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006754:	b111      	cbz	r1, 800675c <netif_set_netmask+0x8>
 8006756:	680b      	ldr	r3, [r1, #0]
 8006758:	6083      	str	r3, [r0, #8]
}
 800675a:	4770      	bx	lr
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800675c:	2300      	movs	r3, #0
 800675e:	e7fb      	b.n	8006758 <netif_set_netmask+0x4>

08006760 <netif_set_addr>:
{
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	4604      	mov	r4, r0
 8006764:	4617      	mov	r7, r2
 8006766:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 8006768:	460d      	mov	r5, r1
 800676a:	b109      	cbz	r1, 8006770 <netif_set_addr+0x10>
 800676c:	680b      	ldr	r3, [r1, #0]
 800676e:	b963      	cbnz	r3, 800678a <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 8006770:	4629      	mov	r1, r5
 8006772:	4620      	mov	r0, r4
 8006774:	f7ff ffc2 	bl	80066fc <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8006778:	4639      	mov	r1, r7
 800677a:	4620      	mov	r0, r4
 800677c:	f7ff ffea 	bl	8006754 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8006780:	4631      	mov	r1, r6
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff ffe0 	bl	8006748 <netif_set_gw>
}
 8006788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 800678a:	4611      	mov	r1, r2
 800678c:	f7ff ffe2 	bl	8006754 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8006790:	4631      	mov	r1, r6
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff ffd8 	bl	8006748 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 8006798:	4629      	mov	r1, r5
 800679a:	4620      	mov	r0, r4
 800679c:	f7ff ffae 	bl	80066fc <netif_set_ipaddr>
}
 80067a0:	e7f2      	b.n	8006788 <netif_set_addr+0x28>
	...

080067a4 <netif_add>:
{
 80067a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a8:	4604      	mov	r4, r0
 80067aa:	460e      	mov	r6, r1
 80067ac:	4617      	mov	r7, r2
 80067ae:	4698      	mov	r8, r3
 80067b0:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 80067b2:	b31d      	cbz	r5, 80067fc <netif_add+0x58>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80067b4:	2300      	movs	r3, #0
 80067b6:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80067b8:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80067ba:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 80067bc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80067c0:	6223      	str	r3, [r4, #32]
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 80067c8:	9b06      	ldr	r3, [sp, #24]
 80067ca:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80067cc:	4a10      	ldr	r2, [pc, #64]	; (8006810 <netif_add+0x6c>)
 80067ce:	7813      	ldrb	r3, [r2, #0]
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	7011      	strb	r1, [r2, #0]
 80067d4:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->input = input;
 80067d8:	9b08      	ldr	r3, [sp, #32]
 80067da:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80067dc:	4643      	mov	r3, r8
 80067de:	463a      	mov	r2, r7
 80067e0:	4631      	mov	r1, r6
 80067e2:	4620      	mov	r0, r4
 80067e4:	f7ff ffbc 	bl	8006760 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80067e8:	4620      	mov	r0, r4
 80067ea:	47a8      	blx	r5
 80067ec:	b968      	cbnz	r0, 800680a <netif_add+0x66>
  netif->next = netif_list;
 80067ee:	4b09      	ldr	r3, [pc, #36]	; (8006814 <netif_add+0x70>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80067f4:	601c      	str	r4, [r3, #0]
  return netif;
 80067f6:	4620      	mov	r0, r4
}
 80067f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <netif_add+0x74>)
 80067fe:	22fb      	movs	r2, #251	; 0xfb
 8006800:	4906      	ldr	r1, [pc, #24]	; (800681c <netif_add+0x78>)
 8006802:	4807      	ldr	r0, [pc, #28]	; (8006820 <netif_add+0x7c>)
 8006804:	f008 fb3c 	bl	800ee80 <iprintf>
 8006808:	e7d4      	b.n	80067b4 <netif_add+0x10>
    return NULL;
 800680a:	2000      	movs	r0, #0
 800680c:	e7f4      	b.n	80067f8 <netif_add+0x54>
 800680e:	bf00      	nop
 8006810:	200048d0 	.word	0x200048d0
 8006814:	200081e0 	.word	0x200081e0
 8006818:	08010c08 	.word	0x08010c08
 800681c:	08010c3c 	.word	0x08010c3c
 8006820:	080101d8 	.word	0x080101d8

08006824 <netif_set_default>:
  netif_default = netif;
 8006824:	4b01      	ldr	r3, [pc, #4]	; (800682c <netif_set_default+0x8>)
 8006826:	6018      	str	r0, [r3, #0]
}
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	200081e4 	.word	0x200081e4

08006830 <netif_set_up>:
{
 8006830:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006832:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8006836:	f013 0f01 	tst.w	r3, #1
 800683a:	d106      	bne.n	800684a <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006844:	f013 0f04 	tst.w	r3, #4
 8006848:	d100      	bne.n	800684c <netif_set_up+0x1c>
}
 800684a:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800684c:	2103      	movs	r1, #3
 800684e:	f7ff ff43 	bl	80066d8 <netif_issue_reports>
}
 8006852:	e7fa      	b.n	800684a <netif_set_up+0x1a>

08006854 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006854:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8006856:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800685a:	f013 0f01 	tst.w	r3, #1
 800685e:	d006      	beq.n	800686e <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 8006860:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006864:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006868:	f013 0f08 	tst.w	r3, #8
 800686c:	d100      	bne.n	8006870 <netif_set_down+0x1c>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800686e:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 8006870:	f005 ff92 	bl	800c798 <etharp_cleanup_netif>
}
 8006874:	e7fb      	b.n	800686e <netif_set_down+0x1a>
	...

08006878 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	460c      	mov	r4, r1
 800687c:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800687e:	4605      	mov	r5, r0
 8006880:	b318      	cbz	r0, 80068ca <pbuf_header_impl+0x52>
  if ((header_size_increment == 0) || (p == NULL)) {
 8006882:	fab5 f385 	clz	r3, r5
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	2c00      	cmp	r4, #0
 800688a:	bf08      	it	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d151      	bne.n	8006936 <pbuf_header_impl+0xbe>
    return 0;
  }

  if (header_size_increment < 0) {
 8006892:	2c00      	cmp	r4, #0
 8006894:	db21      	blt.n	80068da <pbuf_header_impl+0x62>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8006896:	b2a1      	uxth	r1, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8006898:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800689a:	6868      	ldr	r0, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800689c:	2b03      	cmp	r3, #3
 800689e:	bf14      	ite	ne
 80068a0:	2200      	movne	r2, #0
 80068a2:	2201      	moveq	r2, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bf08      	it	eq
 80068a8:	2201      	moveq	r2, #1
 80068aa:	b342      	cbz	r2, 80068fe <pbuf_header_impl+0x86>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80068ac:	1b03      	subs	r3, r0, r4
 80068ae:	606b      	str	r3, [r5, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80068b0:	f105 0210 	add.w	r2, r5, #16
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d31f      	bcc.n	80068f8 <pbuf_header_impl+0x80>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80068b8:	b2a4      	uxth	r4, r4
 80068ba:	896b      	ldrh	r3, [r5, #10]
 80068bc:	4423      	add	r3, r4
 80068be:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 80068c0:	892b      	ldrh	r3, [r5, #8]
 80068c2:	441c      	add	r4, r3
 80068c4:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80068c6:	2000      	movs	r0, #0
 80068c8:	e036      	b.n	8006938 <pbuf_header_impl+0xc0>
  LWIP_ASSERT("p != NULL", p != NULL);
 80068ca:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <pbuf_header_impl+0xc8>)
 80068cc:	f240 223f 	movw	r2, #575	; 0x23f
 80068d0:	491c      	ldr	r1, [pc, #112]	; (8006944 <pbuf_header_impl+0xcc>)
 80068d2:	481d      	ldr	r0, [pc, #116]	; (8006948 <pbuf_header_impl+0xd0>)
 80068d4:	f008 fad4 	bl	800ee80 <iprintf>
 80068d8:	e7d3      	b.n	8006882 <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 80068da:	b2a1      	uxth	r1, r4
 80068dc:	4249      	negs	r1, r1
 80068de:	b289      	uxth	r1, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80068e0:	896b      	ldrh	r3, [r5, #10]
 80068e2:	428b      	cmp	r3, r1
 80068e4:	d2d8      	bcs.n	8006898 <pbuf_header_impl+0x20>
 80068e6:	4b16      	ldr	r3, [pc, #88]	; (8006940 <pbuf_header_impl+0xc8>)
 80068e8:	f240 2247 	movw	r2, #583	; 0x247
 80068ec:	4917      	ldr	r1, [pc, #92]	; (800694c <pbuf_header_impl+0xd4>)
 80068ee:	4816      	ldr	r0, [pc, #88]	; (8006948 <pbuf_header_impl+0xd0>)
 80068f0:	f008 fac6 	bl	800ee80 <iprintf>
 80068f4:	2001      	movs	r0, #1
 80068f6:	e01f      	b.n	8006938 <pbuf_header_impl+0xc0>
      p->payload = payload;
 80068f8:	6068      	str	r0, [r5, #4]
      return 1;
 80068fa:	2001      	movs	r0, #1
 80068fc:	e01c      	b.n	8006938 <pbuf_header_impl+0xc0>
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b01      	cmp	r3, #1
 8006904:	d80e      	bhi.n	8006924 <pbuf_header_impl+0xac>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006906:	2c00      	cmp	r4, #0
 8006908:	db06      	blt.n	8006918 <pbuf_header_impl+0xa0>
    } else if ((header_size_increment > 0) && force) {
 800690a:	2e00      	cmp	r6, #0
 800690c:	bf18      	it	ne
 800690e:	2c00      	cmpne	r4, #0
 8006910:	dd13      	ble.n	800693a <pbuf_header_impl+0xc2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006912:	1b00      	subs	r0, r0, r4
 8006914:	6068      	str	r0, [r5, #4]
 8006916:	e7cf      	b.n	80068b8 <pbuf_header_impl+0x40>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006918:	896b      	ldrh	r3, [r5, #10]
 800691a:	428b      	cmp	r3, r1
 800691c:	d3f5      	bcc.n	800690a <pbuf_header_impl+0x92>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800691e:	1b00      	subs	r0, r0, r4
 8006920:	6068      	str	r0, [r5, #4]
 8006922:	e7c9      	b.n	80068b8 <pbuf_header_impl+0x40>
    LWIP_ASSERT("bad pbuf type", 0);
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <pbuf_header_impl+0xc8>)
 8006926:	f240 2277 	movw	r2, #631	; 0x277
 800692a:	4909      	ldr	r1, [pc, #36]	; (8006950 <pbuf_header_impl+0xd8>)
 800692c:	4806      	ldr	r0, [pc, #24]	; (8006948 <pbuf_header_impl+0xd0>)
 800692e:	f008 faa7 	bl	800ee80 <iprintf>
    return 1;
 8006932:	2001      	movs	r0, #1
 8006934:	e000      	b.n	8006938 <pbuf_header_impl+0xc0>
    return 0;
 8006936:	2000      	movs	r0, #0
}
 8006938:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 800693a:	2001      	movs	r0, #1
 800693c:	e7fc      	b.n	8006938 <pbuf_header_impl+0xc0>
 800693e:	bf00      	nop
 8006940:	08010f0c 	.word	0x08010f0c
 8006944:	08011cc4 	.word	0x08011cc4
 8006948:	080101d8 	.word	0x080101d8
 800694c:	08010f3c 	.word	0x08010f3c
 8006950:	08010f5c 	.word	0x08010f5c

08006954 <pbuf_pool_is_empty>:
{
 8006954:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 8006956:	f007 fa49 	bl	800ddec <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800695a:	4b0c      	ldr	r3, [pc, #48]	; (800698c <pbuf_pool_is_empty+0x38>)
 800695c:	781c      	ldrb	r4, [r3, #0]
 800695e:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8006960:	2201      	movs	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8006964:	f007 fa4e 	bl	800de04 <sys_arch_unprotect>
  if (!queued) {
 8006968:	b104      	cbz	r4, 800696c <pbuf_pool_is_empty+0x18>
}
 800696a:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800696c:	2200      	movs	r2, #0
 800696e:	4611      	mov	r1, r2
 8006970:	4807      	ldr	r0, [pc, #28]	; (8006990 <pbuf_pool_is_empty+0x3c>)
 8006972:	f7ff fb23 	bl	8005fbc <tcpip_callback_with_block>
 8006976:	2800      	cmp	r0, #0
 8006978:	d0f7      	beq.n	800696a <pbuf_pool_is_empty+0x16>
 800697a:	f007 fa37 	bl	800ddec <sys_arch_protect>
 800697e:	4b03      	ldr	r3, [pc, #12]	; (800698c <pbuf_pool_is_empty+0x38>)
 8006980:	2200      	movs	r2, #0
 8006982:	701a      	strb	r2, [r3, #0]
 8006984:	f007 fa3e 	bl	800de04 <sys_arch_unprotect>
}
 8006988:	e7ef      	b.n	800696a <pbuf_pool_is_empty+0x16>
 800698a:	bf00      	nop
 800698c:	200081e8 	.word	0x200081e8
 8006990:	080069c5 	.word	0x080069c5

08006994 <pbuf_free_ooseq>:
{
 8006994:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006996:	f007 fa29 	bl	800ddec <sys_arch_protect>
 800699a:	4b08      	ldr	r3, [pc, #32]	; (80069bc <pbuf_free_ooseq+0x28>)
 800699c:	2200      	movs	r2, #0
 800699e:	701a      	strb	r2, [r3, #0]
 80069a0:	f007 fa30 	bl	800de04 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <pbuf_free_ooseq+0x2c>)
 80069a6:	681c      	ldr	r4, [r3, #0]
 80069a8:	b13c      	cbz	r4, 80069ba <pbuf_free_ooseq+0x26>
    if (NULL != pcb->ooseq) {
 80069aa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80069ac:	b908      	cbnz	r0, 80069b2 <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80069ae:	68e4      	ldr	r4, [r4, #12]
 80069b0:	e7fa      	b.n	80069a8 <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 80069b2:	f000 fd64 	bl	800747e <tcp_segs_free>
      pcb->ooseq = NULL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	6723      	str	r3, [r4, #112]	; 0x70
}
 80069ba:	bd10      	pop	{r4, pc}
 80069bc:	200081e8 	.word	0x200081e8
 80069c0:	200081f0 	.word	0x200081f0

080069c4 <pbuf_free_ooseq_callback>:
{
 80069c4:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 80069c6:	f7ff ffe5 	bl	8006994 <pbuf_free_ooseq>
}
 80069ca:	bd08      	pop	{r3, pc}

080069cc <pbuf_alloced_custom>:
{
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 80069d0:	2804      	cmp	r0, #4
 80069d2:	d80a      	bhi.n	80069ea <pbuf_alloced_custom+0x1e>
 80069d4:	e8df f000 	tbb	[pc, r0]
 80069d8:	05031412 	.word	0x05031412
 80069dc:	07          	.byte	0x07
 80069dd:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80069de:	200e      	movs	r0, #14
    break;
 80069e0:	e00f      	b.n	8006a02 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80069e2:	2000      	movs	r0, #0
    break;
 80069e4:	e00d      	b.n	8006a02 <pbuf_alloced_custom+0x36>
    offset = 0;
 80069e6:	2000      	movs	r0, #0
    break;
 80069e8:	e00b      	b.n	8006a02 <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80069ea:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <pbuf_alloced_custom+0x6c>)
 80069ec:	f240 12c5 	movw	r2, #453	; 0x1c5
 80069f0:	4912      	ldr	r1, [pc, #72]	; (8006a3c <pbuf_alloced_custom+0x70>)
 80069f2:	4813      	ldr	r0, [pc, #76]	; (8006a40 <pbuf_alloced_custom+0x74>)
 80069f4:	f008 fa44 	bl	800ee80 <iprintf>
    return NULL;
 80069f8:	2000      	movs	r0, #0
 80069fa:	e017      	b.n	8006a2c <pbuf_alloced_custom+0x60>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80069fc:	2036      	movs	r0, #54	; 0x36
 80069fe:	e000      	b.n	8006a02 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006a00:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006a02:	3003      	adds	r0, #3
 8006a04:	f020 0003 	bic.w	r0, r0, #3
 8006a08:	180e      	adds	r6, r1, r0
 8006a0a:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8006a0e:	42ae      	cmp	r6, r5
 8006a10:	d810      	bhi.n	8006a34 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 8006a12:	2500      	movs	r5, #0
 8006a14:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 8006a16:	b154      	cbz	r4, 8006a2e <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006a18:	4420      	add	r0, r4
 8006a1a:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006a1c:	2002      	movs	r0, #2
 8006a1e:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8006a20:	8119      	strh	r1, [r3, #8]
 8006a22:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8006a24:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8006a26:	2201      	movs	r2, #1
 8006a28:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8006a2a:	4618      	mov	r0, r3
}
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 8006a2e:	2000      	movs	r0, #0
 8006a30:	6058      	str	r0, [r3, #4]
 8006a32:	e7f3      	b.n	8006a1c <pbuf_alloced_custom+0x50>
    return NULL;
 8006a34:	2000      	movs	r0, #0
 8006a36:	e7f9      	b.n	8006a2c <pbuf_alloced_custom+0x60>
 8006a38:	08010f0c 	.word	0x08010f0c
 8006a3c:	08010d38 	.word	0x08010d38
 8006a40:	080101d8 	.word	0x080101d8

08006a44 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8006a44:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 8006a46:	2200      	movs	r2, #0
 8006a48:	f7ff ff16 	bl	8006878 <pbuf_header_impl>
}
 8006a4c:	bd08      	pop	{r3, pc}

08006a4e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006a4e:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 8006a50:	2201      	movs	r2, #1
 8006a52:	f7ff ff11 	bl	8006878 <pbuf_header_impl>
}
 8006a56:	bd08      	pop	{r3, pc}

08006a58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006a5a:	b128      	cbz	r0, 8006a68 <pbuf_free+0x10>
 8006a5c:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8006a5e:	7b03      	ldrb	r3, [r0, #12]
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d80b      	bhi.n	8006a7c <pbuf_free+0x24>
{
 8006a64:	2600      	movs	r6, #0
 8006a66:	e01f      	b.n	8006aa8 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006a68:	4b2a      	ldr	r3, [pc, #168]	; (8006b14 <pbuf_free+0xbc>)
 8006a6a:	f240 22d2 	movw	r2, #722	; 0x2d2
 8006a6e:	492a      	ldr	r1, [pc, #168]	; (8006b18 <pbuf_free+0xc0>)
 8006a70:	482a      	ldr	r0, [pc, #168]	; (8006b1c <pbuf_free+0xc4>)
 8006a72:	f008 fa05 	bl	800ee80 <iprintf>
    return 0;
 8006a76:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8006a78:	4630      	mov	r0, r6
 8006a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8006a7c:	4b25      	ldr	r3, [pc, #148]	; (8006b14 <pbuf_free+0xbc>)
 8006a7e:	f240 22de 	movw	r2, #734	; 0x2de
 8006a82:	4927      	ldr	r1, [pc, #156]	; (8006b20 <pbuf_free+0xc8>)
 8006a84:	4825      	ldr	r0, [pc, #148]	; (8006b1c <pbuf_free+0xc4>)
 8006a86:	f008 f9fb 	bl	800ee80 <iprintf>
 8006a8a:	e7eb      	b.n	8006a64 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006a8c:	4b21      	ldr	r3, [pc, #132]	; (8006b14 <pbuf_free+0xbc>)
 8006a8e:	f240 22eb 	movw	r2, #747	; 0x2eb
 8006a92:	4924      	ldr	r1, [pc, #144]	; (8006b24 <pbuf_free+0xcc>)
 8006a94:	4821      	ldr	r0, [pc, #132]	; (8006b1c <pbuf_free+0xc4>)
 8006a96:	f008 f9f3 	bl	800ee80 <iprintf>
 8006a9a:	e00d      	b.n	8006ab8 <pbuf_free+0x60>
        pc->custom_free_function(p);
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4798      	blx	r3
      count++;
 8006aa2:	3601      	adds	r6, #1
 8006aa4:	b2f6      	uxtb	r6, r6
      p = q;
 8006aa6:	462c      	mov	r4, r5
  while (p != NULL) {
 8006aa8:	2c00      	cmp	r4, #0
 8006aaa:	d0e5      	beq.n	8006a78 <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 8006aac:	f007 f99e 	bl	800ddec <sys_arch_protect>
 8006ab0:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006ab2:	89e3      	ldrh	r3, [r4, #14]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0e9      	beq.n	8006a8c <pbuf_free+0x34>
    ref = --(p->ref);
 8006ab8:	89e5      	ldrh	r5, [r4, #14]
 8006aba:	3d01      	subs	r5, #1
 8006abc:	b2ad      	uxth	r5, r5
 8006abe:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	f007 f99f 	bl	800de04 <sys_arch_unprotect>
    if (ref == 0) {
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	d1d6      	bne.n	8006a78 <pbuf_free+0x20>
      q = p->next;
 8006aca:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 8006acc:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006ace:	7b62      	ldrb	r2, [r4, #13]
 8006ad0:	f012 0f02 	tst.w	r2, #2
 8006ad4:	d00a      	beq.n	8006aec <pbuf_free+0x94>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1df      	bne.n	8006a9c <pbuf_free+0x44>
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <pbuf_free+0xbc>)
 8006ade:	f240 22f9 	movw	r2, #761	; 0x2f9
 8006ae2:	4911      	ldr	r1, [pc, #68]	; (8006b28 <pbuf_free+0xd0>)
 8006ae4:	480d      	ldr	r0, [pc, #52]	; (8006b1c <pbuf_free+0xc4>)
 8006ae6:	f008 f9cb 	bl	800ee80 <iprintf>
 8006aea:	e7d7      	b.n	8006a9c <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d007      	beq.n	8006b00 <pbuf_free+0xa8>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d908      	bls.n	8006b0a <pbuf_free+0xb2>
          mem_free(p);
 8006af8:	4620      	mov	r0, r4
 8006afa:	f7ff fbaf 	bl	800625c <mem_free>
 8006afe:	e7d0      	b.n	8006aa2 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 8006b00:	4621      	mov	r1, r4
 8006b02:	200c      	movs	r0, #12
 8006b04:	f7ff fdce 	bl	80066a4 <memp_free>
 8006b08:	e7cb      	b.n	8006aa2 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	200b      	movs	r0, #11
 8006b0e:	f7ff fdc9 	bl	80066a4 <memp_free>
 8006b12:	e7c6      	b.n	8006aa2 <pbuf_free+0x4a>
 8006b14:	08010f0c 	.word	0x08010f0c
 8006b18:	08011cc4 	.word	0x08011cc4
 8006b1c:	080101d8 	.word	0x080101d8
 8006b20:	08010eb8 	.word	0x08010eb8
 8006b24:	08010ed0 	.word	0x08010ed0
 8006b28:	08010ee8 	.word	0x08010ee8

08006b2c <pbuf_alloc>:
{
 8006b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b30:	460e      	mov	r6, r1
 8006b32:	4617      	mov	r7, r2
  switch (layer) {
 8006b34:	2804      	cmp	r0, #4
 8006b36:	d80a      	bhi.n	8006b4e <pbuf_alloc+0x22>
 8006b38:	e8df f000 	tbb	[pc, r0]
 8006b3c:	05031412 	.word	0x05031412
 8006b40:	07          	.byte	0x07
 8006b41:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006b42:	240e      	movs	r4, #14
    break;
 8006b44:	e00f      	b.n	8006b66 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8006b46:	2400      	movs	r4, #0
    break;
 8006b48:	e00d      	b.n	8006b66 <pbuf_alloc+0x3a>
    offset = 0;
 8006b4a:	2400      	movs	r4, #0
    break;
 8006b4c:	e00b      	b.n	8006b66 <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8006b4e:	4b64      	ldr	r3, [pc, #400]	; (8006ce0 <pbuf_alloc+0x1b4>)
 8006b50:	f44f 728b 	mov.w	r2, #278	; 0x116
 8006b54:	4963      	ldr	r1, [pc, #396]	; (8006ce4 <pbuf_alloc+0x1b8>)
 8006b56:	4864      	ldr	r0, [pc, #400]	; (8006ce8 <pbuf_alloc+0x1bc>)
 8006b58:	f008 f992 	bl	800ee80 <iprintf>
    return NULL;
 8006b5c:	2500      	movs	r5, #0
 8006b5e:	e0b1      	b.n	8006cc4 <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006b60:	2436      	movs	r4, #54	; 0x36
 8006b62:	e000      	b.n	8006b66 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006b64:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 8006b66:	2f03      	cmp	r7, #3
 8006b68:	f200 80af 	bhi.w	8006cca <pbuf_alloc+0x19e>
 8006b6c:	e8df f007 	tbb	[pc, r7]
 8006b70:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006b74:	200c      	movs	r0, #12
 8006b76:	f7ff fd7b 	bl	8006670 <memp_malloc>
    if (p == NULL) {
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	b1f8      	cbz	r0, 8006bbe <pbuf_alloc+0x92>
    p->type = type;
 8006b7e:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006b84:	f104 0310 	add.w	r3, r4, #16
 8006b88:	4403      	add	r3, r0
 8006b8a:	3303      	adds	r3, #3
 8006b8c:	f023 0303 	bic.w	r3, r3, #3
 8006b90:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 8006b92:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006b94:	1ce2      	adds	r2, r4, #3
 8006b96:	f022 0203 	bic.w	r2, r2, #3
 8006b9a:	f5c2 7214 	rsb	r2, r2, #592	; 0x250
 8006b9e:	42b2      	cmp	r2, r6
 8006ba0:	bf28      	it	cs
 8006ba2:	4632      	movcs	r2, r6
 8006ba4:	b292      	uxth	r2, r2
 8006ba6:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006ba8:	4413      	add	r3, r2
 8006baa:	f500 7818 	add.w	r8, r0, #608	; 0x260
 8006bae:	4543      	cmp	r3, r8
 8006bb0:	d808      	bhi.n	8006bc4 <pbuf_alloc+0x98>
    p->ref = 1;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	81eb      	strh	r3, [r5, #14]
    rem_len = length - p->len;
 8006bb6:	896b      	ldrh	r3, [r5, #10]
 8006bb8:	1af6      	subs	r6, r6, r3
    r = p;
 8006bba:	46a9      	mov	r9, r5
    while (rem_len > 0) {
 8006bbc:	e02d      	b.n	8006c1a <pbuf_alloc+0xee>
      PBUF_POOL_IS_EMPTY();
 8006bbe:	f7ff fec9 	bl	8006954 <pbuf_pool_is_empty>
      return NULL;
 8006bc2:	e07f      	b.n	8006cc4 <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006bc4:	4b46      	ldr	r3, [pc, #280]	; (8006ce0 <pbuf_alloc+0x1b4>)
 8006bc6:	f44f 7298 	mov.w	r2, #304	; 0x130
 8006bca:	4948      	ldr	r1, [pc, #288]	; (8006cec <pbuf_alloc+0x1c0>)
 8006bcc:	4846      	ldr	r0, [pc, #280]	; (8006ce8 <pbuf_alloc+0x1bc>)
 8006bce:	f008 f957 	bl	800ee80 <iprintf>
 8006bd2:	e7ee      	b.n	8006bb2 <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 8006bd4:	f7ff febe 	bl	8006954 <pbuf_pool_is_empty>
        pbuf_free(p);
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f7ff ff3d 	bl	8006a58 <pbuf_free>
        return NULL;
 8006bde:	4625      	mov	r5, r4
 8006be0:	e070      	b.n	8006cc4 <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006be2:	4b3f      	ldr	r3, [pc, #252]	; (8006ce0 <pbuf_alloc+0x1b4>)
 8006be4:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8006be8:	4941      	ldr	r1, [pc, #260]	; (8006cf0 <pbuf_alloc+0x1c4>)
 8006bea:	483f      	ldr	r0, [pc, #252]	; (8006ce8 <pbuf_alloc+0x1bc>)
 8006bec:	f008 f948 	bl	800ee80 <iprintf>
 8006bf0:	e025      	b.n	8006c3e <pbuf_alloc+0x112>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006bf2:	4b3b      	ldr	r3, [pc, #236]	; (8006ce0 <pbuf_alloc+0x1b4>)
 8006bf4:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8006bf8:	493e      	ldr	r1, [pc, #248]	; (8006cf4 <pbuf_alloc+0x1c8>)
 8006bfa:	483b      	ldr	r0, [pc, #236]	; (8006ce8 <pbuf_alloc+0x1bc>)
 8006bfc:	f008 f940 	bl	800ee80 <iprintf>
 8006c00:	e02b      	b.n	8006c5a <pbuf_alloc+0x12e>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006c02:	4b37      	ldr	r3, [pc, #220]	; (8006ce0 <pbuf_alloc+0x1b4>)
 8006c04:	f240 1255 	movw	r2, #341	; 0x155
 8006c08:	4938      	ldr	r1, [pc, #224]	; (8006cec <pbuf_alloc+0x1c0>)
 8006c0a:	4837      	ldr	r0, [pc, #220]	; (8006ce8 <pbuf_alloc+0x1bc>)
 8006c0c:	f008 f938 	bl	800ee80 <iprintf>
      q->ref = 1;
 8006c10:	2301      	movs	r3, #1
 8006c12:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 8006c14:	8963      	ldrh	r3, [r4, #10]
 8006c16:	1af6      	subs	r6, r6, r3
      r = q;
 8006c18:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	dd4e      	ble.n	8006cbc <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006c1e:	200c      	movs	r0, #12
 8006c20:	f7ff fd26 	bl	8006670 <memp_malloc>
      if (q == NULL) {
 8006c24:	4604      	mov	r4, r0
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d0d4      	beq.n	8006bd4 <pbuf_alloc+0xa8>
      q->type = type;
 8006c2a:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8006c30:	6003      	str	r3, [r0, #0]
      r->next = q;
 8006c32:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006c36:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006c3a:	429e      	cmp	r6, r3
 8006c3c:	dcd1      	bgt.n	8006be2 <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 8006c3e:	b2b3      	uxth	r3, r6
 8006c40:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006c42:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006c46:	bf28      	it	cs
 8006c48:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8006c4c:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8006c4e:	f104 0310 	add.w	r3, r4, #16
 8006c52:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006c54:	f013 0f03 	tst.w	r3, #3
 8006c58:	d1cb      	bne.n	8006bf2 <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006c5a:	686b      	ldr	r3, [r5, #4]
 8006c5c:	896a      	ldrh	r2, [r5, #10]
 8006c5e:	4413      	add	r3, r2
 8006c60:	4598      	cmp	r8, r3
 8006c62:	d2d5      	bcs.n	8006c10 <pbuf_alloc+0xe4>
 8006c64:	e7cd      	b.n	8006c02 <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8006c66:	f104 0013 	add.w	r0, r4, #19
 8006c6a:	f020 0003 	bic.w	r0, r0, #3
 8006c6e:	b283      	uxth	r3, r0
 8006c70:	1cf2      	adds	r2, r6, #3
 8006c72:	b290      	uxth	r0, r2
 8006c74:	f020 0003 	bic.w	r0, r0, #3
 8006c78:	4418      	add	r0, r3
 8006c7a:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8006c7c:	f022 0203 	bic.w	r2, r2, #3
 8006c80:	4290      	cmp	r0, r2
 8006c82:	d32b      	bcc.n	8006cdc <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8006c84:	f7ff fbe4 	bl	8006450 <mem_malloc>
    if (p == NULL) {
 8006c88:	4605      	mov	r5, r0
 8006c8a:	b1d8      	cbz	r0, 8006cc4 <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006c8c:	f104 0310 	add.w	r3, r4, #16
 8006c90:	4403      	add	r3, r0
 8006c92:	3303      	adds	r3, #3
 8006c94:	f023 0303 	bic.w	r3, r3, #3
 8006c98:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8006c9a:	8106      	strh	r6, [r0, #8]
 8006c9c:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6003      	str	r3, [r0, #0]
    p->type = type;
 8006ca2:	7307      	strb	r7, [r0, #12]
 8006ca4:	e00a      	b.n	8006cbc <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006ca6:	200b      	movs	r0, #11
 8006ca8:	f7ff fce2 	bl	8006670 <memp_malloc>
    if (p == NULL) {
 8006cac:	4605      	mov	r5, r0
 8006cae:	b148      	cbz	r0, 8006cc4 <pbuf_alloc+0x198>
    p->payload = NULL;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8006cb4:	8106      	strh	r6, [r0, #8]
 8006cb6:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8006cb8:	6003      	str	r3, [r0, #0]
    p->type = type;
 8006cba:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	81eb      	strh	r3, [r5, #14]
  p->flags = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	736b      	strb	r3, [r5, #13]
}
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <pbuf_alloc+0x1b4>)
 8006ccc:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006cd0:	4909      	ldr	r1, [pc, #36]	; (8006cf8 <pbuf_alloc+0x1cc>)
 8006cd2:	4805      	ldr	r0, [pc, #20]	; (8006ce8 <pbuf_alloc+0x1bc>)
 8006cd4:	f008 f8d4 	bl	800ee80 <iprintf>
    return NULL;
 8006cd8:	2500      	movs	r5, #0
 8006cda:	e7f3      	b.n	8006cc4 <pbuf_alloc+0x198>
        return NULL;
 8006cdc:	2500      	movs	r5, #0
 8006cde:	e7f1      	b.n	8006cc4 <pbuf_alloc+0x198>
 8006ce0:	08010f0c 	.word	0x08010f0c
 8006ce4:	08010c54 	.word	0x08010c54
 8006ce8:	080101d8 	.word	0x080101d8
 8006cec:	08010c70 	.word	0x08010c70
 8006cf0:	08010cd8 	.word	0x08010cd8
 8006cf4:	08010cec 	.word	0x08010cec
 8006cf8:	08010d1c 	.word	0x08010d1c

08006cfc <pbuf_realloc>:
{
 8006cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d00:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006d02:	4604      	mov	r4, r0
 8006d04:	b170      	cbz	r0, 8006d24 <pbuf_realloc+0x28>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006d06:	7b23      	ldrb	r3, [r4, #12]
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	bf18      	it	ne
 8006d0c:	2b01      	cmpne	r3, #1
 8006d0e:	d002      	beq.n	8006d16 <pbuf_realloc+0x1a>
 8006d10:	b10b      	cbz	r3, 8006d16 <pbuf_realloc+0x1a>
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d10e      	bne.n	8006d34 <pbuf_realloc+0x38>
  if (new_len >= p->tot_len) {
 8006d16:	8927      	ldrh	r7, [r4, #8]
 8006d18:	42b7      	cmp	r7, r6
 8006d1a:	d943      	bls.n	8006da4 <pbuf_realloc+0xa8>
  grow = new_len - p->tot_len;
 8006d1c:	eba6 0807 	sub.w	r8, r6, r7
  rem_len = new_len;
 8006d20:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 8006d22:	e016      	b.n	8006d52 <pbuf_realloc+0x56>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006d24:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <pbuf_realloc+0xd4>)
 8006d26:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006d2a:	492a      	ldr	r1, [pc, #168]	; (8006dd4 <pbuf_realloc+0xd8>)
 8006d2c:	482a      	ldr	r0, [pc, #168]	; (8006dd8 <pbuf_realloc+0xdc>)
 8006d2e:	f008 f8a7 	bl	800ee80 <iprintf>
 8006d32:	e7e8      	b.n	8006d06 <pbuf_realloc+0xa>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006d34:	4b26      	ldr	r3, [pc, #152]	; (8006dd0 <pbuf_realloc+0xd4>)
 8006d36:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006d3a:	4928      	ldr	r1, [pc, #160]	; (8006ddc <pbuf_realloc+0xe0>)
 8006d3c:	4826      	ldr	r0, [pc, #152]	; (8006dd8 <pbuf_realloc+0xdc>)
 8006d3e:	f008 f89f 	bl	800ee80 <iprintf>
 8006d42:	e7e8      	b.n	8006d16 <pbuf_realloc+0x1a>
    q->tot_len += (u16_t)grow;
 8006d44:	1bf3      	subs	r3, r6, r7
 8006d46:	8922      	ldrh	r2, [r4, #8]
 8006d48:	fa12 f383 	uxtah	r3, r2, r3
 8006d4c:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8006d4e:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006d50:	b184      	cbz	r4, 8006d74 <pbuf_realloc+0x78>
  while (rem_len > q->len) {
 8006d52:	8963      	ldrh	r3, [r4, #10]
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	d215      	bcs.n	8006d84 <pbuf_realloc+0x88>
    rem_len -= q->len;
 8006d58:	1aed      	subs	r5, r5, r3
 8006d5a:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8006d5c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006d60:	4598      	cmp	r8, r3
 8006d62:	ddef      	ble.n	8006d44 <pbuf_realloc+0x48>
 8006d64:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <pbuf_realloc+0xd4>)
 8006d66:	f240 220b 	movw	r2, #523	; 0x20b
 8006d6a:	491d      	ldr	r1, [pc, #116]	; (8006de0 <pbuf_realloc+0xe4>)
 8006d6c:	481a      	ldr	r0, [pc, #104]	; (8006dd8 <pbuf_realloc+0xdc>)
 8006d6e:	f008 f887 	bl	800ee80 <iprintf>
 8006d72:	e7e7      	b.n	8006d44 <pbuf_realloc+0x48>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006d74:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <pbuf_realloc+0xd4>)
 8006d76:	f240 220f 	movw	r2, #527	; 0x20f
 8006d7a:	491a      	ldr	r1, [pc, #104]	; (8006de4 <pbuf_realloc+0xe8>)
 8006d7c:	4816      	ldr	r0, [pc, #88]	; (8006dd8 <pbuf_realloc+0xdc>)
 8006d7e:	f008 f87f 	bl	800ee80 <iprintf>
 8006d82:	e7e6      	b.n	8006d52 <pbuf_realloc+0x56>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8006d84:	7b22      	ldrb	r2, [r4, #12]
 8006d86:	b92a      	cbnz	r2, 8006d94 <pbuf_realloc+0x98>
 8006d88:	42ab      	cmp	r3, r5
 8006d8a:	d003      	beq.n	8006d94 <pbuf_realloc+0x98>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006d8c:	7b63      	ldrb	r3, [r4, #13]
 8006d8e:	f013 0f02 	tst.w	r3, #2
 8006d92:	d009      	beq.n	8006da8 <pbuf_realloc+0xac>
  q->len = rem_len;
 8006d94:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8006d96:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	b108      	cbz	r0, 8006da0 <pbuf_realloc+0xa4>
    pbuf_free(q->next);
 8006d9c:	f7ff fe5c 	bl	8006a58 <pbuf_free>
  q->next = NULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	6023      	str	r3, [r4, #0]
}
 8006da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8006da8:	6863      	ldr	r3, [r4, #4]
 8006daa:	1b1b      	subs	r3, r3, r4
 8006dac:	fa15 f183 	uxtah	r1, r5, r3
 8006db0:	b289      	uxth	r1, r1
 8006db2:	4620      	mov	r0, r4
 8006db4:	f7ff fab0 	bl	8006318 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006db8:	4604      	mov	r4, r0
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d1ea      	bne.n	8006d94 <pbuf_realloc+0x98>
 8006dbe:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <pbuf_realloc+0xd4>)
 8006dc0:	f240 221d 	movw	r2, #541	; 0x21d
 8006dc4:	4908      	ldr	r1, [pc, #32]	; (8006de8 <pbuf_realloc+0xec>)
 8006dc6:	4804      	ldr	r0, [pc, #16]	; (8006dd8 <pbuf_realloc+0xdc>)
 8006dc8:	f008 f85a 	bl	800ee80 <iprintf>
 8006dcc:	e7e2      	b.n	8006d94 <pbuf_realloc+0x98>
 8006dce:	bf00      	nop
 8006dd0:	08010f0c 	.word	0x08010f0c
 8006dd4:	08010f6c 	.word	0x08010f6c
 8006dd8:	080101d8 	.word	0x080101d8
 8006ddc:	08010f84 	.word	0x08010f84
 8006de0:	08010fa0 	.word	0x08010fa0
 8006de4:	08010fb4 	.word	0x08010fb4
 8006de8:	08010fcc 	.word	0x08010fcc

08006dec <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 8006dec:	2300      	movs	r3, #0
  while (p != NULL) {
 8006dee:	e002      	b.n	8006df6 <pbuf_clen+0xa>
    ++len;
 8006df0:	3301      	adds	r3, #1
 8006df2:	b29b      	uxth	r3, r3
    p = p->next;
 8006df4:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d1fa      	bne.n	8006df0 <pbuf_clen+0x4>
  }
  return len;
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	4770      	bx	lr
	...

08006e00 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8006e00:	b198      	cbz	r0, 8006e2a <pbuf_ref+0x2a>
{
 8006e02:	b510      	push	{r4, lr}
 8006e04:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 8006e06:	f006 fff1 	bl	800ddec <sys_arch_protect>
 8006e0a:	89e3      	ldrh	r3, [r4, #14]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	81e3      	strh	r3, [r4, #14]
 8006e10:	f006 fff8 	bl	800de04 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006e14:	89e3      	ldrh	r3, [r4, #14]
 8006e16:	b103      	cbz	r3, 8006e1a <pbuf_ref+0x1a>
  }
}
 8006e18:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006e1a:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <pbuf_ref+0x2c>)
 8006e1c:	f240 3239 	movw	r2, #825	; 0x339
 8006e20:	4903      	ldr	r1, [pc, #12]	; (8006e30 <pbuf_ref+0x30>)
 8006e22:	4804      	ldr	r0, [pc, #16]	; (8006e34 <pbuf_ref+0x34>)
 8006e24:	f008 f82c 	bl	800ee80 <iprintf>
}
 8006e28:	e7f6      	b.n	8006e18 <pbuf_ref+0x18>
 8006e2a:	4770      	bx	lr
 8006e2c:	08010f0c 	.word	0x08010f0c
 8006e30:	08010fe8 	.word	0x08010fe8
 8006e34:	080101d8 	.word	0x080101d8

08006e38 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006e38:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	460d      	mov	r5, r1
 8006e3e:	fab1 f181 	clz	r1, r1
 8006e42:	0949      	lsrs	r1, r1, #5
 8006e44:	2800      	cmp	r0, #0
 8006e46:	bf08      	it	eq
 8006e48:	2101      	moveq	r1, #1
 8006e4a:	b161      	cbz	r1, 8006e66 <pbuf_cat+0x2e>
 8006e4c:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <pbuf_cat+0x6c>)
 8006e4e:	f240 324d 	movw	r2, #845	; 0x34d
 8006e52:	4915      	ldr	r1, [pc, #84]	; (8006ea8 <pbuf_cat+0x70>)
 8006e54:	4815      	ldr	r0, [pc, #84]	; (8006eac <pbuf_cat+0x74>)
 8006e56:	f008 f813 	bl	800ee80 <iprintf>
 8006e5a:	e019      	b.n	8006e90 <pbuf_cat+0x58>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8006e5c:	892b      	ldrh	r3, [r5, #8]
 8006e5e:	8921      	ldrh	r1, [r4, #8]
 8006e60:	440b      	add	r3, r1
 8006e62:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006e64:	4614      	mov	r4, r2
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	2a00      	cmp	r2, #0
 8006e6a:	d1f7      	bne.n	8006e5c <pbuf_cat+0x24>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006e6c:	8922      	ldrh	r2, [r4, #8]
 8006e6e:	8963      	ldrh	r3, [r4, #10]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d10e      	bne.n	8006e92 <pbuf_cat+0x5a>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	b133      	cbz	r3, 8006e86 <pbuf_cat+0x4e>
 8006e78:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <pbuf_cat+0x6c>)
 8006e7a:	f240 3256 	movw	r2, #854	; 0x356
 8006e7e:	490c      	ldr	r1, [pc, #48]	; (8006eb0 <pbuf_cat+0x78>)
 8006e80:	480a      	ldr	r0, [pc, #40]	; (8006eac <pbuf_cat+0x74>)
 8006e82:	f007 fffd 	bl	800ee80 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8006e86:	892b      	ldrh	r3, [r5, #8]
 8006e88:	8922      	ldrh	r2, [r4, #8]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006e8e:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006e90:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006e92:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <pbuf_cat+0x6c>)
 8006e94:	f240 3255 	movw	r2, #853	; 0x355
 8006e98:	4906      	ldr	r1, [pc, #24]	; (8006eb4 <pbuf_cat+0x7c>)
 8006e9a:	4804      	ldr	r0, [pc, #16]	; (8006eac <pbuf_cat+0x74>)
 8006e9c:	f007 fff0 	bl	800ee80 <iprintf>
 8006ea0:	e7e8      	b.n	8006e74 <pbuf_cat+0x3c>
 8006ea2:	bf00      	nop
 8006ea4:	08010f0c 	.word	0x08010f0c
 8006ea8:	08010d5c 	.word	0x08010d5c
 8006eac:	080101d8 	.word	0x080101d8
 8006eb0:	08010dc4 	.word	0x08010dc4
 8006eb4:	08010d94 	.word	0x08010d94

08006eb8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8006ebc:	f7ff ffbc 	bl	8006e38 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f7ff ff9d 	bl	8006e00 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006ec6:	bd10      	pop	{r4, pc}

08006ec8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006ecc:	460d      	mov	r5, r1
 8006ece:	fab1 f181 	clz	r1, r1
 8006ed2:	0949      	lsrs	r1, r1, #5
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	bf08      	it	eq
 8006ed8:	2101      	moveq	r1, #1
 8006eda:	b941      	cbnz	r1, 8006eee <pbuf_copy+0x26>
 8006edc:	4607      	mov	r7, r0
 8006ede:	8902      	ldrh	r2, [r0, #8]
 8006ee0:	892b      	ldrh	r3, [r5, #8]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d303      	bcc.n	8006eee <pbuf_copy+0x26>
  u16_t offset_to=0, offset_from=0, len;
 8006ee6:	f04f 0800 	mov.w	r8, #0
 8006eea:	4646      	mov	r6, r8
 8006eec:	e03f      	b.n	8006f6e <pbuf_copy+0xa6>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006eee:	4b3f      	ldr	r3, [pc, #252]	; (8006fec <pbuf_copy+0x124>)
 8006ef0:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006ef4:	493e      	ldr	r1, [pc, #248]	; (8006ff0 <pbuf_copy+0x128>)
 8006ef6:	483f      	ldr	r0, [pc, #252]	; (8006ff4 <pbuf_copy+0x12c>)
 8006ef8:	f007 ffc2 	bl	800ee80 <iprintf>
 8006efc:	f06f 000f 	mvn.w	r0, #15
 8006f00:	e071      	b.n	8006fe6 <pbuf_copy+0x11e>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006f02:	1b9b      	subs	r3, r3, r6
 8006f04:	b29c      	uxth	r4, r3
 8006f06:	e03a      	b.n	8006f7e <pbuf_copy+0xb6>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006f08:	4b38      	ldr	r3, [pc, #224]	; (8006fec <pbuf_copy+0x124>)
 8006f0a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8006f0e:	493a      	ldr	r1, [pc, #232]	; (8006ff8 <pbuf_copy+0x130>)
 8006f10:	4838      	ldr	r0, [pc, #224]	; (8006ff4 <pbuf_copy+0x12c>)
 8006f12:	f007 ffb5 	bl	800ee80 <iprintf>
 8006f16:	e041      	b.n	8006f9c <pbuf_copy+0xd4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006f18:	4b34      	ldr	r3, [pc, #208]	; (8006fec <pbuf_copy+0x124>)
 8006f1a:	f240 32ce 	movw	r2, #974	; 0x3ce
 8006f1e:	4937      	ldr	r1, [pc, #220]	; (8006ffc <pbuf_copy+0x134>)
 8006f20:	4834      	ldr	r0, [pc, #208]	; (8006ff4 <pbuf_copy+0x12c>)
 8006f22:	f007 ffad 	bl	800ee80 <iprintf>
 8006f26:	e03c      	b.n	8006fa2 <pbuf_copy+0xda>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 8006f28:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8006f2a:	1c2b      	adds	r3, r5, #0
 8006f2c:	bf18      	it	ne
 8006f2e:	2301      	movne	r3, #1
 8006f30:	2f00      	cmp	r7, #0
 8006f32:	bf18      	it	ne
 8006f34:	2300      	movne	r3, #0
 8006f36:	b90b      	cbnz	r3, 8006f3c <pbuf_copy+0x74>
      offset_to = 0;
 8006f38:	2600      	movs	r6, #0
 8006f3a:	e03b      	b.n	8006fb4 <pbuf_copy+0xec>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8006f3c:	4b2b      	ldr	r3, [pc, #172]	; (8006fec <pbuf_copy+0x124>)
 8006f3e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8006f42:	492f      	ldr	r1, [pc, #188]	; (8007000 <pbuf_copy+0x138>)
 8006f44:	482b      	ldr	r0, [pc, #172]	; (8006ff4 <pbuf_copy+0x12c>)
 8006f46:	f007 ff9b 	bl	800ee80 <iprintf>
 8006f4a:	f06f 000f 	mvn.w	r0, #15
 8006f4e:	e04a      	b.n	8006fe6 <pbuf_copy+0x11e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d033      	beq.n	8006fbe <pbuf_copy+0xf6>
 8006f56:	4b25      	ldr	r3, [pc, #148]	; (8006fec <pbuf_copy+0x124>)
 8006f58:	f240 32de 	movw	r2, #990	; 0x3de
 8006f5c:	4929      	ldr	r1, [pc, #164]	; (8007004 <pbuf_copy+0x13c>)
 8006f5e:	4825      	ldr	r0, [pc, #148]	; (8006ff4 <pbuf_copy+0x12c>)
 8006f60:	f007 ff8e 	bl	800ee80 <iprintf>
 8006f64:	f06f 0005 	mvn.w	r0, #5
 8006f68:	e03d      	b.n	8006fe6 <pbuf_copy+0x11e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006f6a:	2d00      	cmp	r5, #0
 8006f6c:	d03a      	beq.n	8006fe4 <pbuf_copy+0x11c>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006f6e:	897b      	ldrh	r3, [r7, #10]
 8006f70:	1b99      	subs	r1, r3, r6
 8006f72:	896c      	ldrh	r4, [r5, #10]
 8006f74:	eba4 0208 	sub.w	r2, r4, r8
 8006f78:	4291      	cmp	r1, r2
 8006f7a:	dbc2      	blt.n	8006f02 <pbuf_copy+0x3a>
      len = p_from->len - offset_from;
 8006f7c:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	6869      	ldr	r1, [r5, #4]
 8006f82:	4622      	mov	r2, r4
 8006f84:	4441      	add	r1, r8
 8006f86:	4430      	add	r0, r6
 8006f88:	f007 ff67 	bl	800ee5a <memcpy>
    offset_to += len;
 8006f8c:	4426      	add	r6, r4
 8006f8e:	b2b6      	uxth	r6, r6
    offset_from += len;
 8006f90:	4444      	add	r4, r8
 8006f92:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006f96:	897b      	ldrh	r3, [r7, #10]
 8006f98:	42b3      	cmp	r3, r6
 8006f9a:	d3b5      	bcc.n	8006f08 <pbuf_copy+0x40>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006f9c:	896b      	ldrh	r3, [r5, #10]
 8006f9e:	4543      	cmp	r3, r8
 8006fa0:	d3ba      	bcc.n	8006f18 <pbuf_copy+0x50>
    if (offset_from >= p_from->len) {
 8006fa2:	896b      	ldrh	r3, [r5, #10]
 8006fa4:	4543      	cmp	r3, r8
 8006fa6:	d802      	bhi.n	8006fae <pbuf_copy+0xe6>
      p_from = p_from->next;
 8006fa8:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 8006faa:	f04f 0800 	mov.w	r8, #0
    if (offset_to == p_to->len) {
 8006fae:	897b      	ldrh	r3, [r7, #10]
 8006fb0:	42b3      	cmp	r3, r6
 8006fb2:	d0b9      	beq.n	8006f28 <pbuf_copy+0x60>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006fb4:	b11d      	cbz	r5, 8006fbe <pbuf_copy+0xf6>
 8006fb6:	896a      	ldrh	r2, [r5, #10]
 8006fb8:	892b      	ldrh	r3, [r5, #8]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d0c8      	beq.n	8006f50 <pbuf_copy+0x88>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d0d3      	beq.n	8006f6a <pbuf_copy+0xa2>
 8006fc2:	897a      	ldrh	r2, [r7, #10]
 8006fc4:	893b      	ldrh	r3, [r7, #8]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d1cf      	bne.n	8006f6a <pbuf_copy+0xa2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0cc      	beq.n	8006f6a <pbuf_copy+0xa2>
 8006fd0:	4b06      	ldr	r3, [pc, #24]	; (8006fec <pbuf_copy+0x124>)
 8006fd2:	f240 32e3 	movw	r2, #995	; 0x3e3
 8006fd6:	490b      	ldr	r1, [pc, #44]	; (8007004 <pbuf_copy+0x13c>)
 8006fd8:	4806      	ldr	r0, [pc, #24]	; (8006ff4 <pbuf_copy+0x12c>)
 8006fda:	f007 ff51 	bl	800ee80 <iprintf>
 8006fde:	f06f 0005 	mvn.w	r0, #5
 8006fe2:	e000      	b.n	8006fe6 <pbuf_copy+0x11e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006fe4:	2000      	movs	r0, #0
}
 8006fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fea:	bf00      	nop
 8006fec:	08010f0c 	.word	0x08010f0c
 8006ff0:	08010dd4 	.word	0x08010dd4
 8006ff4:	080101d8 	.word	0x080101d8
 8006ff8:	08010e04 	.word	0x08010e04
 8006ffc:	08010e1c 	.word	0x08010e1c
 8007000:	08010e38 	.word	0x08010e38
 8007004:	08010e48 	.word	0x08010e48

08007008 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800700c:	b128      	cbz	r0, 800701a <pbuf_copy_partial+0x12>
 800700e:	460f      	mov	r7, r1
 8007010:	4690      	mov	r8, r2
 8007012:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007014:	b161      	cbz	r1, 8007030 <pbuf_copy_partial+0x28>

  left = 0;
 8007016:	2600      	movs	r6, #0
 8007018:	e027      	b.n	800706a <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800701a:	4b1c      	ldr	r3, [pc, #112]	; (800708c <pbuf_copy_partial+0x84>)
 800701c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007020:	491b      	ldr	r1, [pc, #108]	; (8007090 <pbuf_copy_partial+0x88>)
 8007022:	481c      	ldr	r0, [pc, #112]	; (8007094 <pbuf_copy_partial+0x8c>)
 8007024:	f007 ff2c 	bl	800ee80 <iprintf>
 8007028:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800702a:	4630      	mov	r0, r6
 800702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007030:	4b16      	ldr	r3, [pc, #88]	; (800708c <pbuf_copy_partial+0x84>)
 8007032:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007036:	4918      	ldr	r1, [pc, #96]	; (8007098 <pbuf_copy_partial+0x90>)
 8007038:	4816      	ldr	r0, [pc, #88]	; (8007094 <pbuf_copy_partial+0x8c>)
 800703a:	f007 ff21 	bl	800ee80 <iprintf>
 800703e:	2600      	movs	r6, #0
 8007040:	e7f3      	b.n	800702a <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 8007042:	896a      	ldrh	r2, [r5, #10]
 8007044:	1ad2      	subs	r2, r2, r3
 8007046:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 8007048:	45a0      	cmp	r8, r4
 800704a:	d200      	bcs.n	800704e <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 800704c:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800704e:	6869      	ldr	r1, [r5, #4]
 8007050:	4622      	mov	r2, r4
 8007052:	4419      	add	r1, r3
 8007054:	19b8      	adds	r0, r7, r6
 8007056:	f007 ff00 	bl	800ee5a <memcpy>
      copied_total += buf_copy_len;
 800705a:	4426      	add	r6, r4
 800705c:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 800705e:	eba8 0404 	sub.w	r4, r8, r4
 8007062:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8007066:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007068:	682d      	ldr	r5, [r5, #0]
 800706a:	1c2a      	adds	r2, r5, #0
 800706c:	bf18      	it	ne
 800706e:	2201      	movne	r2, #1
 8007070:	f1b8 0f00 	cmp.w	r8, #0
 8007074:	bf08      	it	eq
 8007076:	2200      	moveq	r2, #0
 8007078:	2a00      	cmp	r2, #0
 800707a:	d0d6      	beq.n	800702a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0e0      	beq.n	8007042 <pbuf_copy_partial+0x3a>
 8007080:	8969      	ldrh	r1, [r5, #10]
 8007082:	4299      	cmp	r1, r3
 8007084:	d8dd      	bhi.n	8007042 <pbuf_copy_partial+0x3a>
      offset -= p->len;
 8007086:	1a5b      	subs	r3, r3, r1
 8007088:	b29b      	uxth	r3, r3
 800708a:	e7ed      	b.n	8007068 <pbuf_copy_partial+0x60>
 800708c:	08010f0c 	.word	0x08010f0c
 8007090:	08010e74 	.word	0x08010e74
 8007094:	080101d8 	.word	0x080101d8
 8007098:	08010e94 	.word	0x08010e94

0800709c <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800709c:	e000      	b.n	80070a0 <tcp_remove_listener+0x4>
 800709e:	68c0      	ldr	r0, [r0, #12]
 80070a0:	b128      	cbz	r0, 80070ae <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 80070a2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80070a4:	428b      	cmp	r3, r1
 80070a6:	d1fa      	bne.n	800709e <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	6783      	str	r3, [r0, #120]	; 0x78
 80070ac:	e7f7      	b.n	800709e <tcp_remove_listener+0x2>
      }
   }
}
 80070ae:	4770      	bx	lr

080070b0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80070b0:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 80070b2:	2400      	movs	r4, #0
 80070b4:	e009      	b.n	80070ca <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80070b6:	4b15      	ldr	r3, [pc, #84]	; (800710c <tcp_new_port+0x5c>)
 80070b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e00c      	b.n	80070da <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80070c0:	3401      	adds	r4, #1
 80070c2:	b2a4      	uxth	r4, r4
 80070c4:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80070c8:	d21e      	bcs.n	8007108 <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80070ca:	4a10      	ldr	r2, [pc, #64]	; (800710c <tcp_new_port+0x5c>)
 80070cc:	8813      	ldrh	r3, [r2, #0]
 80070ce:	1c59      	adds	r1, r3, #1
 80070d0:	8011      	strh	r1, [r2, #0]
 80070d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d0ed      	beq.n	80070b6 <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80070da:	2000      	movs	r0, #0
 80070dc:	2803      	cmp	r0, #3
 80070de:	d80e      	bhi.n	80070fe <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80070e0:	4b0b      	ldr	r3, [pc, #44]	; (8007110 <tcp_new_port+0x60>)
 80070e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	b133      	cbz	r3, 80070f8 <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 80070ea:	8ad9      	ldrh	r1, [r3, #22]
 80070ec:	4a07      	ldr	r2, [pc, #28]	; (800710c <tcp_new_port+0x5c>)
 80070ee:	8812      	ldrh	r2, [r2, #0]
 80070f0:	4291      	cmp	r1, r2
 80070f2:	d0e5      	beq.n	80070c0 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	e7f7      	b.n	80070e8 <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80070f8:	3001      	adds	r0, #1
 80070fa:	b2c0      	uxtb	r0, r0
 80070fc:	e7ee      	b.n	80070dc <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80070fe:	4b03      	ldr	r3, [pc, #12]	; (800710c <tcp_new_port+0x5c>)
 8007100:	8818      	ldrh	r0, [r3, #0]
}
 8007102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007106:	4770      	bx	lr
          return 0;
 8007108:	2000      	movs	r0, #0
 800710a:	e7fa      	b.n	8007102 <tcp_new_port+0x52>
 800710c:	2000000c 	.word	0x2000000c
 8007110:	08011134 	.word	0x08011134

08007114 <tcp_listen_closed>:
{
 8007114:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007116:	4605      	mov	r5, r0
 8007118:	b120      	cbz	r0, 8007124 <tcp_listen_closed+0x10>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800711a:	7d2b      	ldrb	r3, [r5, #20]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d108      	bne.n	8007132 <tcp_listen_closed+0x1e>
{
 8007120:	2401      	movs	r4, #1
 8007122:	e015      	b.n	8007150 <tcp_listen_closed+0x3c>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007124:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <tcp_listen_closed+0x44>)
 8007126:	22c0      	movs	r2, #192	; 0xc0
 8007128:	490c      	ldr	r1, [pc, #48]	; (800715c <tcp_listen_closed+0x48>)
 800712a:	480d      	ldr	r0, [pc, #52]	; (8007160 <tcp_listen_closed+0x4c>)
 800712c:	f007 fea8 	bl	800ee80 <iprintf>
 8007130:	e7f3      	b.n	800711a <tcp_listen_closed+0x6>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007132:	4b09      	ldr	r3, [pc, #36]	; (8007158 <tcp_listen_closed+0x44>)
 8007134:	22c1      	movs	r2, #193	; 0xc1
 8007136:	490b      	ldr	r1, [pc, #44]	; (8007164 <tcp_listen_closed+0x50>)
 8007138:	4809      	ldr	r0, [pc, #36]	; (8007160 <tcp_listen_closed+0x4c>)
 800713a:	f007 fea1 	bl	800ee80 <iprintf>
 800713e:	e7ef      	b.n	8007120 <tcp_listen_closed+0xc>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007140:	4b09      	ldr	r3, [pc, #36]	; (8007168 <tcp_listen_closed+0x54>)
 8007142:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007146:	4629      	mov	r1, r5
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	f7ff ffa7 	bl	800709c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800714e:	3401      	adds	r4, #1
 8007150:	2c03      	cmp	r4, #3
 8007152:	d9f5      	bls.n	8007140 <tcp_listen_closed+0x2c>
}
 8007154:	bd38      	pop	{r3, r4, r5, pc}
 8007156:	bf00      	nop
 8007158:	080110bc 	.word	0x080110bc
 800715c:	080110ec 	.word	0x080110ec
 8007160:	080101d8 	.word	0x080101d8
 8007164:	080110f8 	.word	0x080110f8
 8007168:	08011134 	.word	0x08011134

0800716c <tcp_close_shutdown_fin>:
{
 800716c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800716e:	4604      	mov	r4, r0
 8007170:	b140      	cbz	r0, 8007184 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8007172:	7d23      	ldrb	r3, [r4, #20]
 8007174:	2b04      	cmp	r3, #4
 8007176:	d01a      	beq.n	80071ae <tcp_close_shutdown_fin+0x42>
 8007178:	2b07      	cmp	r3, #7
 800717a:	d021      	beq.n	80071c0 <tcp_close_shutdown_fin+0x54>
 800717c:	2b03      	cmp	r3, #3
 800717e:	d009      	beq.n	8007194 <tcp_close_shutdown_fin+0x28>
    return ERR_OK;
 8007180:	2500      	movs	r5, #0
 8007182:	e012      	b.n	80071aa <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007184:	4b18      	ldr	r3, [pc, #96]	; (80071e8 <tcp_close_shutdown_fin+0x7c>)
 8007186:	f240 124d 	movw	r2, #333	; 0x14d
 800718a:	4918      	ldr	r1, [pc, #96]	; (80071ec <tcp_close_shutdown_fin+0x80>)
 800718c:	4818      	ldr	r0, [pc, #96]	; (80071f0 <tcp_close_shutdown_fin+0x84>)
 800718e:	f007 fe77 	bl	800ee80 <iprintf>
 8007192:	e7ee      	b.n	8007172 <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 8007194:	4620      	mov	r0, r4
 8007196:	f003 f85b 	bl	800a250 <tcp_send_fin>
    if (err == ERR_OK) {
 800719a:	4605      	mov	r5, r0
 800719c:	b908      	cbnz	r0, 80071a2 <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 800719e:	2305      	movs	r3, #5
 80071a0:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 80071a2:	b1b5      	cbz	r5, 80071d2 <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 80071a4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80071a8:	d017      	beq.n	80071da <tcp_close_shutdown_fin+0x6e>
}
 80071aa:	4628      	mov	r0, r5
 80071ac:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 80071ae:	4620      	mov	r0, r4
 80071b0:	f003 f84e 	bl	800a250 <tcp_send_fin>
    if (err == ERR_OK) {
 80071b4:	4605      	mov	r5, r0
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d1f3      	bne.n	80071a2 <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 80071ba:	2305      	movs	r3, #5
 80071bc:	7523      	strb	r3, [r4, #20]
 80071be:	e7f0      	b.n	80071a2 <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 80071c0:	4620      	mov	r0, r4
 80071c2:	f003 f845 	bl	800a250 <tcp_send_fin>
    if (err == ERR_OK) {
 80071c6:	4605      	mov	r5, r0
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d1ea      	bne.n	80071a2 <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 80071cc:	2309      	movs	r3, #9
 80071ce:	7523      	strb	r3, [r4, #20]
 80071d0:	e7e7      	b.n	80071a2 <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 80071d2:	4620      	mov	r0, r4
 80071d4:	f003 f898 	bl	800a308 <tcp_output>
 80071d8:	e7e7      	b.n	80071aa <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 80071da:	7ea3      	ldrb	r3, [r4, #26]
 80071dc:	f043 0308 	orr.w	r3, r3, #8
 80071e0:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 80071e2:	2500      	movs	r5, #0
 80071e4:	e7e1      	b.n	80071aa <tcp_close_shutdown_fin+0x3e>
 80071e6:	bf00      	nop
 80071e8:	080110bc 	.word	0x080110bc
 80071ec:	080110ec 	.word	0x080110ec
 80071f0:	080101d8 	.word	0x080101d8

080071f4 <tcp_init>:
}
 80071f4:	4770      	bx	lr
	...

080071f8 <tcp_bind>:
{
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4605      	mov	r5, r0
  if (ipaddr == NULL) {
 80071fc:	460c      	mov	r4, r1
 80071fe:	b191      	cbz	r1, 8007226 <tcp_bind+0x2e>
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8007200:	fab4 f384 	clz	r3, r4
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	2d00      	cmp	r5, #0
 8007208:	bf08      	it	eq
 800720a:	2301      	moveq	r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d139      	bne.n	8007284 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007210:	7d2b      	ldrb	r3, [r5, #20]
 8007212:	b953      	cbnz	r3, 800722a <tcp_bind+0x32>
  if (port == 0) {
 8007214:	b19a      	cbz	r2, 800723e <tcp_bind+0x46>
    for (i = 0; i < max_pcb_list; i++) {
 8007216:	2600      	movs	r6, #0
 8007218:	2e03      	cmp	r6, #3
 800721a:	dc14      	bgt.n	8007246 <tcp_bind+0x4e>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800721c:	4b22      	ldr	r3, [pc, #136]	; (80072a8 <tcp_bind+0xb0>)
 800721e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	e01d      	b.n	8007262 <tcp_bind+0x6a>
    ipaddr = IP4_ADDR_ANY;
 8007226:	4c21      	ldr	r4, [pc, #132]	; (80072ac <tcp_bind+0xb4>)
 8007228:	e7ea      	b.n	8007200 <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800722a:	4b21      	ldr	r3, [pc, #132]	; (80072b0 <tcp_bind+0xb8>)
 800722c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8007230:	4920      	ldr	r1, [pc, #128]	; (80072b4 <tcp_bind+0xbc>)
 8007232:	4821      	ldr	r0, [pc, #132]	; (80072b8 <tcp_bind+0xc0>)
 8007234:	f007 fe24 	bl	800ee80 <iprintf>
 8007238:	f06f 0005 	mvn.w	r0, #5
 800723c:	e00f      	b.n	800725e <tcp_bind+0x66>
    port = tcp_new_port();
 800723e:	f7ff ff37 	bl	80070b0 <tcp_new_port>
    if (port == 0) {
 8007242:	4602      	mov	r2, r0
 8007244:	b308      	cbz	r0, 800728a <tcp_bind+0x92>
  if (!ip_addr_isany(ipaddr)) {
 8007246:	b114      	cbz	r4, 800724e <tcp_bind+0x56>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	b103      	cbz	r3, 800724e <tcp_bind+0x56>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800724c:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 800724e:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007250:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <tcp_bind+0xc4>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	60ea      	str	r2, [r5, #12]
 8007256:	601d      	str	r5, [r3, #0]
 8007258:	f003 fb94 	bl	800a984 <tcp_timer_needed>
  return ERR_OK;
 800725c:	2000      	movs	r0, #0
}
 800725e:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	b16b      	cbz	r3, 8007280 <tcp_bind+0x88>
        if (cpcb->local_port == port) {
 8007264:	8ad9      	ldrh	r1, [r3, #22]
 8007266:	4291      	cmp	r1, r2
 8007268:	d1fa      	bne.n	8007260 <tcp_bind+0x68>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800726a:	b18b      	cbz	r3, 8007290 <tcp_bind+0x98>
                (ip_addr_isany(&cpcb->local_ip) ||
 800726c:	6819      	ldr	r1, [r3, #0]
 800726e:	b191      	cbz	r1, 8007296 <tcp_bind+0x9e>
 8007270:	b1a4      	cbz	r4, 800729c <tcp_bind+0xa4>
                ip_addr_isany(ipaddr) ||
 8007272:	6820      	ldr	r0, [r4, #0]
 8007274:	b1a8      	cbz	r0, 80072a2 <tcp_bind+0xaa>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007276:	4281      	cmp	r1, r0
 8007278:	d1f2      	bne.n	8007260 <tcp_bind+0x68>
              return ERR_USE;
 800727a:	f06f 0007 	mvn.w	r0, #7
 800727e:	e7ee      	b.n	800725e <tcp_bind+0x66>
    for (i = 0; i < max_pcb_list; i++) {
 8007280:	3601      	adds	r6, #1
 8007282:	e7c9      	b.n	8007218 <tcp_bind+0x20>
    return ERR_VAL;
 8007284:	f06f 0005 	mvn.w	r0, #5
 8007288:	e7e9      	b.n	800725e <tcp_bind+0x66>
      return ERR_BUF;
 800728a:	f06f 0001 	mvn.w	r0, #1
 800728e:	e7e6      	b.n	800725e <tcp_bind+0x66>
              return ERR_USE;
 8007290:	f06f 0007 	mvn.w	r0, #7
 8007294:	e7e3      	b.n	800725e <tcp_bind+0x66>
 8007296:	f06f 0007 	mvn.w	r0, #7
 800729a:	e7e0      	b.n	800725e <tcp_bind+0x66>
 800729c:	f06f 0007 	mvn.w	r0, #7
 80072a0:	e7dd      	b.n	800725e <tcp_bind+0x66>
 80072a2:	f06f 0007 	mvn.w	r0, #7
 80072a6:	e7da      	b.n	800725e <tcp_bind+0x66>
 80072a8:	08011134 	.word	0x08011134
 80072ac:	08012444 	.word	0x08012444
 80072b0:	080110bc 	.word	0x080110bc
 80072b4:	08011040 	.word	0x08011040
 80072b8:	080101d8 	.word	0x080101d8
 80072bc:	200081fc 	.word	0x200081fc

080072c0 <tcp_listen_with_backlog_and_err>:
{
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80072c4:	7d03      	ldrb	r3, [r0, #20]
 80072c6:	b94b      	cbnz	r3, 80072dc <tcp_listen_with_backlog_and_err+0x1c>
 80072c8:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d111      	bne.n	80072f2 <tcp_listen_with_backlog_and_err+0x32>
    lpcb = (struct tcp_pcb_listen*)pcb;
 80072ce:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 80072d0:	f06f 0308 	mvn.w	r3, #8
  if (err != NULL) {
 80072d4:	b106      	cbz	r6, 80072d8 <tcp_listen_with_backlog_and_err+0x18>
    *err = res;
 80072d6:	7033      	strb	r3, [r6, #0]
}
 80072d8:	4628      	mov	r0, r5
 80072da:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80072dc:	4b22      	ldr	r3, [pc, #136]	; (8007368 <tcp_listen_with_backlog_and_err+0xa8>)
 80072de:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80072e2:	4922      	ldr	r1, [pc, #136]	; (800736c <tcp_listen_with_backlog_and_err+0xac>)
 80072e4:	4822      	ldr	r0, [pc, #136]	; (8007370 <tcp_listen_with_backlog_and_err+0xb0>)
 80072e6:	f007 fdcb 	bl	800ee80 <iprintf>
 80072ea:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 80072ee:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80072f0:	e7f0      	b.n	80072d4 <tcp_listen_with_backlog_and_err+0x14>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80072f2:	2002      	movs	r0, #2
 80072f4:	f7ff f9bc 	bl	8006670 <memp_malloc>
  if (lpcb == NULL) {
 80072f8:	4605      	mov	r5, r0
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d031      	beq.n	8007362 <tcp_listen_with_backlog_and_err+0xa2>
  lpcb->callback_arg = pcb->callback_arg;
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8007302:	8ae3      	ldrh	r3, [r4, #22]
 8007304:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8007306:	2301      	movs	r3, #1
 8007308:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 800730a:	7d63      	ldrb	r3, [r4, #21]
 800730c:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800730e:	7a23      	ldrb	r3, [r4, #8]
 8007310:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8007312:	7aa3      	ldrb	r3, [r4, #10]
 8007314:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 8007316:	7a63      	ldrb	r3, [r4, #9]
 8007318:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 800731e:	8ae3      	ldrh	r3, [r4, #22]
 8007320:	b18b      	cbz	r3, 8007346 <tcp_listen_with_backlog_and_err+0x86>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007322:	4b14      	ldr	r3, [pc, #80]	; (8007374 <tcp_listen_with_backlog_and_err+0xb4>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	42a3      	cmp	r3, r4
 8007328:	d005      	beq.n	8007336 <tcp_listen_with_backlog_and_err+0x76>
 800732a:	b153      	cbz	r3, 8007342 <tcp_listen_with_backlog_and_err+0x82>
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	42a2      	cmp	r2, r4
 8007330:	d005      	beq.n	800733e <tcp_listen_with_backlog_and_err+0x7e>
 8007332:	4613      	mov	r3, r2
 8007334:	e7f9      	b.n	800732a <tcp_listen_with_backlog_and_err+0x6a>
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <tcp_listen_with_backlog_and_err+0xb4>)
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e001      	b.n	8007342 <tcp_listen_with_backlog_and_err+0x82>
 800733e:	68e2      	ldr	r2, [r4, #12]
 8007340:	60da      	str	r2, [r3, #12]
 8007342:	2300      	movs	r3, #0
 8007344:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8007346:	4621      	mov	r1, r4
 8007348:	2001      	movs	r0, #1
 800734a:	f7ff f9ab 	bl	80066a4 <memp_free>
  lpcb->accept = tcp_accept_null;
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <tcp_listen_with_backlog_and_err+0xb8>)
 8007350:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <tcp_listen_with_backlog_and_err+0xbc>)
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	60ea      	str	r2, [r5, #12]
 8007358:	601d      	str	r5, [r3, #0]
 800735a:	f003 fb13 	bl	800a984 <tcp_timer_needed>
  res = ERR_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	e7b8      	b.n	80072d4 <tcp_listen_with_backlog_and_err+0x14>
    res = ERR_MEM;
 8007362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007366:	e7b5      	b.n	80072d4 <tcp_listen_with_backlog_and_err+0x14>
 8007368:	080110bc 	.word	0x080110bc
 800736c:	08011110 	.word	0x08011110
 8007370:	080101d8 	.word	0x080101d8
 8007374:	200081fc 	.word	0x200081fc
 8007378:	08007e8f 	.word	0x08007e8f
 800737c:	200081f8 	.word	0x200081f8

08007380 <tcp_update_rcv_ann_wnd>:
{
 8007380:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007382:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007384:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8007386:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007388:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800738a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800738c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007390:	bf94      	ite	ls
 8007392:	18cb      	addls	r3, r1, r3
 8007394:	f501 6386 	addhi.w	r3, r1, #1072	; 0x430
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	db02      	blt.n	80073a4 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800739e:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80073a0:	1a50      	subs	r0, r2, r1
}
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80073a4:	1a6b      	subs	r3, r5, r1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	dd03      	ble.n	80073b2 <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 80073aa:	2200      	movs	r2, #0
 80073ac:	8542      	strh	r2, [r0, #42]	; 0x2a
    return 0;
 80073ae:	4610      	mov	r0, r2
 80073b0:	e7f7      	b.n	80073a2 <tcp_update_rcv_ann_wnd+0x22>
 80073b2:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80073b4:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80073b6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80073ba:	d202      	bcs.n	80073c2 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80073bc:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80073be:	2000      	movs	r0, #0
 80073c0:	e7ef      	b.n	80073a2 <tcp_update_rcv_ann_wnd+0x22>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80073c2:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <tcp_update_rcv_ann_wnd+0x54>)
 80073c4:	f44f 7242 	mov.w	r2, #776	; 0x308
 80073c8:	4903      	ldr	r1, [pc, #12]	; (80073d8 <tcp_update_rcv_ann_wnd+0x58>)
 80073ca:	4804      	ldr	r0, [pc, #16]	; (80073dc <tcp_update_rcv_ann_wnd+0x5c>)
 80073cc:	f007 fd58 	bl	800ee80 <iprintf>
 80073d0:	e7f4      	b.n	80073bc <tcp_update_rcv_ann_wnd+0x3c>
 80073d2:	bf00      	nop
 80073d4:	080110bc 	.word	0x080110bc
 80073d8:	080113b4 	.word	0x080113b4
 80073dc:	080101d8 	.word	0x080101d8

080073e0 <tcp_recved>:
{
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4605      	mov	r5, r0
 80073e4:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80073e6:	7d03      	ldrb	r3, [r0, #20]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d010      	beq.n	800740e <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 80073ec:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 80073ee:	4421      	add	r1, r4
 80073f0:	b289      	uxth	r1, r1
 80073f2:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80073f4:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 80073f8:	d911      	bls.n	800741e <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80073fa:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80073fe:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007400:	4628      	mov	r0, r5
 8007402:	f7ff ffbd 	bl	8007380 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007406:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800740a:	da1b      	bge.n	8007444 <tcp_recved+0x64>
}
 800740c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800740e:	4b11      	ldr	r3, [pc, #68]	; (8007454 <tcp_recved+0x74>)
 8007410:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007414:	4910      	ldr	r1, [pc, #64]	; (8007458 <tcp_recved+0x78>)
 8007416:	4811      	ldr	r0, [pc, #68]	; (800745c <tcp_recved+0x7c>)
 8007418:	f007 fd32 	bl	800ee80 <iprintf>
 800741c:	e7e6      	b.n	80073ec <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 800741e:	2900      	cmp	r1, #0
 8007420:	d1ee      	bne.n	8007400 <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8007422:	7d2b      	ldrb	r3, [r5, #20]
 8007424:	2b09      	cmp	r3, #9
 8007426:	bf18      	it	ne
 8007428:	2b07      	cmpne	r3, #7
 800742a:	d103      	bne.n	8007434 <tcp_recved+0x54>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800742c:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8007430:	852b      	strh	r3, [r5, #40]	; 0x28
 8007432:	e7e5      	b.n	8007400 <tcp_recved+0x20>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8007434:	4b07      	ldr	r3, [pc, #28]	; (8007454 <tcp_recved+0x74>)
 8007436:	f240 322d 	movw	r2, #813	; 0x32d
 800743a:	4909      	ldr	r1, [pc, #36]	; (8007460 <tcp_recved+0x80>)
 800743c:	4807      	ldr	r0, [pc, #28]	; (800745c <tcp_recved+0x7c>)
 800743e:	f007 fd1f 	bl	800ee80 <iprintf>
 8007442:	e7dd      	b.n	8007400 <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8007444:	7eab      	ldrb	r3, [r5, #26]
 8007446:	f043 0302 	orr.w	r3, r3, #2
 800744a:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 800744c:	4628      	mov	r0, r5
 800744e:	f002 ff5b 	bl	800a308 <tcp_output>
}
 8007452:	e7db      	b.n	800740c <tcp_recved+0x2c>
 8007454:	080110bc 	.word	0x080110bc
 8007458:	080111e0 	.word	0x080111e0
 800745c:	080101d8 	.word	0x080101d8
 8007460:	08011208 	.word	0x08011208

08007464 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8007464:	b150      	cbz	r0, 800747c <tcp_seg_free+0x18>
{
 8007466:	b510      	push	{r4, lr}
 8007468:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800746a:	6840      	ldr	r0, [r0, #4]
 800746c:	b108      	cbz	r0, 8007472 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800746e:	f7ff faf3 	bl	8006a58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007472:	4621      	mov	r1, r4
 8007474:	2003      	movs	r0, #3
 8007476:	f7ff f915 	bl	80066a4 <memp_free>
  }
}
 800747a:	bd10      	pop	{r4, pc}
 800747c:	4770      	bx	lr

0800747e <tcp_segs_free>:
  while (seg != NULL) {
 800747e:	b138      	cbz	r0, 8007490 <tcp_segs_free+0x12>
{
 8007480:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8007482:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8007484:	f7ff ffee 	bl	8007464 <tcp_seg_free>
    seg = next;
 8007488:	4620      	mov	r0, r4
  while (seg != NULL) {
 800748a:	2c00      	cmp	r4, #0
 800748c:	d1f9      	bne.n	8007482 <tcp_segs_free+0x4>
}
 800748e:	bd10      	pop	{r4, pc}
 8007490:	4770      	bx	lr

08007492 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007492:	b538      	push	{r3, r4, r5, lr}
 8007494:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007496:	2003      	movs	r0, #3
 8007498:	f7ff f8ea 	bl	8006670 <memp_malloc>
  if (cseg == NULL) {
 800749c:	4604      	mov	r4, r0
 800749e:	b150      	cbz	r0, 80074b6 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80074a0:	6828      	ldr	r0, [r5, #0]
 80074a2:	6869      	ldr	r1, [r5, #4]
 80074a4:	68aa      	ldr	r2, [r5, #8]
 80074a6:	68eb      	ldr	r3, [r5, #12]
 80074a8:	6020      	str	r0, [r4, #0]
 80074aa:	6061      	str	r1, [r4, #4]
 80074ac:	60a2      	str	r2, [r4, #8]
 80074ae:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 80074b0:	6860      	ldr	r0, [r4, #4]
 80074b2:	f7ff fca5 	bl	8006e00 <pbuf_ref>
  return cseg;
}
 80074b6:	4620      	mov	r0, r4
 80074b8:	bd38      	pop	{r3, r4, r5, pc}

080074ba <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80074ba:	b100      	cbz	r0, 80074be <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80074bc:	6101      	str	r1, [r0, #16]
  }
}
 80074be:	4770      	bx	lr

080074c0 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 80074c0:	b180      	cbz	r0, 80074e4 <tcp_recv+0x24>
{
 80074c2:	b538      	push	{r3, r4, r5, lr}
 80074c4:	4604      	mov	r4, r0
 80074c6:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80074c8:	7d03      	ldrb	r3, [r0, #20]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d002      	beq.n	80074d4 <tcp_recv+0x14>
    pcb->recv = recv;
 80074ce:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80074d4:	4b04      	ldr	r3, [pc, #16]	; (80074e8 <tcp_recv+0x28>)
 80074d6:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80074da:	4904      	ldr	r1, [pc, #16]	; (80074ec <tcp_recv+0x2c>)
 80074dc:	4804      	ldr	r0, [pc, #16]	; (80074f0 <tcp_recv+0x30>)
 80074de:	f007 fccf 	bl	800ee80 <iprintf>
 80074e2:	e7f4      	b.n	80074ce <tcp_recv+0xe>
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	080110bc 	.word	0x080110bc
 80074ec:	080111b8 	.word	0x080111b8
 80074f0:	080101d8 	.word	0x080101d8

080074f4 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 80074f4:	b178      	cbz	r0, 8007516 <tcp_sent+0x22>
{
 80074f6:	b538      	push	{r3, r4, r5, lr}
 80074f8:	4604      	mov	r4, r0
 80074fa:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80074fc:	7d03      	ldrb	r3, [r0, #20]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d001      	beq.n	8007506 <tcp_sent+0x12>
    pcb->sent = sent;
 8007502:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 8007504:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007506:	4b04      	ldr	r3, [pc, #16]	; (8007518 <tcp_sent+0x24>)
 8007508:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800750c:	4903      	ldr	r1, [pc, #12]	; (800751c <tcp_sent+0x28>)
 800750e:	4804      	ldr	r0, [pc, #16]	; (8007520 <tcp_sent+0x2c>)
 8007510:	f007 fcb6 	bl	800ee80 <iprintf>
 8007514:	e7f5      	b.n	8007502 <tcp_sent+0xe>
 8007516:	4770      	bx	lr
 8007518:	080110bc 	.word	0x080110bc
 800751c:	0801122c 	.word	0x0801122c
 8007520:	080101d8 	.word	0x080101d8

08007524 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 8007524:	b180      	cbz	r0, 8007548 <tcp_err+0x24>
{
 8007526:	b538      	push	{r3, r4, r5, lr}
 8007528:	4604      	mov	r4, r0
 800752a:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800752c:	7d03      	ldrb	r3, [r0, #20]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d002      	beq.n	8007538 <tcp_err+0x14>
    pcb->errf = err;
 8007532:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 8007536:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007538:	4b04      	ldr	r3, [pc, #16]	; (800754c <tcp_err+0x28>)
 800753a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800753e:	4904      	ldr	r1, [pc, #16]	; (8007550 <tcp_err+0x2c>)
 8007540:	4804      	ldr	r0, [pc, #16]	; (8007554 <tcp_err+0x30>)
 8007542:	f007 fc9d 	bl	800ee80 <iprintf>
 8007546:	e7f4      	b.n	8007532 <tcp_err+0xe>
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	080110bc 	.word	0x080110bc
 8007550:	08011084 	.word	0x08011084
 8007554:	080101d8 	.word	0x080101d8

08007558 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007558:	b110      	cbz	r0, 8007560 <tcp_accept+0x8>
 800755a:	7d02      	ldrb	r2, [r0, #20]
 800755c:	2a01      	cmp	r2, #1
 800755e:	d000      	beq.n	8007562 <tcp_accept+0xa>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
  }
}
 8007560:	4770      	bx	lr
    lpcb->accept = accept;
 8007562:	6181      	str	r1, [r0, #24]
}
 8007564:	e7fc      	b.n	8007560 <tcp_accept+0x8>
	...

08007568 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4604      	mov	r4, r0
 800756c:	460e      	mov	r6, r1
 800756e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007570:	7d03      	ldrb	r3, [r0, #20]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d003      	beq.n	800757e <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007576:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800757a:	7725      	strb	r5, [r4, #28]
}
 800757c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800757e:	4b04      	ldr	r3, [pc, #16]	; (8007590 <tcp_poll+0x28>)
 8007580:	f240 7203 	movw	r2, #1795	; 0x703
 8007584:	4903      	ldr	r1, [pc, #12]	; (8007594 <tcp_poll+0x2c>)
 8007586:	4804      	ldr	r0, [pc, #16]	; (8007598 <tcp_poll+0x30>)
 8007588:	f007 fc7a 	bl	800ee80 <iprintf>
 800758c:	e7f3      	b.n	8007576 <tcp_poll+0xe>
 800758e:	bf00      	nop
 8007590:	080110bc 	.word	0x080110bc
 8007594:	08011198 	.word	0x08011198
 8007598:	080101d8 	.word	0x080101d8

0800759c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800759c:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 800759e:	7d02      	ldrb	r2, [r0, #20]
 80075a0:	f1b2 030a 	subs.w	r3, r2, #10
 80075a4:	bf18      	it	ne
 80075a6:	2301      	movne	r3, #1
 80075a8:	2a00      	cmp	r2, #0
 80075aa:	bf08      	it	eq
 80075ac:	2300      	moveq	r3, #0
 80075ae:	b1d3      	cbz	r3, 80075e6 <tcp_pcb_purge+0x4a>
     pcb->state != TIME_WAIT &&
 80075b0:	2a01      	cmp	r2, #1
 80075b2:	d018      	beq.n	80075e6 <tcp_pcb_purge+0x4a>
 80075b4:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80075b6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80075b8:	b118      	cbz	r0, 80075c2 <tcp_pcb_purge+0x26>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80075ba:	f7ff fa4d 	bl	8006a58 <pbuf_free>
      pcb->refused_data = NULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80075c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80075c4:	f7ff ff5b 	bl	800747e <tcp_segs_free>
    pcb->ooseq = NULL;
 80075c8:	2500      	movs	r5, #0
 80075ca:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80075cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075d0:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80075d2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80075d4:	f7ff ff53 	bl	800747e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80075d8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80075da:	f7ff ff50 	bl	800747e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80075de:	66a5      	str	r5, [r4, #104]	; 0x68
 80075e0:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80075e2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80075e6:	bd38      	pop	{r3, r4, r5, pc}

080075e8 <tcp_slowtmr>:
{
 80075e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ec:	b082      	sub	sp, #8
  ++tcp_ticks;
 80075ee:	4aac      	ldr	r2, [pc, #688]	; (80078a0 <tcp_slowtmr+0x2b8>)
 80075f0:	6813      	ldr	r3, [r2, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80075f6:	4aab      	ldr	r2, [pc, #684]	; (80078a4 <tcp_slowtmr+0x2bc>)
 80075f8:	7813      	ldrb	r3, [r2, #0]
 80075fa:	3301      	adds	r3, #1
 80075fc:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80075fe:	4baa      	ldr	r3, [pc, #680]	; (80078a8 <tcp_slowtmr+0x2c0>)
 8007600:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8007602:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8007604:	e16c      	b.n	80078e0 <tcp_slowtmr+0x2f8>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007606:	4ba9      	ldr	r3, [pc, #676]	; (80078ac <tcp_slowtmr+0x2c4>)
 8007608:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800760c:	49a8      	ldr	r1, [pc, #672]	; (80078b0 <tcp_slowtmr+0x2c8>)
 800760e:	48a9      	ldr	r0, [pc, #676]	; (80078b4 <tcp_slowtmr+0x2cc>)
 8007610:	f007 fc36 	bl	800ee80 <iprintf>
 8007614:	e169      	b.n	80078ea <tcp_slowtmr+0x302>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007616:	4ba5      	ldr	r3, [pc, #660]	; (80078ac <tcp_slowtmr+0x2c4>)
 8007618:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800761c:	49a6      	ldr	r1, [pc, #664]	; (80078b8 <tcp_slowtmr+0x2d0>)
 800761e:	48a5      	ldr	r0, [pc, #660]	; (80078b4 <tcp_slowtmr+0x2cc>)
 8007620:	f007 fc2e 	bl	800ee80 <iprintf>
 8007624:	e165      	b.n	80078f2 <tcp_slowtmr+0x30a>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007626:	4ba1      	ldr	r3, [pc, #644]	; (80078ac <tcp_slowtmr+0x2c4>)
 8007628:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800762c:	49a3      	ldr	r1, [pc, #652]	; (80078bc <tcp_slowtmr+0x2d4>)
 800762e:	48a1      	ldr	r0, [pc, #644]	; (80078b4 <tcp_slowtmr+0x2cc>)
 8007630:	f007 fc26 	bl	800ee80 <iprintf>
 8007634:	e161      	b.n	80078fa <tcp_slowtmr+0x312>
      pcb = pcb->next;
 8007636:	68e4      	ldr	r4, [r4, #12]
      continue;
 8007638:	e152      	b.n	80078e0 <tcp_slowtmr+0x2f8>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800763a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800763e:	2a05      	cmp	r2, #5
 8007640:	f240 8166 	bls.w	8007910 <tcp_slowtmr+0x328>
      ++pcb_remove;
 8007644:	2501      	movs	r5, #1
 8007646:	e048      	b.n	80076da <tcp_slowtmr+0xf2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8007648:	4620      	mov	r0, r4
 800764a:	f003 f88f 	bl	800a76c <tcp_zero_window_probe>
 800764e:	2800      	cmp	r0, #0
 8007650:	d160      	bne.n	8007714 <tcp_slowtmr+0x12c>
            pcb->persist_cnt = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007658:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800765c:	2b06      	cmp	r3, #6
 800765e:	d85b      	bhi.n	8007718 <tcp_slowtmr+0x130>
              pcb->persist_backoff++;
 8007660:	3301      	adds	r3, #1
 8007662:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 8007666:	2500      	movs	r5, #0
 8007668:	e037      	b.n	80076da <tcp_slowtmr+0xf2>
        if (pcb->rtime >= 0) {
 800766a:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 800766e:	2900      	cmp	r1, #0
 8007670:	db01      	blt.n	8007676 <tcp_slowtmr+0x8e>
          ++pcb->rtime;
 8007672:	3101      	adds	r1, #1
 8007674:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8007676:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007678:	b379      	cbz	r1, 80076da <tcp_slowtmr+0xf2>
 800767a:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 800767e:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8007682:	4288      	cmp	r0, r1
 8007684:	db29      	blt.n	80076da <tcp_slowtmr+0xf2>
          if (pcb->state != SYN_SENT) {
 8007686:	2b02      	cmp	r3, #2
 8007688:	d00d      	beq.n	80076a6 <tcp_slowtmr+0xbe>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800768a:	2a0c      	cmp	r2, #12
 800768c:	bf28      	it	cs
 800768e:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007690:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8007694:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8007698:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800769c:	4988      	ldr	r1, [pc, #544]	; (80078c0 <tcp_slowtmr+0x2d8>)
 800769e:	5c8a      	ldrb	r2, [r1, r2]
 80076a0:	4093      	lsls	r3, r2
 80076a2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80076aa:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 80076ae:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80076b2:	4293      	cmp	r3, r2
 80076b4:	bf28      	it	cs
 80076b6:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80076be:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80076c0:	004a      	lsls	r2, r1, #1
 80076c2:	b292      	uxth	r2, r2
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d201      	bcs.n	80076cc <tcp_slowtmr+0xe4>
            pcb->ssthresh = (pcb->mss << 1);
 80076c8:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 80076cc:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 80076d0:	4620      	mov	r0, r4
 80076d2:	f002 ffaf 	bl	800a634 <tcp_rexmit_rto>
 80076d6:	e000      	b.n	80076da <tcp_slowtmr+0xf2>
      ++pcb_remove;
 80076d8:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 80076da:	7d23      	ldrb	r3, [r4, #20]
 80076dc:	2b06      	cmp	r3, #6
 80076de:	d01d      	beq.n	800771c <tcp_slowtmr+0x134>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80076e0:	7a22      	ldrb	r2, [r4, #8]
 80076e2:	f012 0f08 	tst.w	r2, #8
 80076e6:	d03f      	beq.n	8007768 <tcp_slowtmr+0x180>
 80076e8:	2b07      	cmp	r3, #7
 80076ea:	bf18      	it	ne
 80076ec:	2b04      	cmpne	r3, #4
 80076ee:	d16e      	bne.n	80077ce <tcp_slowtmr+0x1e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076f0:	4b6b      	ldr	r3, [pc, #428]	; (80078a0 <tcp_slowtmr+0x2b8>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	6a23      	ldr	r3, [r4, #32]
 80076f6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80076f8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80076fc:	4b71      	ldr	r3, [pc, #452]	; (80078c4 <tcp_slowtmr+0x2dc>)
 80076fe:	440b      	add	r3, r1
 8007700:	4871      	ldr	r0, [pc, #452]	; (80078c8 <tcp_slowtmr+0x2e0>)
 8007702:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007706:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800770a:	d914      	bls.n	8007736 <tcp_slowtmr+0x14e>
        ++pcb_remove;
 800770c:	3501      	adds	r5, #1
 800770e:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8007710:	2701      	movs	r7, #1
 8007712:	e02a      	b.n	800776a <tcp_slowtmr+0x182>
    pcb_remove = 0;
 8007714:	2500      	movs	r5, #0
 8007716:	e7e0      	b.n	80076da <tcp_slowtmr+0xf2>
 8007718:	2500      	movs	r5, #0
 800771a:	e7de      	b.n	80076da <tcp_slowtmr+0xf2>
      if (pcb->flags & TF_RXCLOSED) {
 800771c:	7ea2      	ldrb	r2, [r4, #26]
 800771e:	f012 0f10 	tst.w	r2, #16
 8007722:	d0dd      	beq.n	80076e0 <tcp_slowtmr+0xf8>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007724:	6a21      	ldr	r1, [r4, #32]
 8007726:	4a5e      	ldr	r2, [pc, #376]	; (80078a0 <tcp_slowtmr+0x2b8>)
 8007728:	6812      	ldr	r2, [r2, #0]
 800772a:	1a52      	subs	r2, r2, r1
 800772c:	2a28      	cmp	r2, #40	; 0x28
 800772e:	d9d7      	bls.n	80076e0 <tcp_slowtmr+0xf8>
          ++pcb_remove;
 8007730:	3501      	adds	r5, #1
 8007732:	b2ed      	uxtb	r5, r5
 8007734:	e7d4      	b.n	80076e0 <tcp_slowtmr+0xf8>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007736:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800773a:	4864      	ldr	r0, [pc, #400]	; (80078cc <tcp_slowtmr+0x2e4>)
 800773c:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 8007740:	4961      	ldr	r1, [pc, #388]	; (80078c8 <tcp_slowtmr+0x2e0>)
 8007742:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007746:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800774a:	d801      	bhi.n	8007750 <tcp_slowtmr+0x168>
    pcb_reset = 0;
 800774c:	2700      	movs	r7, #0
 800774e:	e00c      	b.n	800776a <tcp_slowtmr+0x182>
        err = tcp_keepalive(pcb);
 8007750:	4620      	mov	r0, r4
 8007752:	f002 ffdf 	bl	800a714 <tcp_keepalive>
        if (err == ERR_OK) {
 8007756:	2800      	cmp	r0, #0
 8007758:	d13b      	bne.n	80077d2 <tcp_slowtmr+0x1ea>
          pcb->keep_cnt_sent++;
 800775a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800775e:	3301      	adds	r3, #1
 8007760:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8007764:	2700      	movs	r7, #0
 8007766:	e000      	b.n	800776a <tcp_slowtmr+0x182>
 8007768:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 800776a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800776c:	b150      	cbz	r0, 8007784 <tcp_slowtmr+0x19c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800776e:	4b4c      	ldr	r3, [pc, #304]	; (80078a0 <tcp_slowtmr+0x2b8>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	6a23      	ldr	r3, [r4, #32]
 8007774:	1ad2      	subs	r2, r2, r3
 8007776:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800777a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800777e:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 8007780:	428a      	cmp	r2, r1
 8007782:	d228      	bcs.n	80077d6 <tcp_slowtmr+0x1ee>
    if (pcb->state == SYN_RCVD) {
 8007784:	7d23      	ldrb	r3, [r4, #20]
 8007786:	2b03      	cmp	r3, #3
 8007788:	d02a      	beq.n	80077e0 <tcp_slowtmr+0x1f8>
    if (pcb->state == LAST_ACK) {
 800778a:	2b09      	cmp	r3, #9
 800778c:	d031      	beq.n	80077f2 <tcp_slowtmr+0x20a>
    if (pcb_remove) {
 800778e:	2d00      	cmp	r5, #0
 8007790:	d138      	bne.n	8007804 <tcp_slowtmr+0x21c>
      pcb = pcb->next;
 8007792:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8007794:	7ee3      	ldrb	r3, [r4, #27]
 8007796:	3301      	adds	r3, #1
 8007798:	b2db      	uxtb	r3, r3
 800779a:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800779c:	7f22      	ldrb	r2, [r4, #28]
 800779e:	4293      	cmp	r3, r2
 80077a0:	f0c0 809c 	bcc.w	80078dc <tcp_slowtmr+0x2f4>
        prev->polltmr = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80077a8:	4a49      	ldr	r2, [pc, #292]	; (80078d0 <tcp_slowtmr+0x2e8>)
 80077aa:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 80077ac:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d06c      	beq.n	800788e <tcp_slowtmr+0x2a6>
 80077b4:	4621      	mov	r1, r4
 80077b6:	6920      	ldr	r0, [r4, #16]
 80077b8:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80077ba:	4b45      	ldr	r3, [pc, #276]	; (80078d0 <tcp_slowtmr+0x2e8>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f47f af1d 	bne.w	80075fe <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d064      	beq.n	8007892 <tcp_slowtmr+0x2aa>
      prev = pcb;
 80077c8:	4626      	mov	r6, r4
      pcb = pcb->next;
 80077ca:	462c      	mov	r4, r5
 80077cc:	e088      	b.n	80078e0 <tcp_slowtmr+0x2f8>
    pcb_reset = 0;
 80077ce:	2700      	movs	r7, #0
 80077d0:	e7cb      	b.n	800776a <tcp_slowtmr+0x182>
 80077d2:	2700      	movs	r7, #0
 80077d4:	e7c9      	b.n	800776a <tcp_slowtmr+0x182>
      tcp_segs_free(pcb->ooseq);
 80077d6:	f7ff fe52 	bl	800747e <tcp_segs_free>
      pcb->ooseq = NULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	6723      	str	r3, [r4, #112]	; 0x70
 80077de:	e7d1      	b.n	8007784 <tcp_slowtmr+0x19c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077e0:	6a21      	ldr	r1, [r4, #32]
 80077e2:	4a2f      	ldr	r2, [pc, #188]	; (80078a0 <tcp_slowtmr+0x2b8>)
 80077e4:	6812      	ldr	r2, [r2, #0]
 80077e6:	1a52      	subs	r2, r2, r1
 80077e8:	2a28      	cmp	r2, #40	; 0x28
 80077ea:	d9ce      	bls.n	800778a <tcp_slowtmr+0x1a2>
        ++pcb_remove;
 80077ec:	3501      	adds	r5, #1
 80077ee:	b2ed      	uxtb	r5, r5
 80077f0:	e7cb      	b.n	800778a <tcp_slowtmr+0x1a2>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80077f2:	6a22      	ldr	r2, [r4, #32]
 80077f4:	4b2a      	ldr	r3, [pc, #168]	; (80078a0 <tcp_slowtmr+0x2b8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	2bf0      	cmp	r3, #240	; 0xf0
 80077fc:	d9c7      	bls.n	800778e <tcp_slowtmr+0x1a6>
        ++pcb_remove;
 80077fe:	3501      	adds	r5, #1
 8007800:	b2ed      	uxtb	r5, r5
 8007802:	e7c4      	b.n	800778e <tcp_slowtmr+0x1a6>
      tcp_err_fn err_fn = pcb->errf;
 8007804:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8007808:	4620      	mov	r0, r4
 800780a:	f7ff fec7 	bl	800759c <tcp_pcb_purge>
      if (prev != NULL) {
 800780e:	b326      	cbz	r6, 800785a <tcp_slowtmr+0x272>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007810:	4b25      	ldr	r3, [pc, #148]	; (80078a8 <tcp_slowtmr+0x2c0>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	42a3      	cmp	r3, r4
 8007816:	d018      	beq.n	800784a <tcp_slowtmr+0x262>
        prev->next = pcb->next;
 8007818:	68e3      	ldr	r3, [r4, #12]
 800781a:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 800781c:	bb67      	cbnz	r7, 8007878 <tcp_slowtmr+0x290>
      err_arg = pcb->callback_arg;
 800781e:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 8007822:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007824:	4621      	mov	r1, r4
 8007826:	2001      	movs	r0, #1
 8007828:	f7fe ff3c 	bl	80066a4 <memp_free>
      tcp_active_pcbs_changed = 0;
 800782c:	4b28      	ldr	r3, [pc, #160]	; (80078d0 <tcp_slowtmr+0x2e8>)
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007832:	b11d      	cbz	r5, 800783c <tcp_slowtmr+0x254>
 8007834:	f06f 010c 	mvn.w	r1, #12
 8007838:	4640      	mov	r0, r8
 800783a:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 800783c:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <tcp_slowtmr+0x2e8>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	f47f aedc 	bne.w	80075fe <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8007846:	463c      	mov	r4, r7
 8007848:	e04a      	b.n	80078e0 <tcp_slowtmr+0x2f8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800784a:	4b18      	ldr	r3, [pc, #96]	; (80078ac <tcp_slowtmr+0x2c4>)
 800784c:	f240 4289 	movw	r2, #1161	; 0x489
 8007850:	4920      	ldr	r1, [pc, #128]	; (80078d4 <tcp_slowtmr+0x2ec>)
 8007852:	4818      	ldr	r0, [pc, #96]	; (80078b4 <tcp_slowtmr+0x2cc>)
 8007854:	f007 fb14 	bl	800ee80 <iprintf>
 8007858:	e7de      	b.n	8007818 <tcp_slowtmr+0x230>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800785a:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <tcp_slowtmr+0x2c0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	42a3      	cmp	r3, r4
 8007860:	d006      	beq.n	8007870 <tcp_slowtmr+0x288>
 8007862:	4b12      	ldr	r3, [pc, #72]	; (80078ac <tcp_slowtmr+0x2c4>)
 8007864:	f240 428d 	movw	r2, #1165	; 0x48d
 8007868:	491b      	ldr	r1, [pc, #108]	; (80078d8 <tcp_slowtmr+0x2f0>)
 800786a:	4812      	ldr	r0, [pc, #72]	; (80078b4 <tcp_slowtmr+0x2cc>)
 800786c:	f007 fb08 	bl	800ee80 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007870:	68e2      	ldr	r2, [r4, #12]
 8007872:	4b0d      	ldr	r3, [pc, #52]	; (80078a8 <tcp_slowtmr+0x2c0>)
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	e7d1      	b.n	800781c <tcp_slowtmr+0x234>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007878:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800787a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800787c:	8b23      	ldrh	r3, [r4, #24]
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	8ae3      	ldrh	r3, [r4, #22]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	1d23      	adds	r3, r4, #4
 8007886:	4622      	mov	r2, r4
 8007888:	f002 fe7e 	bl	800a588 <tcp_rst>
 800788c:	e7c7      	b.n	800781e <tcp_slowtmr+0x236>
        TCP_EVENT_POLL(prev, err);
 800788e:	2000      	movs	r0, #0
 8007890:	e793      	b.n	80077ba <tcp_slowtmr+0x1d2>
          tcp_output(prev);
 8007892:	4620      	mov	r0, r4
 8007894:	f002 fd38 	bl	800a308 <tcp_output>
      prev = pcb;
 8007898:	4626      	mov	r6, r4
      pcb = pcb->next;
 800789a:	462c      	mov	r4, r5
 800789c:	e020      	b.n	80078e0 <tcp_slowtmr+0x2f8>
 800789e:	bf00      	nop
 80078a0:	200081f4 	.word	0x200081f4
 80078a4:	200048d2 	.word	0x200048d2
 80078a8:	200081f0 	.word	0x200081f0
 80078ac:	080110bc 	.word	0x080110bc
 80078b0:	08011254 	.word	0x08011254
 80078b4:	080101d8 	.word	0x080101d8
 80078b8:	08011280 	.word	0x08011280
 80078bc:	080112ac 	.word	0x080112ac
 80078c0:	08011030 	.word	0x08011030
 80078c4:	000a4cb8 	.word	0x000a4cb8
 80078c8:	10624dd3 	.word	0x10624dd3
 80078cc:	000124f8 	.word	0x000124f8
 80078d0:	200081ec 	.word	0x200081ec
 80078d4:	080112dc 	.word	0x080112dc
 80078d8:	08011308 	.word	0x08011308
      prev = pcb;
 80078dc:	4626      	mov	r6, r4
      pcb = pcb->next;
 80078de:	462c      	mov	r4, r5
  while (pcb != NULL) {
 80078e0:	b38c      	cbz	r4, 8007946 <tcp_slowtmr+0x35e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80078e2:	7d23      	ldrb	r3, [r4, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f43f ae8e 	beq.w	8007606 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80078ea:	7d23      	ldrb	r3, [r4, #20]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	f43f ae92 	beq.w	8007616 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80078f2:	7d23      	ldrb	r3, [r4, #20]
 80078f4:	2b0a      	cmp	r3, #10
 80078f6:	f43f ae96 	beq.w	8007626 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 80078fa:	7f62      	ldrb	r2, [r4, #29]
 80078fc:	4b33      	ldr	r3, [pc, #204]	; (80079cc <tcp_slowtmr+0x3e4>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	f43f ae98 	beq.w	8007636 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8007906:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007908:	7d23      	ldrb	r3, [r4, #20]
 800790a:	2b02      	cmp	r3, #2
 800790c:	f43f ae95 	beq.w	800763a <tcp_slowtmr+0x52>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8007910:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8007914:	2a0b      	cmp	r2, #11
 8007916:	f63f aedf 	bhi.w	80076d8 <tcp_slowtmr+0xf0>
      if (pcb->persist_backoff > 0) {
 800791a:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 800791e:	2d00      	cmp	r5, #0
 8007920:	f43f aea3 	beq.w	800766a <tcp_slowtmr+0x82>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8007924:	3d01      	subs	r5, #1
 8007926:	4b2a      	ldr	r3, [pc, #168]	; (80079d0 <tcp_slowtmr+0x3e8>)
 8007928:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 800792a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800792e:	4293      	cmp	r3, r2
 8007930:	d202      	bcs.n	8007938 <tcp_slowtmr+0x350>
          pcb->persist_cnt++;
 8007932:	3301      	adds	r3, #1
 8007934:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8007938:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800793c:	4293      	cmp	r3, r2
 800793e:	f4bf ae83 	bcs.w	8007648 <tcp_slowtmr+0x60>
    pcb_remove = 0;
 8007942:	2500      	movs	r5, #0
 8007944:	e6c9      	b.n	80076da <tcp_slowtmr+0xf2>
  pcb = tcp_tw_pcbs;
 8007946:	4b23      	ldr	r3, [pc, #140]	; (80079d4 <tcp_slowtmr+0x3ec>)
 8007948:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 800794a:	e007      	b.n	800795c <tcp_slowtmr+0x374>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800794c:	6a2a      	ldr	r2, [r5, #32]
 800794e:	4b22      	ldr	r3, [pc, #136]	; (80079d8 <tcp_slowtmr+0x3f0>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	2bf0      	cmp	r3, #240	; 0xf0
 8007956:	d80e      	bhi.n	8007976 <tcp_slowtmr+0x38e>
      prev = pcb;
 8007958:	462c      	mov	r4, r5
      pcb = pcb->next;
 800795a:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 800795c:	2d00      	cmp	r5, #0
 800795e:	d032      	beq.n	80079c6 <tcp_slowtmr+0x3de>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007960:	7d2b      	ldrb	r3, [r5, #20]
 8007962:	2b0a      	cmp	r3, #10
 8007964:	d0f2      	beq.n	800794c <tcp_slowtmr+0x364>
 8007966:	4b1d      	ldr	r3, [pc, #116]	; (80079dc <tcp_slowtmr+0x3f4>)
 8007968:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800796c:	491c      	ldr	r1, [pc, #112]	; (80079e0 <tcp_slowtmr+0x3f8>)
 800796e:	481d      	ldr	r0, [pc, #116]	; (80079e4 <tcp_slowtmr+0x3fc>)
 8007970:	f007 fa86 	bl	800ee80 <iprintf>
 8007974:	e7ea      	b.n	800794c <tcp_slowtmr+0x364>
      tcp_pcb_purge(pcb);
 8007976:	4628      	mov	r0, r5
 8007978:	f7ff fe10 	bl	800759c <tcp_pcb_purge>
      if (prev != NULL) {
 800797c:	b1a4      	cbz	r4, 80079a8 <tcp_slowtmr+0x3c0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800797e:	4b15      	ldr	r3, [pc, #84]	; (80079d4 <tcp_slowtmr+0x3ec>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	42ab      	cmp	r3, r5
 8007984:	d008      	beq.n	8007998 <tcp_slowtmr+0x3b0>
        prev->next = pcb->next;
 8007986:	68eb      	ldr	r3, [r5, #12]
 8007988:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800798a:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800798c:	4629      	mov	r1, r5
 800798e:	2001      	movs	r0, #1
 8007990:	f7fe fe88 	bl	80066a4 <memp_free>
      pcb = pcb->next;
 8007994:	4635      	mov	r5, r6
 8007996:	e7e1      	b.n	800795c <tcp_slowtmr+0x374>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007998:	4b10      	ldr	r3, [pc, #64]	; (80079dc <tcp_slowtmr+0x3f4>)
 800799a:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800799e:	4912      	ldr	r1, [pc, #72]	; (80079e8 <tcp_slowtmr+0x400>)
 80079a0:	4810      	ldr	r0, [pc, #64]	; (80079e4 <tcp_slowtmr+0x3fc>)
 80079a2:	f007 fa6d 	bl	800ee80 <iprintf>
 80079a6:	e7ee      	b.n	8007986 <tcp_slowtmr+0x39e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80079a8:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <tcp_slowtmr+0x3ec>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	42ab      	cmp	r3, r5
 80079ae:	d006      	beq.n	80079be <tcp_slowtmr+0x3d6>
 80079b0:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <tcp_slowtmr+0x3f4>)
 80079b2:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80079b6:	490d      	ldr	r1, [pc, #52]	; (80079ec <tcp_slowtmr+0x404>)
 80079b8:	480a      	ldr	r0, [pc, #40]	; (80079e4 <tcp_slowtmr+0x3fc>)
 80079ba:	f007 fa61 	bl	800ee80 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80079be:	68ea      	ldr	r2, [r5, #12]
 80079c0:	4b04      	ldr	r3, [pc, #16]	; (80079d4 <tcp_slowtmr+0x3ec>)
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e7e1      	b.n	800798a <tcp_slowtmr+0x3a2>
}
 80079c6:	b002      	add	sp, #8
 80079c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079cc:	200048d2 	.word	0x200048d2
 80079d0:	08011190 	.word	0x08011190
 80079d4:	20008200 	.word	0x20008200
 80079d8:	200081f4 	.word	0x200081f4
 80079dc:	080110bc 	.word	0x080110bc
 80079e0:	08011334 	.word	0x08011334
 80079e4:	080101d8 	.word	0x080101d8
 80079e8:	08011364 	.word	0x08011364
 80079ec:	0801138c 	.word	0x0801138c

080079f0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80079f0:	b510      	push	{r4, lr}
 80079f2:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 80079f4:	6803      	ldr	r3, [r0, #0]
 80079f6:	428b      	cmp	r3, r1
 80079f8:	d005      	beq.n	8007a06 <tcp_pcb_remove+0x16>
 80079fa:	b14b      	cbz	r3, 8007a10 <tcp_pcb_remove+0x20>
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	42a2      	cmp	r2, r4
 8007a00:	d004      	beq.n	8007a0c <tcp_pcb_remove+0x1c>
 8007a02:	4613      	mov	r3, r2
 8007a04:	e7f9      	b.n	80079fa <tcp_pcb_remove+0xa>
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	6003      	str	r3, [r0, #0]
 8007a0a:	e001      	b.n	8007a10 <tcp_pcb_remove+0x20>
 8007a0c:	68e2      	ldr	r2, [r4, #12]
 8007a0e:	60da      	str	r2, [r3, #12]
 8007a10:	2300      	movs	r3, #0
 8007a12:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8007a14:	4620      	mov	r0, r4
 8007a16:	f7ff fdc1 	bl	800759c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8007a1a:	7d23      	ldrb	r3, [r4, #20]
 8007a1c:	2b0a      	cmp	r3, #10
 8007a1e:	bf18      	it	ne
 8007a20:	2b01      	cmpne	r3, #1
 8007a22:	d003      	beq.n	8007a2c <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8007a24:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8007a26:	f013 0f01 	tst.w	r3, #1
 8007a2a:	d121      	bne.n	8007a70 <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 8007a2c:	7d23      	ldrb	r3, [r4, #20]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d01a      	beq.n	8007a68 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007a32:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007a34:	b133      	cbz	r3, 8007a44 <tcp_pcb_remove+0x54>
 8007a36:	4b12      	ldr	r3, [pc, #72]	; (8007a80 <tcp_pcb_remove+0x90>)
 8007a38:	f240 7253 	movw	r2, #1875	; 0x753
 8007a3c:	4911      	ldr	r1, [pc, #68]	; (8007a84 <tcp_pcb_remove+0x94>)
 8007a3e:	4812      	ldr	r0, [pc, #72]	; (8007a88 <tcp_pcb_remove+0x98>)
 8007a40:	f007 fa1e 	bl	800ee80 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007a44:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007a46:	b133      	cbz	r3, 8007a56 <tcp_pcb_remove+0x66>
 8007a48:	4b0d      	ldr	r3, [pc, #52]	; (8007a80 <tcp_pcb_remove+0x90>)
 8007a4a:	f240 7254 	movw	r2, #1876	; 0x754
 8007a4e:	490f      	ldr	r1, [pc, #60]	; (8007a8c <tcp_pcb_remove+0x9c>)
 8007a50:	480d      	ldr	r0, [pc, #52]	; (8007a88 <tcp_pcb_remove+0x98>)
 8007a52:	f007 fa15 	bl	800ee80 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007a56:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007a58:	b133      	cbz	r3, 8007a68 <tcp_pcb_remove+0x78>
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <tcp_pcb_remove+0x90>)
 8007a5c:	f240 7256 	movw	r2, #1878	; 0x756
 8007a60:	490b      	ldr	r1, [pc, #44]	; (8007a90 <tcp_pcb_remove+0xa0>)
 8007a62:	4809      	ldr	r0, [pc, #36]	; (8007a88 <tcp_pcb_remove+0x98>)
 8007a64:	f007 fa0c 	bl	800ee80 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007a6c:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007a6e:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 8007a70:	f043 0302 	orr.w	r3, r3, #2
 8007a74:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8007a76:	4620      	mov	r0, r4
 8007a78:	f002 fc46 	bl	800a308 <tcp_output>
 8007a7c:	e7d6      	b.n	8007a2c <tcp_pcb_remove+0x3c>
 8007a7e:	bf00      	nop
 8007a80:	080110bc 	.word	0x080110bc
 8007a84:	08011144 	.word	0x08011144
 8007a88:	080101d8 	.word	0x080101d8
 8007a8c:	0801115c 	.word	0x0801115c
 8007a90:	08011178 	.word	0x08011178

08007a94 <tcp_close_shutdown>:
{
 8007a94:	b510      	push	{r4, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007a9a:	b329      	cbz	r1, 8007ae8 <tcp_close_shutdown+0x54>
 8007a9c:	7d03      	ldrb	r3, [r0, #20]
 8007a9e:	2b07      	cmp	r3, #7
 8007aa0:	bf18      	it	ne
 8007aa2:	2b04      	cmpne	r3, #4
 8007aa4:	d120      	bne.n	8007ae8 <tcp_close_shutdown+0x54>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007aa6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007aa8:	b1d3      	cbz	r3, 8007ae0 <tcp_close_shutdown+0x4c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007aaa:	7ea3      	ldrb	r3, [r4, #26]
 8007aac:	f013 0f10 	tst.w	r3, #16
 8007ab0:	d025      	beq.n	8007afe <tcp_close_shutdown+0x6a>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007ab2:	8b23      	ldrh	r3, [r4, #24]
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	8ae3      	ldrh	r3, [r4, #22]
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	1d23      	adds	r3, r4, #4
 8007abc:	4622      	mov	r2, r4
 8007abe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ac0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007ac2:	f002 fd61 	bl	800a588 <tcp_rst>
      tcp_pcb_purge(pcb);
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f7ff fd68 	bl	800759c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007acc:	4b3d      	ldr	r3, [pc, #244]	; (8007bc4 <tcp_close_shutdown+0x130>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	d01c      	beq.n	8007b0e <tcp_close_shutdown+0x7a>
 8007ad4:	b30b      	cbz	r3, 8007b1a <tcp_close_shutdown+0x86>
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	42a2      	cmp	r2, r4
 8007ada:	d01c      	beq.n	8007b16 <tcp_close_shutdown+0x82>
 8007adc:	4613      	mov	r3, r2
 8007ade:	e7f9      	b.n	8007ad4 <tcp_close_shutdown+0x40>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007ae0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8007ae2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007ae6:	d1e0      	bne.n	8007aaa <tcp_close_shutdown+0x16>
  switch (pcb->state) {
 8007ae8:	7d23      	ldrb	r3, [r4, #20]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d050      	beq.n	8007b90 <tcp_close_shutdown+0xfc>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d033      	beq.n	8007b5a <tcp_close_shutdown+0xc6>
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d059      	beq.n	8007baa <tcp_close_shutdown+0x116>
    return tcp_close_shutdown_fin(pcb);
 8007af6:	4620      	mov	r0, r4
 8007af8:	f7ff fb38 	bl	800716c <tcp_close_shutdown_fin>
 8007afc:	e046      	b.n	8007b8c <tcp_close_shutdown+0xf8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007afe:	4b32      	ldr	r3, [pc, #200]	; (8007bc8 <tcp_close_shutdown+0x134>)
 8007b00:	f240 120f 	movw	r2, #271	; 0x10f
 8007b04:	4931      	ldr	r1, [pc, #196]	; (8007bcc <tcp_close_shutdown+0x138>)
 8007b06:	4832      	ldr	r0, [pc, #200]	; (8007bd0 <tcp_close_shutdown+0x13c>)
 8007b08:	f007 f9ba 	bl	800ee80 <iprintf>
 8007b0c:	e7d1      	b.n	8007ab2 <tcp_close_shutdown+0x1e>
      TCP_RMV_ACTIVE(pcb);
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	4b2c      	ldr	r3, [pc, #176]	; (8007bc4 <tcp_close_shutdown+0x130>)
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	e001      	b.n	8007b1a <tcp_close_shutdown+0x86>
 8007b16:	68e2      	ldr	r2, [r4, #12]
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60e3      	str	r3, [r4, #12]
 8007b1e:	4b2d      	ldr	r3, [pc, #180]	; (8007bd4 <tcp_close_shutdown+0x140>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8007b24:	7d23      	ldrb	r3, [r4, #20]
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d009      	beq.n	8007b3e <tcp_close_shutdown+0xaa>
        if (tcp_input_pcb == pcb) {
 8007b2a:	4b2b      	ldr	r3, [pc, #172]	; (8007bd8 <tcp_close_shutdown+0x144>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	42a3      	cmp	r3, r4
 8007b30:	d00f      	beq.n	8007b52 <tcp_close_shutdown+0xbe>
          memp_free(MEMP_TCP_PCB, pcb);
 8007b32:	4621      	mov	r1, r4
 8007b34:	2001      	movs	r0, #1
 8007b36:	f7fe fdb5 	bl	80066a4 <memp_free>
      return ERR_OK;
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e026      	b.n	8007b8c <tcp_close_shutdown+0xf8>
        pcb->state = TIME_WAIT;
 8007b3e:	230a      	movs	r3, #10
 8007b40:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007b42:	4b26      	ldr	r3, [pc, #152]	; (8007bdc <tcp_close_shutdown+0x148>)
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	60e2      	str	r2, [r4, #12]
 8007b48:	601c      	str	r4, [r3, #0]
 8007b4a:	f002 ff1b 	bl	800a984 <tcp_timer_needed>
      return ERR_OK;
 8007b4e:	2000      	movs	r0, #0
 8007b50:	e01c      	b.n	8007b8c <tcp_close_shutdown+0xf8>
          tcp_trigger_input_pcb_close();
 8007b52:	f001 fea7 	bl	80098a4 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 8007b56:	2000      	movs	r0, #0
 8007b58:	e018      	b.n	8007b8c <tcp_close_shutdown+0xf8>
    if (pcb->local_port != 0) {
 8007b5a:	8ae3      	ldrh	r3, [r4, #22]
 8007b5c:	b18b      	cbz	r3, 8007b82 <tcp_close_shutdown+0xee>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007b5e:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <tcp_close_shutdown+0x14c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	42a3      	cmp	r3, r4
 8007b64:	d005      	beq.n	8007b72 <tcp_close_shutdown+0xde>
 8007b66:	b153      	cbz	r3, 8007b7e <tcp_close_shutdown+0xea>
 8007b68:	68da      	ldr	r2, [r3, #12]
 8007b6a:	42a2      	cmp	r2, r4
 8007b6c:	d005      	beq.n	8007b7a <tcp_close_shutdown+0xe6>
 8007b6e:	4613      	mov	r3, r2
 8007b70:	e7f9      	b.n	8007b66 <tcp_close_shutdown+0xd2>
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	4b1a      	ldr	r3, [pc, #104]	; (8007be0 <tcp_close_shutdown+0x14c>)
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	e001      	b.n	8007b7e <tcp_close_shutdown+0xea>
 8007b7a:	68e2      	ldr	r2, [r4, #12]
 8007b7c:	60da      	str	r2, [r3, #12]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 8007b82:	4621      	mov	r1, r4
 8007b84:	2001      	movs	r0, #1
 8007b86:	f7fe fd8d 	bl	80066a4 <memp_free>
  return ERR_OK;
 8007b8a:	2000      	movs	r0, #0
}
 8007b8c:	b002      	add	sp, #8
 8007b8e:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 8007b90:	4620      	mov	r0, r4
 8007b92:	f7ff fabf 	bl	8007114 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007b96:	4621      	mov	r1, r4
 8007b98:	4812      	ldr	r0, [pc, #72]	; (8007be4 <tcp_close_shutdown+0x150>)
 8007b9a:	f7ff ff29 	bl	80079f0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	2002      	movs	r0, #2
 8007ba2:	f7fe fd7f 	bl	80066a4 <memp_free>
  return ERR_OK;
 8007ba6:	2000      	movs	r0, #0
    break;
 8007ba8:	e7f0      	b.n	8007b8c <tcp_close_shutdown+0xf8>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007baa:	4621      	mov	r1, r4
 8007bac:	4805      	ldr	r0, [pc, #20]	; (8007bc4 <tcp_close_shutdown+0x130>)
 8007bae:	f7ff ff1f 	bl	80079f0 <tcp_pcb_remove>
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	4b07      	ldr	r3, [pc, #28]	; (8007bd4 <tcp_close_shutdown+0x140>)
 8007bb6:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8007bb8:	4621      	mov	r1, r4
 8007bba:	f7fe fd73 	bl	80066a4 <memp_free>
  return ERR_OK;
 8007bbe:	2000      	movs	r0, #0
    break;
 8007bc0:	e7e4      	b.n	8007b8c <tcp_close_shutdown+0xf8>
 8007bc2:	bf00      	nop
 8007bc4:	200081f0 	.word	0x200081f0
 8007bc8:	080110bc 	.word	0x080110bc
 8007bcc:	08011068 	.word	0x08011068
 8007bd0:	080101d8 	.word	0x080101d8
 8007bd4:	200081ec 	.word	0x200081ec
 8007bd8:	20008204 	.word	0x20008204
 8007bdc:	20008200 	.word	0x20008200
 8007be0:	200081fc 	.word	0x200081fc
 8007be4:	200081f8 	.word	0x200081f8

08007be8 <tcp_close>:
{
 8007be8:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 8007bea:	7d03      	ldrb	r3, [r0, #20]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d003      	beq.n	8007bf8 <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 8007bf0:	7e83      	ldrb	r3, [r0, #26]
 8007bf2:	f043 0310 	orr.w	r3, r3, #16
 8007bf6:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	f7ff ff4b 	bl	8007a94 <tcp_close_shutdown>
}
 8007bfe:	bd08      	pop	{r3, pc}

08007c00 <tcp_recv_null>:
{
 8007c00:	b510      	push	{r4, lr}
 8007c02:	4608      	mov	r0, r1
  if (p != NULL) {
 8007c04:	b912      	cbnz	r2, 8007c0c <tcp_recv_null+0xc>
  } else if (err == ERR_OK) {
 8007c06:	b153      	cbz	r3, 8007c1e <tcp_recv_null+0x1e>
  return ERR_OK;
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e007      	b.n	8007c1c <tcp_recv_null+0x1c>
 8007c0c:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 8007c0e:	8911      	ldrh	r1, [r2, #8]
 8007c10:	f7ff fbe6 	bl	80073e0 <tcp_recved>
    pbuf_free(p);
 8007c14:	4620      	mov	r0, r4
 8007c16:	f7fe ff1f 	bl	8006a58 <pbuf_free>
  return ERR_OK;
 8007c1a:	2000      	movs	r0, #0
}
 8007c1c:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 8007c1e:	f7ff ffe3 	bl	8007be8 <tcp_close>
 8007c22:	e7fb      	b.n	8007c1c <tcp_recv_null+0x1c>

08007c24 <tcp_process_refused_data>:
{
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8007c28:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8007c2a:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c30:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 8007c34:	b1dd      	cbz	r5, 8007c6e <tcp_process_refused_data+0x4a>
 8007c36:	4632      	mov	r2, r6
 8007c38:	4601      	mov	r1, r0
 8007c3a:	6900      	ldr	r0, [r0, #16]
 8007c3c:	47a8      	blx	r5
 8007c3e:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8007c40:	b9ed      	cbnz	r5, 8007c7e <tcp_process_refused_data+0x5a>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8007c42:	f017 0f20 	tst.w	r7, #32
 8007c46:	d020      	beq.n	8007c8a <tcp_process_refused_data+0x66>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007c48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007c4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007c4e:	d001      	beq.n	8007c54 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 8007c50:	3301      	adds	r3, #1
 8007c52:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007c54:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8007c58:	b1be      	cbz	r6, 8007c8a <tcp_process_refused_data+0x66>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4621      	mov	r1, r4
 8007c60:	6920      	ldr	r0, [r4, #16]
 8007c62:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8007c64:	f110 0f0d 	cmn.w	r0, #13
 8007c68:	d10f      	bne.n	8007c8a <tcp_process_refused_data+0x66>
          return ERR_ABRT;
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	e00d      	b.n	8007c8a <tcp_process_refused_data+0x66>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4632      	mov	r2, r6
 8007c72:	4601      	mov	r1, r0
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff ffc3 	bl	8007c00 <tcp_recv_null>
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	e7e0      	b.n	8007c40 <tcp_process_refused_data+0x1c>
    } else if (err == ERR_ABRT) {
 8007c7e:	f115 0f0d 	cmn.w	r5, #13
 8007c82:	d002      	beq.n	8007c8a <tcp_process_refused_data+0x66>
      pcb->refused_data = refused_data;
 8007c84:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8007c86:	f06f 0504 	mvn.w	r5, #4
}
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c90 <tcp_fasttmr>:
{
 8007c90:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8007c92:	4a1c      	ldr	r2, [pc, #112]	; (8007d04 <tcp_fasttmr+0x74>)
 8007c94:	7813      	ldrb	r3, [r2, #0]
 8007c96:	3301      	adds	r3, #1
 8007c98:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8007c9a:	4b1b      	ldr	r3, [pc, #108]	; (8007d08 <tcp_fasttmr+0x78>)
 8007c9c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8007c9e:	e013      	b.n	8007cc8 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8007ca0:	f043 0302 	orr.w	r3, r3, #2
 8007ca4:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f002 fb2e 	bl	800a308 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007cac:	7ea3      	ldrb	r3, [r4, #26]
 8007cae:	f023 0303 	bic.w	r3, r3, #3
 8007cb2:	76a3      	strb	r3, [r4, #26]
 8007cb4:	e013      	b.n	8007cde <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 8007cb6:	f023 0308 	bic.w	r3, r3, #8
 8007cba:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f7ff fa55 	bl	800716c <tcp_close_shutdown_fin>
 8007cc2:	e010      	b.n	8007ce6 <tcp_fasttmr+0x56>
      pcb = pcb->next;
 8007cc4:	68e5      	ldr	r5, [r4, #12]
{
 8007cc6:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8007cc8:	b1dc      	cbz	r4, 8007d02 <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007cca:	7f62      	ldrb	r2, [r4, #29]
 8007ccc:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <tcp_fasttmr+0x74>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d0f7      	beq.n	8007cc4 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 8007cd4:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8007cd6:	7ea3      	ldrb	r3, [r4, #26]
 8007cd8:	f013 0f01 	tst.w	r3, #1
 8007cdc:	d1e0      	bne.n	8007ca0 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8007cde:	7ea3      	ldrb	r3, [r4, #26]
 8007ce0:	f013 0f08 	tst.w	r3, #8
 8007ce4:	d1e7      	bne.n	8007cb6 <tcp_fasttmr+0x26>
      next = pcb->next;
 8007ce6:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8007ce8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0eb      	beq.n	8007cc6 <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 8007cee:	4e07      	ldr	r6, [pc, #28]	; (8007d0c <tcp_fasttmr+0x7c>)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f7ff ff95 	bl	8007c24 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007cfa:	7833      	ldrb	r3, [r6, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0e2      	beq.n	8007cc6 <tcp_fasttmr+0x36>
 8007d00:	e7cb      	b.n	8007c9a <tcp_fasttmr+0xa>
}
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	200048d2 	.word	0x200048d2
 8007d08:	200081f0 	.word	0x200081f0
 8007d0c:	200081ec 	.word	0x200081ec

08007d10 <tcp_tmr>:
{
 8007d10:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8007d12:	f7ff ffbd 	bl	8007c90 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8007d16:	4a06      	ldr	r2, [pc, #24]	; (8007d30 <tcp_tmr+0x20>)
 8007d18:	7813      	ldrb	r3, [r2, #0]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	7013      	strb	r3, [r2, #0]
 8007d20:	f013 0f01 	tst.w	r3, #1
 8007d24:	d100      	bne.n	8007d28 <tcp_tmr+0x18>
}
 8007d26:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 8007d28:	f7ff fc5e 	bl	80075e8 <tcp_slowtmr>
}
 8007d2c:	e7fb      	b.n	8007d26 <tcp_tmr+0x16>
 8007d2e:	bf00      	nop
 8007d30:	200048d1 	.word	0x200048d1

08007d34 <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 8007d34:	7d03      	ldrb	r3, [r0, #20]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d020      	beq.n	8007d7c <tcp_shutdown+0x48>
{
 8007d3a:	b570      	push	{r4, r5, r6, lr}
 8007d3c:	4616      	mov	r6, r2
 8007d3e:	460d      	mov	r5, r1
 8007d40:	4604      	mov	r4, r0
  if (shut_rx) {
 8007d42:	b151      	cbz	r1, 8007d5a <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 8007d44:	7e83      	ldrb	r3, [r0, #26]
 8007d46:	f043 0310 	orr.w	r3, r3, #16
 8007d4a:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 8007d4c:	b992      	cbnz	r2, 8007d74 <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 8007d4e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8007d50:	b118      	cbz	r0, 8007d5a <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 8007d52:	f7fe fe81 	bl	8006a58 <pbuf_free>
      pcb->refused_data = NULL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	6763      	str	r3, [r4, #116]	; 0x74
  if (shut_tx) {
 8007d5a:	b196      	cbz	r6, 8007d82 <tcp_shutdown+0x4e>
    switch (pcb->state) {
 8007d5c:	7d23      	ldrb	r3, [r4, #20]
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d311      	bcc.n	8007d86 <tcp_shutdown+0x52>
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d901      	bls.n	8007d6a <tcp_shutdown+0x36>
 8007d66:	2b07      	cmp	r3, #7
 8007d68:	d10d      	bne.n	8007d86 <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8007d6a:	b2e9      	uxtb	r1, r5
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f7ff fe91 	bl	8007a94 <tcp_close_shutdown>
}
 8007d72:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 8007d74:	2101      	movs	r1, #1
 8007d76:	f7ff fe8d 	bl	8007a94 <tcp_close_shutdown>
 8007d7a:	e7fa      	b.n	8007d72 <tcp_shutdown+0x3e>
    return ERR_CONN;
 8007d7c:	f06f 000a 	mvn.w	r0, #10
}
 8007d80:	4770      	bx	lr
  return ERR_OK;
 8007d82:	2000      	movs	r0, #0
 8007d84:	e7f5      	b.n	8007d72 <tcp_shutdown+0x3e>
      return ERR_CONN;
 8007d86:	f06f 000a 	mvn.w	r0, #10
 8007d8a:	e7f2      	b.n	8007d72 <tcp_shutdown+0x3e>

08007d8c <tcp_abandon>:
{
 8007d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	4604      	mov	r4, r0
 8007d94:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007d96:	7d03      	ldrb	r3, [r0, #20]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d01a      	beq.n	8007dd2 <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 8007d9c:	7d23      	ldrb	r3, [r4, #20]
 8007d9e:	2b0a      	cmp	r3, #10
 8007da0:	d01f      	beq.n	8007de2 <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 8007da2:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8007da6:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8007daa:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8007dae:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d141      	bne.n	8007e38 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 8007db4:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8007db8:	f1ba 0f00 	cmp.w	sl, #0
 8007dbc:	d046      	beq.n	8007e4c <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007dbe:	4b2a      	ldr	r3, [pc, #168]	; (8007e68 <tcp_abandon+0xdc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	42a3      	cmp	r3, r4
 8007dc4:	d016      	beq.n	8007df4 <tcp_abandon+0x68>
 8007dc6:	b1db      	cbz	r3, 8007e00 <tcp_abandon+0x74>
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	42a2      	cmp	r2, r4
 8007dcc:	d016      	beq.n	8007dfc <tcp_abandon+0x70>
 8007dce:	4613      	mov	r3, r2
 8007dd0:	e7f9      	b.n	8007dc6 <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007dd2:	4b26      	ldr	r3, [pc, #152]	; (8007e6c <tcp_abandon+0xe0>)
 8007dd4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007dd8:	4925      	ldr	r1, [pc, #148]	; (8007e70 <tcp_abandon+0xe4>)
 8007dda:	4826      	ldr	r0, [pc, #152]	; (8007e74 <tcp_abandon+0xe8>)
 8007ddc:	f007 f850 	bl	800ee80 <iprintf>
 8007de0:	e7dc      	b.n	8007d9c <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007de2:	4621      	mov	r1, r4
 8007de4:	4824      	ldr	r0, [pc, #144]	; (8007e78 <tcp_abandon+0xec>)
 8007de6:	f7ff fe03 	bl	80079f0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007dea:	4621      	mov	r1, r4
 8007dec:	2001      	movs	r0, #1
 8007dee:	f7fe fc59 	bl	80066a4 <memp_free>
 8007df2:	e01e      	b.n	8007e32 <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	4b1c      	ldr	r3, [pc, #112]	; (8007e68 <tcp_abandon+0xdc>)
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	e001      	b.n	8007e00 <tcp_abandon+0x74>
 8007dfc:	68e2      	ldr	r2, [r4, #12]
 8007dfe:	60da      	str	r2, [r3, #12]
 8007e00:	2500      	movs	r5, #0
 8007e02:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 8007e04:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8007e06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007e08:	b108      	cbz	r0, 8007e0e <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 8007e0a:	f7ff fb38 	bl	800747e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8007e0e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007e10:	b108      	cbz	r0, 8007e16 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 8007e12:	f7ff fb34 	bl	800747e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8007e16:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007e18:	b108      	cbz	r0, 8007e1e <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 8007e1a:	f7ff fb30 	bl	800747e <tcp_segs_free>
    if (send_rst) {
 8007e1e:	b9bd      	cbnz	r5, 8007e50 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 8007e20:	4621      	mov	r1, r4
 8007e22:	2001      	movs	r0, #1
 8007e24:	f7fe fc3e 	bl	80066a4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007e28:	b11e      	cbz	r6, 8007e32 <tcp_abandon+0xa6>
 8007e2a:	f06f 010c 	mvn.w	r1, #12
 8007e2e:	4638      	mov	r0, r7
 8007e30:	47b0      	blx	r6
}
 8007e32:	b002      	add	sp, #8
 8007e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8007e38:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	480f      	ldr	r0, [pc, #60]	; (8007e7c <tcp_abandon+0xf0>)
 8007e40:	f7ff fdd6 	bl	80079f0 <tcp_pcb_remove>
 8007e44:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <tcp_abandon+0xf4>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	701a      	strb	r2, [r3, #0]
 8007e4a:	e7dc      	b.n	8007e06 <tcp_abandon+0x7a>
    int send_rst = 0;
 8007e4c:	2500      	movs	r5, #0
 8007e4e:	e7da      	b.n	8007e06 <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007e50:	8b23      	ldrh	r3, [r4, #24]
 8007e52:	9301      	str	r3, [sp, #4]
 8007e54:	f8cd a000 	str.w	sl, [sp]
 8007e58:	1d23      	adds	r3, r4, #4
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	4640      	mov	r0, r8
 8007e60:	f002 fb92 	bl	800a588 <tcp_rst>
 8007e64:	e7dc      	b.n	8007e20 <tcp_abandon+0x94>
 8007e66:	bf00      	nop
 8007e68:	200081fc 	.word	0x200081fc
 8007e6c:	080110bc 	.word	0x080110bc
 8007e70:	08010ffc 	.word	0x08010ffc
 8007e74:	080101d8 	.word	0x080101d8
 8007e78:	20008200 	.word	0x20008200
 8007e7c:	200081f0 	.word	0x200081f0
 8007e80:	200081ec 	.word	0x200081ec

08007e84 <tcp_abort>:
{
 8007e84:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8007e86:	2101      	movs	r1, #1
 8007e88:	f7ff ff80 	bl	8007d8c <tcp_abandon>
}
 8007e8c:	bd08      	pop	{r3, pc}

08007e8e <tcp_accept_null>:
{
 8007e8e:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8007e90:	4608      	mov	r0, r1
 8007e92:	f7ff fff7 	bl	8007e84 <tcp_abort>
}
 8007e96:	f06f 000c 	mvn.w	r0, #12
 8007e9a:	bd08      	pop	{r3, pc}

08007e9c <tcp_kill_timewait>:
{
 8007e9c:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e9e:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <tcp_kill_timewait+0x2c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8007ea2:	2400      	movs	r4, #0
  inactive = NULL;
 8007ea4:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ea6:	e000      	b.n	8007eaa <tcp_kill_timewait+0xe>
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	b143      	cbz	r3, 8007ebe <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007eac:	6a19      	ldr	r1, [r3, #32]
 8007eae:	4a07      	ldr	r2, [pc, #28]	; (8007ecc <tcp_kill_timewait+0x30>)
 8007eb0:	6812      	ldr	r2, [r2, #0]
 8007eb2:	1a52      	subs	r2, r2, r1
 8007eb4:	42a2      	cmp	r2, r4
 8007eb6:	d3f7      	bcc.n	8007ea8 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8007eb8:	4614      	mov	r4, r2
      inactive = pcb;
 8007eba:	4618      	mov	r0, r3
 8007ebc:	e7f4      	b.n	8007ea8 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 8007ebe:	b108      	cbz	r0, 8007ec4 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8007ec0:	f7ff ffe0 	bl	8007e84 <tcp_abort>
}
 8007ec4:	bd10      	pop	{r4, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20008200 	.word	0x20008200
 8007ecc:	200081f4 	.word	0x200081f4

08007ed0 <tcp_kill_prio>:
{
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007ed4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007ed8:	d000      	beq.n	8007edc <tcp_kill_prio+0xc>
 8007eda:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007edc:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <tcp_kill_prio+0x3c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8007ee0:	2400      	movs	r4, #0
  inactive = NULL;
 8007ee2:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ee4:	b91b      	cbnz	r3, 8007eee <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 8007ee6:	b108      	cbz	r0, 8007eec <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 8007ee8:	f7ff ffcc 	bl	8007e84 <tcp_abort>
}
 8007eec:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 8007eee:	7d5d      	ldrb	r5, [r3, #21]
 8007ef0:	4295      	cmp	r5, r2
 8007ef2:	d808      	bhi.n	8007f06 <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ef4:	6a1e      	ldr	r6, [r3, #32]
 8007ef6:	4906      	ldr	r1, [pc, #24]	; (8007f10 <tcp_kill_prio+0x40>)
 8007ef8:	6809      	ldr	r1, [r1, #0]
 8007efa:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 8007efc:	42a1      	cmp	r1, r4
 8007efe:	d302      	bcc.n	8007f06 <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 8007f00:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 8007f02:	460c      	mov	r4, r1
      inactive = pcb;
 8007f04:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	e7ec      	b.n	8007ee4 <tcp_kill_prio+0x14>
 8007f0a:	bf00      	nop
 8007f0c:	200081f0 	.word	0x200081f0
 8007f10:	200081f4 	.word	0x200081f4

08007f14 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4604      	mov	r4, r0
 8007f18:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8007f1a:	e003      	b.n	8007f24 <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007f1c:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007f1e:	f7ff ffb1 	bl	8007e84 <tcp_abort>
      pcb = next;
 8007f22:	4628      	mov	r0, r5
  while (pcb != NULL) {
 8007f24:	b128      	cbz	r0, 8007f32 <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007f26:	6802      	ldr	r2, [r0, #0]
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d0f6      	beq.n	8007f1c <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 8007f2e:	68c0      	ldr	r0, [r0, #12]
 8007f30:	e7f8      	b.n	8007f24 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8007f32:	bd38      	pop	{r3, r4, r5, pc}

08007f34 <tcp_kill_state>:
{
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007f38:	f1a0 0308 	sub.w	r3, r0, #8
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d804      	bhi.n	8007f4c <tcp_kill_state+0x18>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f42:	4b10      	ldr	r3, [pc, #64]	; (8007f84 <tcp_kill_state+0x50>)
 8007f44:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8007f46:	2100      	movs	r1, #0
  inactive = NULL;
 8007f48:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f4a:	e008      	b.n	8007f5e <tcp_kill_state+0x2a>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007f4c:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <tcp_kill_state+0x54>)
 8007f4e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007f52:	490e      	ldr	r1, [pc, #56]	; (8007f8c <tcp_kill_state+0x58>)
 8007f54:	480e      	ldr	r0, [pc, #56]	; (8007f90 <tcp_kill_state+0x5c>)
 8007f56:	f006 ff93 	bl	800ee80 <iprintf>
 8007f5a:	e7f2      	b.n	8007f42 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	b15b      	cbz	r3, 8007f78 <tcp_kill_state+0x44>
    if (pcb->state == state) {
 8007f60:	7d1a      	ldrb	r2, [r3, #20]
 8007f62:	42a2      	cmp	r2, r4
 8007f64:	d1fa      	bne.n	8007f5c <tcp_kill_state+0x28>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f66:	6a1d      	ldr	r5, [r3, #32]
 8007f68:	4a0a      	ldr	r2, [pc, #40]	; (8007f94 <tcp_kill_state+0x60>)
 8007f6a:	6812      	ldr	r2, [r2, #0]
 8007f6c:	1b52      	subs	r2, r2, r5
 8007f6e:	428a      	cmp	r2, r1
 8007f70:	d3f4      	bcc.n	8007f5c <tcp_kill_state+0x28>
        inactivity = tcp_ticks - pcb->tmr;
 8007f72:	4611      	mov	r1, r2
        inactive = pcb;
 8007f74:	4618      	mov	r0, r3
 8007f76:	e7f1      	b.n	8007f5c <tcp_kill_state+0x28>
  if (inactive != NULL) {
 8007f78:	b110      	cbz	r0, 8007f80 <tcp_kill_state+0x4c>
    tcp_abandon(inactive, 0);
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	f7ff ff06 	bl	8007d8c <tcp_abandon>
}
 8007f80:	bd38      	pop	{r3, r4, r5, pc}
 8007f82:	bf00      	nop
 8007f84:	200081f0 	.word	0x200081f0
 8007f88:	080110bc 	.word	0x080110bc
 8007f8c:	080110ac 	.word	0x080110ac
 8007f90:	080101d8 	.word	0x080101d8
 8007f94:	200081f4 	.word	0x200081f4

08007f98 <tcp_alloc>:
{
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f9c:	2001      	movs	r0, #1
 8007f9e:	f7fe fb67 	bl	8006670 <memp_malloc>
  if (pcb == NULL) {
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	b368      	cbz	r0, 8008002 <tcp_alloc+0x6a>
  if (pcb != NULL) {
 8007fa6:	b354      	cbz	r4, 8007ffe <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007fa8:	2298      	movs	r2, #152	; 0x98
 8007faa:	2100      	movs	r1, #0
 8007fac:	4620      	mov	r0, r4
 8007fae:	f006 ff5f 	bl	800ee70 <memset>
    pcb->prio = prio;
 8007fb2:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007fb4:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8007fb8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007fbc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007fc0:	8562      	strh	r2, [r4, #42]	; 0x2a
 8007fc2:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007fc4:	22ff      	movs	r2, #255	; 0xff
 8007fc6:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8007fc8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007fcc:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007fce:	2206      	movs	r2, #6
 8007fd0:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007fd4:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8007fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fda:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007fe2:	4a19      	ldr	r2, [pc, #100]	; (8008048 <tcp_alloc+0xb0>)
 8007fe4:	6812      	ldr	r2, [r2, #0]
 8007fe6:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007fe8:	4a18      	ldr	r2, [pc, #96]	; (800804c <tcp_alloc+0xb4>)
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 8007fee:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8007ff2:	4b17      	ldr	r3, [pc, #92]	; (8008050 <tcp_alloc+0xb8>)
 8007ff4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007ff8:	4b16      	ldr	r3, [pc, #88]	; (8008054 <tcp_alloc+0xbc>)
 8007ffa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8007ffe:	4620      	mov	r0, r4
 8008000:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 8008002:	f7ff ff4b 	bl	8007e9c <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008006:	2001      	movs	r0, #1
 8008008:	f7fe fb32 	bl	8006670 <memp_malloc>
    if (pcb == NULL) {
 800800c:	4604      	mov	r4, r0
 800800e:	2800      	cmp	r0, #0
 8008010:	d1c9      	bne.n	8007fa6 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8008012:	2009      	movs	r0, #9
 8008014:	f7ff ff8e 	bl	8007f34 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008018:	2001      	movs	r0, #1
 800801a:	f7fe fb29 	bl	8006670 <memp_malloc>
      if (pcb == NULL) {
 800801e:	4604      	mov	r4, r0
 8008020:	2800      	cmp	r0, #0
 8008022:	d1c0      	bne.n	8007fa6 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8008024:	2008      	movs	r0, #8
 8008026:	f7ff ff85 	bl	8007f34 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800802a:	2001      	movs	r0, #1
 800802c:	f7fe fb20 	bl	8006670 <memp_malloc>
        if (pcb == NULL) {
 8008030:	4604      	mov	r4, r0
 8008032:	2800      	cmp	r0, #0
 8008034:	d1b7      	bne.n	8007fa6 <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 8008036:	4628      	mov	r0, r5
 8008038:	f7ff ff4a 	bl	8007ed0 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800803c:	2001      	movs	r0, #1
 800803e:	f7fe fb17 	bl	8006670 <memp_malloc>
 8008042:	4604      	mov	r4, r0
 8008044:	e7af      	b.n	8007fa6 <tcp_alloc+0xe>
 8008046:	bf00      	nop
 8008048:	200081f4 	.word	0x200081f4
 800804c:	200048d2 	.word	0x200048d2
 8008050:	08007c01 	.word	0x08007c01
 8008054:	006ddd00 	.word	0x006ddd00

08008058 <tcp_new_ip_type>:
{
 8008058:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800805a:	2040      	movs	r0, #64	; 0x40
 800805c:	f7ff ff9c 	bl	8007f98 <tcp_alloc>
}
 8008060:	bd08      	pop	{r3, pc}
	...

08008064 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8008064:	4b03      	ldr	r3, [pc, #12]	; (8008074 <tcp_next_iss+0x10>)
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	4a03      	ldr	r2, [pc, #12]	; (8008078 <tcp_next_iss+0x14>)
 800806a:	6812      	ldr	r2, [r2, #0]
 800806c:	4410      	add	r0, r2
 800806e:	6018      	str	r0, [r3, #0]
}
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000008 	.word	0x20000008
 8008078:	200081f4 	.word	0x200081f4

0800807c <tcp_eff_send_mss_impl>:
{
 800807c:	b510      	push	{r4, lr}
 800807e:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8008080:	4608      	mov	r0, r1
 8008082:	f004 ff4f 	bl	800cf24 <ip4_route>
    if (outif == NULL) {
 8008086:	b130      	cbz	r0, 8008096 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8008088:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 800808a:	b123      	cbz	r3, 8008096 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800808c:	3b28      	subs	r3, #40	; 0x28
 800808e:	b29b      	uxth	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008090:	429c      	cmp	r4, r3
 8008092:	bf28      	it	cs
 8008094:	461c      	movcs	r4, r3
}
 8008096:	4620      	mov	r0, r4
 8008098:	bd10      	pop	{r4, pc}
	...

0800809c <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800809c:	b308      	cbz	r0, 80080e2 <tcp_netif_ip_addr_changed+0x46>
{
 800809e:	b538      	push	{r3, r4, r5, lr}
 80080a0:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 80080a2:	6802      	ldr	r2, [r0, #0]
 80080a4:	b902      	cbnz	r2, 80080a8 <tcp_netif_ip_addr_changed+0xc>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	460d      	mov	r5, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80080aa:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <tcp_netif_ip_addr_changed+0x48>)
 80080ac:	6819      	ldr	r1, [r3, #0]
 80080ae:	f7ff ff31 	bl	8007f14 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80080b2:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <tcp_netif_ip_addr_changed+0x4c>)
 80080b4:	6819      	ldr	r1, [r3, #0]
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff ff2c 	bl	8007f14 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 80080bc:	2d00      	cmp	r5, #0
 80080be:	d0f2      	beq.n	80080a6 <tcp_netif_ip_addr_changed+0xa>
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0ef      	beq.n	80080a6 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <tcp_netif_ip_addr_changed+0x50>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	e000      	b.n	80080ce <tcp_netif_ip_addr_changed+0x32>
{
 80080cc:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0e9      	beq.n	80080a6 <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 80080d2:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	6821      	ldr	r1, [r4, #0]
 80080d8:	4288      	cmp	r0, r1
 80080da:	d1f7      	bne.n	80080cc <tcp_netif_ip_addr_changed+0x30>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80080dc:	6829      	ldr	r1, [r5, #0]
 80080de:	6019      	str	r1, [r3, #0]
 80080e0:	e7f4      	b.n	80080cc <tcp_netif_ip_addr_changed+0x30>
 80080e2:	4770      	bx	lr
 80080e4:	200081f0 	.word	0x200081f0
 80080e8:	200081fc 	.word	0x200081fc
 80080ec:	200081f8 	.word	0x200081f8

080080f0 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80080f0:	4b0e      	ldr	r3, [pc, #56]	; (800812c <tcp_getoptbyte+0x3c>)
 80080f2:	6819      	ldr	r1, [r3, #0]
 80080f4:	b189      	cbz	r1, 800811a <tcp_getoptbyte+0x2a>
 80080f6:	4b0e      	ldr	r3, [pc, #56]	; (8008130 <tcp_getoptbyte+0x40>)
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	4a0e      	ldr	r2, [pc, #56]	; (8008134 <tcp_getoptbyte+0x44>)
 80080fc:	8812      	ldrh	r2, [r2, #0]
 80080fe:	4293      	cmp	r3, r2
 8008100:	d30b      	bcc.n	800811a <tcp_getoptbyte+0x2a>
{
 8008102:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008104:	1c5c      	adds	r4, r3, #1
 8008106:	480a      	ldr	r0, [pc, #40]	; (8008130 <tcp_getoptbyte+0x40>)
 8008108:	8004      	strh	r4, [r0, #0]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	b2d2      	uxtb	r2, r2
 800810e:	1a9b      	subs	r3, r3, r2
 8008110:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8008112:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8008114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008118:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800811a:	4b07      	ldr	r3, [pc, #28]	; (8008138 <tcp_getoptbyte+0x48>)
 800811c:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 800811e:	4904      	ldr	r1, [pc, #16]	; (8008130 <tcp_getoptbyte+0x40>)
 8008120:	880a      	ldrh	r2, [r1, #0]
 8008122:	1c50      	adds	r0, r2, #1
 8008124:	8008      	strh	r0, [r1, #0]
 8008126:	4413      	add	r3, r2
 8008128:	7d18      	ldrb	r0, [r3, #20]
}
 800812a:	4770      	bx	lr
 800812c:	20004908 	.word	0x20004908
 8008130:	200048fc 	.word	0x200048fc
 8008134:	20004904 	.word	0x20004904
 8008138:	20004900 	.word	0x20004900

0800813c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800813c:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800813e:	4b1e      	ldr	r3, [pc, #120]	; (80081b8 <tcp_parseopt+0x7c>)
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d037      	beq.n	80081b6 <tcp_parseopt+0x7a>
 8008146:	4604      	mov	r4, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008148:	4b1c      	ldr	r3, [pc, #112]	; (80081bc <tcp_parseopt+0x80>)
 800814a:	2200      	movs	r2, #0
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <tcp_parseopt+0x80>)
 8008150:	881a      	ldrh	r2, [r3, #0]
 8008152:	4b19      	ldr	r3, [pc, #100]	; (80081b8 <tcp_parseopt+0x7c>)
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d22d      	bcs.n	80081b6 <tcp_parseopt+0x7a>
      u8_t opt = tcp_getoptbyte();
 800815a:	f7ff ffc9 	bl	80080f0 <tcp_getoptbyte>
      switch (opt) {
 800815e:	2801      	cmp	r0, #1
 8008160:	d0f5      	beq.n	800814e <tcp_parseopt+0x12>
 8008162:	b340      	cbz	r0, 80081b6 <tcp_parseopt+0x7a>
 8008164:	2802      	cmp	r0, #2
 8008166:	d11c      	bne.n	80081a2 <tcp_parseopt+0x66>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008168:	f7ff ffc2 	bl	80080f0 <tcp_getoptbyte>
 800816c:	2804      	cmp	r0, #4
 800816e:	d122      	bne.n	80081b6 <tcp_parseopt+0x7a>
 8008170:	4b12      	ldr	r3, [pc, #72]	; (80081bc <tcp_parseopt+0x80>)
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	3302      	adds	r3, #2
 8008176:	4a10      	ldr	r2, [pc, #64]	; (80081b8 <tcp_parseopt+0x7c>)
 8008178:	8812      	ldrh	r2, [r2, #0]
 800817a:	4293      	cmp	r3, r2
 800817c:	dc1b      	bgt.n	80081b6 <tcp_parseopt+0x7a>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800817e:	f7ff ffb7 	bl	80080f0 <tcp_getoptbyte>
 8008182:	b285      	uxth	r5, r0
 8008184:	022d      	lsls	r5, r5, #8
 8008186:	b2ad      	uxth	r5, r5
        mss |= tcp_getoptbyte();
 8008188:	f7ff ffb2 	bl	80080f0 <tcp_getoptbyte>
 800818c:	b280      	uxth	r0, r0
 800818e:	4305      	orrs	r5, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008190:	1e6b      	subs	r3, r5, #1
 8008192:	b29b      	uxth	r3, r3
 8008194:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008198:	d301      	bcc.n	800819e <tcp_parseopt+0x62>
 800819a:	f44f 7506 	mov.w	r5, #536	; 0x218
 800819e:	8665      	strh	r5, [r4, #50]	; 0x32
        break;
 80081a0:	e7d5      	b.n	800814e <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80081a2:	f7ff ffa5 	bl	80080f0 <tcp_getoptbyte>
        if (data < 2) {
 80081a6:	2801      	cmp	r0, #1
 80081a8:	d905      	bls.n	80081b6 <tcp_parseopt+0x7a>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80081aa:	4a04      	ldr	r2, [pc, #16]	; (80081bc <tcp_parseopt+0x80>)
 80081ac:	8813      	ldrh	r3, [r2, #0]
 80081ae:	4418      	add	r0, r3
 80081b0:	1e83      	subs	r3, r0, #2
 80081b2:	8013      	strh	r3, [r2, #0]
 80081b4:	e7cb      	b.n	800814e <tcp_parseopt+0x12>
      }
    }
  }
}
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	2000490c 	.word	0x2000490c
 80081bc:	200048fc 	.word	0x200048fc

080081c0 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 80081c0:	4b0e      	ldr	r3, [pc, #56]	; (80081fc <tcp_input_delayed_close+0x3c>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	f013 0f10 	tst.w	r3, #16
 80081c8:	d016      	beq.n	80081f8 <tcp_input_delayed_close+0x38>
{
 80081ca:	b510      	push	{r4, lr}
 80081cc:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 80081ce:	7e83      	ldrb	r3, [r0, #26]
 80081d0:	f013 0f10 	tst.w	r3, #16
 80081d4:	d106      	bne.n	80081e4 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80081d6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80081da:	b11b      	cbz	r3, 80081e4 <tcp_input_delayed_close+0x24>
 80081dc:	f06f 010e 	mvn.w	r1, #14
 80081e0:	6900      	ldr	r0, [r0, #16]
 80081e2:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80081e4:	4621      	mov	r1, r4
 80081e6:	4806      	ldr	r0, [pc, #24]	; (8008200 <tcp_input_delayed_close+0x40>)
 80081e8:	f7ff fc02 	bl	80079f0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80081ec:	4621      	mov	r1, r4
 80081ee:	2001      	movs	r0, #1
 80081f0:	f7fe fa58 	bl	80066a4 <memp_free>
    return 1;
 80081f4:	2001      	movs	r0, #1
}
 80081f6:	bd10      	pop	{r4, pc}
  return 0;
 80081f8:	2000      	movs	r0, #0
}
 80081fa:	4770      	bx	lr
 80081fc:	200048f4 	.word	0x200048f4
 8008200:	200081f0 	.word	0x200081f0

08008204 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8008204:	4b1c      	ldr	r3, [pc, #112]	; (8008278 <tcp_timewait_input+0x74>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	f013 0f04 	tst.w	r3, #4
 800820c:	d132      	bne.n	8008274 <tcp_timewait_input+0x70>
{
 800820e:	b510      	push	{r4, lr}
 8008210:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 8008212:	f013 0f02 	tst.w	r3, #2
 8008216:	d01c      	beq.n	8008252 <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008218:	4b18      	ldr	r3, [pc, #96]	; (800827c <tcp_timewait_input+0x78>)
 800821a:	6819      	ldr	r1, [r3, #0]
 800821c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800821e:	1aca      	subs	r2, r1, r3
 8008220:	2a00      	cmp	r2, #0
 8008222:	db1c      	blt.n	800825e <tcp_timewait_input+0x5a>
 8008224:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8008226:	4413      	add	r3, r2
 8008228:	1acb      	subs	r3, r1, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	dc17      	bgt.n	800825e <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800822e:	4b14      	ldr	r3, [pc, #80]	; (8008280 <tcp_timewait_input+0x7c>)
 8008230:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008232:	4a14      	ldr	r2, [pc, #80]	; (8008284 <tcp_timewait_input+0x80>)
 8008234:	4814      	ldr	r0, [pc, #80]	; (8008288 <tcp_timewait_input+0x84>)
 8008236:	8800      	ldrh	r0, [r0, #0]
 8008238:	881c      	ldrh	r4, [r3, #0]
 800823a:	9401      	str	r4, [sp, #4]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	3204      	adds	r2, #4
 8008244:	4401      	add	r1, r0
 8008246:	4811      	ldr	r0, [pc, #68]	; (800828c <tcp_timewait_input+0x88>)
 8008248:	6800      	ldr	r0, [r0, #0]
 800824a:	f002 f99d 	bl	800a588 <tcp_rst>
}
 800824e:	b002      	add	sp, #8
 8008250:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 8008252:	f013 0f01 	tst.w	r3, #1
 8008256:	d002      	beq.n	800825e <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 8008258:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <tcp_timewait_input+0x8c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 800825e:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <tcp_timewait_input+0x84>)
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f3      	beq.n	800824e <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 8008266:	7e83      	ldrb	r3, [r0, #26]
 8008268:	f043 0302 	orr.w	r3, r3, #2
 800826c:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 800826e:	f002 f84b 	bl	800a308 <tcp_output>
 8008272:	e7ec      	b.n	800824e <tcp_timewait_input+0x4a>
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	200048d8 	.word	0x200048d8
 800827c:	200048f8 	.word	0x200048f8
 8008280:	20004900 	.word	0x20004900
 8008284:	20004ad0 	.word	0x20004ad0
 8008288:	2000490e 	.word	0x2000490e
 800828c:	200048d4 	.word	0x200048d4
 8008290:	200081f4 	.word	0x200081f4

08008294 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8008294:	4b3c      	ldr	r3, [pc, #240]	; (8008388 <tcp_listen_input+0xf4>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	f013 0f04 	tst.w	r3, #4
 800829c:	d173      	bne.n	8008386 <tcp_listen_input+0xf2>
{
 800829e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082a0:	b083      	sub	sp, #12
 80082a2:	4604      	mov	r4, r0
  if (flags & TCP_ACK) {
 80082a4:	f013 0f10 	tst.w	r3, #16
 80082a8:	d104      	bne.n	80082b4 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 80082aa:	f013 0f02 	tst.w	r3, #2
 80082ae:	d114      	bne.n	80082da <tcp_listen_input+0x46>
}
 80082b0:	b003      	add	sp, #12
 80082b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082b4:	4b35      	ldr	r3, [pc, #212]	; (800838c <tcp_listen_input+0xf8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80082b8:	4a35      	ldr	r2, [pc, #212]	; (8008390 <tcp_listen_input+0xfc>)
 80082ba:	4936      	ldr	r1, [pc, #216]	; (8008394 <tcp_listen_input+0x100>)
 80082bc:	880c      	ldrh	r4, [r1, #0]
 80082be:	4936      	ldr	r1, [pc, #216]	; (8008398 <tcp_listen_input+0x104>)
 80082c0:	6809      	ldr	r1, [r1, #0]
 80082c2:	4836      	ldr	r0, [pc, #216]	; (800839c <tcp_listen_input+0x108>)
 80082c4:	6800      	ldr	r0, [r0, #0]
 80082c6:	881d      	ldrh	r5, [r3, #0]
 80082c8:	9501      	str	r5, [sp, #4]
 80082ca:	885b      	ldrh	r3, [r3, #2]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	4613      	mov	r3, r2
 80082d0:	3204      	adds	r2, #4
 80082d2:	4421      	add	r1, r4
 80082d4:	f002 f958 	bl	800a588 <tcp_rst>
 80082d8:	e7ea      	b.n	80082b0 <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 80082da:	7d40      	ldrb	r0, [r0, #21]
 80082dc:	f7ff fe5c 	bl	8007f98 <tcp_alloc>
    if (npcb == NULL) {
 80082e0:	4605      	mov	r5, r0
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d041      	beq.n	800836a <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80082e6:	4b2e      	ldr	r3, [pc, #184]	; (80083a0 <tcp_listen_input+0x10c>)
 80082e8:	695a      	ldr	r2, [r3, #20]
 80082ea:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80082f0:	8ae3      	ldrh	r3, [r4, #22]
 80082f2:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80082f4:	4e25      	ldr	r6, [pc, #148]	; (800838c <tcp_listen_input+0xf8>)
 80082f6:	6833      	ldr	r3, [r6, #0]
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80082fc:	2303      	movs	r3, #3
 80082fe:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8008300:	4f25      	ldr	r7, [pc, #148]	; (8008398 <tcp_listen_input+0x104>)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008308:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800830a:	f7ff feab 	bl	8008064 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800830e:	6568      	str	r0, [r5, #84]	; 0x54
    npcb->snd_nxt = iss;
 8008310:	64e8      	str	r0, [r5, #76]	; 0x4c
    npcb->lastack = iss;
 8008312:	6468      	str	r0, [r5, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008314:	65a8      	str	r0, [r5, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	3b01      	subs	r3, #1
 800831a:	652b      	str	r3, [r5, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	612b      	str	r3, [r5, #16]
    npcb->listener = pcb;
 8008320:	67ac      	str	r4, [r5, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008322:	7a23      	ldrb	r3, [r4, #8]
 8008324:	f003 030c 	and.w	r3, r3, #12
 8008328:	722b      	strb	r3, [r5, #8]
    TCP_REG_ACTIVE(npcb);
 800832a:	4b1e      	ldr	r3, [pc, #120]	; (80083a4 <tcp_listen_input+0x110>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	60ea      	str	r2, [r5, #12]
 8008330:	601d      	str	r5, [r3, #0]
 8008332:	f002 fb27 	bl	800a984 <tcp_timer_needed>
 8008336:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <tcp_listen_input+0x114>)
 8008338:	2201      	movs	r2, #1
 800833a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800833c:	4628      	mov	r0, r5
 800833e:	f7ff fefd 	bl	800813c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008342:	6833      	ldr	r3, [r6, #0]
 8008344:	89db      	ldrh	r3, [r3, #14]
 8008346:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800834a:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800834e:	1d29      	adds	r1, r5, #4
 8008350:	8e68      	ldrh	r0, [r5, #50]	; 0x32
 8008352:	f7ff fe93 	bl	800807c <tcp_eff_send_mss_impl>
 8008356:	8668      	strh	r0, [r5, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008358:	2112      	movs	r1, #18
 800835a:	4628      	mov	r0, r5
 800835c:	f001 fecc 	bl	800a0f8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8008360:	b960      	cbnz	r0, 800837c <tcp_listen_input+0xe8>
    tcp_output(npcb);
 8008362:	4628      	mov	r0, r5
 8008364:	f001 ffd0 	bl	800a308 <tcp_output>
 8008368:	e7a2      	b.n	80082b0 <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800836a:	69a3      	ldr	r3, [r4, #24]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d09f      	beq.n	80082b0 <tcp_listen_input+0x1c>
 8008370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008374:	2100      	movs	r1, #0
 8008376:	6920      	ldr	r0, [r4, #16]
 8008378:	4798      	blx	r3
 800837a:	e799      	b.n	80082b0 <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 800837c:	2100      	movs	r1, #0
 800837e:	4628      	mov	r0, r5
 8008380:	f7ff fd04 	bl	8007d8c <tcp_abandon>
      return;
 8008384:	e794      	b.n	80082b0 <tcp_listen_input+0x1c>
 8008386:	4770      	bx	lr
 8008388:	200048d8 	.word	0x200048d8
 800838c:	20004900 	.word	0x20004900
 8008390:	20004ad0 	.word	0x20004ad0
 8008394:	2000490e 	.word	0x2000490e
 8008398:	200048f8 	.word	0x200048f8
 800839c:	200048d4 	.word	0x200048d4
 80083a0:	20004ac0 	.word	0x20004ac0
 80083a4:	200081f0 	.word	0x200081f0
 80083a8:	200081ec 	.word	0x200081ec

080083ac <tcp_oos_insert_segment>:
{
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	4605      	mov	r5, r0
 80083b0:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80083b2:	68c3      	ldr	r3, [r0, #12]
 80083b4:	8998      	ldrh	r0, [r3, #12]
 80083b6:	f7fd fe8d 	bl	80060d4 <lwip_htons>
 80083ba:	f010 0f01 	tst.w	r0, #1
 80083be:	d012      	beq.n	80083e6 <tcp_oos_insert_segment+0x3a>
    tcp_segs_free(next);
 80083c0:	4620      	mov	r0, r4
 80083c2:	f7ff f85c 	bl	800747e <tcp_segs_free>
    next = NULL;
 80083c6:	2400      	movs	r4, #0
  cseg->next = next;
 80083c8:	602c      	str	r4, [r5, #0]
}
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80083cc:	68eb      	ldr	r3, [r5, #12]
 80083ce:	899e      	ldrh	r6, [r3, #12]
 80083d0:	2001      	movs	r0, #1
 80083d2:	f7fd fe7f 	bl	80060d4 <lwip_htons>
 80083d6:	68eb      	ldr	r3, [r5, #12]
 80083d8:	4330      	orrs	r0, r6
 80083da:	8198      	strh	r0, [r3, #12]
      next = next->next;
 80083dc:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 80083de:	4620      	mov	r0, r4
 80083e0:	f7ff f840 	bl	8007464 <tcp_seg_free>
      next = next->next;
 80083e4:	4634      	mov	r4, r6
    while (next &&
 80083e6:	b18c      	cbz	r4, 800840c <tcp_oos_insert_segment+0x60>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80083e8:	892b      	ldrh	r3, [r5, #8]
 80083ea:	4a11      	ldr	r2, [pc, #68]	; (8008430 <tcp_oos_insert_segment+0x84>)
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	4413      	add	r3, r2
 80083f0:	68e1      	ldr	r1, [r4, #12]
 80083f2:	684a      	ldr	r2, [r1, #4]
 80083f4:	8920      	ldrh	r0, [r4, #8]
 80083f6:	4402      	add	r2, r0
 80083f8:	1a9b      	subs	r3, r3, r2
    while (next &&
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	db06      	blt.n	800840c <tcp_oos_insert_segment+0x60>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80083fe:	8988      	ldrh	r0, [r1, #12]
 8008400:	f7fd fe68 	bl	80060d4 <lwip_htons>
 8008404:	f010 0f01 	tst.w	r0, #1
 8008408:	d0e8      	beq.n	80083dc <tcp_oos_insert_segment+0x30>
 800840a:	e7df      	b.n	80083cc <tcp_oos_insert_segment+0x20>
    if (next &&
 800840c:	2c00      	cmp	r4, #0
 800840e:	d0db      	beq.n	80083c8 <tcp_oos_insert_segment+0x1c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008410:	892b      	ldrh	r3, [r5, #8]
 8008412:	4a07      	ldr	r2, [pc, #28]	; (8008430 <tcp_oos_insert_segment+0x84>)
 8008414:	6811      	ldr	r1, [r2, #0]
 8008416:	440b      	add	r3, r1
 8008418:	68e2      	ldr	r2, [r4, #12]
 800841a:	6852      	ldr	r2, [r2, #4]
 800841c:	1a9b      	subs	r3, r3, r2
    if (next &&
 800841e:	2b00      	cmp	r3, #0
 8008420:	ddd2      	ble.n	80083c8 <tcp_oos_insert_segment+0x1c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008422:	1a52      	subs	r2, r2, r1
 8008424:	b291      	uxth	r1, r2
 8008426:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008428:	6868      	ldr	r0, [r5, #4]
 800842a:	f7fe fc67 	bl	8006cfc <pbuf_realloc>
 800842e:	e7cb      	b.n	80083c8 <tcp_oos_insert_segment+0x1c>
 8008430:	200048f8 	.word	0x200048f8

08008434 <tcp_receive>:
{
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008438:	7d03      	ldrb	r3, [r0, #20]
 800843a:	2b03      	cmp	r3, #3
 800843c:	d979      	bls.n	8008532 <tcp_receive+0xfe>
  if (flags & TCP_ACK) {
 800843e:	4bb3      	ldr	r3, [pc, #716]	; (800870c <tcp_receive+0x2d8>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f013 0f10 	tst.w	r3, #16
 8008446:	f000 819e 	beq.w	8008786 <tcp_receive+0x352>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800844a:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 800844e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008450:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008452:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008454:	4bae      	ldr	r3, [pc, #696]	; (8008710 <tcp_receive+0x2dc>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	1acd      	subs	r5, r1, r3
 800845a:	2d00      	cmp	r5, #0
 800845c:	db7c      	blt.n	8008558 <tcp_receive+0x124>
 800845e:	4299      	cmp	r1, r3
 8008460:	d06f      	beq.n	8008542 <tcp_receive+0x10e>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008462:	49ac      	ldr	r1, [pc, #688]	; (8008714 <tcp_receive+0x2e0>)
 8008464:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008466:	428a      	cmp	r2, r1
 8008468:	d071      	beq.n	800854e <tcp_receive+0x11a>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800846a:	4baa      	ldr	r3, [pc, #680]	; (8008714 <tcp_receive+0x2e0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008470:	1a5a      	subs	r2, r3, r1
 8008472:	2a00      	cmp	r2, #0
 8008474:	f340 8095 	ble.w	80085a2 <tcp_receive+0x16e>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008478:	2a01      	cmp	r2, #1
 800847a:	d404      	bmi.n	8008486 <tcp_receive+0x52>
 800847c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800847e:	1a9a      	subs	r2, r3, r2
 8008480:	2a00      	cmp	r2, #0
 8008482:	f340 80be 	ble.w	8008602 <tcp_receive+0x1ce>
      tcp_send_empty_ack(pcb);
 8008486:	4620      	mov	r0, r4
 8008488:	f001 ff05 	bl	800a296 <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 800848c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 816a 	beq.w	8008768 <tcp_receive+0x334>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008494:	4a9f      	ldr	r2, [pc, #636]	; (8008714 <tcp_receive+0x2e0>)
 8008496:	6815      	ldr	r5, [r2, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	6858      	ldr	r0, [r3, #4]
 800849c:	f7fd fe1d 	bl	80060da <lwip_htonl>
 80084a0:	4606      	mov	r6, r0
 80084a2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80084a4:	891f      	ldrh	r7, [r3, #8]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	8998      	ldrh	r0, [r3, #12]
 80084aa:	f7fd fe13 	bl	80060d4 <lwip_htons>
 80084ae:	f010 0f03 	tst.w	r0, #3
 80084b2:	f000 8157 	beq.w	8008764 <tcp_receive+0x330>
 80084b6:	2301      	movs	r3, #1
 80084b8:	441f      	add	r7, r3
 80084ba:	443e      	add	r6, r7
 80084bc:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 80084be:	2d00      	cmp	r5, #0
 80084c0:	f2c0 8152 	blt.w	8008768 <tcp_receive+0x334>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80084c4:	4b93      	ldr	r3, [pc, #588]	; (8008714 <tcp_receive+0x2e0>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f300 814b 	bgt.w	8008768 <tcp_receive+0x334>
      next = pcb->unsent;
 80084d2:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 8138 	beq.w	800874e <tcp_receive+0x31a>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80084de:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 80084e2:	6868      	ldr	r0, [r5, #4]
 80084e4:	f7fe fc82 	bl	8006dec <pbuf_clen>
 80084e8:	4286      	cmp	r6, r0
 80084ea:	f0c0 8133 	bcc.w	8008754 <tcp_receive+0x320>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80084ee:	6868      	ldr	r0, [r5, #4]
 80084f0:	f7fe fc7c 	bl	8006dec <pbuf_clen>
 80084f4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80084f8:	1a18      	subs	r0, r3, r0
 80084fa:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 80084fe:	892b      	ldrh	r3, [r5, #8]
 8008500:	4a85      	ldr	r2, [pc, #532]	; (8008718 <tcp_receive+0x2e4>)
 8008502:	8811      	ldrh	r1, [r2, #0]
 8008504:	440b      	add	r3, r1
 8008506:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 8008508:	4628      	mov	r0, r5
 800850a:	f7fe ffab 	bl	8007464 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 800850e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0ba      	beq.n	800848c <tcp_receive+0x58>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008516:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1b7      	bne.n	800848c <tcp_receive+0x58>
 800851c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1b4      	bne.n	800848c <tcp_receive+0x58>
 8008522:	4b7e      	ldr	r3, [pc, #504]	; (800871c <tcp_receive+0x2e8>)
 8008524:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8008528:	497d      	ldr	r1, [pc, #500]	; (8008720 <tcp_receive+0x2ec>)
 800852a:	487e      	ldr	r0, [pc, #504]	; (8008724 <tcp_receive+0x2f0>)
 800852c:	f006 fca8 	bl	800ee80 <iprintf>
 8008530:	e7ac      	b.n	800848c <tcp_receive+0x58>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008532:	4b7a      	ldr	r3, [pc, #488]	; (800871c <tcp_receive+0x2e8>)
 8008534:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8008538:	497b      	ldr	r1, [pc, #492]	; (8008728 <tcp_receive+0x2f4>)
 800853a:	487a      	ldr	r0, [pc, #488]	; (8008724 <tcp_receive+0x2f0>)
 800853c:	f006 fca0 	bl	800ee80 <iprintf>
 8008540:	e77d      	b.n	800843e <tcp_receive+0xa>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008542:	4974      	ldr	r1, [pc, #464]	; (8008714 <tcp_receive+0x2e0>)
 8008544:	6809      	ldr	r1, [r1, #0]
 8008546:	1a51      	subs	r1, r2, r1
 8008548:	2900      	cmp	r1, #0
 800854a:	da8a      	bge.n	8008462 <tcp_receive+0x2e>
 800854c:	e004      	b.n	8008558 <tcp_receive+0x124>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800854e:	4a77      	ldr	r2, [pc, #476]	; (800872c <tcp_receive+0x2f8>)
 8008550:	6812      	ldr	r2, [r2, #0]
 8008552:	89d2      	ldrh	r2, [r2, #14]
 8008554:	4290      	cmp	r0, r2
 8008556:	d288      	bcs.n	800846a <tcp_receive+0x36>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008558:	4a74      	ldr	r2, [pc, #464]	; (800872c <tcp_receive+0x2f8>)
 800855a:	6812      	ldr	r2, [r2, #0]
 800855c:	89d2      	ldrh	r2, [r2, #14]
 800855e:	b291      	uxth	r1, r2
 8008560:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008564:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 8008568:	4281      	cmp	r1, r0
 800856a:	d901      	bls.n	8008570 <tcp_receive+0x13c>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800856c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 8008570:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8008572:	4b68      	ldr	r3, [pc, #416]	; (8008714 <tcp_receive+0x2e0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8008578:	b951      	cbnz	r1, 8008590 <tcp_receive+0x15c>
        if (pcb->persist_backoff == 0) {
 800857a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800857e:	2b00      	cmp	r3, #0
 8008580:	f47f af73 	bne.w	800846a <tcp_receive+0x36>
          pcb->persist_cnt = 0;
 8008584:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8008588:	2301      	movs	r3, #1
 800858a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800858e:	e76c      	b.n	800846a <tcp_receive+0x36>
      } else if (pcb->persist_backoff > 0) {
 8008590:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008594:	2b00      	cmp	r3, #0
 8008596:	f43f af68 	beq.w	800846a <tcp_receive+0x36>
          pcb->persist_backoff = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80085a0:	e763      	b.n	800846a <tcp_receive+0x36>
      if (tcplen == 0) {
 80085a2:	4a63      	ldr	r2, [pc, #396]	; (8008730 <tcp_receive+0x2fc>)
 80085a4:	8812      	ldrh	r2, [r2, #0]
 80085a6:	b92a      	cbnz	r2, 80085b4 <tcp_receive+0x180>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80085a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80085aa:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 80085ae:	4402      	add	r2, r0
 80085b0:	42b2      	cmp	r2, r6
 80085b2:	d003      	beq.n	80085bc <tcp_receive+0x188>
        pcb->dupacks = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085ba:	e767      	b.n	800848c <tcp_receive+0x58>
          if (pcb->rtime >= 0) {
 80085bc:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80085c0:	2a00      	cmp	r2, #0
 80085c2:	dbf7      	blt.n	80085b4 <tcp_receive+0x180>
            if (pcb->lastack == ackno) {
 80085c4:	428b      	cmp	r3, r1
 80085c6:	d1f5      	bne.n	80085b4 <tcp_receive+0x180>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80085c8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80085cc:	2bff      	cmp	r3, #255	; 0xff
 80085ce:	d002      	beq.n	80085d6 <tcp_receive+0x1a2>
                ++pcb->dupacks;
 80085d0:	3301      	adds	r3, #1
 80085d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 80085d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d90a      	bls.n	80085f4 <tcp_receive+0x1c0>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80085de:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80085e2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80085e4:	4413      	add	r3, r2
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	429a      	cmp	r2, r3
 80085ea:	f4bf af4f 	bcs.w	800848c <tcp_receive+0x58>
                  pcb->cwnd += pcb->mss;
 80085ee:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 80085f2:	e74b      	b.n	800848c <tcp_receive+0x58>
              } else if (pcb->dupacks == 3) {
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	f47f af49 	bne.w	800848c <tcp_receive+0x58>
                tcp_rexmit_fast(pcb);
 80085fa:	4620      	mov	r0, r4
 80085fc:	f002 f85f 	bl	800a6be <tcp_rexmit_fast>
 8008600:	e744      	b.n	800848c <tcp_receive+0x58>
      if (pcb->flags & TF_INFR) {
 8008602:	7ea2      	ldrb	r2, [r4, #26]
 8008604:	f012 0f04 	tst.w	r2, #4
 8008608:	d006      	beq.n	8008618 <tcp_receive+0x1e4>
        pcb->flags &= ~TF_INFR;
 800860a:	f022 0204 	bic.w	r2, r2, #4
 800860e:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8008610:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008614:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 8008618:	2100      	movs	r1, #0
 800861a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800861e:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8008622:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008624:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8008628:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800862c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8008630:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8008632:	7d23      	ldrb	r3, [r4, #20]
 8008634:	2b03      	cmp	r3, #3
 8008636:	d90c      	bls.n	8008652 <tcp_receive+0x21e>
        if (pcb->cwnd < pcb->ssthresh) {
 8008638:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800863c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8008640:	429a      	cmp	r2, r3
 8008642:	d24b      	bcs.n	80086dc <tcp_receive+0x2a8>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008644:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008646:	4413      	add	r3, r2
 8008648:	b29b      	uxth	r3, r3
 800864a:	429a      	cmp	r2, r3
 800864c:	d201      	bcs.n	8008652 <tcp_receive+0x21e>
            pcb->cwnd += pcb->mss;
 800864e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 8008652:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008654:	2b00      	cmp	r3, #0
 8008656:	d06f      	beq.n	8008738 <tcp_receive+0x304>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	6858      	ldr	r0, [r3, #4]
 800865c:	f7fd fd3d 	bl	80060da <lwip_htonl>
 8008660:	4605      	mov	r5, r0
 8008662:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008664:	891e      	ldrh	r6, [r3, #8]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	8998      	ldrh	r0, [r3, #12]
 800866a:	f7fd fd33 	bl	80060d4 <lwip_htons>
 800866e:	f010 0f03 	tst.w	r0, #3
 8008672:	d048      	beq.n	8008706 <tcp_receive+0x2d2>
 8008674:	2301      	movs	r3, #1
 8008676:	441e      	add	r6, r3
 8008678:	4435      	add	r5, r6
 800867a:	4b26      	ldr	r3, [pc, #152]	; (8008714 <tcp_receive+0x2e0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 8008680:	2d00      	cmp	r5, #0
 8008682:	dc59      	bgt.n	8008738 <tcp_receive+0x304>
        next = pcb->unacked;
 8008684:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 8008686:	682b      	ldr	r3, [r5, #0]
 8008688:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800868a:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800868e:	6868      	ldr	r0, [r5, #4]
 8008690:	f7fe fbac 	bl	8006dec <pbuf_clen>
 8008694:	4286      	cmp	r6, r0
 8008696:	d32e      	bcc.n	80086f6 <tcp_receive+0x2c2>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008698:	6868      	ldr	r0, [r5, #4]
 800869a:	f7fe fba7 	bl	8006dec <pbuf_clen>
 800869e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80086a2:	1a18      	subs	r0, r3, r0
 80086a4:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 80086a8:	892b      	ldrh	r3, [r5, #8]
 80086aa:	4a1b      	ldr	r2, [pc, #108]	; (8008718 <tcp_receive+0x2e4>)
 80086ac:	8811      	ldrh	r1, [r2, #0]
 80086ae:	440b      	add	r3, r1
 80086b0:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 80086b2:	4628      	mov	r0, r5
 80086b4:	f7fe fed6 	bl	8007464 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 80086b8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0c8      	beq.n	8008652 <tcp_receive+0x21e>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80086c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1c5      	bne.n	8008652 <tcp_receive+0x21e>
 80086c6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1c2      	bne.n	8008652 <tcp_receive+0x21e>
 80086cc:	4b13      	ldr	r3, [pc, #76]	; (800871c <tcp_receive+0x2e8>)
 80086ce:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80086d2:	4913      	ldr	r1, [pc, #76]	; (8008720 <tcp_receive+0x2ec>)
 80086d4:	4813      	ldr	r0, [pc, #76]	; (8008724 <tcp_receive+0x2f0>)
 80086d6:	f006 fbd3 	bl	800ee80 <iprintf>
 80086da:	e7ba      	b.n	8008652 <tcp_receive+0x21e>
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80086dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80086de:	fb03 f303 	mul.w	r3, r3, r3
 80086e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80086e6:	fa12 f383 	uxtah	r3, r2, r3
 80086ea:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d2b0      	bcs.n	8008652 <tcp_receive+0x21e>
            pcb->cwnd = new_cwnd;
 80086f0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 80086f4:	e7ad      	b.n	8008652 <tcp_receive+0x21e>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <tcp_receive+0x2e8>)
 80086f8:	f240 429e 	movw	r2, #1182	; 0x49e
 80086fc:	490d      	ldr	r1, [pc, #52]	; (8008734 <tcp_receive+0x300>)
 80086fe:	4809      	ldr	r0, [pc, #36]	; (8008724 <tcp_receive+0x2f0>)
 8008700:	f006 fbbe 	bl	800ee80 <iprintf>
 8008704:	e7c8      	b.n	8008698 <tcp_receive+0x264>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008706:	2300      	movs	r3, #0
 8008708:	e7b5      	b.n	8008676 <tcp_receive+0x242>
 800870a:	bf00      	nop
 800870c:	200048d8 	.word	0x200048d8
 8008710:	200048f8 	.word	0x200048f8
 8008714:	200048d4 	.word	0x200048d4
 8008718:	200048ec 	.word	0x200048ec
 800871c:	08011598 	.word	0x08011598
 8008720:	08011610 	.word	0x08011610
 8008724:	080101d8 	.word	0x080101d8
 8008728:	080115cc 	.word	0x080115cc
 800872c:	20004900 	.word	0x20004900
 8008730:	2000490e 	.word	0x2000490e
 8008734:	080115e8 	.word	0x080115e8
      if (pcb->unacked == NULL) {
 8008738:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800873a:	b123      	cbz	r3, 8008746 <tcp_receive+0x312>
        pcb->rtime = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	76e3      	strb	r3, [r4, #27]
 8008744:	e6a2      	b.n	800848c <tcp_receive+0x58>
        pcb->rtime = -1;
 8008746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800874a:	8623      	strh	r3, [r4, #48]	; 0x30
 800874c:	e7f8      	b.n	8008740 <tcp_receive+0x30c>
        pcb->unsent_oversize = 0;
 800874e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8008752:	e6c4      	b.n	80084de <tcp_receive+0xaa>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008754:	4b9e      	ldr	r3, [pc, #632]	; (80089d0 <tcp_receive+0x59c>)
 8008756:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800875a:	499e      	ldr	r1, [pc, #632]	; (80089d4 <tcp_receive+0x5a0>)
 800875c:	489e      	ldr	r0, [pc, #632]	; (80089d8 <tcp_receive+0x5a4>)
 800875e:	f006 fb8f 	bl	800ee80 <iprintf>
 8008762:	e6c4      	b.n	80084ee <tcp_receive+0xba>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008764:	2300      	movs	r3, #0
 8008766:	e6a7      	b.n	80084b8 <tcp_receive+0x84>
    pcb->snd_buf += recv_acked;
 8008768:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800876c:	4a9b      	ldr	r2, [pc, #620]	; (80089dc <tcp_receive+0x5a8>)
 800876e:	8812      	ldrh	r2, [r2, #0]
 8008770:	4413      	add	r3, r2
 8008772:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008778:	b12b      	cbz	r3, 8008786 <tcp_receive+0x352>
 800877a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800877c:	4998      	ldr	r1, [pc, #608]	; (80089e0 <tcp_receive+0x5ac>)
 800877e:	6809      	ldr	r1, [r1, #0]
 8008780:	1a52      	subs	r2, r2, r1
 8008782:	2a00      	cmp	r2, #0
 8008784:	db28      	blt.n	80087d8 <tcp_receive+0x3a4>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008786:	4b97      	ldr	r3, [pc, #604]	; (80089e4 <tcp_receive+0x5b0>)
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 8343 	beq.w	8008e16 <tcp_receive+0x9e2>
 8008790:	7d22      	ldrb	r2, [r4, #20]
 8008792:	2a06      	cmp	r2, #6
 8008794:	f200 833f 	bhi.w	8008e16 <tcp_receive+0x9e2>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008798:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800879a:	4a93      	ldr	r2, [pc, #588]	; (80089e8 <tcp_receive+0x5b4>)
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	1a8e      	subs	r6, r1, r2
 80087a0:	2e01      	cmp	r6, #1
 80087a2:	d404      	bmi.n	80087ae <tcp_receive+0x37a>
 80087a4:	4413      	add	r3, r2
 80087a6:	1acb      	subs	r3, r1, r3
 80087a8:	3301      	adds	r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	dd35      	ble.n	800881a <tcp_receive+0x3e6>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80087ae:	1a52      	subs	r2, r2, r1
 80087b0:	2a00      	cmp	r2, #0
 80087b2:	f2c0 8092 	blt.w	80088da <tcp_receive+0x4a6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80087b6:	4b8c      	ldr	r3, [pc, #560]	; (80089e8 <tcp_receive+0x5b4>)
 80087b8:	6819      	ldr	r1, [r3, #0]
 80087ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80087bc:	1a8b      	subs	r3, r1, r2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	db06      	blt.n	80087d0 <tcp_receive+0x39c>
 80087c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80087c4:	4413      	add	r3, r2
 80087c6:	1acb      	subs	r3, r1, r3
 80087c8:	3301      	adds	r3, #1
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f340 808a 	ble.w	80088e4 <tcp_receive+0x4b0>
      tcp_send_empty_ack(pcb);
 80087d0:	4620      	mov	r0, r4
 80087d2:	f001 fd60 	bl	800a296 <tcp_send_empty_ack>
 80087d6:	e32e      	b.n	8008e36 <tcp_receive+0xa02>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80087d8:	4a84      	ldr	r2, [pc, #528]	; (80089ec <tcp_receive+0x5b8>)
 80087da:	6812      	ldr	r2, [r2, #0]
 80087dc:	1ad2      	subs	r2, r2, r3
 80087de:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 80087e0:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80087e4:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 80087e8:	b292      	uxth	r2, r2
 80087ea:	b213      	sxth	r3, r2
      pcb->sa += m;
 80087ec:	4411      	add	r1, r2
 80087ee:	b209      	sxth	r1, r1
 80087f0:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	db0e      	blt.n	8008814 <tcp_receive+0x3e0>
      m = m - (pcb->sv >> 2);
 80087f6:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 80087fa:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 80087fe:	fa12 f383 	uxtah	r3, r2, r3
 8008802:	b29b      	uxth	r3, r3
 8008804:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008806:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800880a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	6363      	str	r3, [r4, #52]	; 0x34
 8008812:	e7b8      	b.n	8008786 <tcp_receive+0x352>
        m = -m;
 8008814:	4252      	negs	r2, r2
 8008816:	b213      	sxth	r3, r2
 8008818:	e7ed      	b.n	80087f6 <tcp_receive+0x3c2>
      struct pbuf *p = inseg.p;
 800881a:	4b75      	ldr	r3, [pc, #468]	; (80089f0 <tcp_receive+0x5bc>)
 800881c:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 800881e:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008820:	b195      	cbz	r5, 8008848 <tcp_receive+0x414>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008822:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8008826:	429e      	cmp	r6, r3
 8008828:	dc16      	bgt.n	8008858 <tcp_receive+0x424>
      if (inseg.p->len < off) {
 800882a:	4b71      	ldr	r3, [pc, #452]	; (80089f0 <tcp_receive+0x5bc>)
 800882c:	6858      	ldr	r0, [r3, #4]
 800882e:	8943      	ldrh	r3, [r0, #10]
 8008830:	42b3      	cmp	r3, r6
 8008832:	da44      	bge.n	80088be <tcp_receive+0x48a>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008834:	8903      	ldrh	r3, [r0, #8]
 8008836:	42b3      	cmp	r3, r6
 8008838:	db16      	blt.n	8008868 <tcp_receive+0x434>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800883a:	4b6d      	ldr	r3, [pc, #436]	; (80089f0 <tcp_receive+0x5bc>)
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	891a      	ldrh	r2, [r3, #8]
 8008840:	b2b6      	uxth	r6, r6
 8008842:	1b92      	subs	r2, r2, r6
 8008844:	b292      	uxth	r2, r2
        while (p->len < off) {
 8008846:	e01c      	b.n	8008882 <tcp_receive+0x44e>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008848:	4b61      	ldr	r3, [pc, #388]	; (80089d0 <tcp_receive+0x59c>)
 800884a:	f240 523c 	movw	r2, #1340	; 0x53c
 800884e:	4969      	ldr	r1, [pc, #420]	; (80089f4 <tcp_receive+0x5c0>)
 8008850:	4861      	ldr	r0, [pc, #388]	; (80089d8 <tcp_receive+0x5a4>)
 8008852:	f006 fb15 	bl	800ee80 <iprintf>
 8008856:	e7e4      	b.n	8008822 <tcp_receive+0x3ee>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008858:	4b5d      	ldr	r3, [pc, #372]	; (80089d0 <tcp_receive+0x59c>)
 800885a:	f240 523d 	movw	r2, #1341	; 0x53d
 800885e:	4966      	ldr	r1, [pc, #408]	; (80089f8 <tcp_receive+0x5c4>)
 8008860:	485d      	ldr	r0, [pc, #372]	; (80089d8 <tcp_receive+0x5a4>)
 8008862:	f006 fb0d 	bl	800ee80 <iprintf>
 8008866:	e7e0      	b.n	800882a <tcp_receive+0x3f6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008868:	4b59      	ldr	r3, [pc, #356]	; (80089d0 <tcp_receive+0x59c>)
 800886a:	f240 523f 	movw	r2, #1343	; 0x53f
 800886e:	4963      	ldr	r1, [pc, #396]	; (80089fc <tcp_receive+0x5c8>)
 8008870:	4859      	ldr	r0, [pc, #356]	; (80089d8 <tcp_receive+0x5a4>)
 8008872:	f006 fb05 	bl	800ee80 <iprintf>
 8008876:	e7e0      	b.n	800883a <tcp_receive+0x406>
          off -= p->len;
 8008878:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 800887a:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	816b      	strh	r3, [r5, #10]
          p = p->next;
 8008880:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 8008882:	896b      	ldrh	r3, [r5, #10]
 8008884:	42bb      	cmp	r3, r7
 8008886:	dbf7      	blt.n	8008878 <tcp_receive+0x444>
        if (pbuf_header(p, (s16_t)-off)) {
 8008888:	4279      	negs	r1, r7
 800888a:	b209      	sxth	r1, r1
 800888c:	4628      	mov	r0, r5
 800888e:	f7fe f8d9 	bl	8006a44 <pbuf_header>
 8008892:	b960      	cbnz	r0, 80088ae <tcp_receive+0x47a>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008894:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008896:	4854      	ldr	r0, [pc, #336]	; (80089e8 <tcp_receive+0x5b4>)
 8008898:	6803      	ldr	r3, [r0, #0]
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	4954      	ldr	r1, [pc, #336]	; (80089f0 <tcp_receive+0x5bc>)
 800889e:	890d      	ldrh	r5, [r1, #8]
 80088a0:	fa15 f383 	uxtah	r3, r5, r3
 80088a4:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80088a6:	6002      	str	r2, [r0, #0]
 80088a8:	68cb      	ldr	r3, [r1, #12]
 80088aa:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80088ac:	e783      	b.n	80087b6 <tcp_receive+0x382>
          LWIP_ASSERT("pbuf_header failed", 0);
 80088ae:	4b48      	ldr	r3, [pc, #288]	; (80089d0 <tcp_receive+0x59c>)
 80088b0:	f240 524c 	movw	r2, #1356	; 0x54c
 80088b4:	4952      	ldr	r1, [pc, #328]	; (8008a00 <tcp_receive+0x5cc>)
 80088b6:	4848      	ldr	r0, [pc, #288]	; (80089d8 <tcp_receive+0x5a4>)
 80088b8:	f006 fae2 	bl	800ee80 <iprintf>
 80088bc:	e7ea      	b.n	8008894 <tcp_receive+0x460>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80088be:	4271      	negs	r1, r6
 80088c0:	b209      	sxth	r1, r1
 80088c2:	f7fe f8bf 	bl	8006a44 <pbuf_header>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d0e4      	beq.n	8008894 <tcp_receive+0x460>
          LWIP_ASSERT("pbuf_header failed", 0);
 80088ca:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <tcp_receive+0x59c>)
 80088cc:	f240 5251 	movw	r2, #1361	; 0x551
 80088d0:	494b      	ldr	r1, [pc, #300]	; (8008a00 <tcp_receive+0x5cc>)
 80088d2:	4841      	ldr	r0, [pc, #260]	; (80089d8 <tcp_receive+0x5a4>)
 80088d4:	f006 fad4 	bl	800ee80 <iprintf>
 80088d8:	e7dc      	b.n	8008894 <tcp_receive+0x460>
        tcp_ack_now(pcb);
 80088da:	7ea3      	ldrb	r3, [r4, #26]
 80088dc:	f043 0302 	orr.w	r3, r3, #2
 80088e0:	76a3      	strb	r3, [r4, #26]
 80088e2:	e768      	b.n	80087b6 <tcp_receive+0x382>
      if (pcb->rcv_nxt == seqno) {
 80088e4:	4291      	cmp	r1, r2
 80088e6:	d008      	beq.n	80088fa <tcp_receive+0x4c6>
        tcp_send_empty_ack(pcb);
 80088e8:	4620      	mov	r0, r4
 80088ea:	f001 fcd4 	bl	800a296 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 80088ee:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	f000 81ac 	beq.w	8008c4e <tcp_receive+0x81a>
          prev = NULL;
 80088f6:	2600      	movs	r6, #0
 80088f8:	e1e0      	b.n	8008cbc <tcp_receive+0x888>
        tcplen = TCP_TCPLEN(&inseg);
 80088fa:	4b3d      	ldr	r3, [pc, #244]	; (80089f0 <tcp_receive+0x5bc>)
 80088fc:	891d      	ldrh	r5, [r3, #8]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	8998      	ldrh	r0, [r3, #12]
 8008902:	f7fd fbe7 	bl	80060d4 <lwip_htons>
 8008906:	f010 0f03 	tst.w	r0, #3
 800890a:	d014      	beq.n	8008936 <tcp_receive+0x502>
 800890c:	2301      	movs	r3, #1
 800890e:	442b      	add	r3, r5
 8008910:	b29b      	uxth	r3, r3
 8008912:	4a34      	ldr	r2, [pc, #208]	; (80089e4 <tcp_receive+0x5b0>)
 8008914:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 8008916:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008918:	4293      	cmp	r3, r2
 800891a:	d80e      	bhi.n	800893a <tcp_receive+0x506>
        if (pcb->ooseq != NULL) {
 800891c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800891e:	2b00      	cmp	r3, #0
 8008920:	d079      	beq.n	8008a16 <tcp_receive+0x5e2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008922:	4b33      	ldr	r3, [pc, #204]	; (80089f0 <tcp_receive+0x5bc>)
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	8998      	ldrh	r0, [r3, #12]
 8008928:	f7fd fbd4 	bl	80060d4 <lwip_htons>
 800892c:	f010 0f01 	tst.w	r0, #1
 8008930:	d16e      	bne.n	8008a10 <tcp_receive+0x5dc>
            next = pcb->ooseq;
 8008932:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 8008934:	e0a2      	b.n	8008a7c <tcp_receive+0x648>
        tcplen = TCP_TCPLEN(&inseg);
 8008936:	2300      	movs	r3, #0
 8008938:	e7e9      	b.n	800890e <tcp_receive+0x4da>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800893a:	4b2d      	ldr	r3, [pc, #180]	; (80089f0 <tcp_receive+0x5bc>)
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	8998      	ldrh	r0, [r3, #12]
 8008940:	f7fd fbc8 	bl	80060d4 <lwip_htons>
 8008944:	f010 0f01 	tst.w	r0, #1
 8008948:	d12f      	bne.n	80089aa <tcp_receive+0x576>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800894a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800894c:	4b28      	ldr	r3, [pc, #160]	; (80089f0 <tcp_receive+0x5bc>)
 800894e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	8998      	ldrh	r0, [r3, #12]
 8008954:	f7fd fbbe 	bl	80060d4 <lwip_htons>
 8008958:	f010 0f02 	tst.w	r0, #2
 800895c:	d003      	beq.n	8008966 <tcp_receive+0x532>
            inseg.len -= 1;
 800895e:	4a24      	ldr	r2, [pc, #144]	; (80089f0 <tcp_receive+0x5bc>)
 8008960:	8913      	ldrh	r3, [r2, #8]
 8008962:	3b01      	subs	r3, #1
 8008964:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8008966:	4e22      	ldr	r6, [pc, #136]	; (80089f0 <tcp_receive+0x5bc>)
 8008968:	8931      	ldrh	r1, [r6, #8]
 800896a:	6870      	ldr	r0, [r6, #4]
 800896c:	f7fe f9c6 	bl	8006cfc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008970:	8935      	ldrh	r5, [r6, #8]
 8008972:	68f3      	ldr	r3, [r6, #12]
 8008974:	8998      	ldrh	r0, [r3, #12]
 8008976:	f7fd fbad 	bl	80060d4 <lwip_htons>
 800897a:	f010 0f03 	tst.w	r0, #3
 800897e:	d024      	beq.n	80089ca <tcp_receive+0x596>
 8008980:	2301      	movs	r3, #1
 8008982:	442b      	add	r3, r5
 8008984:	b29b      	uxth	r3, r3
 8008986:	4a17      	ldr	r2, [pc, #92]	; (80089e4 <tcp_receive+0x5b0>)
 8008988:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800898a:	4a17      	ldr	r2, [pc, #92]	; (80089e8 <tcp_receive+0x5b4>)
 800898c:	6812      	ldr	r2, [r2, #0]
 800898e:	4413      	add	r3, r2
 8008990:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008992:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008994:	440a      	add	r2, r1
 8008996:	4293      	cmp	r3, r2
 8008998:	d0c0      	beq.n	800891c <tcp_receive+0x4e8>
 800899a:	4b0d      	ldr	r3, [pc, #52]	; (80089d0 <tcp_receive+0x59c>)
 800899c:	f240 527f 	movw	r2, #1407	; 0x57f
 80089a0:	4918      	ldr	r1, [pc, #96]	; (8008a04 <tcp_receive+0x5d0>)
 80089a2:	480d      	ldr	r0, [pc, #52]	; (80089d8 <tcp_receive+0x5a4>)
 80089a4:	f006 fa6c 	bl	800ee80 <iprintf>
 80089a8:	e7b8      	b.n	800891c <tcp_receive+0x4e8>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80089aa:	4e11      	ldr	r6, [pc, #68]	; (80089f0 <tcp_receive+0x5bc>)
 80089ac:	68f3      	ldr	r3, [r6, #12]
 80089ae:	8998      	ldrh	r0, [r3, #12]
 80089b0:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 80089b4:	b2ad      	uxth	r5, r5
 80089b6:	f7fd fb8d 	bl	80060d4 <lwip_htons>
 80089ba:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80089be:	f7fd fb89 	bl	80060d4 <lwip_htons>
 80089c2:	68f3      	ldr	r3, [r6, #12]
 80089c4:	4328      	orrs	r0, r5
 80089c6:	8198      	strh	r0, [r3, #12]
 80089c8:	e7bf      	b.n	800894a <tcp_receive+0x516>
          tcplen = TCP_TCPLEN(&inseg);
 80089ca:	2300      	movs	r3, #0
 80089cc:	e7d9      	b.n	8008982 <tcp_receive+0x54e>
 80089ce:	bf00      	nop
 80089d0:	08011598 	.word	0x08011598
 80089d4:	080115e8 	.word	0x080115e8
 80089d8:	080101d8 	.word	0x080101d8
 80089dc:	200048ec 	.word	0x200048ec
 80089e0:	200048d4 	.word	0x200048d4
 80089e4:	2000490e 	.word	0x2000490e
 80089e8:	200048f8 	.word	0x200048f8
 80089ec:	200081f4 	.word	0x200081f4
 80089f0:	200048dc 	.word	0x200048dc
 80089f4:	08011630 	.word	0x08011630
 80089f8:	08011640 	.word	0x08011640
 80089fc:	08011650 	.word	0x08011650
 8008a00:	08011660 	.word	0x08011660
 8008a04:	08011674 	.word	0x08011674
              pcb->ooseq = pcb->ooseq->next;
 8008a08:	6803      	ldr	r3, [r0, #0]
 8008a0a:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8008a0c:	f7fe fd2a 	bl	8007464 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008a10:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d1f8      	bne.n	8008a08 <tcp_receive+0x5d4>
        pcb->rcv_nxt = seqno + tcplen;
 8008a16:	4b9b      	ldr	r3, [pc, #620]	; (8008c84 <tcp_receive+0x850>)
 8008a18:	881a      	ldrh	r2, [r3, #0]
 8008a1a:	4b9b      	ldr	r3, [pc, #620]	; (8008c88 <tcp_receive+0x854>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4413      	add	r3, r2
 8008a20:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008a22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a24:	429a      	cmp	r2, r3
 8008a26:	f200 8095 	bhi.w	8008b54 <tcp_receive+0x720>
        pcb->rcv_wnd -= tcplen;
 8008a2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a2c:	4a95      	ldr	r2, [pc, #596]	; (8008c84 <tcp_receive+0x850>)
 8008a2e:	8812      	ldrh	r2, [r2, #0]
 8008a30:	1a9b      	subs	r3, r3, r2
 8008a32:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8008a34:	4620      	mov	r0, r4
 8008a36:	f7fe fca3 	bl	8007380 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8008a3a:	4b94      	ldr	r3, [pc, #592]	; (8008c8c <tcp_receive+0x858>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	891a      	ldrh	r2, [r3, #8]
 8008a40:	b122      	cbz	r2, 8008a4c <tcp_receive+0x618>
          recv_data = inseg.p;
 8008a42:	4a93      	ldr	r2, [pc, #588]	; (8008c90 <tcp_receive+0x85c>)
 8008a44:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8008a46:	4b91      	ldr	r3, [pc, #580]	; (8008c8c <tcp_receive+0x858>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008a4c:	4b8f      	ldr	r3, [pc, #572]	; (8008c8c <tcp_receive+0x858>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	8998      	ldrh	r0, [r3, #12]
 8008a52:	f7fd fb3f 	bl	80060d4 <lwip_htons>
 8008a56:	f010 0f01 	tst.w	r0, #1
 8008a5a:	f000 80a9 	beq.w	8008bb0 <tcp_receive+0x77c>
          recv_flags |= TF_GOT_FIN;
 8008a5e:	4a8d      	ldr	r2, [pc, #564]	; (8008c94 <tcp_receive+0x860>)
 8008a60:	7813      	ldrb	r3, [r2, #0]
 8008a62:	f043 0320 	orr.w	r3, r3, #32
 8008a66:	7013      	strb	r3, [r2, #0]
 8008a68:	e0a2      	b.n	8008bb0 <tcp_receive+0x77c>
                tcplen = TCP_TCPLEN(&inseg);
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	441f      	add	r7, r3
 8008a6e:	4b85      	ldr	r3, [pc, #532]	; (8008c84 <tcp_receive+0x850>)
 8008a70:	801f      	strh	r7, [r3, #0]
              next = next->next;
 8008a72:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 8008a74:	4628      	mov	r0, r5
 8008a76:	f7fe fcf5 	bl	8007464 <tcp_seg_free>
              next = next->next;
 8008a7a:	4635      	mov	r5, r6
            while (next &&
 8008a7c:	b365      	cbz	r5, 8008ad8 <tcp_receive+0x6a4>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008a7e:	4b81      	ldr	r3, [pc, #516]	; (8008c84 <tcp_receive+0x850>)
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	4a81      	ldr	r2, [pc, #516]	; (8008c88 <tcp_receive+0x854>)
 8008a84:	6812      	ldr	r2, [r2, #0]
 8008a86:	4413      	add	r3, r2
 8008a88:	68e9      	ldr	r1, [r5, #12]
 8008a8a:	684a      	ldr	r2, [r1, #4]
 8008a8c:	8928      	ldrh	r0, [r5, #8]
 8008a8e:	4402      	add	r2, r0
 8008a90:	1a9b      	subs	r3, r3, r2
            while (next &&
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	db20      	blt.n	8008ad8 <tcp_receive+0x6a4>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008a96:	8988      	ldrh	r0, [r1, #12]
 8008a98:	f7fd fb1c 	bl	80060d4 <lwip_htons>
 8008a9c:	f010 0f01 	tst.w	r0, #1
 8008aa0:	d0e7      	beq.n	8008a72 <tcp_receive+0x63e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008aa2:	4b7a      	ldr	r3, [pc, #488]	; (8008c8c <tcp_receive+0x858>)
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	8998      	ldrh	r0, [r3, #12]
 8008aa8:	f7fd fb14 	bl	80060d4 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008aac:	f010 0f02 	tst.w	r0, #2
 8008ab0:	d1df      	bne.n	8008a72 <tcp_receive+0x63e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008ab2:	4e76      	ldr	r6, [pc, #472]	; (8008c8c <tcp_receive+0x858>)
 8008ab4:	68f3      	ldr	r3, [r6, #12]
 8008ab6:	899f      	ldrh	r7, [r3, #12]
 8008ab8:	2001      	movs	r0, #1
 8008aba:	f7fd fb0b 	bl	80060d4 <lwip_htons>
 8008abe:	68f3      	ldr	r3, [r6, #12]
 8008ac0:	4338      	orrs	r0, r7
 8008ac2:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008ac4:	8937      	ldrh	r7, [r6, #8]
 8008ac6:	68f3      	ldr	r3, [r6, #12]
 8008ac8:	8998      	ldrh	r0, [r3, #12]
 8008aca:	f7fd fb03 	bl	80060d4 <lwip_htons>
 8008ace:	f010 0f03 	tst.w	r0, #3
 8008ad2:	d0ca      	beq.n	8008a6a <tcp_receive+0x636>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e7c9      	b.n	8008a6c <tcp_receive+0x638>
            if (next &&
 8008ad8:	b14d      	cbz	r5, 8008aee <tcp_receive+0x6ba>
                TCP_SEQ_GT(seqno + tcplen,
 8008ada:	4b6b      	ldr	r3, [pc, #428]	; (8008c88 <tcp_receive+0x854>)
 8008adc:	6819      	ldr	r1, [r3, #0]
 8008ade:	4b69      	ldr	r3, [pc, #420]	; (8008c84 <tcp_receive+0x850>)
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	440b      	add	r3, r1
 8008ae4:	68ea      	ldr	r2, [r5, #12]
 8008ae6:	6852      	ldr	r2, [r2, #4]
 8008ae8:	1a9b      	subs	r3, r3, r2
            if (next &&
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dc01      	bgt.n	8008af2 <tcp_receive+0x6be>
            pcb->ooseq = next;
 8008aee:	6725      	str	r5, [r4, #112]	; 0x70
 8008af0:	e791      	b.n	8008a16 <tcp_receive+0x5e2>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008af2:	1a52      	subs	r2, r2, r1
 8008af4:	4b65      	ldr	r3, [pc, #404]	; (8008c8c <tcp_receive+0x858>)
 8008af6:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	8998      	ldrh	r0, [r3, #12]
 8008afc:	f7fd faea 	bl	80060d4 <lwip_htons>
 8008b00:	f010 0f02 	tst.w	r0, #2
 8008b04:	d003      	beq.n	8008b0e <tcp_receive+0x6da>
                inseg.len -= 1;
 8008b06:	4a61      	ldr	r2, [pc, #388]	; (8008c8c <tcp_receive+0x858>)
 8008b08:	8913      	ldrh	r3, [r2, #8]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8008b0e:	4f5f      	ldr	r7, [pc, #380]	; (8008c8c <tcp_receive+0x858>)
 8008b10:	8939      	ldrh	r1, [r7, #8]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7fe f8f2 	bl	8006cfc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008b18:	893e      	ldrh	r6, [r7, #8]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8998      	ldrh	r0, [r3, #12]
 8008b1e:	f7fd fad9 	bl	80060d4 <lwip_htons>
 8008b22:	f010 0f03 	tst.w	r0, #3
 8008b26:	d013      	beq.n	8008b50 <tcp_receive+0x71c>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	4433      	add	r3, r6
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	4a55      	ldr	r2, [pc, #340]	; (8008c84 <tcp_receive+0x850>)
 8008b30:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008b32:	4a55      	ldr	r2, [pc, #340]	; (8008c88 <tcp_receive+0x854>)
 8008b34:	6812      	ldr	r2, [r2, #0]
 8008b36:	4413      	add	r3, r2
 8008b38:	68ea      	ldr	r2, [r5, #12]
 8008b3a:	6852      	ldr	r2, [r2, #4]
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d0d6      	beq.n	8008aee <tcp_receive+0x6ba>
 8008b40:	4b55      	ldr	r3, [pc, #340]	; (8008c98 <tcp_receive+0x864>)
 8008b42:	f240 52af 	movw	r2, #1455	; 0x5af
 8008b46:	4955      	ldr	r1, [pc, #340]	; (8008c9c <tcp_receive+0x868>)
 8008b48:	4855      	ldr	r0, [pc, #340]	; (8008ca0 <tcp_receive+0x86c>)
 8008b4a:	f006 f999 	bl	800ee80 <iprintf>
 8008b4e:	e7ce      	b.n	8008aee <tcp_receive+0x6ba>
              tcplen = TCP_TCPLEN(&inseg);
 8008b50:	2300      	movs	r3, #0
 8008b52:	e7ea      	b.n	8008b2a <tcp_receive+0x6f6>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008b54:	4b50      	ldr	r3, [pc, #320]	; (8008c98 <tcp_receive+0x864>)
 8008b56:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008b5a:	4952      	ldr	r1, [pc, #328]	; (8008ca4 <tcp_receive+0x870>)
 8008b5c:	4850      	ldr	r0, [pc, #320]	; (8008ca0 <tcp_receive+0x86c>)
 8008b5e:	f006 f98f 	bl	800ee80 <iprintf>
 8008b62:	e762      	b.n	8008a2a <tcp_receive+0x5f6>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008b64:	2300      	movs	r3, #0
 8008b66:	e035      	b.n	8008bd4 <tcp_receive+0x7a0>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e041      	b.n	8008bf0 <tcp_receive+0x7bc>
 8008b6c:	4b4a      	ldr	r3, [pc, #296]	; (8008c98 <tcp_receive+0x864>)
 8008b6e:	f240 52de 	movw	r2, #1502	; 0x5de
 8008b72:	494d      	ldr	r1, [pc, #308]	; (8008ca8 <tcp_receive+0x874>)
 8008b74:	484a      	ldr	r0, [pc, #296]	; (8008ca0 <tcp_receive+0x86c>)
 8008b76:	f006 f983 	bl	800ee80 <iprintf>
 8008b7a:	e03c      	b.n	8008bf6 <tcp_receive+0x7c2>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	e043      	b.n	8008c08 <tcp_receive+0x7d4>
              recv_data = cseg->p;
 8008b80:	4b43      	ldr	r3, [pc, #268]	; (8008c90 <tcp_receive+0x85c>)
 8008b82:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 8008b84:	2300      	movs	r3, #0
 8008b86:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008b88:	68eb      	ldr	r3, [r5, #12]
 8008b8a:	8998      	ldrh	r0, [r3, #12]
 8008b8c:	f7fd faa2 	bl	80060d4 <lwip_htons>
 8008b90:	f010 0f01 	tst.w	r0, #1
 8008b94:	d007      	beq.n	8008ba6 <tcp_receive+0x772>
            recv_flags |= TF_GOT_FIN;
 8008b96:	4a3f      	ldr	r2, [pc, #252]	; (8008c94 <tcp_receive+0x860>)
 8008b98:	7813      	ldrb	r3, [r2, #0]
 8008b9a:	f043 0320 	orr.w	r3, r3, #32
 8008b9e:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008ba0:	7d23      	ldrb	r3, [r4, #20]
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d042      	beq.n	8008c2c <tcp_receive+0x7f8>
          pcb->ooseq = cseg->next;
 8008ba6:	682b      	ldr	r3, [r5, #0]
 8008ba8:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8008baa:	4628      	mov	r0, r5
 8008bac:	f7fe fc5a 	bl	8007464 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008bb0:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	d03d      	beq.n	8008c32 <tcp_receive+0x7fe>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008bb6:	68ea      	ldr	r2, [r5, #12]
 8008bb8:	6853      	ldr	r3, [r2, #4]
 8008bba:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008bbc:	428b      	cmp	r3, r1
 8008bbe:	d138      	bne.n	8008c32 <tcp_receive+0x7fe>
          seqno = pcb->ooseq->tcphdr->seqno;
 8008bc0:	4931      	ldr	r1, [pc, #196]	; (8008c88 <tcp_receive+0x854>)
 8008bc2:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008bc4:	892e      	ldrh	r6, [r5, #8]
 8008bc6:	8990      	ldrh	r0, [r2, #12]
 8008bc8:	f7fd fa84 	bl	80060d4 <lwip_htons>
 8008bcc:	f010 0f03 	tst.w	r0, #3
 8008bd0:	d0c8      	beq.n	8008b64 <tcp_receive+0x730>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	441e      	add	r6, r3
 8008bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bd8:	4433      	add	r3, r6
 8008bda:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008bdc:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8008bde:	892e      	ldrh	r6, [r5, #8]
 8008be0:	68eb      	ldr	r3, [r5, #12]
 8008be2:	8998      	ldrh	r0, [r3, #12]
 8008be4:	f7fd fa76 	bl	80060d4 <lwip_htons>
 8008be8:	f010 0f03 	tst.w	r0, #3
 8008bec:	d0bc      	beq.n	8008b68 <tcp_receive+0x734>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	441e      	add	r6, r3
 8008bf2:	42b7      	cmp	r7, r6
 8008bf4:	d3ba      	bcc.n	8008b6c <tcp_receive+0x738>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008bf6:	892e      	ldrh	r6, [r5, #8]
 8008bf8:	68eb      	ldr	r3, [r5, #12]
 8008bfa:	8998      	ldrh	r0, [r3, #12]
 8008bfc:	f7fd fa6a 	bl	80060d4 <lwip_htons>
 8008c00:	f010 0f03 	tst.w	r0, #3
 8008c04:	d0ba      	beq.n	8008b7c <tcp_receive+0x748>
 8008c06:	2301      	movs	r3, #1
 8008c08:	441e      	add	r6, r3
 8008c0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008c0c:	1b9b      	subs	r3, r3, r6
 8008c0e:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8008c10:	4620      	mov	r0, r4
 8008c12:	f7fe fbb5 	bl	8007380 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8008c16:	6869      	ldr	r1, [r5, #4]
 8008c18:	890b      	ldrh	r3, [r1, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0b4      	beq.n	8008b88 <tcp_receive+0x754>
            if (recv_data) {
 8008c1e:	4b1c      	ldr	r3, [pc, #112]	; (8008c90 <tcp_receive+0x85c>)
 8008c20:	6818      	ldr	r0, [r3, #0]
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d0ac      	beq.n	8008b80 <tcp_receive+0x74c>
              pbuf_cat(recv_data, cseg->p);
 8008c26:	f7fe f907 	bl	8006e38 <pbuf_cat>
 8008c2a:	e7ab      	b.n	8008b84 <tcp_receive+0x750>
              pcb->state = CLOSE_WAIT;
 8008c2c:	2307      	movs	r3, #7
 8008c2e:	7523      	strb	r3, [r4, #20]
 8008c30:	e7b9      	b.n	8008ba6 <tcp_receive+0x772>
        tcp_ack(pcb);
 8008c32:	7ea3      	ldrb	r3, [r4, #26]
 8008c34:	f013 0f01 	tst.w	r3, #1
 8008c38:	d005      	beq.n	8008c46 <tcp_receive+0x812>
 8008c3a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008c3e:	f043 0302 	orr.w	r3, r3, #2
 8008c42:	76a3      	strb	r3, [r4, #26]
 8008c44:	e0f7      	b.n	8008e36 <tcp_receive+0xa02>
 8008c46:	f043 0301 	orr.w	r3, r3, #1
 8008c4a:	76a3      	strb	r3, [r4, #26]
 8008c4c:	e0f3      	b.n	8008e36 <tcp_receive+0xa02>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008c4e:	480f      	ldr	r0, [pc, #60]	; (8008c8c <tcp_receive+0x858>)
 8008c50:	f7fe fc1f 	bl	8007492 <tcp_seg_copy>
 8008c54:	6720      	str	r0, [r4, #112]	; 0x70
 8008c56:	e0ee      	b.n	8008e36 <tcp_receive+0xa02>
              if (inseg.len > next->len) {
 8008c58:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <tcp_receive+0x858>)
 8008c5a:	891a      	ldrh	r2, [r3, #8]
 8008c5c:	892b      	ldrh	r3, [r5, #8]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	f240 80e9 	bls.w	8008e36 <tcp_receive+0xa02>
                cseg = tcp_seg_copy(&inseg);
 8008c64:	4809      	ldr	r0, [pc, #36]	; (8008c8c <tcp_receive+0x858>)
 8008c66:	f7fe fc14 	bl	8007492 <tcp_seg_copy>
                if (cseg != NULL) {
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f000 80e2 	beq.w	8008e36 <tcp_receive+0xa02>
                  if (prev != NULL) {
 8008c72:	b12e      	cbz	r6, 8008c80 <tcp_receive+0x84c>
                    prev->next = cseg;
 8008c74:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 8008c76:	4629      	mov	r1, r5
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff fb97 	bl	80083ac <tcp_oos_insert_segment>
 8008c7e:	e0da      	b.n	8008e36 <tcp_receive+0xa02>
                    pcb->ooseq = cseg;
 8008c80:	6720      	str	r0, [r4, #112]	; 0x70
 8008c82:	e7f8      	b.n	8008c76 <tcp_receive+0x842>
 8008c84:	2000490e 	.word	0x2000490e
 8008c88:	200048f8 	.word	0x200048f8
 8008c8c:	200048dc 	.word	0x200048dc
 8008c90:	200048f0 	.word	0x200048f0
 8008c94:	200048f4 	.word	0x200048f4
 8008c98:	08011598 	.word	0x08011598
 8008c9c:	080116ac 	.word	0x080116ac
 8008ca0:	080101d8 	.word	0x080101d8
 8008ca4:	080116e8 	.word	0x080116e8
 8008ca8:	08011708 	.word	0x08011708
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008cac:	1a99      	subs	r1, r3, r2
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	db34      	blt.n	8008d1c <tcp_receive+0x8e8>
              if (next->next == NULL &&
 8008cb2:	6829      	ldr	r1, [r5, #0]
 8008cb4:	462e      	mov	r6, r5
 8008cb6:	2900      	cmp	r1, #0
 8008cb8:	d03b      	beq.n	8008d32 <tcp_receive+0x8fe>
 8008cba:	460d      	mov	r5, r1
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	f000 80ba 	beq.w	8008e36 <tcp_receive+0xa02>
            if (seqno == next->tcphdr->seqno) {
 8008cc2:	68e8      	ldr	r0, [r5, #12]
 8008cc4:	6842      	ldr	r2, [r0, #4]
 8008cc6:	4b5c      	ldr	r3, [pc, #368]	; (8008e38 <tcp_receive+0xa04>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d0c4      	beq.n	8008c58 <tcp_receive+0x824>
              if (prev == NULL) {
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	d0ec      	beq.n	8008cac <tcp_receive+0x878>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8008cd2:	68f1      	ldr	r1, [r6, #12]
 8008cd4:	6849      	ldr	r1, [r1, #4]
 8008cd6:	1a59      	subs	r1, r3, r1
 8008cd8:	2901      	cmp	r1, #1
 8008cda:	d4ea      	bmi.n	8008cb2 <tcp_receive+0x87e>
 8008cdc:	1a99      	subs	r1, r3, r2
 8008cde:	3101      	adds	r1, #1
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	dce6      	bgt.n	8008cb2 <tcp_receive+0x87e>
                  cseg = tcp_seg_copy(&inseg);
 8008ce4:	4855      	ldr	r0, [pc, #340]	; (8008e3c <tcp_receive+0xa08>)
 8008ce6:	f7fe fbd4 	bl	8007492 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008cea:	4604      	mov	r4, r0
 8008cec:	2800      	cmp	r0, #0
 8008cee:	f000 80a2 	beq.w	8008e36 <tcp_receive+0xa02>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008cf2:	68f3      	ldr	r3, [r6, #12]
 8008cf4:	6859      	ldr	r1, [r3, #4]
 8008cf6:	8932      	ldrh	r2, [r6, #8]
 8008cf8:	440a      	add	r2, r1
 8008cfa:	4b4f      	ldr	r3, [pc, #316]	; (8008e38 <tcp_receive+0xa04>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	dd05      	ble.n	8008d10 <tcp_receive+0x8dc>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008d04:	1a5b      	subs	r3, r3, r1
 8008d06:	b299      	uxth	r1, r3
 8008d08:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008d0a:	6870      	ldr	r0, [r6, #4]
 8008d0c:	f7fd fff6 	bl	8006cfc <pbuf_realloc>
                    prev->next = cseg;
 8008d10:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008d12:	4629      	mov	r1, r5
 8008d14:	4620      	mov	r0, r4
 8008d16:	f7ff fb49 	bl	80083ac <tcp_oos_insert_segment>
 8008d1a:	e08c      	b.n	8008e36 <tcp_receive+0xa02>
                  cseg = tcp_seg_copy(&inseg);
 8008d1c:	4847      	ldr	r0, [pc, #284]	; (8008e3c <tcp_receive+0xa08>)
 8008d1e:	f7fe fbb8 	bl	8007492 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f000 8087 	beq.w	8008e36 <tcp_receive+0xa02>
                    pcb->ooseq = cseg;
 8008d28:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	f7ff fb3e 	bl	80083ac <tcp_oos_insert_segment>
 8008d30:	e081      	b.n	8008e36 <tcp_receive+0xa02>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008d32:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dc01      	bgt.n	8008d3c <tcp_receive+0x908>
 8008d38:	460d      	mov	r5, r1
 8008d3a:	e7bf      	b.n	8008cbc <tcp_receive+0x888>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008d3c:	8980      	ldrh	r0, [r0, #12]
 8008d3e:	f7fd f9c9 	bl	80060d4 <lwip_htons>
 8008d42:	f010 0f01 	tst.w	r0, #1
 8008d46:	d176      	bne.n	8008e36 <tcp_receive+0xa02>
                next->next = tcp_seg_copy(&inseg);
 8008d48:	483c      	ldr	r0, [pc, #240]	; (8008e3c <tcp_receive+0xa08>)
 8008d4a:	f7fe fba2 	bl	8007492 <tcp_seg_copy>
 8008d4e:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d070      	beq.n	8008e36 <tcp_receive+0xa02>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008d54:	68eb      	ldr	r3, [r5, #12]
 8008d56:	6859      	ldr	r1, [r3, #4]
 8008d58:	892a      	ldrh	r2, [r5, #8]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	4b36      	ldr	r3, [pc, #216]	; (8008e38 <tcp_receive+0xa04>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	1ad2      	subs	r2, r2, r3
 8008d62:	2a00      	cmp	r2, #0
 8008d64:	dc4e      	bgt.n	8008e04 <tcp_receive+0x9d0>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008d66:	4b36      	ldr	r3, [pc, #216]	; (8008e40 <tcp_receive+0xa0c>)
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	4a33      	ldr	r2, [pc, #204]	; (8008e38 <tcp_receive+0xa04>)
 8008d6c:	6812      	ldr	r2, [r2, #0]
 8008d6e:	4413      	add	r3, r2
 8008d70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008d72:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008d74:	440a      	add	r2, r1
 8008d76:	1a9b      	subs	r3, r3, r2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dd5c      	ble.n	8008e36 <tcp_receive+0xa02>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	8998      	ldrh	r0, [r3, #12]
 8008d82:	f7fd f9a7 	bl	80060d4 <lwip_htons>
 8008d86:	f010 0f01 	tst.w	r0, #1
 8008d8a:	d00f      	beq.n	8008dac <tcp_receive+0x978>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	8998      	ldrh	r0, [r3, #12]
 8008d92:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 8008d96:	b2b6      	uxth	r6, r6
 8008d98:	f7fd f99c 	bl	80060d4 <lwip_htons>
 8008d9c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008da0:	f7fd f998 	bl	80060d4 <lwip_htons>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	4330      	orrs	r0, r6
 8008daa:	8198      	strh	r0, [r3, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008dac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008dae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008db0:	4413      	add	r3, r2
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	682a      	ldr	r2, [r5, #0]
 8008db6:	4920      	ldr	r1, [pc, #128]	; (8008e38 <tcp_receive+0xa04>)
 8008db8:	6809      	ldr	r1, [r1, #0]
 8008dba:	1a5b      	subs	r3, r3, r1
 8008dbc:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008dbe:	682b      	ldr	r3, [r5, #0]
 8008dc0:	8919      	ldrh	r1, [r3, #8]
 8008dc2:	6858      	ldr	r0, [r3, #4]
 8008dc4:	f7fd ff9a 	bl	8006cfc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	891d      	ldrh	r5, [r3, #8]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	8998      	ldrh	r0, [r3, #12]
 8008dd0:	f7fd f980 	bl	80060d4 <lwip_htons>
 8008dd4:	f010 0f03 	tst.w	r0, #3
 8008dd8:	d01b      	beq.n	8008e12 <tcp_receive+0x9de>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	442b      	add	r3, r5
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	4a17      	ldr	r2, [pc, #92]	; (8008e40 <tcp_receive+0xa0c>)
 8008de2:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008de4:	4a14      	ldr	r2, [pc, #80]	; (8008e38 <tcp_receive+0xa04>)
 8008de6:	6812      	ldr	r2, [r2, #0]
 8008de8:	4413      	add	r3, r2
 8008dea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008dec:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008dee:	440a      	add	r2, r1
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d020      	beq.n	8008e36 <tcp_receive+0xa02>
 8008df4:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <tcp_receive+0xa10>)
 8008df6:	f240 627b 	movw	r2, #1659	; 0x67b
 8008dfa:	4913      	ldr	r1, [pc, #76]	; (8008e48 <tcp_receive+0xa14>)
 8008dfc:	4813      	ldr	r0, [pc, #76]	; (8008e4c <tcp_receive+0xa18>)
 8008dfe:	f006 f83f 	bl	800ee80 <iprintf>
 8008e02:	e018      	b.n	8008e36 <tcp_receive+0xa02>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008e04:	1a5b      	subs	r3, r3, r1
 8008e06:	b299      	uxth	r1, r3
 8008e08:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8008e0a:	6868      	ldr	r0, [r5, #4]
 8008e0c:	f7fd ff76 	bl	8006cfc <pbuf_realloc>
 8008e10:	e7a9      	b.n	8008d66 <tcp_receive+0x932>
                    tcplen = TCP_TCPLEN(next->next);
 8008e12:	2300      	movs	r3, #0
 8008e14:	e7e2      	b.n	8008ddc <tcp_receive+0x9a8>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008e16:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <tcp_receive+0xa04>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008e1c:	1a99      	subs	r1, r3, r2
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	db05      	blt.n	8008e2e <tcp_receive+0x9fa>
 8008e22:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008e24:	440a      	add	r2, r1
 8008e26:	1a9b      	subs	r3, r3, r2
 8008e28:	3301      	adds	r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dd03      	ble.n	8008e36 <tcp_receive+0xa02>
      tcp_ack_now(pcb);
 8008e2e:	7ea3      	ldrb	r3, [r4, #26]
 8008e30:	f043 0302 	orr.w	r3, r3, #2
 8008e34:	76a3      	strb	r3, [r4, #26]
}
 8008e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e38:	200048f8 	.word	0x200048f8
 8008e3c:	200048dc 	.word	0x200048dc
 8008e40:	2000490e 	.word	0x2000490e
 8008e44:	08011598 	.word	0x08011598
 8008e48:	08011674 	.word	0x08011674
 8008e4c:	080101d8 	.word	0x080101d8

08008e50 <tcp_process>:
{
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 8008e56:	4ba0      	ldr	r3, [pc, #640]	; (80090d8 <tcp_process+0x288>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	f013 0f04 	tst.w	r3, #4
 8008e5e:	d036      	beq.n	8008ece <tcp_process+0x7e>
    if (pcb->state == SYN_SENT) {
 8008e60:	7d01      	ldrb	r1, [r0, #20]
 8008e62:	2902      	cmp	r1, #2
 8008e64:	d00f      	beq.n	8008e86 <tcp_process+0x36>
      if (seqno == pcb->rcv_nxt) {
 8008e66:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008e68:	4b9c      	ldr	r3, [pc, #624]	; (80090dc <tcp_process+0x28c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d019      	beq.n	8008ea4 <tcp_process+0x54>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008e70:	1a99      	subs	r1, r3, r2
 8008e72:	2900      	cmp	r1, #0
 8008e74:	f2c0 8262 	blt.w	800933c <tcp_process+0x4ec>
 8008e78:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8008e7a:	440a      	add	r2, r1
 8008e7c:	1a9b      	subs	r3, r3, r2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	dd0a      	ble.n	8008e98 <tcp_process+0x48>
      return ERR_OK;
 8008e82:	2500      	movs	r5, #0
 8008e84:	e005      	b.n	8008e92 <tcp_process+0x42>
      if (ackno == pcb->snd_nxt) {
 8008e86:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008e88:	4b95      	ldr	r3, [pc, #596]	; (80090e0 <tcp_process+0x290>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d009      	beq.n	8008ea4 <tcp_process+0x54>
      return ERR_OK;
 8008e90:	2500      	movs	r5, #0
}
 8008e92:	4628      	mov	r0, r5
 8008e94:	b002      	add	sp, #8
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
        tcp_ack_now(pcb);
 8008e98:	7e83      	ldrb	r3, [r0, #26]
 8008e9a:	f043 0302 	orr.w	r3, r3, #2
 8008e9e:	7683      	strb	r3, [r0, #26]
      return ERR_OK;
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	e7f6      	b.n	8008e92 <tcp_process+0x42>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008ea4:	b159      	cbz	r1, 8008ebe <tcp_process+0x6e>
      recv_flags |= TF_RESET;
 8008ea6:	4a8f      	ldr	r2, [pc, #572]	; (80090e4 <tcp_process+0x294>)
 8008ea8:	7813      	ldrb	r3, [r2, #0]
 8008eaa:	f043 0308 	orr.w	r3, r3, #8
 8008eae:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8008eb0:	7ea3      	ldrb	r3, [r4, #26]
 8008eb2:	f023 0301 	bic.w	r3, r3, #1
 8008eb6:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 8008eb8:	f06f 050d 	mvn.w	r5, #13
 8008ebc:	e7e9      	b.n	8008e92 <tcp_process+0x42>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008ebe:	4b8a      	ldr	r3, [pc, #552]	; (80090e8 <tcp_process+0x298>)
 8008ec0:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008ec4:	4989      	ldr	r1, [pc, #548]	; (80090ec <tcp_process+0x29c>)
 8008ec6:	488a      	ldr	r0, [pc, #552]	; (80090f0 <tcp_process+0x2a0>)
 8008ec8:	f005 ffda 	bl	800ee80 <iprintf>
 8008ecc:	e7eb      	b.n	8008ea6 <tcp_process+0x56>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008ece:	f013 0f02 	tst.w	r3, #2
 8008ed2:	d00a      	beq.n	8008eea <tcp_process+0x9a>
 8008ed4:	7d03      	ldrb	r3, [r0, #20]
 8008ed6:	3b02      	subs	r3, #2
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d905      	bls.n	8008eea <tcp_process+0x9a>
    tcp_ack_now(pcb);
 8008ede:	7e83      	ldrb	r3, [r0, #26]
 8008ee0:	f043 0302 	orr.w	r3, r3, #2
 8008ee4:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 8008ee6:	2500      	movs	r5, #0
 8008ee8:	e7d3      	b.n	8008e92 <tcp_process+0x42>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008eea:	7ea3      	ldrb	r3, [r4, #26]
 8008eec:	f013 0f10 	tst.w	r3, #16
 8008ef0:	d102      	bne.n	8008ef8 <tcp_process+0xa8>
    pcb->tmr = tcp_ticks;
 8008ef2:	4b80      	ldr	r3, [pc, #512]	; (80090f4 <tcp_process+0x2a4>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8008efe:	4620      	mov	r0, r4
 8008f00:	f7ff f91c 	bl	800813c <tcp_parseopt>
  switch (pcb->state) {
 8008f04:	7d23      	ldrb	r3, [r4, #20]
 8008f06:	3b02      	subs	r3, #2
 8008f08:	2b07      	cmp	r3, #7
 8008f0a:	f200 8219 	bhi.w	8009340 <tcp_process+0x4f0>
 8008f0e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008f12:	0008      	.short	0x0008
 8008f14:	01330099 	.word	0x01330099
 8008f18:	019a0144 	.word	0x019a0144
 8008f1c:	01c80133 	.word	0x01c80133
 8008f20:	01fb      	.short	0x01fb
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008f22:	4b6d      	ldr	r3, [pc, #436]	; (80090d8 <tcp_process+0x288>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	f003 0212 	and.w	r2, r3, #18
 8008f2a:	2a12      	cmp	r2, #18
 8008f2c:	d004      	beq.n	8008f38 <tcp_process+0xe8>
    else if (flags & TCP_ACK) {
 8008f2e:	f013 0f10 	tst.w	r3, #16
 8008f32:	d169      	bne.n	8009008 <tcp_process+0x1b8>
  return ERR_OK;
 8008f34:	2500      	movs	r5, #0
 8008f36:	e7ac      	b.n	8008e92 <tcp_process+0x42>
        && (ackno == pcb->lastack + 1)) {
 8008f38:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008f3a:	3201      	adds	r2, #1
 8008f3c:	4968      	ldr	r1, [pc, #416]	; (80090e0 <tcp_process+0x290>)
 8008f3e:	6809      	ldr	r1, [r1, #0]
 8008f40:	428a      	cmp	r2, r1
 8008f42:	d1f4      	bne.n	8008f2e <tcp_process+0xde>
      pcb->rcv_nxt = seqno + 1;
 8008f44:	4b65      	ldr	r3, [pc, #404]	; (80090dc <tcp_process+0x28c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008f4c:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 8008f4e:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8008f50:	4a69      	ldr	r2, [pc, #420]	; (80090f8 <tcp_process+0x2a8>)
 8008f52:	6812      	ldr	r2, [r2, #0]
 8008f54:	89d2      	ldrh	r2, [r2, #14]
 8008f56:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8008f5a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8008f62:	2304      	movs	r3, #4
 8008f64:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008f66:	18e1      	adds	r1, r4, r3
 8008f68:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8008f6a:	f7ff f887 	bl	800807c <tcp_eff_send_mss_impl>
 8008f6e:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008f70:	0043      	lsls	r3, r0, #1
 8008f72:	f241 121c 	movw	r2, #4380	; 0x111c
 8008f76:	4293      	cmp	r3, r2
 8008f78:	bf38      	it	cc
 8008f7a:	4613      	movcc	r3, r2
 8008f7c:	0080      	lsls	r0, r0, #2
 8008f7e:	4283      	cmp	r3, r0
 8008f80:	bf28      	it	cs
 8008f82:	4603      	movcs	r3, r0
 8008f84:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008f88:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008f8c:	b31b      	cbz	r3, 8008fd6 <tcp_process+0x186>
      --pcb->snd_queuelen;
 8008f8e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008f92:	3b01      	subs	r3, #1
 8008f94:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8008f98:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 8008f9a:	b325      	cbz	r5, 8008fe6 <tcp_process+0x196>
        pcb->unacked = rseg->next;
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f7fe fa5f 	bl	8007464 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8008fa6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008fa8:	b353      	cbz	r3, 8009000 <tcp_process+0x1b0>
        pcb->rtime = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8008fae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008fb2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008fb6:	b143      	cbz	r3, 8008fca <tcp_process+0x17a>
 8008fb8:	2200      	movs	r2, #0
 8008fba:	4621      	mov	r1, r4
 8008fbc:	6920      	ldr	r0, [r4, #16]
 8008fbe:	4798      	blx	r3
 8008fc0:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 8008fc2:	f110 0f0d 	cmn.w	r0, #13
 8008fc6:	f43f af64 	beq.w	8008e92 <tcp_process+0x42>
      tcp_ack_now(pcb);
 8008fca:	7ea3      	ldrb	r3, [r4, #26]
 8008fcc:	f043 0302 	orr.w	r3, r3, #2
 8008fd0:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 8008fd2:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 8008fd4:	e75d      	b.n	8008e92 <tcp_process+0x42>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008fd6:	4b44      	ldr	r3, [pc, #272]	; (80090e8 <tcp_process+0x298>)
 8008fd8:	f240 321a 	movw	r2, #794	; 0x31a
 8008fdc:	4947      	ldr	r1, [pc, #284]	; (80090fc <tcp_process+0x2ac>)
 8008fde:	4844      	ldr	r0, [pc, #272]	; (80090f0 <tcp_process+0x2a0>)
 8008fe0:	f005 ff4e 	bl	800ee80 <iprintf>
 8008fe4:	e7d3      	b.n	8008f8e <tcp_process+0x13e>
        rseg = pcb->unsent;
 8008fe6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8008fe8:	b115      	cbz	r5, 8008ff0 <tcp_process+0x1a0>
        pcb->unsent = rseg->next;
 8008fea:	682b      	ldr	r3, [r5, #0]
 8008fec:	66a3      	str	r3, [r4, #104]	; 0x68
 8008fee:	e7d7      	b.n	8008fa0 <tcp_process+0x150>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8008ff0:	4b3d      	ldr	r3, [pc, #244]	; (80090e8 <tcp_process+0x298>)
 8008ff2:	f240 3222 	movw	r2, #802	; 0x322
 8008ff6:	4942      	ldr	r1, [pc, #264]	; (8009100 <tcp_process+0x2b0>)
 8008ff8:	483d      	ldr	r0, [pc, #244]	; (80090f0 <tcp_process+0x2a0>)
 8008ffa:	f005 ff41 	bl	800ee80 <iprintf>
 8008ffe:	e7f4      	b.n	8008fea <tcp_process+0x19a>
        pcb->rtime = -1;
 8009000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009004:	8623      	strh	r3, [r4, #48]	; 0x30
 8009006:	e7d4      	b.n	8008fb2 <tcp_process+0x162>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009008:	4b3b      	ldr	r3, [pc, #236]	; (80090f8 <tcp_process+0x2a8>)
 800900a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800900c:	4a3d      	ldr	r2, [pc, #244]	; (8009104 <tcp_process+0x2b4>)
 800900e:	493e      	ldr	r1, [pc, #248]	; (8009108 <tcp_process+0x2b8>)
 8009010:	880d      	ldrh	r5, [r1, #0]
 8009012:	4932      	ldr	r1, [pc, #200]	; (80090dc <tcp_process+0x28c>)
 8009014:	6809      	ldr	r1, [r1, #0]
 8009016:	4832      	ldr	r0, [pc, #200]	; (80090e0 <tcp_process+0x290>)
 8009018:	6800      	ldr	r0, [r0, #0]
 800901a:	881e      	ldrh	r6, [r3, #0]
 800901c:	9601      	str	r6, [sp, #4]
 800901e:	885b      	ldrh	r3, [r3, #2]
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	4613      	mov	r3, r2
 8009024:	3204      	adds	r2, #4
 8009026:	4429      	add	r1, r5
 8009028:	f001 faae 	bl	800a588 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800902c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009030:	2b05      	cmp	r3, #5
 8009032:	d901      	bls.n	8009038 <tcp_process+0x1e8>
  return ERR_OK;
 8009034:	2500      	movs	r5, #0
 8009036:	e72c      	b.n	8008e92 <tcp_process+0x42>
        pcb->rtime = 0;
 8009038:	2500      	movs	r5, #0
 800903a:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800903c:	4620      	mov	r0, r4
 800903e:	f001 faf9 	bl	800a634 <tcp_rexmit_rto>
 8009042:	e726      	b.n	8008e92 <tcp_process+0x42>
    if (flags & TCP_ACK) {
 8009044:	4b24      	ldr	r3, [pc, #144]	; (80090d8 <tcp_process+0x288>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	f013 0f10 	tst.w	r3, #16
 800904c:	f000 8083 	beq.w	8009156 <tcp_process+0x306>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009050:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <tcp_process+0x290>)
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009056:	1ac3      	subs	r3, r0, r3
 8009058:	2b01      	cmp	r3, #1
 800905a:	d403      	bmi.n	8009064 <tcp_process+0x214>
 800905c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800905e:	1ac3      	subs	r3, r0, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	dd11      	ble.n	8009088 <tcp_process+0x238>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009064:	4b24      	ldr	r3, [pc, #144]	; (80090f8 <tcp_process+0x2a8>)
 8009066:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009068:	4a26      	ldr	r2, [pc, #152]	; (8009104 <tcp_process+0x2b4>)
 800906a:	4927      	ldr	r1, [pc, #156]	; (8009108 <tcp_process+0x2b8>)
 800906c:	880c      	ldrh	r4, [r1, #0]
 800906e:	491b      	ldr	r1, [pc, #108]	; (80090dc <tcp_process+0x28c>)
 8009070:	6809      	ldr	r1, [r1, #0]
 8009072:	881d      	ldrh	r5, [r3, #0]
 8009074:	9501      	str	r5, [sp, #4]
 8009076:	885b      	ldrh	r3, [r3, #2]
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	4613      	mov	r3, r2
 800907c:	3204      	adds	r2, #4
 800907e:	4421      	add	r1, r4
 8009080:	f001 fa82 	bl	800a588 <tcp_rst>
  return ERR_OK;
 8009084:	2500      	movs	r5, #0
 8009086:	e704      	b.n	8008e92 <tcp_process+0x42>
        pcb->state = ESTABLISHED;
 8009088:	2304      	movs	r3, #4
 800908a:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800908c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800908e:	b10b      	cbz	r3, 8009094 <tcp_process+0x244>
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	b19b      	cbz	r3, 80090bc <tcp_process+0x26c>
        if (pcb->listener == NULL) {
 8009094:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009096:	b1cb      	cbz	r3, 80090cc <tcp_process+0x27c>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	b1d3      	cbz	r3, 80090d2 <tcp_process+0x282>
 800909c:	2200      	movs	r2, #0
 800909e:	4621      	mov	r1, r4
 80090a0:	6920      	ldr	r0, [r4, #16]
 80090a2:	4798      	blx	r3
        if (err != ERR_OK) {
 80090a4:	4605      	mov	r5, r0
 80090a6:	b398      	cbz	r0, 8009110 <tcp_process+0x2c0>
          if (err != ERR_ABRT) {
 80090a8:	f115 0f0d 	cmn.w	r5, #13
 80090ac:	f43f aef1 	beq.w	8008e92 <tcp_process+0x42>
            tcp_abort(pcb);
 80090b0:	4620      	mov	r0, r4
 80090b2:	f7fe fee7 	bl	8007e84 <tcp_abort>
          return ERR_ABRT;
 80090b6:	f06f 050c 	mvn.w	r5, #12
 80090ba:	e6ea      	b.n	8008e92 <tcp_process+0x42>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80090bc:	4b0a      	ldr	r3, [pc, #40]	; (80090e8 <tcp_process+0x298>)
 80090be:	f240 3251 	movw	r2, #849	; 0x351
 80090c2:	4912      	ldr	r1, [pc, #72]	; (800910c <tcp_process+0x2bc>)
 80090c4:	480a      	ldr	r0, [pc, #40]	; (80090f0 <tcp_process+0x2a0>)
 80090c6:	f005 fedb 	bl	800ee80 <iprintf>
 80090ca:	e7e3      	b.n	8009094 <tcp_process+0x244>
          err = ERR_VAL;
 80090cc:	f06f 0505 	mvn.w	r5, #5
 80090d0:	e7ea      	b.n	80090a8 <tcp_process+0x258>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80090d2:	f06f 050f 	mvn.w	r5, #15
 80090d6:	e7e7      	b.n	80090a8 <tcp_process+0x258>
 80090d8:	200048d8 	.word	0x200048d8
 80090dc:	200048f8 	.word	0x200048f8
 80090e0:	200048d4 	.word	0x200048d4
 80090e4:	200048f4 	.word	0x200048f4
 80090e8:	08011598 	.word	0x08011598
 80090ec:	0801152c 	.word	0x0801152c
 80090f0:	080101d8 	.word	0x080101d8
 80090f4:	200081f4 	.word	0x200081f4
 80090f8:	20004900 	.word	0x20004900
 80090fc:	0801154c 	.word	0x0801154c
 8009100:	08011564 	.word	0x08011564
 8009104:	20004ad0 	.word	0x20004ad0
 8009108:	2000490e 	.word	0x2000490e
 800910c:	08011578 	.word	0x08011578
        tcp_receive(pcb);
 8009110:	4620      	mov	r0, r4
 8009112:	f7ff f98f 	bl	8008434 <tcp_receive>
        if (recv_acked != 0) {
 8009116:	4b90      	ldr	r3, [pc, #576]	; (8009358 <tcp_process+0x508>)
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b113      	cbz	r3, 8009122 <tcp_process+0x2d2>
          recv_acked--;
 800911c:	3b01      	subs	r3, #1
 800911e:	4a8e      	ldr	r2, [pc, #568]	; (8009358 <tcp_process+0x508>)
 8009120:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009122:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8009124:	0053      	lsls	r3, r2, #1
 8009126:	f241 111c 	movw	r1, #4380	; 0x111c
 800912a:	428b      	cmp	r3, r1
 800912c:	bf38      	it	cc
 800912e:	460b      	movcc	r3, r1
 8009130:	0092      	lsls	r2, r2, #2
 8009132:	4293      	cmp	r3, r2
 8009134:	bf28      	it	cs
 8009136:	4613      	movcs	r3, r2
 8009138:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 800913c:	4b87      	ldr	r3, [pc, #540]	; (800935c <tcp_process+0x50c>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	f013 0f20 	tst.w	r3, #32
 8009144:	f43f aea5 	beq.w	8008e92 <tcp_process+0x42>
          tcp_ack_now(pcb);
 8009148:	7ea3      	ldrb	r3, [r4, #26]
 800914a:	f043 0302 	orr.w	r3, r3, #2
 800914e:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 8009150:	2307      	movs	r3, #7
 8009152:	7523      	strb	r3, [r4, #20]
 8009154:	e69d      	b.n	8008e92 <tcp_process+0x42>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009156:	f013 0f02 	tst.w	r3, #2
 800915a:	f000 80f3 	beq.w	8009344 <tcp_process+0x4f4>
 800915e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009160:	3b01      	subs	r3, #1
 8009162:	4a7f      	ldr	r2, [pc, #508]	; (8009360 <tcp_process+0x510>)
 8009164:	6812      	ldr	r2, [r2, #0]
 8009166:	4293      	cmp	r3, r2
 8009168:	d001      	beq.n	800916e <tcp_process+0x31e>
  return ERR_OK;
 800916a:	2500      	movs	r5, #0
 800916c:	e691      	b.n	8008e92 <tcp_process+0x42>
      tcp_rexmit(pcb);
 800916e:	4620      	mov	r0, r4
 8009170:	f001 fa7b 	bl	800a66a <tcp_rexmit>
  return ERR_OK;
 8009174:	2500      	movs	r5, #0
 8009176:	e68c      	b.n	8008e92 <tcp_process+0x42>
    tcp_receive(pcb);
 8009178:	4620      	mov	r0, r4
 800917a:	f7ff f95b 	bl	8008434 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800917e:	4b77      	ldr	r3, [pc, #476]	; (800935c <tcp_process+0x50c>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f013 0f20 	tst.w	r3, #32
 8009186:	f000 80df 	beq.w	8009348 <tcp_process+0x4f8>
      tcp_ack_now(pcb);
 800918a:	7ea3      	ldrb	r3, [r4, #26]
 800918c:	f043 0302 	orr.w	r3, r3, #2
 8009190:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8009192:	2307      	movs	r3, #7
 8009194:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8009196:	2500      	movs	r5, #0
 8009198:	e67b      	b.n	8008e92 <tcp_process+0x42>
    tcp_receive(pcb);
 800919a:	4620      	mov	r0, r4
 800919c:	f7ff f94a 	bl	8008434 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80091a0:	4b6e      	ldr	r3, [pc, #440]	; (800935c <tcp_process+0x50c>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f013 0f20 	tst.w	r3, #32
 80091a8:	d038      	beq.n	800921c <tcp_process+0x3cc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091aa:	4b6e      	ldr	r3, [pc, #440]	; (8009364 <tcp_process+0x514>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	f013 0f10 	tst.w	r3, #16
 80091b2:	d004      	beq.n	80091be <tcp_process+0x36e>
 80091b4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80091b6:	4b6c      	ldr	r3, [pc, #432]	; (8009368 <tcp_process+0x518>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d007      	beq.n	80091ce <tcp_process+0x37e>
        tcp_ack_now(pcb);
 80091be:	7ea3      	ldrb	r3, [r4, #26]
 80091c0:	f043 0302 	orr.w	r3, r3, #2
 80091c4:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 80091c6:	2308      	movs	r3, #8
 80091c8:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 80091ca:	2500      	movs	r5, #0
 80091cc:	e661      	b.n	8008e92 <tcp_process+0x42>
          pcb->unsent == NULL) {
 80091ce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1f4      	bne.n	80091be <tcp_process+0x36e>
        tcp_ack_now(pcb);
 80091d4:	7ea3      	ldrb	r3, [r4, #26]
 80091d6:	f043 0302 	orr.w	r3, r3, #2
 80091da:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80091dc:	4620      	mov	r0, r4
 80091de:	f7fe f9dd 	bl	800759c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80091e2:	4b62      	ldr	r3, [pc, #392]	; (800936c <tcp_process+0x51c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	d005      	beq.n	80091f6 <tcp_process+0x3a6>
 80091ea:	b13b      	cbz	r3, 80091fc <tcp_process+0x3ac>
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	42a2      	cmp	r2, r4
 80091f0:	d011      	beq.n	8009216 <tcp_process+0x3c6>
 80091f2:	4613      	mov	r3, r2
 80091f4:	e7f9      	b.n	80091ea <tcp_process+0x39a>
 80091f6:	68da      	ldr	r2, [r3, #12]
 80091f8:	4b5c      	ldr	r3, [pc, #368]	; (800936c <tcp_process+0x51c>)
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	4b5c      	ldr	r3, [pc, #368]	; (8009370 <tcp_process+0x520>)
 80091fe:	2201      	movs	r2, #1
 8009200:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009202:	230a      	movs	r3, #10
 8009204:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009206:	4b5b      	ldr	r3, [pc, #364]	; (8009374 <tcp_process+0x524>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	60e2      	str	r2, [r4, #12]
 800920c:	601c      	str	r4, [r3, #0]
 800920e:	f001 fbb9 	bl	800a984 <tcp_timer_needed>
  return ERR_OK;
 8009212:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009214:	e63d      	b.n	8008e92 <tcp_process+0x42>
        TCP_RMV_ACTIVE(pcb);
 8009216:	68e2      	ldr	r2, [r4, #12]
 8009218:	60da      	str	r2, [r3, #12]
 800921a:	e7ef      	b.n	80091fc <tcp_process+0x3ac>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800921c:	4b51      	ldr	r3, [pc, #324]	; (8009364 <tcp_process+0x514>)
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	f013 0f10 	tst.w	r3, #16
 8009224:	f000 8092 	beq.w	800934c <tcp_process+0x4fc>
 8009228:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800922a:	4b4f      	ldr	r3, [pc, #316]	; (8009368 <tcp_process+0x518>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	429a      	cmp	r2, r3
 8009230:	d001      	beq.n	8009236 <tcp_process+0x3e6>
  return ERR_OK;
 8009232:	2500      	movs	r5, #0
 8009234:	e62d      	b.n	8008e92 <tcp_process+0x42>
               pcb->unsent == NULL) {
 8009236:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009238:	b10b      	cbz	r3, 800923e <tcp_process+0x3ee>
  return ERR_OK;
 800923a:	2500      	movs	r5, #0
 800923c:	e629      	b.n	8008e92 <tcp_process+0x42>
      pcb->state = FIN_WAIT_2;
 800923e:	2306      	movs	r3, #6
 8009240:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8009242:	2500      	movs	r5, #0
 8009244:	e625      	b.n	8008e92 <tcp_process+0x42>
    tcp_receive(pcb);
 8009246:	4620      	mov	r0, r4
 8009248:	f7ff f8f4 	bl	8008434 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800924c:	4b43      	ldr	r3, [pc, #268]	; (800935c <tcp_process+0x50c>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	f013 0f20 	tst.w	r3, #32
 8009254:	d101      	bne.n	800925a <tcp_process+0x40a>
  return ERR_OK;
 8009256:	2500      	movs	r5, #0
 8009258:	e61b      	b.n	8008e92 <tcp_process+0x42>
      tcp_ack_now(pcb);
 800925a:	7ea3      	ldrb	r3, [r4, #26]
 800925c:	f043 0302 	orr.w	r3, r3, #2
 8009260:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8009262:	4620      	mov	r0, r4
 8009264:	f7fe f99a 	bl	800759c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009268:	4b40      	ldr	r3, [pc, #256]	; (800936c <tcp_process+0x51c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	42a3      	cmp	r3, r4
 800926e:	d005      	beq.n	800927c <tcp_process+0x42c>
 8009270:	b153      	cbz	r3, 8009288 <tcp_process+0x438>
 8009272:	68da      	ldr	r2, [r3, #12]
 8009274:	42a2      	cmp	r2, r4
 8009276:	d005      	beq.n	8009284 <tcp_process+0x434>
 8009278:	4613      	mov	r3, r2
 800927a:	e7f9      	b.n	8009270 <tcp_process+0x420>
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	4b3b      	ldr	r3, [pc, #236]	; (800936c <tcp_process+0x51c>)
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	e001      	b.n	8009288 <tcp_process+0x438>
 8009284:	68e2      	ldr	r2, [r4, #12]
 8009286:	60da      	str	r2, [r3, #12]
 8009288:	4b39      	ldr	r3, [pc, #228]	; (8009370 <tcp_process+0x520>)
 800928a:	2201      	movs	r2, #1
 800928c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800928e:	230a      	movs	r3, #10
 8009290:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009292:	4b38      	ldr	r3, [pc, #224]	; (8009374 <tcp_process+0x524>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	60e2      	str	r2, [r4, #12]
 8009298:	601c      	str	r4, [r3, #0]
 800929a:	f001 fb73 	bl	800a984 <tcp_timer_needed>
  return ERR_OK;
 800929e:	2500      	movs	r5, #0
 80092a0:	e5f7      	b.n	8008e92 <tcp_process+0x42>
    tcp_receive(pcb);
 80092a2:	4620      	mov	r0, r4
 80092a4:	f7ff f8c6 	bl	8008434 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80092a8:	4b2e      	ldr	r3, [pc, #184]	; (8009364 <tcp_process+0x514>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	f013 0f10 	tst.w	r3, #16
 80092b0:	d04e      	beq.n	8009350 <tcp_process+0x500>
 80092b2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80092b4:	4b2c      	ldr	r3, [pc, #176]	; (8009368 <tcp_process+0x518>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d001      	beq.n	80092c0 <tcp_process+0x470>
  return ERR_OK;
 80092bc:	2500      	movs	r5, #0
 80092be:	e5e8      	b.n	8008e92 <tcp_process+0x42>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80092c0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80092c2:	b10b      	cbz	r3, 80092c8 <tcp_process+0x478>
  return ERR_OK;
 80092c4:	2500      	movs	r5, #0
 80092c6:	e5e4      	b.n	8008e92 <tcp_process+0x42>
      tcp_pcb_purge(pcb);
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7fe f967 	bl	800759c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80092ce:	4b27      	ldr	r3, [pc, #156]	; (800936c <tcp_process+0x51c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	d005      	beq.n	80092e2 <tcp_process+0x492>
 80092d6:	b153      	cbz	r3, 80092ee <tcp_process+0x49e>
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	42a2      	cmp	r2, r4
 80092dc:	d005      	beq.n	80092ea <tcp_process+0x49a>
 80092de:	4613      	mov	r3, r2
 80092e0:	e7f9      	b.n	80092d6 <tcp_process+0x486>
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	4b21      	ldr	r3, [pc, #132]	; (800936c <tcp_process+0x51c>)
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	e001      	b.n	80092ee <tcp_process+0x49e>
 80092ea:	68e2      	ldr	r2, [r4, #12]
 80092ec:	60da      	str	r2, [r3, #12]
 80092ee:	4b20      	ldr	r3, [pc, #128]	; (8009370 <tcp_process+0x520>)
 80092f0:	2201      	movs	r2, #1
 80092f2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80092f4:	230a      	movs	r3, #10
 80092f6:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80092f8:	4b1e      	ldr	r3, [pc, #120]	; (8009374 <tcp_process+0x524>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	60e2      	str	r2, [r4, #12]
 80092fe:	601c      	str	r4, [r3, #0]
 8009300:	f001 fb40 	bl	800a984 <tcp_timer_needed>
  return ERR_OK;
 8009304:	2500      	movs	r5, #0
 8009306:	e5c4      	b.n	8008e92 <tcp_process+0x42>
    tcp_receive(pcb);
 8009308:	4620      	mov	r0, r4
 800930a:	f7ff f893 	bl	8008434 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800930e:	4b15      	ldr	r3, [pc, #84]	; (8009364 <tcp_process+0x514>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	f013 0f10 	tst.w	r3, #16
 8009316:	d01d      	beq.n	8009354 <tcp_process+0x504>
 8009318:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800931a:	4b13      	ldr	r3, [pc, #76]	; (8009368 <tcp_process+0x518>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d001      	beq.n	8009326 <tcp_process+0x4d6>
  return ERR_OK;
 8009322:	2500      	movs	r5, #0
 8009324:	e5b5      	b.n	8008e92 <tcp_process+0x42>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009326:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009328:	b10b      	cbz	r3, 800932e <tcp_process+0x4de>
  return ERR_OK;
 800932a:	2500      	movs	r5, #0
 800932c:	e5b1      	b.n	8008e92 <tcp_process+0x42>
      recv_flags |= TF_CLOSED;
 800932e:	4a0b      	ldr	r2, [pc, #44]	; (800935c <tcp_process+0x50c>)
 8009330:	7813      	ldrb	r3, [r2, #0]
 8009332:	f043 0310 	orr.w	r3, r3, #16
 8009336:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 8009338:	2500      	movs	r5, #0
 800933a:	e5aa      	b.n	8008e92 <tcp_process+0x42>
      return ERR_OK;
 800933c:	2500      	movs	r5, #0
 800933e:	e5a8      	b.n	8008e92 <tcp_process+0x42>
  return ERR_OK;
 8009340:	2500      	movs	r5, #0
 8009342:	e5a6      	b.n	8008e92 <tcp_process+0x42>
 8009344:	2500      	movs	r5, #0
 8009346:	e5a4      	b.n	8008e92 <tcp_process+0x42>
 8009348:	2500      	movs	r5, #0
 800934a:	e5a2      	b.n	8008e92 <tcp_process+0x42>
 800934c:	2500      	movs	r5, #0
 800934e:	e5a0      	b.n	8008e92 <tcp_process+0x42>
 8009350:	2500      	movs	r5, #0
 8009352:	e59e      	b.n	8008e92 <tcp_process+0x42>
 8009354:	2500      	movs	r5, #0
 8009356:	e59c      	b.n	8008e92 <tcp_process+0x42>
 8009358:	200048ec 	.word	0x200048ec
 800935c:	200048f4 	.word	0x200048f4
 8009360:	200048f8 	.word	0x200048f8
 8009364:	200048d8 	.word	0x200048d8
 8009368:	200048d4 	.word	0x200048d4
 800936c:	200081f0 	.word	0x200081f0
 8009370:	200081ec 	.word	0x200081ec
 8009374:	20008200 	.word	0x20008200

08009378 <tcp_input>:
{
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 800937e:	6842      	ldr	r2, [r0, #4]
 8009380:	4b9f      	ldr	r3, [pc, #636]	; (8009600 <tcp_input+0x288>)
 8009382:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 8009384:	8943      	ldrh	r3, [r0, #10]
 8009386:	2b13      	cmp	r3, #19
 8009388:	d90b      	bls.n	80093a2 <tcp_input+0x2a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800938a:	4b9e      	ldr	r3, [pc, #632]	; (8009604 <tcp_input+0x28c>)
 800938c:	6819      	ldr	r1, [r3, #0]
 800938e:	6958      	ldr	r0, [r3, #20]
 8009390:	f003 ff8d 	bl	800d2ae <ip4_addr_isbroadcast_u32>
 8009394:	b928      	cbnz	r0, 80093a2 <tcp_input+0x2a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009396:	4b9b      	ldr	r3, [pc, #620]	; (8009604 <tcp_input+0x28c>)
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800939e:	2be0      	cmp	r3, #224	; 0xe0
 80093a0:	d104      	bne.n	80093ac <tcp_input+0x34>
  pbuf_free(p);
 80093a2:	4620      	mov	r0, r4
 80093a4:	f7fd fb58 	bl	8006a58 <pbuf_free>
}
 80093a8:	b002      	add	sp, #8
 80093aa:	bd70      	pop	{r4, r5, r6, pc}
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80093ac:	4b94      	ldr	r3, [pc, #592]	; (8009600 <tcp_input+0x288>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	8998      	ldrh	r0, [r3, #12]
 80093b2:	f7fc fe8f 	bl	80060d4 <lwip_htons>
 80093b6:	f3c0 310f 	ubfx	r1, r0, #12, #16
 80093ba:	0089      	lsls	r1, r1, #2
 80093bc:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80093be:	2913      	cmp	r1, #19
 80093c0:	d9ef      	bls.n	80093a2 <tcp_input+0x2a>
 80093c2:	b289      	uxth	r1, r1
 80093c4:	8923      	ldrh	r3, [r4, #8]
 80093c6:	4299      	cmp	r1, r3
 80093c8:	d8eb      	bhi.n	80093a2 <tcp_input+0x2a>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80093ca:	f1a1 0314 	sub.w	r3, r1, #20
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	4a8d      	ldr	r2, [pc, #564]	; (8009608 <tcp_input+0x290>)
 80093d2:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 80093d4:	4a8d      	ldr	r2, [pc, #564]	; (800960c <tcp_input+0x294>)
 80093d6:	2000      	movs	r0, #0
 80093d8:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 80093da:	8962      	ldrh	r2, [r4, #10]
 80093dc:	4291      	cmp	r1, r2
 80093de:	d930      	bls.n	8009442 <tcp_input+0xca>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d065      	beq.n	80094b2 <tcp_input+0x13a>
    pbuf_header(p, -TCP_HLEN);
 80093e6:	f06f 0113 	mvn.w	r1, #19
 80093ea:	4620      	mov	r0, r4
 80093ec:	f7fd fb2a 	bl	8006a44 <pbuf_header>
    tcphdr_opt1len = p->len;
 80093f0:	8961      	ldrh	r1, [r4, #10]
 80093f2:	4b87      	ldr	r3, [pc, #540]	; (8009610 <tcp_input+0x298>)
 80093f4:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80093f6:	4b84      	ldr	r3, [pc, #528]	; (8009608 <tcp_input+0x290>)
 80093f8:	881d      	ldrh	r5, [r3, #0]
 80093fa:	1a6d      	subs	r5, r5, r1
 80093fc:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80093fe:	4249      	negs	r1, r1
 8009400:	b209      	sxth	r1, r1
 8009402:	4620      	mov	r0, r4
 8009404:	f7fd fb1e 	bl	8006a44 <pbuf_header>
    if (opt2len > p->next->len) {
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	8943      	ldrh	r3, [r0, #10]
 800940c:	42ab      	cmp	r3, r5
 800940e:	d3c8      	bcc.n	80093a2 <tcp_input+0x2a>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8009410:	6842      	ldr	r2, [r0, #4]
 8009412:	4b7e      	ldr	r3, [pc, #504]	; (800960c <tcp_input+0x294>)
 8009414:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8009416:	4269      	negs	r1, r5
 8009418:	b209      	sxth	r1, r1
 800941a:	f7fd fb13 	bl	8006a44 <pbuf_header>
    p->tot_len -= opt2len;
 800941e:	8923      	ldrh	r3, [r4, #8]
 8009420:	1b5d      	subs	r5, r3, r5
 8009422:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009424:	8963      	ldrh	r3, [r4, #10]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d14a      	bne.n	80094c0 <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800942a:	8922      	ldrh	r2, [r4, #8]
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	891b      	ldrh	r3, [r3, #8]
 8009430:	429a      	cmp	r2, r3
 8009432:	d00c      	beq.n	800944e <tcp_input+0xd6>
 8009434:	4b77      	ldr	r3, [pc, #476]	; (8009614 <tcp_input+0x29c>)
 8009436:	22d0      	movs	r2, #208	; 0xd0
 8009438:	4977      	ldr	r1, [pc, #476]	; (8009618 <tcp_input+0x2a0>)
 800943a:	4878      	ldr	r0, [pc, #480]	; (800961c <tcp_input+0x2a4>)
 800943c:	f005 fd20 	bl	800ee80 <iprintf>
 8009440:	e005      	b.n	800944e <tcp_input+0xd6>
    tcphdr_opt1len = tcphdr_optlen;
 8009442:	4a73      	ldr	r2, [pc, #460]	; (8009610 <tcp_input+0x298>)
 8009444:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8009446:	4249      	negs	r1, r1
 8009448:	4620      	mov	r0, r4
 800944a:	f7fd fafb 	bl	8006a44 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800944e:	4d6c      	ldr	r5, [pc, #432]	; (8009600 <tcp_input+0x288>)
 8009450:	682e      	ldr	r6, [r5, #0]
 8009452:	8830      	ldrh	r0, [r6, #0]
 8009454:	f7fc fe3e 	bl	80060d4 <lwip_htons>
 8009458:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800945a:	682e      	ldr	r6, [r5, #0]
 800945c:	8870      	ldrh	r0, [r6, #2]
 800945e:	f7fc fe39 	bl	80060d4 <lwip_htons>
 8009462:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009464:	682e      	ldr	r6, [r5, #0]
 8009466:	6870      	ldr	r0, [r6, #4]
 8009468:	f7fc fe37 	bl	80060da <lwip_htonl>
 800946c:	6070      	str	r0, [r6, #4]
 800946e:	4b6c      	ldr	r3, [pc, #432]	; (8009620 <tcp_input+0x2a8>)
 8009470:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009472:	682e      	ldr	r6, [r5, #0]
 8009474:	68b0      	ldr	r0, [r6, #8]
 8009476:	f7fc fe30 	bl	80060da <lwip_htonl>
 800947a:	60b0      	str	r0, [r6, #8]
 800947c:	4b69      	ldr	r3, [pc, #420]	; (8009624 <tcp_input+0x2ac>)
 800947e:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009480:	682e      	ldr	r6, [r5, #0]
 8009482:	89f0      	ldrh	r0, [r6, #14]
 8009484:	f7fc fe26 	bl	80060d4 <lwip_htons>
 8009488:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800948a:	682b      	ldr	r3, [r5, #0]
 800948c:	8998      	ldrh	r0, [r3, #12]
 800948e:	f7fc fe21 	bl	80060d4 <lwip_htons>
 8009492:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009496:	4b64      	ldr	r3, [pc, #400]	; (8009628 <tcp_input+0x2b0>)
 8009498:	7018      	strb	r0, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800949a:	8923      	ldrh	r3, [r4, #8]
 800949c:	f010 0003 	ands.w	r0, r0, #3
 80094a0:	bf18      	it	ne
 80094a2:	2001      	movne	r0, #1
 80094a4:	4418      	add	r0, r3
 80094a6:	4b61      	ldr	r3, [pc, #388]	; (800962c <tcp_input+0x2b4>)
 80094a8:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094aa:	4b61      	ldr	r3, [pc, #388]	; (8009630 <tcp_input+0x2b8>)
 80094ac:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 80094ae:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094b0:	e032      	b.n	8009518 <tcp_input+0x1a0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80094b2:	4b58      	ldr	r3, [pc, #352]	; (8009614 <tcp_input+0x29c>)
 80094b4:	22b2      	movs	r2, #178	; 0xb2
 80094b6:	495f      	ldr	r1, [pc, #380]	; (8009634 <tcp_input+0x2bc>)
 80094b8:	4858      	ldr	r0, [pc, #352]	; (800961c <tcp_input+0x2a4>)
 80094ba:	f005 fce1 	bl	800ee80 <iprintf>
 80094be:	e792      	b.n	80093e6 <tcp_input+0x6e>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80094c0:	4b54      	ldr	r3, [pc, #336]	; (8009614 <tcp_input+0x29c>)
 80094c2:	22cf      	movs	r2, #207	; 0xcf
 80094c4:	495c      	ldr	r1, [pc, #368]	; (8009638 <tcp_input+0x2c0>)
 80094c6:	4855      	ldr	r0, [pc, #340]	; (800961c <tcp_input+0x2a4>)
 80094c8:	f005 fcda 	bl	800ee80 <iprintf>
 80094cc:	e7ad      	b.n	800942a <tcp_input+0xb2>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80094ce:	4b51      	ldr	r3, [pc, #324]	; (8009614 <tcp_input+0x29c>)
 80094d0:	22e2      	movs	r2, #226	; 0xe2
 80094d2:	495a      	ldr	r1, [pc, #360]	; (800963c <tcp_input+0x2c4>)
 80094d4:	4851      	ldr	r0, [pc, #324]	; (800961c <tcp_input+0x2a4>)
 80094d6:	f005 fcd3 	bl	800ee80 <iprintf>
 80094da:	e022      	b.n	8009522 <tcp_input+0x1aa>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80094dc:	4b4d      	ldr	r3, [pc, #308]	; (8009614 <tcp_input+0x29c>)
 80094de:	22e3      	movs	r2, #227	; 0xe3
 80094e0:	4957      	ldr	r1, [pc, #348]	; (8009640 <tcp_input+0x2c8>)
 80094e2:	484e      	ldr	r0, [pc, #312]	; (800961c <tcp_input+0x2a4>)
 80094e4:	f005 fccc 	bl	800ee80 <iprintf>
 80094e8:	e01e      	b.n	8009528 <tcp_input+0x1b0>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80094ea:	4b4a      	ldr	r3, [pc, #296]	; (8009614 <tcp_input+0x29c>)
 80094ec:	22e4      	movs	r2, #228	; 0xe4
 80094ee:	4955      	ldr	r1, [pc, #340]	; (8009644 <tcp_input+0x2cc>)
 80094f0:	484a      	ldr	r0, [pc, #296]	; (800961c <tcp_input+0x2a4>)
 80094f2:	f005 fcc5 	bl	800ee80 <iprintf>
 80094f6:	e01a      	b.n	800952e <tcp_input+0x1b6>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80094f8:	4b46      	ldr	r3, [pc, #280]	; (8009614 <tcp_input+0x29c>)
 80094fa:	22ec      	movs	r2, #236	; 0xec
 80094fc:	4952      	ldr	r1, [pc, #328]	; (8009648 <tcp_input+0x2d0>)
 80094fe:	4847      	ldr	r0, [pc, #284]	; (800961c <tcp_input+0x2a4>)
 8009500:	f005 fcbe 	bl	800ee80 <iprintf>
 8009504:	e02a      	b.n	800955c <tcp_input+0x1e4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009506:	4b43      	ldr	r3, [pc, #268]	; (8009614 <tcp_input+0x29c>)
 8009508:	22f4      	movs	r2, #244	; 0xf4
 800950a:	4950      	ldr	r1, [pc, #320]	; (800964c <tcp_input+0x2d4>)
 800950c:	4843      	ldr	r0, [pc, #268]	; (800961c <tcp_input+0x2a4>)
 800950e:	f005 fcb7 	bl	800ee80 <iprintf>
 8009512:	e02d      	b.n	8009570 <tcp_input+0x1f8>
    prev = pcb;
 8009514:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009516:	68ed      	ldr	r5, [r5, #12]
 8009518:	2d00      	cmp	r5, #0
 800951a:	d029      	beq.n	8009570 <tcp_input+0x1f8>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800951c:	7d2b      	ldrb	r3, [r5, #20]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0d5      	beq.n	80094ce <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009522:	7d2b      	ldrb	r3, [r5, #20]
 8009524:	2b0a      	cmp	r3, #10
 8009526:	d0d9      	beq.n	80094dc <tcp_input+0x164>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009528:	7d2b      	ldrb	r3, [r5, #20]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d0dd      	beq.n	80094ea <tcp_input+0x172>
    if (pcb->remote_port == tcphdr->src &&
 800952e:	8b29      	ldrh	r1, [r5, #24]
 8009530:	4b33      	ldr	r3, [pc, #204]	; (8009600 <tcp_input+0x288>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	881a      	ldrh	r2, [r3, #0]
 8009536:	4291      	cmp	r1, r2
 8009538:	d1ec      	bne.n	8009514 <tcp_input+0x19c>
        pcb->local_port == tcphdr->dest &&
 800953a:	8aea      	ldrh	r2, [r5, #22]
 800953c:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800953e:	429a      	cmp	r2, r3
 8009540:	d1e8      	bne.n	8009514 <tcp_input+0x19c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009542:	686a      	ldr	r2, [r5, #4]
 8009544:	4b2f      	ldr	r3, [pc, #188]	; (8009604 <tcp_input+0x28c>)
 8009546:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009548:	429a      	cmp	r2, r3
 800954a:	d1e3      	bne.n	8009514 <tcp_input+0x19c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800954c:	682a      	ldr	r2, [r5, #0]
 800954e:	4b2d      	ldr	r3, [pc, #180]	; (8009604 <tcp_input+0x28c>)
 8009550:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009552:	429a      	cmp	r2, r3
 8009554:	d1de      	bne.n	8009514 <tcp_input+0x19c>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009556:	68eb      	ldr	r3, [r5, #12]
 8009558:	42ab      	cmp	r3, r5
 800955a:	d0cd      	beq.n	80094f8 <tcp_input+0x180>
      if (prev != NULL) {
 800955c:	b12e      	cbz	r6, 800956a <tcp_input+0x1f2>
        prev->next = pcb->next;
 800955e:	68eb      	ldr	r3, [r5, #12]
 8009560:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 8009562:	4b33      	ldr	r3, [pc, #204]	; (8009630 <tcp_input+0x2b8>)
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 8009568:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800956a:	68eb      	ldr	r3, [r5, #12]
 800956c:	42ab      	cmp	r3, r5
 800956e:	d0ca      	beq.n	8009506 <tcp_input+0x18e>
  if (pcb == NULL) {
 8009570:	2d00      	cmp	r5, #0
 8009572:	d041      	beq.n	80095f8 <tcp_input+0x280>
  if (pcb != NULL) {
 8009574:	2d00      	cmp	r5, #0
 8009576:	f000 8156 	beq.w	8009826 <tcp_input+0x4ae>
    inseg.next = NULL;
 800957a:	4a35      	ldr	r2, [pc, #212]	; (8009650 <tcp_input+0x2d8>)
 800957c:	2300      	movs	r3, #0
 800957e:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 8009580:	8921      	ldrh	r1, [r4, #8]
 8009582:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 8009584:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009586:	491e      	ldr	r1, [pc, #120]	; (8009600 <tcp_input+0x288>)
 8009588:	6809      	ldr	r1, [r1, #0]
 800958a:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800958c:	4a31      	ldr	r2, [pc, #196]	; (8009654 <tcp_input+0x2dc>)
 800958e:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 8009590:	4a31      	ldr	r2, [pc, #196]	; (8009658 <tcp_input+0x2e0>)
 8009592:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 8009594:	4a31      	ldr	r2, [pc, #196]	; (800965c <tcp_input+0x2e4>)
 8009596:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 8009598:	4b23      	ldr	r3, [pc, #140]	; (8009628 <tcp_input+0x2b0>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	f013 0f08 	tst.w	r3, #8
 80095a0:	d003      	beq.n	80095aa <tcp_input+0x232>
      p->flags |= PBUF_FLAG_PUSH;
 80095a2:	7b63      	ldrb	r3, [r4, #13]
 80095a4:	f043 0301 	orr.w	r3, r3, #1
 80095a8:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 80095aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 80ab 	beq.w	8009708 <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80095b2:	4628      	mov	r0, r5
 80095b4:	f7fe fb36 	bl	8007c24 <tcp_process_refused_data>
 80095b8:	f110 0f0d 	cmn.w	r0, #13
 80095bc:	d008      	beq.n	80095d0 <tcp_input+0x258>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80095be:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 80a1 	beq.w	8009708 <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80095c6:	4b19      	ldr	r3, [pc, #100]	; (800962c <tcp_input+0x2b4>)
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 809c 	beq.w	8009708 <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 80095d0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 8094 	beq.w	8009700 <tcp_input+0x388>
    tcp_input_pcb = NULL;
 80095d8:	2300      	movs	r3, #0
 80095da:	4a21      	ldr	r2, [pc, #132]	; (8009660 <tcp_input+0x2e8>)
 80095dc:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 80095de:	4a1d      	ldr	r2, [pc, #116]	; (8009654 <tcp_input+0x2dc>)
 80095e0:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 80095e2:	4b1b      	ldr	r3, [pc, #108]	; (8009650 <tcp_input+0x2d8>)
 80095e4:	6858      	ldr	r0, [r3, #4]
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f43f aede 	beq.w	80093a8 <tcp_input+0x30>
      pbuf_free(inseg.p);
 80095ec:	f7fd fa34 	bl	8006a58 <pbuf_free>
      inseg.p = NULL;
 80095f0:	4b17      	ldr	r3, [pc, #92]	; (8009650 <tcp_input+0x2d8>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	605a      	str	r2, [r3, #4]
 80095f6:	e6d7      	b.n	80093a8 <tcp_input+0x30>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80095f8:	4b1a      	ldr	r3, [pc, #104]	; (8009664 <tcp_input+0x2ec>)
 80095fa:	681d      	ldr	r5, [r3, #0]
 80095fc:	e03b      	b.n	8009676 <tcp_input+0x2fe>
 80095fe:	bf00      	nop
 8009600:	20004900 	.word	0x20004900
 8009604:	20004ac0 	.word	0x20004ac0
 8009608:	2000490c 	.word	0x2000490c
 800960c:	20004908 	.word	0x20004908
 8009610:	20004904 	.word	0x20004904
 8009614:	08011598 	.word	0x08011598
 8009618:	080113ec 	.word	0x080113ec
 800961c:	080101d8 	.word	0x080101d8
 8009620:	200048f8 	.word	0x200048f8
 8009624:	200048d4 	.word	0x200048d4
 8009628:	200048d8 	.word	0x200048d8
 800962c:	2000490e 	.word	0x2000490e
 8009630:	200081f0 	.word	0x200081f0
 8009634:	080113d0 	.word	0x080113d0
 8009638:	080113e0 	.word	0x080113e0
 800963c:	0801140c 	.word	0x0801140c
 8009640:	08011434 	.word	0x08011434
 8009644:	08011460 	.word	0x08011460
 8009648:	08011488 	.word	0x08011488
 800964c:	080114b4 	.word	0x080114b4
 8009650:	200048dc 	.word	0x200048dc
 8009654:	200048f0 	.word	0x200048f0
 8009658:	200048f4 	.word	0x200048f4
 800965c:	200048ec 	.word	0x200048ec
 8009660:	20008204 	.word	0x20008204
 8009664:	20008200 	.word	0x20008200
      if (pcb->remote_port == tcphdr->src &&
 8009668:	8b29      	ldrh	r1, [r5, #24]
 800966a:	4b7e      	ldr	r3, [pc, #504]	; (8009864 <tcp_input+0x4ec>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	881a      	ldrh	r2, [r3, #0]
 8009670:	4291      	cmp	r1, r2
 8009672:	d00b      	beq.n	800968c <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009674:	68ed      	ldr	r5, [r5, #12]
 8009676:	b1f5      	cbz	r5, 80096b6 <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009678:	7d2b      	ldrb	r3, [r5, #20]
 800967a:	2b0a      	cmp	r3, #10
 800967c:	d0f4      	beq.n	8009668 <tcp_input+0x2f0>
 800967e:	4b7a      	ldr	r3, [pc, #488]	; (8009868 <tcp_input+0x4f0>)
 8009680:	22fe      	movs	r2, #254	; 0xfe
 8009682:	497a      	ldr	r1, [pc, #488]	; (800986c <tcp_input+0x4f4>)
 8009684:	487a      	ldr	r0, [pc, #488]	; (8009870 <tcp_input+0x4f8>)
 8009686:	f005 fbfb 	bl	800ee80 <iprintf>
 800968a:	e7ed      	b.n	8009668 <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 800968c:	8aea      	ldrh	r2, [r5, #22]
 800968e:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8009690:	429a      	cmp	r2, r3
 8009692:	d1ef      	bne.n	8009674 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009694:	686a      	ldr	r2, [r5, #4]
 8009696:	4b77      	ldr	r3, [pc, #476]	; (8009874 <tcp_input+0x4fc>)
 8009698:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800969a:	429a      	cmp	r2, r3
 800969c:	d1ea      	bne.n	8009674 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800969e:	682a      	ldr	r2, [r5, #0]
 80096a0:	4b74      	ldr	r3, [pc, #464]	; (8009874 <tcp_input+0x4fc>)
 80096a2:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d1e5      	bne.n	8009674 <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 80096a8:	4628      	mov	r0, r5
 80096aa:	f7fe fdab 	bl	8008204 <tcp_timewait_input>
        pbuf_free(p);
 80096ae:	4620      	mov	r0, r4
 80096b0:	f7fd f9d2 	bl	8006a58 <pbuf_free>
        return;
 80096b4:	e678      	b.n	80093a8 <tcp_input+0x30>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80096b6:	4b70      	ldr	r3, [pc, #448]	; (8009878 <tcp_input+0x500>)
 80096b8:	681e      	ldr	r6, [r3, #0]
 80096ba:	4630      	mov	r0, r6
    prev = NULL;
 80096bc:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80096be:	e001      	b.n	80096c4 <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 80096c0:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80096c2:	68c0      	ldr	r0, [r0, #12]
 80096c4:	b168      	cbz	r0, 80096e2 <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 80096c6:	8ac2      	ldrh	r2, [r0, #22]
 80096c8:	4b66      	ldr	r3, [pc, #408]	; (8009864 <tcp_input+0x4ec>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	885b      	ldrh	r3, [r3, #2]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d1f6      	bne.n	80096c0 <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80096d2:	6803      	ldr	r3, [r0, #0]
 80096d4:	4a67      	ldr	r2, [pc, #412]	; (8009874 <tcp_input+0x4fc>)
 80096d6:	6952      	ldr	r2, [r2, #20]
 80096d8:	4293      	cmp	r3, r2
 80096da:	d002      	beq.n	80096e2 <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80096dc:	b108      	cbz	r0, 80096e2 <tcp_input+0x36a>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1ee      	bne.n	80096c0 <tcp_input+0x348>
    if (lpcb != NULL) {
 80096e2:	2800      	cmp	r0, #0
 80096e4:	f43f af46 	beq.w	8009574 <tcp_input+0x1fc>
      if (prev != NULL) {
 80096e8:	b121      	cbz	r1, 80096f4 <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80096ea:	68c3      	ldr	r3, [r0, #12]
 80096ec:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80096ee:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80096f0:	4b61      	ldr	r3, [pc, #388]	; (8009878 <tcp_input+0x500>)
 80096f2:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 80096f4:	f7fe fdce 	bl	8008294 <tcp_listen_input>
      pbuf_free(p);
 80096f8:	4620      	mov	r0, r4
 80096fa:	f7fd f9ad 	bl	8006a58 <pbuf_free>
      return;
 80096fe:	e653      	b.n	80093a8 <tcp_input+0x30>
          tcp_send_empty_ack(pcb);
 8009700:	4628      	mov	r0, r5
 8009702:	f000 fdc8 	bl	800a296 <tcp_send_empty_ack>
 8009706:	e767      	b.n	80095d8 <tcp_input+0x260>
    tcp_input_pcb = pcb;
 8009708:	4b5c      	ldr	r3, [pc, #368]	; (800987c <tcp_input+0x504>)
 800970a:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 800970c:	4628      	mov	r0, r5
 800970e:	f7ff fb9f 	bl	8008e50 <tcp_process>
    if (err != ERR_ABRT) {
 8009712:	f110 0f0d 	cmn.w	r0, #13
 8009716:	f43f af5f 	beq.w	80095d8 <tcp_input+0x260>
      if (recv_flags & TF_RESET) {
 800971a:	4b59      	ldr	r3, [pc, #356]	; (8009880 <tcp_input+0x508>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	f013 0f08 	tst.w	r3, #8
 8009722:	d00f      	beq.n	8009744 <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009724:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8009728:	b11b      	cbz	r3, 8009732 <tcp_input+0x3ba>
 800972a:	f06f 010d 	mvn.w	r1, #13
 800972e:	6928      	ldr	r0, [r5, #16]
 8009730:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009732:	4629      	mov	r1, r5
 8009734:	4853      	ldr	r0, [pc, #332]	; (8009884 <tcp_input+0x50c>)
 8009736:	f7fe f95b 	bl	80079f0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800973a:	4629      	mov	r1, r5
 800973c:	2001      	movs	r0, #1
 800973e:	f7fc ffb1 	bl	80066a4 <memp_free>
 8009742:	e749      	b.n	80095d8 <tcp_input+0x260>
        if (recv_acked > 0) {
 8009744:	4b50      	ldr	r3, [pc, #320]	; (8009888 <tcp_input+0x510>)
 8009746:	881a      	ldrh	r2, [r3, #0]
 8009748:	b15a      	cbz	r2, 8009762 <tcp_input+0x3ea>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800974a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800974c:	b133      	cbz	r3, 800975c <tcp_input+0x3e4>
 800974e:	4629      	mov	r1, r5
 8009750:	6928      	ldr	r0, [r5, #16]
 8009752:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8009754:	f110 0f0d 	cmn.w	r0, #13
 8009758:	f43f af3e 	beq.w	80095d8 <tcp_input+0x260>
          recv_acked = 0;
 800975c:	4b4a      	ldr	r3, [pc, #296]	; (8009888 <tcp_input+0x510>)
 800975e:	2200      	movs	r2, #0
 8009760:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009762:	4628      	mov	r0, r5
 8009764:	f7fe fd2c 	bl	80081c0 <tcp_input_delayed_close>
 8009768:	2800      	cmp	r0, #0
 800976a:	f47f af35 	bne.w	80095d8 <tcp_input+0x260>
        if (recv_data != NULL) {
 800976e:	4b47      	ldr	r3, [pc, #284]	; (800988c <tcp_input+0x514>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	b1eb      	cbz	r3, 80097b0 <tcp_input+0x438>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009774:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009776:	b133      	cbz	r3, 8009786 <tcp_input+0x40e>
 8009778:	4b3b      	ldr	r3, [pc, #236]	; (8009868 <tcp_input+0x4f0>)
 800977a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800977e:	4944      	ldr	r1, [pc, #272]	; (8009890 <tcp_input+0x518>)
 8009780:	483b      	ldr	r0, [pc, #236]	; (8009870 <tcp_input+0x4f8>)
 8009782:	f005 fb7d 	bl	800ee80 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009786:	7eab      	ldrb	r3, [r5, #26]
 8009788:	f013 0f10 	tst.w	r3, #16
 800978c:	d128      	bne.n	80097e0 <tcp_input+0x468>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800978e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 8009792:	b36c      	cbz	r4, 80097f0 <tcp_input+0x478>
 8009794:	2300      	movs	r3, #0
 8009796:	4a3d      	ldr	r2, [pc, #244]	; (800988c <tcp_input+0x514>)
 8009798:	6812      	ldr	r2, [r2, #0]
 800979a:	4629      	mov	r1, r5
 800979c:	6928      	ldr	r0, [r5, #16]
 800979e:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 80097a0:	f110 0f0d 	cmn.w	r0, #13
 80097a4:	f43f af18 	beq.w	80095d8 <tcp_input+0x260>
          if (err != ERR_OK) {
 80097a8:	b110      	cbz	r0, 80097b0 <tcp_input+0x438>
            pcb->refused_data = recv_data;
 80097aa:	4b38      	ldr	r3, [pc, #224]	; (800988c <tcp_input+0x514>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 80097b0:	4b33      	ldr	r3, [pc, #204]	; (8009880 <tcp_input+0x508>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	f013 0f20 	tst.w	r3, #32
 80097b8:	d005      	beq.n	80097c6 <tcp_input+0x44e>
          if (pcb->refused_data != NULL) {
 80097ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80097bc:	b303      	cbz	r3, 8009800 <tcp_input+0x488>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80097be:	7b5a      	ldrb	r2, [r3, #13]
 80097c0:	f042 0220 	orr.w	r2, r2, #32
 80097c4:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80097c6:	4b2d      	ldr	r3, [pc, #180]	; (800987c <tcp_input+0x504>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80097cc:	4628      	mov	r0, r5
 80097ce:	f7fe fcf7 	bl	80081c0 <tcp_input_delayed_close>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	f47f af00 	bne.w	80095d8 <tcp_input+0x260>
        tcp_output(pcb);
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 fd95 	bl	800a308 <tcp_output>
 80097de:	e6fb      	b.n	80095d8 <tcp_input+0x260>
            pbuf_free(recv_data);
 80097e0:	4b2a      	ldr	r3, [pc, #168]	; (800988c <tcp_input+0x514>)
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	f7fd f938 	bl	8006a58 <pbuf_free>
            tcp_abort(pcb);
 80097e8:	4628      	mov	r0, r5
 80097ea:	f7fe fb4b 	bl	8007e84 <tcp_abort>
            goto aborted;
 80097ee:	e6f3      	b.n	80095d8 <tcp_input+0x260>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80097f0:	2300      	movs	r3, #0
 80097f2:	4a26      	ldr	r2, [pc, #152]	; (800988c <tcp_input+0x514>)
 80097f4:	6812      	ldr	r2, [r2, #0]
 80097f6:	4629      	mov	r1, r5
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe fa01 	bl	8007c00 <tcp_recv_null>
 80097fe:	e7cf      	b.n	80097a0 <tcp_input+0x428>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009800:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8009802:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009806:	d001      	beq.n	800980c <tcp_input+0x494>
              pcb->rcv_wnd++;
 8009808:	3301      	adds	r3, #1
 800980a:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800980c:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 8009810:	2c00      	cmp	r4, #0
 8009812:	d0d8      	beq.n	80097c6 <tcp_input+0x44e>
 8009814:	2300      	movs	r3, #0
 8009816:	461a      	mov	r2, r3
 8009818:	4629      	mov	r1, r5
 800981a:	6928      	ldr	r0, [r5, #16]
 800981c:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 800981e:	f110 0f0d 	cmn.w	r0, #13
 8009822:	d1d0      	bne.n	80097c6 <tcp_input+0x44e>
aborted:
 8009824:	e6d8      	b.n	80095d8 <tcp_input+0x260>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009826:	4b0f      	ldr	r3, [pc, #60]	; (8009864 <tcp_input+0x4ec>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	8998      	ldrh	r0, [r3, #12]
 800982c:	f7fc fc52 	bl	80060d4 <lwip_htons>
 8009830:	f010 0f04 	tst.w	r0, #4
 8009834:	d003      	beq.n	800983e <tcp_input+0x4c6>
    pbuf_free(p);
 8009836:	4620      	mov	r0, r4
 8009838:	f7fd f90e 	bl	8006a58 <pbuf_free>
 800983c:	e5b4      	b.n	80093a8 <tcp_input+0x30>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800983e:	4b09      	ldr	r3, [pc, #36]	; (8009864 <tcp_input+0x4ec>)
 8009840:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009842:	4a14      	ldr	r2, [pc, #80]	; (8009894 <tcp_input+0x51c>)
 8009844:	4914      	ldr	r1, [pc, #80]	; (8009898 <tcp_input+0x520>)
 8009846:	8808      	ldrh	r0, [r1, #0]
 8009848:	4914      	ldr	r1, [pc, #80]	; (800989c <tcp_input+0x524>)
 800984a:	6809      	ldr	r1, [r1, #0]
 800984c:	881d      	ldrh	r5, [r3, #0]
 800984e:	9501      	str	r5, [sp, #4]
 8009850:	885b      	ldrh	r3, [r3, #2]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	4613      	mov	r3, r2
 8009856:	3204      	adds	r2, #4
 8009858:	4401      	add	r1, r0
 800985a:	4811      	ldr	r0, [pc, #68]	; (80098a0 <tcp_input+0x528>)
 800985c:	6800      	ldr	r0, [r0, #0]
 800985e:	f000 fe93 	bl	800a588 <tcp_rst>
 8009862:	e7e8      	b.n	8009836 <tcp_input+0x4be>
 8009864:	20004900 	.word	0x20004900
 8009868:	08011598 	.word	0x08011598
 800986c:	080114e0 	.word	0x080114e0
 8009870:	080101d8 	.word	0x080101d8
 8009874:	20004ac0 	.word	0x20004ac0
 8009878:	200081f8 	.word	0x200081f8
 800987c:	20008204 	.word	0x20008204
 8009880:	200048f4 	.word	0x200048f4
 8009884:	200081f0 	.word	0x200081f0
 8009888:	200048ec 	.word	0x200048ec
 800988c:	200048f0 	.word	0x200048f0
 8009890:	08011510 	.word	0x08011510
 8009894:	20004ad0 	.word	0x20004ad0
 8009898:	2000490e 	.word	0x2000490e
 800989c:	200048f8 	.word	0x200048f8
 80098a0:	200048d4 	.word	0x200048d4

080098a4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80098a4:	4a02      	ldr	r2, [pc, #8]	; (80098b0 <tcp_trigger_input_pcb_close+0xc>)
 80098a6:	7813      	ldrb	r3, [r2, #0]
 80098a8:	f043 0310 	orr.w	r3, r3, #16
 80098ac:	7013      	strb	r3, [r2, #0]
}
 80098ae:	4770      	bx	lr
 80098b0:	200048f4 	.word	0x200048f4

080098b4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80098b4:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80098b6:	7d03      	ldrb	r3, [r0, #20]
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	bf18      	it	ne
 80098bc:	2b07      	cmpne	r3, #7
 80098be:	d003      	beq.n	80098c8 <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d001      	beq.n	80098c8 <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d139      	bne.n	800993c <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 80098c8:	2900      	cmp	r1, #0
 80098ca:	d03a      	beq.n	8009942 <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80098cc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80098d0:	428b      	cmp	r3, r1
 80098d2:	d308      	bcc.n	80098e6 <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80098d4:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d80b      	bhi.n	80098f4 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 80098dc:	b1f3      	cbz	r3, 800991c <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80098de:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80098e0:	b17b      	cbz	r3, 8009902 <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80098e2:	2000      	movs	r0, #0
 80098e4:	e02e      	b.n	8009944 <tcp_write_checks+0x90>
    pcb->flags |= TF_NAGLEMEMERR;
 80098e6:	7e83      	ldrb	r3, [r0, #26]
 80098e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098ec:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 80098ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098f2:	e027      	b.n	8009944 <tcp_write_checks+0x90>
    pcb->flags |= TF_NAGLEMEMERR;
 80098f4:	7e83      	ldrb	r3, [r0, #26]
 80098f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098fa:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 80098fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009900:	e020      	b.n	8009944 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009902:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009904:	b10b      	cbz	r3, 800990a <tcp_write_checks+0x56>
  return ERR_OK;
 8009906:	2000      	movs	r0, #0
 8009908:	e01c      	b.n	8009944 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800990a:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <tcp_write_checks+0x94>)
 800990c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8009910:	490e      	ldr	r1, [pc, #56]	; (800994c <tcp_write_checks+0x98>)
 8009912:	480f      	ldr	r0, [pc, #60]	; (8009950 <tcp_write_checks+0x9c>)
 8009914:	f005 fab4 	bl	800ee80 <iprintf>
  return ERR_OK;
 8009918:	2000      	movs	r0, #0
 800991a:	e013      	b.n	8009944 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800991c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800991e:	b143      	cbz	r3, 8009932 <tcp_write_checks+0x7e>
 8009920:	4b09      	ldr	r3, [pc, #36]	; (8009948 <tcp_write_checks+0x94>)
 8009922:	f240 1259 	movw	r2, #345	; 0x159
 8009926:	490b      	ldr	r1, [pc, #44]	; (8009954 <tcp_write_checks+0xa0>)
 8009928:	4809      	ldr	r0, [pc, #36]	; (8009950 <tcp_write_checks+0x9c>)
 800992a:	f005 faa9 	bl	800ee80 <iprintf>
  return ERR_OK;
 800992e:	2000      	movs	r0, #0
 8009930:	e008      	b.n	8009944 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009932:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1f3      	bne.n	8009920 <tcp_write_checks+0x6c>
  return ERR_OK;
 8009938:	2000      	movs	r0, #0
 800993a:	e003      	b.n	8009944 <tcp_write_checks+0x90>
    return ERR_CONN;
 800993c:	f06f 000a 	mvn.w	r0, #10
 8009940:	e000      	b.n	8009944 <tcp_write_checks+0x90>
    return ERR_OK;
 8009942:	2000      	movs	r0, #0
}
 8009944:	bd08      	pop	{r3, pc}
 8009946:	bf00      	nop
 8009948:	08011aa8 	.word	0x08011aa8
 800994c:	08011adc 	.word	0x08011adc
 8009950:	080101d8 	.word	0x080101d8
 8009954:	08011b18 	.word	0x08011b18

08009958 <tcp_pbuf_prealloc>:
{
 8009958:	b570      	push	{r4, r5, r6, lr}
 800995a:	460c      	mov	r4, r1
 800995c:	461e      	mov	r6, r3
 800995e:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 8009962:	4291      	cmp	r1, r2
 8009964:	d215      	bcs.n	8009992 <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009966:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800996a:	f011 0f02 	tst.w	r1, #2
 800996e:	d108      	bne.n	8009982 <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 8009970:	9904      	ldr	r1, [sp, #16]
 8009972:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009974:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009978:	d126      	bne.n	80099c8 <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 800997a:	b113      	cbz	r3, 8009982 <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 800997c:	9b04      	ldr	r3, [sp, #16]
 800997e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8009980:	b1e3      	cbz	r3, 80099bc <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009982:	f204 211b 	addw	r1, r4, #539	; 0x21b
 8009986:	f021 0103 	bic.w	r1, r1, #3
 800998a:	428a      	cmp	r2, r1
 800998c:	bf28      	it	cs
 800998e:	460a      	movcs	r2, r1
 8009990:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009992:	2200      	movs	r2, #0
 8009994:	f7fd f8ca 	bl	8006b2c <pbuf_alloc>
  if (p == NULL) {
 8009998:	4605      	mov	r5, r0
 800999a:	b168      	cbz	r0, 80099b8 <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800999c:	6803      	ldr	r3, [r0, #0]
 800999e:	b133      	cbz	r3, 80099ae <tcp_pbuf_prealloc+0x56>
 80099a0:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <tcp_pbuf_prealloc+0x74>)
 80099a2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80099a6:	490a      	ldr	r1, [pc, #40]	; (80099d0 <tcp_pbuf_prealloc+0x78>)
 80099a8:	480a      	ldr	r0, [pc, #40]	; (80099d4 <tcp_pbuf_prealloc+0x7c>)
 80099aa:	f005 fa69 	bl	800ee80 <iprintf>
  *oversize = p->len - length;
 80099ae:	896b      	ldrh	r3, [r5, #10]
 80099b0:	1b1b      	subs	r3, r3, r4
 80099b2:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 80099b4:	812c      	strh	r4, [r5, #8]
 80099b6:	816c      	strh	r4, [r5, #10]
}
 80099b8:	4628      	mov	r0, r5
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1de      	bne.n	8009982 <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 80099c4:	4621      	mov	r1, r4
 80099c6:	e7e4      	b.n	8009992 <tcp_pbuf_prealloc+0x3a>
 80099c8:	4621      	mov	r1, r4
 80099ca:	e7e2      	b.n	8009992 <tcp_pbuf_prealloc+0x3a>
 80099cc:	08011aa8 	.word	0x08011aa8
 80099d0:	080118b8 	.word	0x080118b8
 80099d4:	080101d8 	.word	0x080101d8

080099d8 <tcp_create_segment>:
{
 80099d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099dc:	4680      	mov	r8, r0
 80099de:	460e      	mov	r6, r1
 80099e0:	4617      	mov	r7, r2
 80099e2:	4699      	mov	r9, r3
 80099e4:	f89d a020 	ldrb.w	sl, [sp, #32]
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80099e8:	2003      	movs	r0, #3
 80099ea:	f7fc fe41 	bl	8006670 <memp_malloc>
 80099ee:	4604      	mov	r4, r0
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d038      	beq.n	8009a66 <tcp_create_segment+0x8e>
 80099f4:	ea4f 058a 	mov.w	r5, sl, lsl #2
 80099f8:	f005 0504 	and.w	r5, r5, #4
  seg->flags = optflags;
 80099fc:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8009a00:	2300      	movs	r3, #0
 8009a02:	6003      	str	r3, [r0, #0]
  seg->p = p;
 8009a04:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009a06:	8933      	ldrh	r3, [r6, #8]
 8009a08:	fa1f fa85 	uxth.w	sl, r5
 8009a0c:	4553      	cmp	r3, sl
 8009a0e:	d32e      	bcc.n	8009a6e <tcp_create_segment+0x96>
  seg->len = p->tot_len - optlen;
 8009a10:	8933      	ldrh	r3, [r6, #8]
 8009a12:	eba3 030a 	sub.w	r3, r3, sl
 8009a16:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8009a18:	2114      	movs	r1, #20
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f7fd f812 	bl	8006a44 <pbuf_header>
 8009a20:	bb60      	cbnz	r0, 8009a7c <tcp_create_segment+0xa4>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009a22:	6863      	ldr	r3, [r4, #4]
 8009a24:	685e      	ldr	r6, [r3, #4]
 8009a26:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009a28:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 8009a2c:	f7fc fb52 	bl	80060d4 <lwip_htons>
 8009a30:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009a32:	68e6      	ldr	r6, [r4, #12]
 8009a34:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8009a38:	f7fc fb4c 	bl	80060d4 <lwip_htons>
 8009a3c:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009a3e:	68e6      	ldr	r6, [r4, #12]
 8009a40:	4648      	mov	r0, r9
 8009a42:	f7fc fb4a 	bl	80060da <lwip_htonl>
 8009a46:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009a48:	08a8      	lsrs	r0, r5, #2
 8009a4a:	3005      	adds	r0, #5
 8009a4c:	68e5      	ldr	r5, [r4, #12]
 8009a4e:	ea47 3000 	orr.w	r0, r7, r0, lsl #12
 8009a52:	f7fc fb3f 	bl	80060d4 <lwip_htons>
 8009a56:	81a8      	strh	r0, [r5, #12]
  seg->tcphdr->urgp = 0;
 8009a58:	68e3      	ldr	r3, [r4, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	749a      	strb	r2, [r3, #18]
 8009a5e:	74da      	strb	r2, [r3, #19]
}
 8009a60:	4620      	mov	r0, r4
 8009a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 8009a66:	4630      	mov	r0, r6
 8009a68:	f7fc fff6 	bl	8006a58 <pbuf_free>
    return NULL;
 8009a6c:	e7f8      	b.n	8009a60 <tcp_create_segment+0x88>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009a6e:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <tcp_create_segment+0xb0>)
 8009a70:	22ba      	movs	r2, #186	; 0xba
 8009a72:	4906      	ldr	r1, [pc, #24]	; (8009a8c <tcp_create_segment+0xb4>)
 8009a74:	4806      	ldr	r0, [pc, #24]	; (8009a90 <tcp_create_segment+0xb8>)
 8009a76:	f005 fa03 	bl	800ee80 <iprintf>
 8009a7a:	e7c9      	b.n	8009a10 <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f7fd fcf1 	bl	8007464 <tcp_seg_free>
    return NULL;
 8009a82:	2400      	movs	r4, #0
 8009a84:	e7ec      	b.n	8009a60 <tcp_create_segment+0x88>
 8009a86:	bf00      	nop
 8009a88:	08011aa8 	.word	0x08011aa8
 8009a8c:	08011730 	.word	0x08011730
 8009a90:	080101d8 	.word	0x080101d8

08009a94 <tcp_output_alloc_header>:
{
 8009a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a98:	4606      	mov	r6, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009a9e:	4411      	add	r1, r2
 8009aa0:	b289      	uxth	r1, r1
 8009aa2:	3114      	adds	r1, #20
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	b289      	uxth	r1, r1
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	f7fd f83f 	bl	8006b2c <pbuf_alloc>
  if (p != NULL) {
 8009aae:	4607      	mov	r7, r0
 8009ab0:	b348      	cbz	r0, 8009b06 <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009ab2:	8942      	ldrh	r2, [r0, #10]
 8009ab4:	f104 0314 	add.w	r3, r4, #20
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	db27      	blt.n	8009b0c <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 8009abc:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8009abe:	8af0      	ldrh	r0, [r6, #22]
 8009ac0:	f7fc fb08 	bl	80060d4 <lwip_htons>
 8009ac4:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8009ac6:	8b30      	ldrh	r0, [r6, #24]
 8009ac8:	f7fc fb04 	bl	80060d4 <lwip_htons>
 8009acc:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 8009ace:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009ad2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8009ad4:	f7fc fb01 	bl	80060da <lwip_htonl>
 8009ad8:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009ada:	08a0      	lsrs	r0, r4, #2
 8009adc:	3005      	adds	r0, #5
 8009ade:	0300      	lsls	r0, r0, #12
 8009ae0:	b280      	uxth	r0, r0
 8009ae2:	f040 0010 	orr.w	r0, r0, #16
 8009ae6:	f7fc faf5 	bl	80060d4 <lwip_htons>
 8009aea:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009aec:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 8009aee:	f7fc faf1 	bl	80060d4 <lwip_htons>
 8009af2:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	742b      	strb	r3, [r5, #16]
 8009af8:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 8009afa:	74ab      	strb	r3, [r5, #18]
 8009afc:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009afe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b00:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 8009b02:	4413      	add	r3, r2
 8009b04:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 8009b06:	4638      	mov	r0, r7
 8009b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009b0c:	4b03      	ldr	r3, [pc, #12]	; (8009b1c <tcp_output_alloc_header+0x88>)
 8009b0e:	2273      	movs	r2, #115	; 0x73
 8009b10:	4903      	ldr	r1, [pc, #12]	; (8009b20 <tcp_output_alloc_header+0x8c>)
 8009b12:	4804      	ldr	r0, [pc, #16]	; (8009b24 <tcp_output_alloc_header+0x90>)
 8009b14:	f005 f9b4 	bl	800ee80 <iprintf>
 8009b18:	e7d0      	b.n	8009abc <tcp_output_alloc_header+0x28>
 8009b1a:	bf00      	nop
 8009b1c:	08011aa8 	.word	0x08011aa8
 8009b20:	08011888 	.word	0x08011888
 8009b24:	080101d8 	.word	0x080101d8

08009b28 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009b28:	6843      	ldr	r3, [r0, #4]
 8009b2a:	89db      	ldrh	r3, [r3, #14]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d001      	beq.n	8009b34 <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8009b30:	2000      	movs	r0, #0
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 8009b32:	4770      	bx	lr
{
 8009b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b36:	b085      	sub	sp, #20
 8009b38:	4616      	mov	r6, r2
 8009b3a:	460d      	mov	r5, r1
 8009b3c:	4604      	mov	r4, r0
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009b3e:	68c7      	ldr	r7, [r0, #12]
 8009b40:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8009b42:	f7fc faca 	bl	80060da <lwip_htonl>
 8009b46:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009b48:	68e7      	ldr	r7, [r4, #12]
 8009b4a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8009b4c:	f7fc fac2 	bl	80060d4 <lwip_htons>
 8009b50:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009b52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b54:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8009b56:	4413      	add	r3, r2
 8009b58:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009b5a:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009b5c:	7aa3      	ldrb	r3, [r4, #10]
 8009b5e:	f013 0f01 	tst.w	r3, #1
 8009b62:	d126      	bne.n	8009bb2 <tcp_output_segment+0x8a>
  if (pcb->rtime < 0) {
 8009b64:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	db2d      	blt.n	8009bc8 <tcp_output_segment+0xa0>
  if (pcb->rttest == 0) {
 8009b6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d02d      	beq.n	8009bce <tcp_output_segment+0xa6>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009b72:	68e3      	ldr	r3, [r4, #12]
 8009b74:	6862      	ldr	r2, [r4, #4]
 8009b76:	6851      	ldr	r1, [r2, #4]
 8009b78:	1a5b      	subs	r3, r3, r1
 8009b7a:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8009b7c:	8951      	ldrh	r1, [r2, #10]
 8009b7e:	1ac9      	subs	r1, r1, r3
 8009b80:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 8009b82:	6861      	ldr	r1, [r4, #4]
 8009b84:	890a      	ldrh	r2, [r1, #8]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 8009b8a:	6863      	ldr	r3, [r4, #4]
 8009b8c:	68e2      	ldr	r2, [r4, #12]
 8009b8e:	605a      	str	r2, [r3, #4]
  seg->tcphdr->chksum = 0;
 8009b90:	68e3      	ldr	r3, [r4, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	741a      	strb	r2, [r3, #16]
 8009b96:	745a      	strb	r2, [r3, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009b98:	6860      	ldr	r0, [r4, #4]
 8009b9a:	7aab      	ldrb	r3, [r5, #10]
 8009b9c:	7a6a      	ldrb	r2, [r5, #9]
 8009b9e:	9602      	str	r6, [sp, #8]
 8009ba0:	2106      	movs	r1, #6
 8009ba2:	9101      	str	r1, [sp, #4]
 8009ba4:	9200      	str	r2, [sp, #0]
 8009ba6:	1d2a      	adds	r2, r5, #4
 8009ba8:	4629      	mov	r1, r5
 8009baa:	f003 fb6b 	bl	800d284 <ip4_output_if>
}
 8009bae:	b005      	add	sp, #20
 8009bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009bb2:	1d29      	adds	r1, r5, #4
 8009bb4:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009bb8:	f7fe fa60 	bl	800807c <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009bbc:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8009bc0:	f7fc fa8b 	bl	80060da <lwip_htonl>
 8009bc4:	6178      	str	r0, [r7, #20]
 8009bc6:	e7cd      	b.n	8009b64 <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	862b      	strh	r3, [r5, #48]	; 0x30
 8009bcc:	e7ce      	b.n	8009b6c <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 8009bce:	4b04      	ldr	r3, [pc, #16]	; (8009be0 <tcp_output_segment+0xb8>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009bd4:	68e3      	ldr	r3, [r4, #12]
 8009bd6:	6858      	ldr	r0, [r3, #4]
 8009bd8:	f7fc fa7f 	bl	80060da <lwip_htonl>
 8009bdc:	63a8      	str	r0, [r5, #56]	; 0x38
 8009bde:	e7c8      	b.n	8009b72 <tcp_output_segment+0x4a>
 8009be0:	200081f4 	.word	0x200081f4

08009be4 <tcp_write>:
{
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	b091      	sub	sp, #68	; 0x44
 8009bea:	4680      	mov	r8, r0
 8009bec:	9107      	str	r1, [sp, #28]
 8009bee:	4692      	mov	sl, r2
 8009bf0:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8009bf8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8009bfc:	f8b0 b032 	ldrh.w	fp, [r0, #50]	; 0x32
 8009c00:	085b      	lsrs	r3, r3, #1
 8009c02:	455b      	cmp	r3, fp
 8009c04:	bf28      	it	cs
 8009c06:	465b      	movcs	r3, fp
  mss_local = mss_local ? mss_local : pcb->mss;
 8009c08:	b103      	cbz	r3, 8009c0c <tcp_write+0x28>
 8009c0a:	469b      	mov	fp, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009c0c:	9b07      	ldr	r3, [sp, #28]
 8009c0e:	b18b      	cbz	r3, 8009c34 <tcp_write+0x50>
  err = tcp_write_checks(pcb, len);
 8009c10:	4651      	mov	r1, sl
 8009c12:	4640      	mov	r0, r8
 8009c14:	f7ff fe4e 	bl	80098b4 <tcp_write_checks>
  if (err != ERR_OK) {
 8009c18:	900a      	str	r0, [sp, #40]	; 0x28
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	f040 819c 	bne.w	8009f58 <tcp_write+0x374>
  queuelen = pcb->snd_queuelen;
 8009c20:	f8b8 6062 	ldrh.w	r6, [r8, #98]	; 0x62
  if (pcb->unsent != NULL) {
 8009c24:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8009c28:	9309      	str	r3, [sp, #36]	; 0x24
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 80ce 	beq.w	8009dcc <tcp_write+0x1e8>
 8009c30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c32:	e00b      	b.n	8009c4c <tcp_write+0x68>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009c34:	4bab      	ldr	r3, [pc, #684]	; (8009ee4 <tcp_write+0x300>)
 8009c36:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8009c3a:	49ab      	ldr	r1, [pc, #684]	; (8009ee8 <tcp_write+0x304>)
 8009c3c:	48ab      	ldr	r0, [pc, #684]	; (8009eec <tcp_write+0x308>)
 8009c3e:	f005 f91f 	bl	800ee80 <iprintf>
 8009c42:	f06f 030f 	mvn.w	r3, #15
 8009c46:	930a      	str	r3, [sp, #40]	; 0x28
 8009c48:	e186      	b.n	8009f58 <tcp_write+0x374>
         last_unsent = last_unsent->next);
 8009c4a:	461a      	mov	r2, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009c4c:	6813      	ldr	r3, [r2, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1fb      	bne.n	8009c4a <tcp_write+0x66>
 8009c52:	9209      	str	r2, [sp, #36]	; 0x24
 8009c54:	4699      	mov	r9, r3
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8009c56:	7a94      	ldrb	r4, [r2, #10]
 8009c58:	00a4      	lsls	r4, r4, #2
 8009c5a:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009c5e:	8913      	ldrh	r3, [r2, #8]
 8009c60:	4423      	add	r3, r4
 8009c62:	459b      	cmp	fp, r3
 8009c64:	db42      	blt.n	8009cec <tcp_write+0x108>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c68:	891b      	ldrh	r3, [r3, #8]
 8009c6a:	441c      	add	r4, r3
 8009c6c:	b2a4      	uxth	r4, r4
 8009c6e:	ebab 0404 	sub.w	r4, fp, r4
 8009c72:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 8009c74:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8009c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c7a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d046      	beq.n	8009d10 <tcp_write+0x12c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	d83a      	bhi.n	8009cfc <tcp_write+0x118>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009c86:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009c8a:	4553      	cmp	r3, sl
 8009c8c:	d23e      	bcs.n	8009d0c <tcp_write+0x128>
 8009c8e:	461a      	mov	r2, r3
 8009c90:	42a2      	cmp	r2, r4
 8009c92:	bfa8      	it	ge
 8009c94:	4622      	movge	r2, r4
 8009c96:	920b      	str	r2, [sp, #44]	; 0x2c
      oversize -= oversize_used;
 8009c98:	1a9b      	subs	r3, r3, r2
 8009c9a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8009c9e:	1aa4      	subs	r4, r4, r2
 8009ca0:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 8009ca2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009ca4:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8009ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009caa:	ebb3 030a 	subs.w	r3, r3, sl
 8009cae:	bf18      	it	ne
 8009cb0:	2301      	movne	r3, #1
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	bf08      	it	eq
 8009cb6:	2300      	moveq	r3, #0
 8009cb8:	bb63      	cbnz	r3, 8009d14 <tcp_write+0x130>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cbc:	2c00      	cmp	r4, #0
 8009cbe:	bf18      	it	ne
 8009cc0:	4553      	cmpne	r3, sl
 8009cc2:	f080 8157 	bcs.w	8009f74 <tcp_write+0x390>
 8009cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cc8:	8912      	ldrh	r2, [r2, #8]
 8009cca:	920d      	str	r2, [sp, #52]	; 0x34
 8009ccc:	2a00      	cmp	r2, #0
 8009cce:	f000 815a 	beq.w	8009f86 <tcp_write+0x3a2>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009cd2:	ebaa 0503 	sub.w	r5, sl, r3
 8009cd6:	42a5      	cmp	r5, r4
 8009cd8:	bfa8      	it	ge
 8009cda:	4625      	movge	r5, r4
 8009cdc:	b2af      	uxth	r7, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009cde:	9b06      	ldr	r3, [sp, #24]
 8009ce0:	f013 0f01 	tst.w	r3, #1
 8009ce4:	d11e      	bne.n	8009d24 <tcp_write+0x140>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	e03d      	b.n	8009d68 <tcp_write+0x184>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009cec:	4b7d      	ldr	r3, [pc, #500]	; (8009ee4 <tcp_write+0x300>)
 8009cee:	f240 12c7 	movw	r2, #455	; 0x1c7
 8009cf2:	497f      	ldr	r1, [pc, #508]	; (8009ef0 <tcp_write+0x30c>)
 8009cf4:	487d      	ldr	r0, [pc, #500]	; (8009eec <tcp_write+0x308>)
 8009cf6:	f005 f8c3 	bl	800ee80 <iprintf>
 8009cfa:	e7b4      	b.n	8009c66 <tcp_write+0x82>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009cfc:	4b79      	ldr	r3, [pc, #484]	; (8009ee4 <tcp_write+0x300>)
 8009cfe:	f240 12d9 	movw	r2, #473	; 0x1d9
 8009d02:	497c      	ldr	r1, [pc, #496]	; (8009ef4 <tcp_write+0x310>)
 8009d04:	4879      	ldr	r0, [pc, #484]	; (8009eec <tcp_write+0x308>)
 8009d06:	f005 f8bb 	bl	800ee80 <iprintf>
 8009d0a:	e7bc      	b.n	8009c86 <tcp_write+0xa2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009d0c:	4652      	mov	r2, sl
 8009d0e:	e7bf      	b.n	8009c90 <tcp_write+0xac>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009d10:	464f      	mov	r7, r9
 8009d12:	e7c7      	b.n	8009ca4 <tcp_write+0xc0>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009d14:	4b73      	ldr	r3, [pc, #460]	; (8009ee4 <tcp_write+0x300>)
 8009d16:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009d1a:	4977      	ldr	r1, [pc, #476]	; (8009ef8 <tcp_write+0x314>)
 8009d1c:	4873      	ldr	r0, [pc, #460]	; (8009eec <tcp_write+0x308>)
 8009d1e:	f005 f8af 	bl	800ee80 <iprintf>
 8009d22:	e7ca      	b.n	8009cba <tcp_write+0xd6>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009d24:	2301      	movs	r3, #1
 8009d26:	9302      	str	r3, [sp, #8]
 8009d28:	9b06      	ldr	r3, [sp, #24]
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	f8cd 8000 	str.w	r8, [sp]
 8009d30:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009d34:	4622      	mov	r2, r4
 8009d36:	4639      	mov	r1, r7
 8009d38:	2004      	movs	r0, #4
 8009d3a:	f7ff fe0d 	bl	8009958 <tcp_pbuf_prealloc>
 8009d3e:	4604      	mov	r4, r0
 8009d40:	900c      	str	r0, [sp, #48]	; 0x30
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f000 80e5 	beq.w	8009f12 <tcp_write+0x32e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009d48:	463a      	mov	r2, r7
 8009d4a:	9b07      	ldr	r3, [sp, #28]
 8009d4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d4e:	1859      	adds	r1, r3, r1
 8009d50:	6840      	ldr	r0, [r0, #4]
 8009d52:	f005 f882 	bl	800ee5a <memcpy>
        queuelen += pbuf_clen(concat_p);
 8009d56:	4620      	mov	r0, r4
 8009d58:	f7fd f848 	bl	8006dec <pbuf_clen>
 8009d5c:	4406      	add	r6, r0
 8009d5e:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	930d      	str	r3, [sp, #52]	; 0x34
 8009d64:	e020      	b.n	8009da8 <tcp_write+0x1c4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009d66:	4613      	mov	r3, r2
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	d1fb      	bne.n	8009d66 <tcp_write+0x182>
 8009d6e:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009d70:	7b1a      	ldrb	r2, [r3, #12]
 8009d72:	2a01      	cmp	r2, #1
 8009d74:	d105      	bne.n	8009d82 <tcp_write+0x19e>
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	895b      	ldrh	r3, [r3, #10]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	9a07      	ldr	r2, [sp, #28]
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d017      	beq.n	8009db2 <tcp_write+0x1ce>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009d82:	2201      	movs	r2, #1
 8009d84:	4639      	mov	r1, r7
 8009d86:	2004      	movs	r0, #4
 8009d88:	f7fc fed0 	bl	8006b2c <pbuf_alloc>
 8009d8c:	900c      	str	r0, [sp, #48]	; 0x30
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f000 80bf 	beq.w	8009f12 <tcp_write+0x32e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8009d94:	9b07      	ldr	r3, [sp, #28]
 8009d96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d98:	4413      	add	r3, r2
 8009d9a:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 8009d9c:	f7fd f826 	bl	8006dec <pbuf_clen>
 8009da0:	4406      	add	r6, r0
 8009da2:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 8009da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009daa:	19dc      	adds	r4, r3, r7
 8009dac:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 8009dae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009db0:	e0e4      	b.n	8009f7c <tcp_write+0x398>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009db4:	b90b      	cbnz	r3, 8009dba <tcp_write+0x1d6>
          extendlen = seglen;
 8009db6:	970d      	str	r7, [sp, #52]	; 0x34
 8009db8:	e7f6      	b.n	8009da8 <tcp_write+0x1c4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009dba:	4b4a      	ldr	r3, [pc, #296]	; (8009ee4 <tcp_write+0x300>)
 8009dbc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8009dc0:	494e      	ldr	r1, [pc, #312]	; (8009efc <tcp_write+0x318>)
 8009dc2:	484a      	ldr	r0, [pc, #296]	; (8009eec <tcp_write+0x308>)
 8009dc4:	f005 f85c 	bl	800ee80 <iprintf>
          extendlen = seglen;
 8009dc8:	970d      	str	r7, [sp, #52]	; 0x34
 8009dca:	e7ed      	b.n	8009da8 <tcp_write+0x1c4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009dcc:	f8b8 4064 	ldrh.w	r4, [r8, #100]	; 0x64
 8009dd0:	b92c      	cbnz	r4, 8009dde <tcp_write+0x1fa>
  u16_t extendlen = 0;
 8009dd2:	940d      	str	r4, [sp, #52]	; 0x34
  u16_t oversize_used = 0;
 8009dd4:	940b      	str	r4, [sp, #44]	; 0x2c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009dd6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	930c      	str	r3, [sp, #48]	; 0x30
 8009ddc:	e0ce      	b.n	8009f7c <tcp_write+0x398>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009dde:	4b41      	ldr	r3, [pc, #260]	; (8009ee4 <tcp_write+0x300>)
 8009de0:	f240 2225 	movw	r2, #549	; 0x225
 8009de4:	4946      	ldr	r1, [pc, #280]	; (8009f00 <tcp_write+0x31c>)
 8009de6:	4841      	ldr	r0, [pc, #260]	; (8009eec <tcp_write+0x308>)
 8009de8:	f005 f84a 	bl	800ee80 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009dec:	9f09      	ldr	r7, [sp, #36]	; 0x24
  u16_t extendlen = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t oversize_used = 0;
 8009df2:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t pos = 0; /* position in 'arg' data */
 8009df4:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 8009df6:	930c      	str	r3, [sp, #48]	; 0x30
 8009df8:	e0c0      	b.n	8009f7c <tcp_write+0x398>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8009dfa:	fab9 f389 	clz	r3, r9
 8009dfe:	095b      	lsrs	r3, r3, #5
 8009e00:	9302      	str	r3, [sp, #8]
 8009e02:	9b06      	ldr	r3, [sp, #24]
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	f8cd 8000 	str.w	r8, [sp]
 8009e0a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009e0e:	465a      	mov	r2, fp
 8009e10:	4629      	mov	r1, r5
 8009e12:	2000      	movs	r0, #0
 8009e14:	f7ff fda0 	bl	8009958 <tcp_pbuf_prealloc>
 8009e18:	4607      	mov	r7, r0
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d079      	beq.n	8009f12 <tcp_write+0x32e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009e1e:	8943      	ldrh	r3, [r0, #10]
 8009e20:	42ab      	cmp	r3, r5
 8009e22:	d306      	bcc.n	8009e32 <tcp_write+0x24e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8009e24:	462a      	mov	r2, r5
 8009e26:	9b07      	ldr	r3, [sp, #28]
 8009e28:	1919      	adds	r1, r3, r4
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f005 f815 	bl	800ee5a <memcpy>
 8009e30:	e01d      	b.n	8009e6e <tcp_write+0x28a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009e32:	4b2c      	ldr	r3, [pc, #176]	; (8009ee4 <tcp_write+0x300>)
 8009e34:	f240 2241 	movw	r2, #577	; 0x241
 8009e38:	4932      	ldr	r1, [pc, #200]	; (8009f04 <tcp_write+0x320>)
 8009e3a:	482c      	ldr	r0, [pc, #176]	; (8009eec <tcp_write+0x308>)
 8009e3c:	f005 f820 	bl	800ee80 <iprintf>
 8009e40:	e7f0      	b.n	8009e24 <tcp_write+0x240>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009e42:	2201      	movs	r2, #1
 8009e44:	4629      	mov	r1, r5
 8009e46:	2000      	movs	r0, #0
 8009e48:	f7fc fe70 	bl	8006b2c <pbuf_alloc>
 8009e4c:	9008      	str	r0, [sp, #32]
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d05f      	beq.n	8009f12 <tcp_write+0x32e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8009e52:	9b07      	ldr	r3, [sp, #28]
 8009e54:	4423      	add	r3, r4
 8009e56:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009e58:	2200      	movs	r2, #0
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	f7fc fe65 	bl	8006b2c <pbuf_alloc>
 8009e62:	4607      	mov	r7, r0
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d038      	beq.n	8009eda <tcp_write+0x2f6>
      pbuf_cat(p/*header*/, p2/*data*/);
 8009e68:	9908      	ldr	r1, [sp, #32]
 8009e6a:	f7fc ffe5 	bl	8006e38 <pbuf_cat>
    queuelen += pbuf_clen(p);
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f7fc ffbc 	bl	8006dec <pbuf_clen>
 8009e74:	4406      	add	r6, r0
 8009e76:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009e78:	2e09      	cmp	r6, #9
 8009e7a:	d847      	bhi.n	8009f0c <tcp_write+0x328>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8009e7c:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8009e80:	2200      	movs	r2, #0
 8009e82:	9200      	str	r2, [sp, #0]
 8009e84:	4423      	add	r3, r4
 8009e86:	4639      	mov	r1, r7
 8009e88:	4640      	mov	r0, r8
 8009e8a:	f7ff fda5 	bl	80099d8 <tcp_create_segment>
 8009e8e:	4607      	mov	r7, r0
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d03e      	beq.n	8009f12 <tcp_write+0x32e>
    if (queue == NULL) {
 8009e94:	f1b9 0f00 	cmp.w	r9, #0
 8009e98:	d06a      	beq.n	8009f70 <tcp_write+0x38c>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009e9a:	9b05      	ldr	r3, [sp, #20]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d05f      	beq.n	8009f60 <tcp_write+0x37c>
      prev_seg->next = seg;
 8009ea0:	9b05      	ldr	r3, [sp, #20]
 8009ea2:	601f      	str	r7, [r3, #0]
    pos += seglen;
 8009ea4:	442c      	add	r4, r5
 8009ea6:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 8009ea8:	9705      	str	r7, [sp, #20]
  while (pos < len) {
 8009eaa:	4554      	cmp	r4, sl
 8009eac:	d26f      	bcs.n	8009f8e <tcp_write+0x3aa>
    u16_t left = len - pos;
 8009eae:	ebaa 0504 	sub.w	r5, sl, r4
 8009eb2:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 8009eb4:	455d      	cmp	r5, fp
 8009eb6:	bf28      	it	cs
 8009eb8:	465d      	movcs	r5, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009eba:	9b06      	ldr	r3, [sp, #24]
 8009ebc:	f013 0f01 	tst.w	r3, #1
 8009ec0:	d19b      	bne.n	8009dfa <tcp_write+0x216>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8009ec2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0bb      	beq.n	8009e42 <tcp_write+0x25e>
 8009eca:	4b06      	ldr	r3, [pc, #24]	; (8009ee4 <tcp_write+0x300>)
 8009ecc:	f240 224b 	movw	r2, #587	; 0x24b
 8009ed0:	490d      	ldr	r1, [pc, #52]	; (8009f08 <tcp_write+0x324>)
 8009ed2:	4806      	ldr	r0, [pc, #24]	; (8009eec <tcp_write+0x308>)
 8009ed4:	f004 ffd4 	bl	800ee80 <iprintf>
 8009ed8:	e7b3      	b.n	8009e42 <tcp_write+0x25e>
        pbuf_free(p2);
 8009eda:	9808      	ldr	r0, [sp, #32]
 8009edc:	f7fc fdbc 	bl	8006a58 <pbuf_free>
        goto memerr;
 8009ee0:	e017      	b.n	8009f12 <tcp_write+0x32e>
 8009ee2:	bf00      	nop
 8009ee4:	08011aa8 	.word	0x08011aa8
 8009ee8:	080118cc 	.word	0x080118cc
 8009eec:	080101d8 	.word	0x080101d8
 8009ef0:	08011900 	.word	0x08011900
 8009ef4:	08011918 	.word	0x08011918
 8009ef8:	08011938 	.word	0x08011938
 8009efc:	08011958 	.word	0x08011958
 8009f00:	08011984 	.word	0x08011984
 8009f04:	080119b4 	.word	0x080119b4
 8009f08:	080119f4 	.word	0x080119f4
      pbuf_free(p);
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	f7fc fda3 	bl	8006a58 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8009f12:	f898 301a 	ldrb.w	r3, [r8, #26]
 8009f16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f1a:	f888 301a 	strb.w	r3, [r8, #26]
  if (concat_p != NULL) {
 8009f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f20:	b113      	cbz	r3, 8009f28 <tcp_write+0x344>
    pbuf_free(concat_p);
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fc fd98 	bl	8006a58 <pbuf_free>
  if (queue != NULL) {
 8009f28:	f1b9 0f00 	cmp.w	r9, #0
 8009f2c:	d002      	beq.n	8009f34 <tcp_write+0x350>
    tcp_segs_free(queue);
 8009f2e:	4648      	mov	r0, r9
 8009f30:	f7fd faa5 	bl	800747e <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8009f34:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 80c9 	beq.w	800a0d0 <tcp_write+0x4ec>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009f3e:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f040 80c8 	bne.w	800a0d8 <tcp_write+0x4f4>
 8009f48:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 80b4 	beq.w	800a0ba <tcp_write+0x4d6>
  return ERR_MEM;
 8009f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f56:	930a      	str	r3, [sp, #40]	; 0x28
}
 8009f58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f5a:	b011      	add	sp, #68	; 0x44
 8009f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009f60:	4b5f      	ldr	r3, [pc, #380]	; (800a0e0 <tcp_write+0x4fc>)
 8009f62:	f240 2285 	movw	r2, #645	; 0x285
 8009f66:	495f      	ldr	r1, [pc, #380]	; (800a0e4 <tcp_write+0x500>)
 8009f68:	485f      	ldr	r0, [pc, #380]	; (800a0e8 <tcp_write+0x504>)
 8009f6a:	f004 ff89 	bl	800ee80 <iprintf>
 8009f6e:	e797      	b.n	8009ea0 <tcp_write+0x2bc>
      queue = seg;
 8009f70:	4681      	mov	r9, r0
 8009f72:	e797      	b.n	8009ea4 <tcp_write+0x2c0>
 8009f74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  u16_t extendlen = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	930d      	str	r3, [sp, #52]	; 0x34
  struct pbuf *concat_p = NULL;
 8009f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f7c:	f04f 0900 	mov.w	r9, #0
 8009f80:	f8cd 9014 	str.w	r9, [sp, #20]
 8009f84:	e791      	b.n	8009eaa <tcp_write+0x2c6>
 8009f86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009f88:	2300      	movs	r3, #0
 8009f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f8c:	e7f6      	b.n	8009f7c <tcp_write+0x398>
  if (oversize_used > 0) {
 8009f8e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009f90:	b1d5      	cbz	r5, 8009fc8 <tcp_write+0x3e4>
    for (p = last_unsent->p; p; p = p->next) {
 8009f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f94:	685c      	ldr	r4, [r3, #4]
 8009f96:	e000      	b.n	8009f9a <tcp_write+0x3b6>
 8009f98:	6824      	ldr	r4, [r4, #0]
 8009f9a:	b184      	cbz	r4, 8009fbe <tcp_write+0x3da>
      p->tot_len += oversize_used;
 8009f9c:	8923      	ldrh	r3, [r4, #8]
 8009f9e:	442b      	add	r3, r5
 8009fa0:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1f7      	bne.n	8009f98 <tcp_write+0x3b4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009fa8:	6860      	ldr	r0, [r4, #4]
 8009faa:	8963      	ldrh	r3, [r4, #10]
 8009fac:	462a      	mov	r2, r5
 8009fae:	9907      	ldr	r1, [sp, #28]
 8009fb0:	4418      	add	r0, r3
 8009fb2:	f004 ff52 	bl	800ee5a <memcpy>
        p->len += oversize_used;
 8009fb6:	8963      	ldrh	r3, [r4, #10]
 8009fb8:	442b      	add	r3, r5
 8009fba:	8163      	strh	r3, [r4, #10]
 8009fbc:	e7ec      	b.n	8009f98 <tcp_write+0x3b4>
    last_unsent->len += oversize_used;
 8009fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fc0:	8913      	ldrh	r3, [r2, #8]
 8009fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fc4:	4419      	add	r1, r3
 8009fc6:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 8009fc8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009fcc:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
  if (concat_p != NULL) {
 8009fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d03d      	beq.n	800a052 <tcp_write+0x46e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d032      	beq.n	800a042 <tcp_write+0x45e>
    pbuf_cat(last_unsent->p, concat_p);
 8009fdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fde:	4629      	mov	r1, r5
 8009fe0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009fe2:	6860      	ldr	r0, [r4, #4]
 8009fe4:	f7fc ff28 	bl	8006e38 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009fe8:	892b      	ldrh	r3, [r5, #8]
 8009fea:	8922      	ldrh	r2, [r4, #8]
 8009fec:	4413      	add	r3, r2
 8009fee:	8123      	strh	r3, [r4, #8]
  if (last_unsent == NULL) {
 8009ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d052      	beq.n	800a09c <tcp_write+0x4b8>
    last_unsent->next = queue;
 8009ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff8:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 8009ffc:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800a000:	4453      	add	r3, sl
 800a002:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
  pcb->snd_buf -= len;
 800a006:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 800a00a:	eba3 0a0a 	sub.w	sl, r3, sl
 800a00e:	f8a8 a060 	strh.w	sl, [r8, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800a012:	f8a8 6062 	strh.w	r6, [r8, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800a016:	b11e      	cbz	r6, 800a020 <tcp_write+0x43c>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a018:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d040      	beq.n	800a0a2 <tcp_write+0x4be>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a020:	2f00      	cmp	r7, #0
 800a022:	d099      	beq.n	8009f58 <tcp_write+0x374>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d096      	beq.n	8009f58 <tcp_write+0x374>
 800a02a:	9a06      	ldr	r2, [sp, #24]
 800a02c:	f012 0f02 	tst.w	r2, #2
 800a030:	d192      	bne.n	8009f58 <tcp_write+0x374>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a032:	899c      	ldrh	r4, [r3, #12]
 800a034:	2008      	movs	r0, #8
 800a036:	f7fc f84d 	bl	80060d4 <lwip_htons>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	4320      	orrs	r0, r4
 800a03e:	8198      	strh	r0, [r3, #12]
 800a040:	e78a      	b.n	8009f58 <tcp_write+0x374>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a042:	4b27      	ldr	r3, [pc, #156]	; (800a0e0 <tcp_write+0x4fc>)
 800a044:	f240 22bb 	movw	r2, #699	; 0x2bb
 800a048:	4928      	ldr	r1, [pc, #160]	; (800a0ec <tcp_write+0x508>)
 800a04a:	4827      	ldr	r0, [pc, #156]	; (800a0e8 <tcp_write+0x504>)
 800a04c:	f004 ff18 	bl	800ee80 <iprintf>
 800a050:	e7c4      	b.n	8009fdc <tcp_write+0x3f8>
  } else if (extendlen > 0) {
 800a052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a054:	2b00      	cmp	r3, #0
 800a056:	d0cb      	beq.n	8009ff0 <tcp_write+0x40c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05a:	b15b      	cbz	r3, 800a074 <tcp_write+0x490>
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	b14b      	cbz	r3, 800a074 <tcp_write+0x490>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a066:	6819      	ldr	r1, [r3, #0]
 800a068:	b161      	cbz	r1, 800a084 <tcp_write+0x4a0>
      p->tot_len += extendlen;
 800a06a:	891a      	ldrh	r2, [r3, #8]
 800a06c:	4402      	add	r2, r0
 800a06e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a070:	460b      	mov	r3, r1
 800a072:	e7f8      	b.n	800a066 <tcp_write+0x482>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a074:	4b1a      	ldr	r3, [pc, #104]	; (800a0e0 <tcp_write+0x4fc>)
 800a076:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a07a:	491d      	ldr	r1, [pc, #116]	; (800a0f0 <tcp_write+0x50c>)
 800a07c:	481a      	ldr	r0, [pc, #104]	; (800a0e8 <tcp_write+0x504>)
 800a07e:	f004 feff 	bl	800ee80 <iprintf>
 800a082:	e7ed      	b.n	800a060 <tcp_write+0x47c>
    p->tot_len += extendlen;
 800a084:	891a      	ldrh	r2, [r3, #8]
 800a086:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a088:	440a      	add	r2, r1
 800a08a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a08c:	895a      	ldrh	r2, [r3, #10]
 800a08e:	440a      	add	r2, r1
 800a090:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a094:	8913      	ldrh	r3, [r2, #8]
 800a096:	440b      	add	r3, r1
 800a098:	8113      	strh	r3, [r2, #8]
 800a09a:	e7a9      	b.n	8009ff0 <tcp_write+0x40c>
    pcb->unsent = queue;
 800a09c:	f8c8 9068 	str.w	r9, [r8, #104]	; 0x68
 800a0a0:	e7ac      	b.n	8009ffc <tcp_write+0x418>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a0a2:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1ba      	bne.n	800a020 <tcp_write+0x43c>
 800a0aa:	4b0d      	ldr	r3, [pc, #52]	; (800a0e0 <tcp_write+0x4fc>)
 800a0ac:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a0b0:	4910      	ldr	r1, [pc, #64]	; (800a0f4 <tcp_write+0x510>)
 800a0b2:	480d      	ldr	r0, [pc, #52]	; (800a0e8 <tcp_write+0x504>)
 800a0b4:	f004 fee4 	bl	800ee80 <iprintf>
 800a0b8:	e7b2      	b.n	800a020 <tcp_write+0x43c>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a0ba:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <tcp_write+0x4fc>)
 800a0bc:	f240 3202 	movw	r2, #770	; 0x302
 800a0c0:	490c      	ldr	r1, [pc, #48]	; (800a0f4 <tcp_write+0x510>)
 800a0c2:	4809      	ldr	r0, [pc, #36]	; (800a0e8 <tcp_write+0x504>)
 800a0c4:	f004 fedc 	bl	800ee80 <iprintf>
  return ERR_MEM;
 800a0c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0cc:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ce:	e743      	b.n	8009f58 <tcp_write+0x374>
 800a0d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d6:	e73f      	b.n	8009f58 <tcp_write+0x374>
 800a0d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0dc:	930a      	str	r3, [sp, #40]	; 0x28
 800a0de:	e73b      	b.n	8009f58 <tcp_write+0x374>
 800a0e0:	08011aa8 	.word	0x08011aa8
 800a0e4:	08011a04 	.word	0x08011a04
 800a0e8:	080101d8 	.word	0x080101d8
 800a0ec:	08011a18 	.word	0x08011a18
 800a0f0:	08011a50 	.word	0x08011a50
 800a0f4:	08011a88 	.word	0x08011a88

0800a0f8 <tcp_enqueue_flags>:
{
 800a0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	4604      	mov	r4, r0
 800a100:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a102:	f011 0803 	ands.w	r8, r1, #3
 800a106:	d02a      	beq.n	800a15e <tcp_enqueue_flags+0x66>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a108:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d902      	bls.n	800a116 <tcp_enqueue_flags+0x1e>
 800a110:	f015 0f01 	tst.w	r5, #1
 800a114:	d02b      	beq.n	800a16e <tcp_enqueue_flags+0x76>
  if (flags & TCP_SYN) {
 800a116:	f015 0f02 	tst.w	r5, #2
 800a11a:	d12f      	bne.n	800a17c <tcp_enqueue_flags+0x84>
  u8_t optflags = 0;
 800a11c:	2600      	movs	r6, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a11e:	00b7      	lsls	r7, r6, #2
 800a120:	2200      	movs	r2, #0
 800a122:	4639      	mov	r1, r7
 800a124:	4610      	mov	r0, r2
 800a126:	f7fc fd01 	bl	8006b2c <pbuf_alloc>
 800a12a:	4681      	mov	r9, r0
 800a12c:	b340      	cbz	r0, 800a180 <tcp_enqueue_flags+0x88>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a12e:	8943      	ldrh	r3, [r0, #10]
 800a130:	429f      	cmp	r7, r3
 800a132:	d82c      	bhi.n	800a18e <tcp_enqueue_flags+0x96>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a134:	9600      	str	r6, [sp, #0]
 800a136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a138:	462a      	mov	r2, r5
 800a13a:	4649      	mov	r1, r9
 800a13c:	4620      	mov	r0, r4
 800a13e:	f7ff fc4b 	bl	80099d8 <tcp_create_segment>
 800a142:	4606      	mov	r6, r0
 800a144:	b358      	cbz	r0, 800a19e <tcp_enqueue_flags+0xa6>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a146:	68c3      	ldr	r3, [r0, #12]
 800a148:	f013 0f03 	tst.w	r3, #3
 800a14c:	d12e      	bne.n	800a1ac <tcp_enqueue_flags+0xb4>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a14e:	8933      	ldrh	r3, [r6, #8]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d133      	bne.n	800a1bc <tcp_enqueue_flags+0xc4>
  if (pcb->unsent == NULL) {
 800a154:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800a156:	2a00      	cmp	r2, #0
 800a158:	d139      	bne.n	800a1ce <tcp_enqueue_flags+0xd6>
    pcb->unsent = seg;
 800a15a:	66a6      	str	r6, [r4, #104]	; 0x68
 800a15c:	e03b      	b.n	800a1d6 <tcp_enqueue_flags+0xde>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a15e:	4b35      	ldr	r3, [pc, #212]	; (800a234 <tcp_enqueue_flags+0x13c>)
 800a160:	f240 321b 	movw	r2, #795	; 0x31b
 800a164:	4934      	ldr	r1, [pc, #208]	; (800a238 <tcp_enqueue_flags+0x140>)
 800a166:	4835      	ldr	r0, [pc, #212]	; (800a23c <tcp_enqueue_flags+0x144>)
 800a168:	f004 fe8a 	bl	800ee80 <iprintf>
 800a16c:	e7cc      	b.n	800a108 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 800a16e:	7ea3      	ldrb	r3, [r4, #26]
 800a170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a174:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800a176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a17a:	e058      	b.n	800a22e <tcp_enqueue_flags+0x136>
    optflags = TF_SEG_OPTS_MSS;
 800a17c:	2601      	movs	r6, #1
 800a17e:	e7ce      	b.n	800a11e <tcp_enqueue_flags+0x26>
    pcb->flags |= TF_NAGLEMEMERR;
 800a180:	7ea3      	ldrb	r3, [r4, #26]
 800a182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a186:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800a188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a18c:	e04f      	b.n	800a22e <tcp_enqueue_flags+0x136>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a18e:	4b29      	ldr	r3, [pc, #164]	; (800a234 <tcp_enqueue_flags+0x13c>)
 800a190:	f240 3241 	movw	r2, #833	; 0x341
 800a194:	492a      	ldr	r1, [pc, #168]	; (800a240 <tcp_enqueue_flags+0x148>)
 800a196:	4829      	ldr	r0, [pc, #164]	; (800a23c <tcp_enqueue_flags+0x144>)
 800a198:	f004 fe72 	bl	800ee80 <iprintf>
 800a19c:	e7ca      	b.n	800a134 <tcp_enqueue_flags+0x3c>
    pcb->flags |= TF_NAGLEMEMERR;
 800a19e:	7ea3      	ldrb	r3, [r4, #26]
 800a1a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1a4:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800a1a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1aa:	e040      	b.n	800a22e <tcp_enqueue_flags+0x136>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a1ac:	4b21      	ldr	r3, [pc, #132]	; (800a234 <tcp_enqueue_flags+0x13c>)
 800a1ae:	f240 3249 	movw	r2, #841	; 0x349
 800a1b2:	4924      	ldr	r1, [pc, #144]	; (800a244 <tcp_enqueue_flags+0x14c>)
 800a1b4:	4821      	ldr	r0, [pc, #132]	; (800a23c <tcp_enqueue_flags+0x144>)
 800a1b6:	f004 fe63 	bl	800ee80 <iprintf>
 800a1ba:	e7c8      	b.n	800a14e <tcp_enqueue_flags+0x56>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a1bc:	4b1d      	ldr	r3, [pc, #116]	; (800a234 <tcp_enqueue_flags+0x13c>)
 800a1be:	f240 324a 	movw	r2, #842	; 0x34a
 800a1c2:	4921      	ldr	r1, [pc, #132]	; (800a248 <tcp_enqueue_flags+0x150>)
 800a1c4:	481d      	ldr	r0, [pc, #116]	; (800a23c <tcp_enqueue_flags+0x144>)
 800a1c6:	f004 fe5b 	bl	800ee80 <iprintf>
 800a1ca:	e7c3      	b.n	800a154 <tcp_enqueue_flags+0x5c>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6813      	ldr	r3, [r2, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1fb      	bne.n	800a1cc <tcp_enqueue_flags+0xd4>
    useg->next = seg;
 800a1d4:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a1dc:	f1b8 0f00 	cmp.w	r8, #0
 800a1e0:	d002      	beq.n	800a1e8 <tcp_enqueue_flags+0xf0>
    pcb->snd_lbb++;
 800a1e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800a1e8:	f015 0f01 	tst.w	r5, #1
 800a1ec:	d003      	beq.n	800a1f6 <tcp_enqueue_flags+0xfe>
    pcb->flags |= TF_FIN;
 800a1ee:	7ea3      	ldrb	r3, [r4, #26]
 800a1f0:	f043 0320 	orr.w	r3, r3, #32
 800a1f4:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a1f6:	6870      	ldr	r0, [r6, #4]
 800a1f8:	f7fc fdf8 	bl	8006dec <pbuf_clen>
 800a1fc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a200:	4418      	add	r0, r3
 800a202:	b280      	uxth	r0, r0
 800a204:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800a208:	b180      	cbz	r0, 800a22c <tcp_enqueue_flags+0x134>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a20a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a20c:	b10b      	cbz	r3, 800a212 <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 800a20e:	2000      	movs	r0, #0
 800a210:	e00d      	b.n	800a22e <tcp_enqueue_flags+0x136>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a212:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a214:	b10b      	cbz	r3, 800a21a <tcp_enqueue_flags+0x122>
  return ERR_OK;
 800a216:	2000      	movs	r0, #0
 800a218:	e009      	b.n	800a22e <tcp_enqueue_flags+0x136>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a21a:	4b06      	ldr	r3, [pc, #24]	; (800a234 <tcp_enqueue_flags+0x13c>)
 800a21c:	f240 326d 	movw	r2, #877	; 0x36d
 800a220:	490a      	ldr	r1, [pc, #40]	; (800a24c <tcp_enqueue_flags+0x154>)
 800a222:	4806      	ldr	r0, [pc, #24]	; (800a23c <tcp_enqueue_flags+0x144>)
 800a224:	f004 fe2c 	bl	800ee80 <iprintf>
  return ERR_OK;
 800a228:	2000      	movs	r0, #0
 800a22a:	e000      	b.n	800a22e <tcp_enqueue_flags+0x136>
 800a22c:	2000      	movs	r0, #0
}
 800a22e:	b003      	add	sp, #12
 800a230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a234:	08011aa8 	.word	0x08011aa8
 800a238:	08011748 	.word	0x08011748
 800a23c:	080101d8 	.word	0x080101d8
 800a240:	080117a0 	.word	0x080117a0
 800a244:	080117dc 	.word	0x080117dc
 800a248:	080117f4 	.word	0x080117f4
 800a24c:	08011820 	.word	0x08011820

0800a250 <tcp_send_fin>:
{
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800a254:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800a256:	b90c      	cbnz	r4, 800a25c <tcp_send_fin+0xc>
 800a258:	e00a      	b.n	800a270 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 800a25a:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1fb      	bne.n	800a25a <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a262:	68e3      	ldr	r3, [r4, #12]
 800a264:	8998      	ldrh	r0, [r3, #12]
 800a266:	f7fb ff35 	bl	80060d4 <lwip_htons>
 800a26a:	f010 0f07 	tst.w	r0, #7
 800a26e:	d004      	beq.n	800a27a <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a270:	2101      	movs	r1, #1
 800a272:	4628      	mov	r0, r5
 800a274:	f7ff ff40 	bl	800a0f8 <tcp_enqueue_flags>
}
 800a278:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a27a:	68e3      	ldr	r3, [r4, #12]
 800a27c:	899e      	ldrh	r6, [r3, #12]
 800a27e:	2001      	movs	r0, #1
 800a280:	f7fb ff28 	bl	80060d4 <lwip_htons>
 800a284:	68e3      	ldr	r3, [r4, #12]
 800a286:	4330      	orrs	r0, r6
 800a288:	8198      	strh	r0, [r3, #12]
      pcb->flags |= TF_FIN;
 800a28a:	7eab      	ldrb	r3, [r5, #26]
 800a28c:	f043 0320 	orr.w	r3, r3, #32
 800a290:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 800a292:	2000      	movs	r0, #0
 800a294:	e7f0      	b.n	800a278 <tcp_send_fin+0x28>

0800a296 <tcp_send_empty_ack>:
{
 800a296:	b570      	push	{r4, r5, r6, lr}
 800a298:	b084      	sub	sp, #16
 800a29a:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a29c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a29e:	f7fb ff1c 	bl	80060da <lwip_htonl>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f7ff fbf3 	bl	8009a94 <tcp_output_alloc_header>
  if (p == NULL) {
 800a2ae:	b1e0      	cbz	r0, 800a2ea <tcp_send_empty_ack+0x54>
 800a2b0:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a2b2:	1d25      	adds	r5, r4, #4
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	f002 fe35 	bl	800cf24 <ip4_route>
  if (netif == NULL) {
 800a2ba:	b1e8      	cbz	r0, 800a2f8 <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a2bc:	7aa3      	ldrb	r3, [r4, #10]
 800a2be:	7a61      	ldrb	r1, [r4, #9]
 800a2c0:	9002      	str	r0, [sp, #8]
 800a2c2:	2206      	movs	r2, #6
 800a2c4:	9201      	str	r2, [sp, #4]
 800a2c6:	9100      	str	r1, [sp, #0]
 800a2c8:	462a      	mov	r2, r5
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f002 ffd9 	bl	800d284 <ip4_output_if>
 800a2d2:	4605      	mov	r5, r0
  pbuf_free(p);
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f7fc fbbf 	bl	8006a58 <pbuf_free>
  if (err != ERR_OK) {
 800a2da:	b985      	cbnz	r5, 800a2fe <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a2dc:	7ea3      	ldrb	r3, [r4, #26]
 800a2de:	f023 0303 	bic.w	r3, r3, #3
 800a2e2:	76a3      	strb	r3, [r4, #26]
}
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	b004      	add	sp, #16
 800a2e8:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a2ea:	7ea3      	ldrb	r3, [r4, #26]
 800a2ec:	f043 0303 	orr.w	r3, r3, #3
 800a2f0:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 800a2f2:	f06f 0501 	mvn.w	r5, #1
 800a2f6:	e7f5      	b.n	800a2e4 <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 800a2f8:	f06f 0503 	mvn.w	r5, #3
 800a2fc:	e7ea      	b.n	800a2d4 <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a2fe:	7ea3      	ldrb	r3, [r4, #26]
 800a300:	f043 0303 	orr.w	r3, r3, #3
 800a304:	76a3      	strb	r3, [r4, #26]
 800a306:	e7ed      	b.n	800a2e4 <tcp_send_empty_ack+0x4e>

0800a308 <tcp_output>:
{
 800a308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a30e:	7d03      	ldrb	r3, [r0, #20]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d01e      	beq.n	800a352 <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 800a314:	4b97      	ldr	r3, [pc, #604]	; (800a574 <tcp_output+0x26c>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	42ab      	cmp	r3, r5
 800a31a:	f000 8123 	beq.w	800a564 <tcp_output+0x25c>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a31e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800a322:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800a326:	42bb      	cmp	r3, r7
 800a328:	d200      	bcs.n	800a32c <tcp_output+0x24>
 800a32a:	461f      	mov	r7, r3
  seg = pcb->unsent;
 800a32c:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 800a32e:	7eab      	ldrb	r3, [r5, #26]
 800a330:	f013 0f02 	tst.w	r3, #2
 800a334:	d00a      	beq.n	800a34c <tcp_output+0x44>
 800a336:	b1a4      	cbz	r4, 800a362 <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a338:	68e3      	ldr	r3, [r4, #12]
 800a33a:	6858      	ldr	r0, [r3, #4]
 800a33c:	f7fb fecd 	bl	80060da <lwip_htonl>
 800a340:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a342:	1ac3      	subs	r3, r0, r3
 800a344:	8920      	ldrh	r0, [r4, #8]
 800a346:	4403      	add	r3, r0
     (seg == NULL ||
 800a348:	42bb      	cmp	r3, r7
 800a34a:	d80a      	bhi.n	800a362 <tcp_output+0x5a>
  useg = pcb->unacked;
 800a34c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 800a34e:	b976      	cbnz	r6, 800a36e <tcp_output+0x66>
 800a350:	e010      	b.n	800a374 <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a352:	4b89      	ldr	r3, [pc, #548]	; (800a578 <tcp_output+0x270>)
 800a354:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800a358:	4988      	ldr	r1, [pc, #544]	; (800a57c <tcp_output+0x274>)
 800a35a:	4889      	ldr	r0, [pc, #548]	; (800a580 <tcp_output+0x278>)
 800a35c:	f004 fd90 	bl	800ee80 <iprintf>
 800a360:	e7d8      	b.n	800a314 <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 800a362:	4628      	mov	r0, r5
 800a364:	f7ff ff97 	bl	800a296 <tcp_send_empty_ack>
 800a368:	4603      	mov	r3, r0
 800a36a:	e052      	b.n	800a412 <tcp_output+0x10a>
    for (; useg->next != NULL; useg = useg->next);
 800a36c:	461e      	mov	r6, r3
 800a36e:	6833      	ldr	r3, [r6, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1fb      	bne.n	800a36c <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a374:	1d28      	adds	r0, r5, #4
 800a376:	f002 fdd5 	bl	800cf24 <ip4_route>
  if (netif == NULL) {
 800a37a:	4680      	mov	r8, r0
 800a37c:	2800      	cmp	r0, #0
 800a37e:	f000 80f3 	beq.w	800a568 <tcp_output+0x260>
  if (ip_addr_isany(&pcb->local_ip)) {
 800a382:	b10d      	cbz	r5, 800a388 <tcp_output+0x80>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b933      	cbnz	r3, 800a396 <tcp_output+0x8e>
    if (local_ip == NULL) {
 800a388:	f118 0f04 	cmn.w	r8, #4
 800a38c:	f000 80ef 	beq.w	800a56e <tcp_output+0x266>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a390:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a394:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 800a396:	2c00      	cmp	r4, #0
 800a398:	d076      	beq.n	800a488 <tcp_output+0x180>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a39a:	68e3      	ldr	r3, [r4, #12]
 800a39c:	6858      	ldr	r0, [r3, #4]
 800a39e:	f7fb fe9c 	bl	80060da <lwip_htonl>
 800a3a2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a3a4:	1ac3      	subs	r3, r0, r3
 800a3a6:	8920      	ldrh	r0, [r4, #8]
 800a3a8:	4403      	add	r3, r0
  if (seg != NULL &&
 800a3aa:	42bb      	cmp	r3, r7
 800a3ac:	d96c      	bls.n	800a488 <tcp_output+0x180>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a3ae:	2f00      	cmp	r7, #0
 800a3b0:	d06a      	beq.n	800a488 <tcp_output+0x180>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800a3b2:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800a3b6:	42bb      	cmp	r3, r7
 800a3b8:	d166      	bne.n	800a488 <tcp_output+0x180>
 800a3ba:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d163      	bne.n	800a488 <tcp_output+0x180>
    if (pcb->persist_backoff == 0) {
 800a3c0:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 800a3c4:	b9e3      	cbnz	r3, 800a400 <tcp_output+0xf8>
      pcb->persist_cnt = 0;
 800a3c6:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
 800a3d0:	e016      	b.n	800a400 <tcp_output+0xf8>
    LWIP_ASSERT("RST not expected here!",
 800a3d2:	4b69      	ldr	r3, [pc, #420]	; (800a578 <tcp_output+0x270>)
 800a3d4:	f240 4246 	movw	r2, #1094	; 0x446
 800a3d8:	496a      	ldr	r1, [pc, #424]	; (800a584 <tcp_output+0x27c>)
 800a3da:	4869      	ldr	r0, [pc, #420]	; (800a580 <tcp_output+0x278>)
 800a3dc:	f004 fd50 	bl	800ee80 <iprintf>
 800a3e0:	e065      	b.n	800a4ae <tcp_output+0x1a6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a3e2:	8911      	ldrh	r1, [r2, #8]
 800a3e4:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800a3e6:	4291      	cmp	r1, r2
 800a3e8:	d26d      	bcs.n	800a4c6 <tcp_output+0x1be>
 800a3ea:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
 800a3ee:	2a00      	cmp	r2, #0
 800a3f0:	d069      	beq.n	800a4c6 <tcp_output+0x1be>
 800a3f2:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 800a3f6:	2a08      	cmp	r2, #8
 800a3f8:	d865      	bhi.n	800a4c6 <tcp_output+0x1be>
 800a3fa:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800a3fe:	d162      	bne.n	800a4c6 <tcp_output+0x1be>
  if (pcb->unsent == NULL) {
 800a400:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800a402:	2b00      	cmp	r3, #0
 800a404:	f000 80ab 	beq.w	800a55e <tcp_output+0x256>
  pcb->flags &= ~TF_NAGLEMEMERR;
 800a408:	7eab      	ldrb	r3, [r5, #26]
 800a40a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a40e:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a418:	68e3      	ldr	r3, [r4, #12]
 800a41a:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800a41e:	2010      	movs	r0, #16
 800a420:	f7fb fe58 	bl	80060d4 <lwip_htons>
 800a424:	68e3      	ldr	r3, [r4, #12]
 800a426:	ea49 0000 	orr.w	r0, r9, r0
 800a42a:	8198      	strh	r0, [r3, #12]
 800a42c:	e04e      	b.n	800a4cc <tcp_output+0x1c4>
      pcb->flags |= TF_NAGLEMEMERR;
 800a42e:	7eaa      	ldrb	r2, [r5, #26]
 800a430:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a434:	76aa      	strb	r2, [r5, #26]
      return err;
 800a436:	e7ec      	b.n	800a412 <tcp_output+0x10a>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a438:	2000      	movs	r0, #0
 800a43a:	e067      	b.n	800a50c <tcp_output+0x204>
      pcb->snd_nxt = snd_nxt;
 800a43c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800a43e:	e06b      	b.n	800a518 <tcp_output+0x210>
    if (TCP_TCPLEN(seg) > 0) {
 800a440:	2300      	movs	r3, #0
 800a442:	e073      	b.n	800a52c <tcp_output+0x224>
        pcb->unacked = seg;
 800a444:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 800a446:	4626      	mov	r6, r4
 800a448:	e01d      	b.n	800a486 <tcp_output+0x17e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a44a:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 800a44e:	f8da 3000 	ldr.w	r3, [sl]
 800a452:	b17b      	cbz	r3, 800a474 <tcp_output+0x16c>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	6858      	ldr	r0, [r3, #4]
 800a458:	f7fb fe3f 	bl	80060da <lwip_htonl>
 800a45c:	4681      	mov	r9, r0
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	6858      	ldr	r0, [r3, #4]
 800a462:	f7fb fe3a 	bl	80060da <lwip_htonl>
 800a466:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 800a46a:	2800      	cmp	r0, #0
 800a46c:	da02      	bge.n	800a474 <tcp_output+0x16c>
              cur_seg = &((*cur_seg)->next );
 800a46e:	f8da a000 	ldr.w	sl, [sl]
 800a472:	e7ec      	b.n	800a44e <tcp_output+0x146>
          seg->next = (*cur_seg);
 800a474:	f8da 3000 	ldr.w	r3, [sl]
 800a478:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800a47a:	f8ca 4000 	str.w	r4, [sl]
 800a47e:	e002      	b.n	800a486 <tcp_output+0x17e>
      tcp_seg_free(seg);
 800a480:	4620      	mov	r0, r4
 800a482:	f7fc ffef 	bl	8007464 <tcp_seg_free>
    seg = pcb->unsent;
 800a486:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 800a488:	2c00      	cmp	r4, #0
 800a48a:	d0b9      	beq.n	800a400 <tcp_output+0xf8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a48c:	68e3      	ldr	r3, [r4, #12]
 800a48e:	6858      	ldr	r0, [r3, #4]
 800a490:	f7fb fe23 	bl	80060da <lwip_htonl>
 800a494:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a496:	1ac0      	subs	r0, r0, r3
 800a498:	8923      	ldrh	r3, [r4, #8]
 800a49a:	4418      	add	r0, r3
  while (seg != NULL &&
 800a49c:	42b8      	cmp	r0, r7
 800a49e:	d8af      	bhi.n	800a400 <tcp_output+0xf8>
    LWIP_ASSERT("RST not expected here!",
 800a4a0:	68e3      	ldr	r3, [r4, #12]
 800a4a2:	8998      	ldrh	r0, [r3, #12]
 800a4a4:	f7fb fe16 	bl	80060d4 <lwip_htons>
 800a4a8:	f010 0f04 	tst.w	r0, #4
 800a4ac:	d191      	bne.n	800a3d2 <tcp_output+0xca>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a4ae:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a4b0:	b14b      	cbz	r3, 800a4c6 <tcp_output+0x1be>
 800a4b2:	7eab      	ldrb	r3, [r5, #26]
 800a4b4:	f013 0f44 	tst.w	r3, #68	; 0x44
 800a4b8:	d105      	bne.n	800a4c6 <tcp_output+0x1be>
 800a4ba:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800a4bc:	2a00      	cmp	r2, #0
 800a4be:	d094      	beq.n	800a3ea <tcp_output+0xe2>
 800a4c0:	6811      	ldr	r1, [r2, #0]
 800a4c2:	2900      	cmp	r1, #0
 800a4c4:	d08d      	beq.n	800a3e2 <tcp_output+0xda>
    if (pcb->state != SYN_SENT) {
 800a4c6:	7d2b      	ldrb	r3, [r5, #20]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d1a5      	bne.n	800a418 <tcp_output+0x110>
    err = tcp_output_segment(seg, pcb, netif);
 800a4cc:	4642      	mov	r2, r8
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f7ff fb29 	bl	8009b28 <tcp_output_segment>
    if (err != ERR_OK) {
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d1a8      	bne.n	800a42e <tcp_output+0x126>
    pcb->unsent = seg->next;
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800a4e0:	7d2b      	ldrb	r3, [r5, #20]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d003      	beq.n	800a4ee <tcp_output+0x1e6>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a4e6:	7eab      	ldrb	r3, [r5, #26]
 800a4e8:	f023 0303 	bic.w	r3, r3, #3
 800a4ec:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a4ee:	68e3      	ldr	r3, [r4, #12]
 800a4f0:	6858      	ldr	r0, [r3, #4]
 800a4f2:	f7fb fdf2 	bl	80060da <lwip_htonl>
 800a4f6:	4681      	mov	r9, r0
 800a4f8:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800a4fc:	68e3      	ldr	r3, [r4, #12]
 800a4fe:	8998      	ldrh	r0, [r3, #12]
 800a500:	f7fb fde8 	bl	80060d4 <lwip_htons>
 800a504:	f010 0f03 	tst.w	r0, #3
 800a508:	d096      	beq.n	800a438 <tcp_output+0x130>
 800a50a:	2001      	movs	r0, #1
 800a50c:	4450      	add	r0, sl
 800a50e:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a510:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800a512:	1a1b      	subs	r3, r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	db91      	blt.n	800a43c <tcp_output+0x134>
    if (TCP_TCPLEN(seg) > 0) {
 800a518:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800a51c:	68e3      	ldr	r3, [r4, #12]
 800a51e:	8998      	ldrh	r0, [r3, #12]
 800a520:	f7fb fdd8 	bl	80060d4 <lwip_htons>
 800a524:	f010 0f03 	tst.w	r0, #3
 800a528:	d08a      	beq.n	800a440 <tcp_output+0x138>
 800a52a:	2301      	movs	r3, #1
 800a52c:	eb19 0f03 	cmn.w	r9, r3
 800a530:	d0a6      	beq.n	800a480 <tcp_output+0x178>
      seg->next = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800a536:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d083      	beq.n	800a444 <tcp_output+0x13c>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a53c:	68e3      	ldr	r3, [r4, #12]
 800a53e:	6858      	ldr	r0, [r3, #4]
 800a540:	f7fb fdcb 	bl	80060da <lwip_htonl>
 800a544:	4681      	mov	r9, r0
 800a546:	68f3      	ldr	r3, [r6, #12]
 800a548:	6858      	ldr	r0, [r3, #4]
 800a54a:	f7fb fdc6 	bl	80060da <lwip_htonl>
 800a54e:	eba9 0000 	sub.w	r0, r9, r0
 800a552:	2800      	cmp	r0, #0
 800a554:	f6ff af79 	blt.w	800a44a <tcp_output+0x142>
          useg->next = seg;
 800a558:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 800a55a:	4626      	mov	r6, r4
 800a55c:	e793      	b.n	800a486 <tcp_output+0x17e>
    pcb->unsent_oversize = 0;
 800a55e:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800a562:	e751      	b.n	800a408 <tcp_output+0x100>
    return ERR_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	e754      	b.n	800a412 <tcp_output+0x10a>
    return ERR_RTE;
 800a568:	f06f 0303 	mvn.w	r3, #3
 800a56c:	e751      	b.n	800a412 <tcp_output+0x10a>
      return ERR_RTE;
 800a56e:	f06f 0303 	mvn.w	r3, #3
 800a572:	e74e      	b.n	800a412 <tcp_output+0x10a>
 800a574:	20008204 	.word	0x20008204
 800a578:	08011aa8 	.word	0x08011aa8
 800a57c:	08011848 	.word	0x08011848
 800a580:	080101d8 	.word	0x080101d8
 800a584:	08011870 	.word	0x08011870

0800a588 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800a588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a58c:	b085      	sub	sp, #20
 800a58e:	4680      	mov	r8, r0
 800a590:	460f      	mov	r7, r1
 800a592:	4691      	mov	r9, r2
 800a594:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a596:	2200      	movs	r2, #0
 800a598:	2114      	movs	r1, #20
 800a59a:	2001      	movs	r0, #1
 800a59c:	f7fc fac6 	bl	8006b2c <pbuf_alloc>
  if (p == NULL) {
 800a5a0:	b3b0      	cbz	r0, 800a610 <tcp_rst+0x88>
 800a5a2:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a5a4:	8943      	ldrh	r3, [r0, #10]
 800a5a6:	2b13      	cmp	r3, #19
 800a5a8:	d935      	bls.n	800a616 <tcp_rst+0x8e>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800a5aa:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800a5ac:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 800a5b0:	f7fb fd90 	bl	80060d4 <lwip_htons>
 800a5b4:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800a5b6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800a5ba:	f7fb fd8b 	bl	80060d4 <lwip_htons>
 800a5be:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	f7fb fd8a 	bl	80060da <lwip_htonl>
 800a5c6:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	f7fb fd86 	bl	80060da <lwip_htonl>
 800a5ce:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a5d0:	f245 0014 	movw	r0, #20500	; 0x5014
 800a5d4:	f7fb fd7e 	bl	80060d4 <lwip_htons>
 800a5d8:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2208      	movs	r2, #8
 800a5de:	73a2      	strb	r2, [r4, #14]
 800a5e0:	2260      	movs	r2, #96	; 0x60
 800a5e2:	73e2      	strb	r2, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800a5e4:	7423      	strb	r3, [r4, #16]
 800a5e6:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 800a5e8:	74a3      	strb	r3, [r4, #18]
 800a5ea:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f002 fc99 	bl	800cf24 <ip4_route>
  if (netif != NULL) {
 800a5f2:	b150      	cbz	r0, 800a60a <tcp_rst+0x82>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a5f4:	9002      	str	r0, [sp, #8]
 800a5f6:	2306      	movs	r3, #6
 800a5f8:	9301      	str	r3, [sp, #4]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	23ff      	movs	r3, #255	; 0xff
 800a600:	4632      	mov	r2, r6
 800a602:	4649      	mov	r1, r9
 800a604:	4628      	mov	r0, r5
 800a606:	f002 fe3d 	bl	800d284 <ip4_output_if>
  }
  pbuf_free(p);
 800a60a:	4628      	mov	r0, r5
 800a60c:	f7fc fa24 	bl	8006a58 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a610:	b005      	add	sp, #20
 800a612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a616:	4b04      	ldr	r3, [pc, #16]	; (800a628 <tcp_rst+0xa0>)
 800a618:	f240 524d 	movw	r2, #1357	; 0x54d
 800a61c:	4903      	ldr	r1, [pc, #12]	; (800a62c <tcp_rst+0xa4>)
 800a61e:	4804      	ldr	r0, [pc, #16]	; (800a630 <tcp_rst+0xa8>)
 800a620:	f004 fc2e 	bl	800ee80 <iprintf>
 800a624:	e7c1      	b.n	800a5aa <tcp_rst+0x22>
 800a626:	bf00      	nop
 800a628:	08011aa8 	.word	0x08011aa8
 800a62c:	08011888 	.word	0x08011888
 800a630:	080101d8 	.word	0x080101d8

0800a634 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a634:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800a636:	b10a      	cbz	r2, 800a63c <tcp_rexmit_rto+0x8>
{
 800a638:	b508      	push	{r3, lr}
 800a63a:	e001      	b.n	800a640 <tcp_rexmit_rto+0xc>
 800a63c:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a63e:	461a      	mov	r2, r3
 800a640:	6813      	ldr	r3, [r2, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1fb      	bne.n	800a63e <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a646:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a648:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a64a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a64c:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a64e:	2300      	movs	r3, #0
 800a650:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a652:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a656:	2bff      	cmp	r3, #255	; 0xff
 800a658:	d002      	beq.n	800a660 <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 800a65a:	3301      	adds	r3, #1
 800a65c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800a664:	f7ff fe50 	bl	800a308 <tcp_output>
}
 800a668:	bd08      	pop	{r3, pc}

0800a66a <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a66c:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 800a66e:	b316      	cbz	r6, 800a6b6 <tcp_rexmit+0x4c>
 800a670:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800a672:	6833      	ldr	r3, [r6, #0]
 800a674:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800a676:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 800a67a:	e000      	b.n	800a67e <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800a67c:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	b15b      	cbz	r3, 800a69a <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	6858      	ldr	r0, [r3, #4]
 800a686:	f7fb fd28 	bl	80060da <lwip_htonl>
 800a68a:	4604      	mov	r4, r0
 800a68c:	68f3      	ldr	r3, [r6, #12]
 800a68e:	6858      	ldr	r0, [r3, #4]
 800a690:	f7fb fd23 	bl	80060da <lwip_htonl>
 800a694:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 800a696:	2800      	cmp	r0, #0
 800a698:	dbf0      	blt.n	800a67c <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 800a69a:	682b      	ldr	r3, [r5, #0]
 800a69c:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800a69e:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a6a0:	6833      	ldr	r3, [r6, #0]
 800a6a2:	b14b      	cbz	r3, 800a6b8 <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a6a4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a6a8:	2bff      	cmp	r3, #255	; 0xff
 800a6aa:	d002      	beq.n	800a6b2 <tcp_rexmit+0x48>
    ++pcb->nrtx;
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800a6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800a6b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a6bc:	e7f2      	b.n	800a6a4 <tcp_rexmit+0x3a>

0800a6be <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a6be:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a6c0:	b11b      	cbz	r3, 800a6ca <tcp_rexmit_fast+0xc>
 800a6c2:	7e83      	ldrb	r3, [r0, #26]
 800a6c4:	f013 0f04 	tst.w	r3, #4
 800a6c8:	d000      	beq.n	800a6cc <tcp_rexmit_fast+0xe>
 800a6ca:	4770      	bx	lr
{
 800a6cc:	b510      	push	{r4, lr}
 800a6ce:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a6d0:	f7ff ffcb 	bl	800a66a <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a6d4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a6d8:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d217      	bcs.n	800a710 <tcp_rexmit_fast+0x52>
 800a6e0:	085a      	lsrs	r2, r3, #1
 800a6e2:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a6e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a6e8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800a6ec:	d202      	bcs.n	800a6f4 <tcp_rexmit_fast+0x36>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800a6ee:	005a      	lsls	r2, r3, #1
 800a6f0:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a6f4:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a6f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a702:	7ea3      	ldrb	r3, [r4, #26]
 800a704:	f043 0304 	orr.w	r3, r3, #4
 800a708:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	8623      	strh	r3, [r4, #48]	; 0x30
  }
}
 800a70e:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a710:	0852      	lsrs	r2, r2, #1
 800a712:	e7e6      	b.n	800a6e2 <tcp_rexmit_fast+0x24>

0800a714 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a714:	b570      	push	{r4, r5, r6, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a71a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a71c:	3801      	subs	r0, #1
 800a71e:	f7fb fcdc 	bl	80060da <lwip_htonl>
 800a722:	4603      	mov	r3, r0
 800a724:	2200      	movs	r2, #0
 800a726:	4611      	mov	r1, r2
 800a728:	4620      	mov	r0, r4
 800a72a:	f7ff f9b3 	bl	8009a94 <tcp_output_alloc_header>
  if (p == NULL) {
 800a72e:	b1d0      	cbz	r0, 800a766 <tcp_keepalive+0x52>
 800a730:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a732:	1d26      	adds	r6, r4, #4
 800a734:	4630      	mov	r0, r6
 800a736:	f002 fbf5 	bl	800cf24 <ip4_route>
  if (netif == NULL) {
 800a73a:	b188      	cbz	r0, 800a760 <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a73c:	7aa3      	ldrb	r3, [r4, #10]
 800a73e:	9002      	str	r0, [sp, #8]
 800a740:	2206      	movs	r2, #6
 800a742:	9201      	str	r2, [sp, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	9200      	str	r2, [sp, #0]
 800a748:	4632      	mov	r2, r6
 800a74a:	4621      	mov	r1, r4
 800a74c:	4628      	mov	r0, r5
 800a74e:	f002 fd99 	bl	800d284 <ip4_output_if>
 800a752:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a754:	4628      	mov	r0, r5
 800a756:	f7fc f97f 	bl	8006a58 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a75a:	4620      	mov	r0, r4
 800a75c:	b004      	add	sp, #16
 800a75e:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800a760:	f06f 0403 	mvn.w	r4, #3
 800a764:	e7f6      	b.n	800a754 <tcp_keepalive+0x40>
    return ERR_MEM;
 800a766:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a76a:	e7f6      	b.n	800a75a <tcp_keepalive+0x46>

0800a76c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a770:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a772:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 800a774:	b175      	cbz	r5, 800a794 <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 800a776:	2d00      	cmp	r5, #0
 800a778:	d05d      	beq.n	800a836 <tcp_zero_window_probe+0xca>
 800a77a:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a77c:	68eb      	ldr	r3, [r5, #12]
 800a77e:	8998      	ldrh	r0, [r3, #12]
 800a780:	f7fb fca8 	bl	80060d4 <lwip_htons>
 800a784:	f010 0f01 	tst.w	r0, #1
 800a788:	d006      	beq.n	800a798 <tcp_zero_window_probe+0x2c>
 800a78a:	892b      	ldrh	r3, [r5, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d040      	beq.n	800a812 <tcp_zero_window_probe+0xa6>
 800a790:	2200      	movs	r2, #0
 800a792:	e002      	b.n	800a79a <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 800a794:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800a796:	e7ee      	b.n	800a776 <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a798:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a79a:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a79e:	68eb      	ldr	r3, [r5, #12]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f082 0201 	eor.w	r2, r2, #1
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f7ff f973 	bl	8009a94 <tcp_output_alloc_header>
  if (p == NULL) {
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d042      	beq.n	800a83a <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a7b4:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800a7b8:	b36e      	cbz	r6, 800a816 <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a7ba:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 800a7be:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800a7c2:	b2b6      	uxth	r6, r6
 800a7c4:	2011      	movs	r0, #17
 800a7c6:	f7fb fc85 	bl	80060d4 <lwip_htons>
 800a7ca:	4330      	orrs	r0, r6
 800a7cc:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a7d0:	68eb      	ldr	r3, [r5, #12]
 800a7d2:	6858      	ldr	r0, [r3, #4]
 800a7d4:	f7fb fc81 	bl	80060da <lwip_htonl>
 800a7d8:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a7da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a7dc:	1a1b      	subs	r3, r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	db24      	blt.n	800a82c <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a7e2:	1d25      	adds	r5, r4, #4
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	f002 fb9d 	bl	800cf24 <ip4_route>
  if (netif == NULL) {
 800a7ea:	b308      	cbz	r0, 800a830 <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a7ec:	7aa3      	ldrb	r3, [r4, #10]
 800a7ee:	9002      	str	r0, [sp, #8]
 800a7f0:	2206      	movs	r2, #6
 800a7f2:	9201      	str	r2, [sp, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	9200      	str	r2, [sp, #0]
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f002 fd41 	bl	800d284 <ip4_output_if>
 800a802:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a804:	4638      	mov	r0, r7
 800a806:	f7fc f927 	bl	8006a58 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a80a:	4620      	mov	r0, r4
 800a80c:	b004      	add	sp, #16
 800a80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a812:	2201      	movs	r2, #1
 800a814:	e7c1      	b.n	800a79a <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a816:	6868      	ldr	r0, [r5, #4]
 800a818:	8903      	ldrh	r3, [r0, #8]
 800a81a:	892a      	ldrh	r2, [r5, #8]
 800a81c:	1a9b      	subs	r3, r3, r2
 800a81e:	b29b      	uxth	r3, r3
 800a820:	2201      	movs	r2, #1
 800a822:	f108 0114 	add.w	r1, r8, #20
 800a826:	f7fc fbef 	bl	8007008 <pbuf_copy_partial>
 800a82a:	e7d1      	b.n	800a7d0 <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 800a82c:	64e0      	str	r0, [r4, #76]	; 0x4c
 800a82e:	e7d8      	b.n	800a7e2 <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 800a830:	f06f 0403 	mvn.w	r4, #3
 800a834:	e7e6      	b.n	800a804 <tcp_zero_window_probe+0x98>
    return ERR_OK;
 800a836:	2400      	movs	r4, #0
 800a838:	e7e7      	b.n	800a80a <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 800a83a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a83e:	e7e4      	b.n	800a80a <tcp_zero_window_probe+0x9e>

0800a840 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800a840:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 800a842:	4b0a      	ldr	r3, [pc, #40]	; (800a86c <sys_timeouts_sleeptime+0x2c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	b15b      	cbz	r3, 800a860 <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 800a848:	f003 fcee 	bl	800e228 <sys_now>
 800a84c:	4b08      	ldr	r3, [pc, #32]	; (800a870 <sys_timeouts_sleeptime+0x30>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 800a852:	4b06      	ldr	r3, [pc, #24]	; (800a86c <sys_timeouts_sleeptime+0x2c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	4283      	cmp	r3, r0
 800a85a:	d304      	bcc.n	800a866 <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 800a85c:	1a18      	subs	r0, r3, r0
  }
}
 800a85e:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 800a860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a864:	e7fb      	b.n	800a85e <sys_timeouts_sleeptime+0x1e>
    return 0;
 800a866:	2000      	movs	r0, #0
 800a868:	e7f9      	b.n	800a85e <sys_timeouts_sleeptime+0x1e>
 800a86a:	bf00      	nop
 800a86c:	20004910 	.word	0x20004910
 800a870:	20004918 	.word	0x20004918

0800a874 <sys_check_timeouts>:
{
 800a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (next_timeout) {
 800a876:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <sys_check_timeouts+0x54>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	b31b      	cbz	r3, 800a8c4 <sys_check_timeouts+0x50>
    now = sys_now();
 800a87c:	f003 fcd4 	bl	800e228 <sys_now>
    diff = now - timeouts_last_time;
 800a880:	4b12      	ldr	r3, [pc, #72]	; (800a8cc <sys_check_timeouts+0x58>)
 800a882:	681c      	ldr	r4, [r3, #0]
 800a884:	1b04      	subs	r4, r0, r4
      tmptimeout = next_timeout;
 800a886:	4b10      	ldr	r3, [pc, #64]	; (800a8c8 <sys_check_timeouts+0x54>)
 800a888:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a88a:	b1d9      	cbz	r1, 800a8c4 <sys_check_timeouts+0x50>
 800a88c:	684b      	ldr	r3, [r1, #4]
 800a88e:	42a3      	cmp	r3, r4
 800a890:	d818      	bhi.n	800a8c4 <sys_check_timeouts+0x50>
        timeouts_last_time += tmptimeout->time;
 800a892:	480e      	ldr	r0, [pc, #56]	; (800a8cc <sys_check_timeouts+0x58>)
 800a894:	6802      	ldr	r2, [r0, #0]
 800a896:	441a      	add	r2, r3
 800a898:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 800a89a:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 800a89c:	680a      	ldr	r2, [r1, #0]
 800a89e:	4b0a      	ldr	r3, [pc, #40]	; (800a8c8 <sys_check_timeouts+0x54>)
 800a8a0:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 800a8a2:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 800a8a4:	68cf      	ldr	r7, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a8a6:	200a      	movs	r0, #10
 800a8a8:	f7fb fefc 	bl	80066a4 <memp_free>
        if (handler != NULL) {
 800a8ac:	2d00      	cmp	r5, #0
 800a8ae:	d0ea      	beq.n	800a886 <sys_check_timeouts+0x12>
          LOCK_TCPIP_CORE();
 800a8b0:	4e07      	ldr	r6, [pc, #28]	; (800a8d0 <sys_check_timeouts+0x5c>)
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f003 fa7b 	bl	800ddae <sys_mutex_lock>
          handler(arg);
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	47a8      	blx	r5
          UNLOCK_TCPIP_CORE();
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f003 fa7d 	bl	800ddbc <sys_mutex_unlock>
 800a8c2:	e7e0      	b.n	800a886 <sys_check_timeouts+0x12>
}
 800a8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20004910 	.word	0x20004910
 800a8cc:	20004918 	.word	0x20004918
 800a8d0:	20004abc 	.word	0x20004abc

0800a8d4 <sys_timeout>:
{
 800a8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d8:	4605      	mov	r5, r0
 800a8da:	4688      	mov	r8, r1
 800a8dc:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a8de:	200a      	movs	r0, #10
 800a8e0:	f7fb fec6 	bl	8006670 <memp_malloc>
  if (timeout == NULL) {
 800a8e4:	b300      	cbz	r0, 800a928 <sys_timeout+0x54>
 800a8e6:	4604      	mov	r4, r0
  now = sys_now();
 800a8e8:	f003 fc9e 	bl	800e228 <sys_now>
  if (next_timeout == NULL) {
 800a8ec:	4b20      	ldr	r3, [pc, #128]	; (800a970 <sys_timeout+0x9c>)
 800a8ee:	681e      	ldr	r6, [r3, #0]
 800a8f0:	b316      	cbz	r6, 800a938 <sys_timeout+0x64>
    diff = now - timeouts_last_time;
 800a8f2:	4b20      	ldr	r3, [pc, #128]	; (800a974 <sys_timeout+0xa0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 800a8fc:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 800a900:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 800a902:	4428      	add	r0, r5
 800a904:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800a906:	b1de      	cbz	r6, 800a940 <sys_timeout+0x6c>
  if (next_timeout->time > msecs) {
 800a908:	6873      	ldr	r3, [r6, #4]
 800a90a:	42ab      	cmp	r3, r5
 800a90c:	d81b      	bhi.n	800a946 <sys_timeout+0x72>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a90e:	4632      	mov	r2, r6
 800a910:	b182      	cbz	r2, 800a934 <sys_timeout+0x60>
      timeout->time -= t->time;
 800a912:	6851      	ldr	r1, [r2, #4]
 800a914:	6863      	ldr	r3, [r4, #4]
 800a916:	1a5b      	subs	r3, r3, r1
 800a918:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a91a:	6811      	ldr	r1, [r2, #0]
 800a91c:	b1c9      	cbz	r1, 800a952 <sys_timeout+0x7e>
 800a91e:	6848      	ldr	r0, [r1, #4]
 800a920:	4283      	cmp	r3, r0
 800a922:	d316      	bcc.n	800a952 <sys_timeout+0x7e>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a924:	460a      	mov	r2, r1
 800a926:	e7f3      	b.n	800a910 <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a928:	4b13      	ldr	r3, [pc, #76]	; (800a978 <sys_timeout+0xa4>)
 800a92a:	22d4      	movs	r2, #212	; 0xd4
 800a92c:	4913      	ldr	r1, [pc, #76]	; (800a97c <sys_timeout+0xa8>)
 800a92e:	4814      	ldr	r0, [pc, #80]	; (800a980 <sys_timeout+0xac>)
 800a930:	f004 faa6 	bl	800ee80 <iprintf>
}
 800a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 800a938:	4b0e      	ldr	r3, [pc, #56]	; (800a974 <sys_timeout+0xa0>)
 800a93a:	6018      	str	r0, [r3, #0]
    diff = 0;
 800a93c:	2000      	movs	r0, #0
 800a93e:	e7db      	b.n	800a8f8 <sys_timeout+0x24>
    next_timeout = timeout;
 800a940:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <sys_timeout+0x9c>)
 800a942:	601c      	str	r4, [r3, #0]
    return;
 800a944:	e7f6      	b.n	800a934 <sys_timeout+0x60>
    next_timeout->time -= msecs;
 800a946:	1b5d      	subs	r5, r3, r5
 800a948:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 800a94a:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 800a94c:	4b08      	ldr	r3, [pc, #32]	; (800a970 <sys_timeout+0x9c>)
 800a94e:	601c      	str	r4, [r3, #0]
 800a950:	e7f0      	b.n	800a934 <sys_timeout+0x60>
        if (t->next != NULL) {
 800a952:	b131      	cbz	r1, 800a962 <sys_timeout+0x8e>
          t->next->time -= timeout->time;
 800a954:	6848      	ldr	r0, [r1, #4]
 800a956:	1ac3      	subs	r3, r0, r3
 800a958:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 800a95a:	6813      	ldr	r3, [r2, #0]
 800a95c:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800a95e:	6014      	str	r4, [r2, #0]
        break;
 800a960:	e7e8      	b.n	800a934 <sys_timeout+0x60>
        } else if (timeout->time > msecs) {
 800a962:	42ab      	cmp	r3, r5
 800a964:	d9f9      	bls.n	800a95a <sys_timeout+0x86>
          timeout->time = msecs + next_timeout->time;
 800a966:	6873      	ldr	r3, [r6, #4]
 800a968:	441d      	add	r5, r3
 800a96a:	6065      	str	r5, [r4, #4]
 800a96c:	e7f5      	b.n	800a95a <sys_timeout+0x86>
 800a96e:	bf00      	nop
 800a970:	20004910 	.word	0x20004910
 800a974:	20004918 	.word	0x20004918
 800a978:	08011b74 	.word	0x08011b74
 800a97c:	08011ba8 	.word	0x08011ba8
 800a980:	080101d8 	.word	0x080101d8

0800a984 <tcp_timer_needed>:
{
 800a984:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a986:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <tcp_timer_needed+0x2c>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	b953      	cbnz	r3, 800a9a2 <tcp_timer_needed+0x1e>
 800a98c:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <tcp_timer_needed+0x30>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	b143      	cbz	r3, 800a9a4 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800a992:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <tcp_timer_needed+0x2c>)
 800a994:	2201      	movs	r2, #1
 800a996:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a998:	2200      	movs	r2, #0
 800a99a:	4907      	ldr	r1, [pc, #28]	; (800a9b8 <tcp_timer_needed+0x34>)
 800a99c:	20fa      	movs	r0, #250	; 0xfa
 800a99e:	f7ff ff99 	bl	800a8d4 <sys_timeout>
}
 800a9a2:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a9a4:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <tcp_timer_needed+0x38>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1f2      	bne.n	800a992 <tcp_timer_needed+0xe>
 800a9ac:	e7f9      	b.n	800a9a2 <tcp_timer_needed+0x1e>
 800a9ae:	bf00      	nop
 800a9b0:	20004914 	.word	0x20004914
 800a9b4:	200081f0 	.word	0x200081f0
 800a9b8:	0800a9c1 	.word	0x0800a9c1
 800a9bc:	20008200 	.word	0x20008200

0800a9c0 <tcpip_tcp_timer>:
{
 800a9c0:	b508      	push	{r3, lr}
  tcp_tmr();
 800a9c2:	f7fd f9a5 	bl	8007d10 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a9c6:	4b08      	ldr	r3, [pc, #32]	; (800a9e8 <tcpip_tcp_timer+0x28>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	b913      	cbnz	r3, 800a9d2 <tcpip_tcp_timer+0x12>
 800a9cc:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <tcpip_tcp_timer+0x2c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	b12b      	cbz	r3, 800a9de <tcpip_tcp_timer+0x1e>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4906      	ldr	r1, [pc, #24]	; (800a9f0 <tcpip_tcp_timer+0x30>)
 800a9d6:	20fa      	movs	r0, #250	; 0xfa
 800a9d8:	f7ff ff7c 	bl	800a8d4 <sys_timeout>
}
 800a9dc:	bd08      	pop	{r3, pc}
    tcpip_tcp_timer_active = 0;
 800a9de:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <tcpip_tcp_timer+0x34>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]
}
 800a9e4:	e7fa      	b.n	800a9dc <tcpip_tcp_timer+0x1c>
 800a9e6:	bf00      	nop
 800a9e8:	200081f0 	.word	0x200081f0
 800a9ec:	20008200 	.word	0x20008200
 800a9f0:	0800a9c1 	.word	0x0800a9c1
 800a9f4:	20004914 	.word	0x20004914

0800a9f8 <sys_timeouts_init>:
{
 800a9f8:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a9fa:	2401      	movs	r4, #1
 800a9fc:	e008      	b.n	800aa10 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a9fe:	4b08      	ldr	r3, [pc, #32]	; (800aa20 <sys_timeouts_init+0x28>)
 800aa00:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800aa04:	4907      	ldr	r1, [pc, #28]	; (800aa24 <sys_timeouts_init+0x2c>)
 800aa06:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800aa0a:	f7ff ff63 	bl	800a8d4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aa0e:	3401      	adds	r4, #1
 800aa10:	2c04      	cmp	r4, #4
 800aa12:	d9f4      	bls.n	800a9fe <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 800aa14:	f003 fc08 	bl	800e228 <sys_now>
 800aa18:	4b03      	ldr	r3, [pc, #12]	; (800aa28 <sys_timeouts_init+0x30>)
 800aa1a:	6018      	str	r0, [r3, #0]
}
 800aa1c:	bd10      	pop	{r4, pc}
 800aa1e:	bf00      	nop
 800aa20:	08011b4c 	.word	0x08011b4c
 800aa24:	0800aa2d 	.word	0x0800aa2d
 800aa28:	20004918 	.word	0x20004918

0800aa2c <cyclic_timer>:
{
 800aa2c:	b510      	push	{r4, lr}
 800aa2e:	4604      	mov	r4, r0
  cyclic->handler();
 800aa30:	6843      	ldr	r3, [r0, #4]
 800aa32:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800aa34:	4622      	mov	r2, r4
 800aa36:	4902      	ldr	r1, [pc, #8]	; (800aa40 <cyclic_timer+0x14>)
 800aa38:	6820      	ldr	r0, [r4, #0]
 800aa3a:	f7ff ff4b 	bl	800a8d4 <sys_timeout>
}
 800aa3e:	bd10      	pop	{r4, pc}
 800aa40:	0800aa2d 	.word	0x0800aa2d

0800aa44 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4604      	mov	r4, r0
 800aa48:	460d      	mov	r5, r1
 800aa4a:	e007      	b.n	800aa5c <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	4629      	mov	r1, r5
 800aa50:	4620      	mov	r0, r4
 800aa52:	f003 f8fc 	bl	800dc4e <sys_arch_mbox_fetch>
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
    sys_check_timeouts();
 800aa58:	f7ff ff0c 	bl	800a874 <sys_check_timeouts>
  if (!next_timeout) {
 800aa5c:	4b08      	ldr	r3, [pc, #32]	; (800aa80 <sys_timeouts_mbox_fetch+0x3c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0f3      	beq.n	800aa4c <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 800aa64:	f7ff feec 	bl	800a840 <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800aa68:	4602      	mov	r2, r0
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d0f4      	beq.n	800aa58 <sys_timeouts_mbox_fetch+0x14>
 800aa6e:	4629      	mov	r1, r5
 800aa70:	4620      	mov	r0, r4
 800aa72:	f003 f8ec 	bl	800dc4e <sys_arch_mbox_fetch>
 800aa76:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800aa7a:	d0ed      	beq.n	800aa58 <sys_timeouts_mbox_fetch+0x14>
 800aa7c:	e7eb      	b.n	800aa56 <sys_timeouts_mbox_fetch+0x12>
 800aa7e:	bf00      	nop
 800aa80:	20004910 	.word	0x20004910

0800aa84 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 800aa84:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800aa86:	4a10      	ldr	r2, [pc, #64]	; (800aac8 <udp_new_port+0x44>)
 800aa88:	8813      	ldrh	r3, [r2, #0]
 800aa8a:	1c59      	adds	r1, r3, #1
 800aa8c:	8011      	strh	r1, [r2, #0]
 800aa8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d009      	beq.n	800aaaa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa96:	4b0d      	ldr	r3, [pc, #52]	; (800aacc <udp_new_port+0x48>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	b193      	cbz	r3, 800aac2 <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 800aa9c:	8a59      	ldrh	r1, [r3, #18]
 800aa9e:	4a0a      	ldr	r2, [pc, #40]	; (800aac8 <udp_new_port+0x44>)
 800aaa0:	8812      	ldrh	r2, [r2, #0]
 800aaa2:	4291      	cmp	r1, r2
 800aaa4:	d006      	beq.n	800aab4 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	e7f7      	b.n	800aa9a <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800aaaa:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <udp_new_port+0x44>)
 800aaac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800aab0:	801a      	strh	r2, [r3, #0]
 800aab2:	e7f0      	b.n	800aa96 <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800aab4:	3001      	adds	r0, #1
 800aab6:	b280      	uxth	r0, r0
 800aab8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800aabc:	d3e3      	bcc.n	800aa86 <udp_new_port+0x2>
        return 0;
 800aabe:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 800aac0:	4770      	bx	lr
  return udp_port;
 800aac2:	4b01      	ldr	r3, [pc, #4]	; (800aac8 <udp_new_port+0x44>)
 800aac4:	8818      	ldrh	r0, [r3, #0]
 800aac6:	4770      	bx	lr
 800aac8:	2000000e 	.word	0x2000000e
 800aacc:	20008208 	.word	0x20008208

0800aad0 <udp_input_local_match>:
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800aad0:	b16a      	cbz	r2, 800aaee <udp_input_local_match+0x1e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aad2:	b1a8      	cbz	r0, 800ab00 <udp_input_local_match+0x30>
 800aad4:	6803      	ldr	r3, [r0, #0]
 800aad6:	b1ab      	cbz	r3, 800ab04 <udp_input_local_match+0x34>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aad8:	4a10      	ldr	r2, [pc, #64]	; (800ab1c <udp_input_local_match+0x4c>)
 800aada:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aadc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800aae0:	d012      	beq.n	800ab08 <udp_input_local_match+0x38>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800aae2:	6889      	ldr	r1, [r1, #8]
 800aae4:	4053      	eors	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aae6:	420b      	tst	r3, r1
 800aae8:	d010      	beq.n	800ab0c <udp_input_local_match+0x3c>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      return 1;
    }
  }

  return 0;
 800aaea:	2000      	movs	r0, #0
 800aaec:	4770      	bx	lr
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aaee:	b178      	cbz	r0, 800ab10 <udp_input_local_match+0x40>
 800aaf0:	6803      	ldr	r3, [r0, #0]
 800aaf2:	b17b      	cbz	r3, 800ab14 <udp_input_local_match+0x44>
 800aaf4:	4a09      	ldr	r2, [pc, #36]	; (800ab1c <udp_input_local_match+0x4c>)
 800aaf6:	6952      	ldr	r2, [r2, #20]
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d00d      	beq.n	800ab18 <udp_input_local_match+0x48>
  return 0;
 800aafc:	2000      	movs	r0, #0
 800aafe:	4770      	bx	lr
          return 1;
 800ab00:	2001      	movs	r0, #1
 800ab02:	4770      	bx	lr
 800ab04:	2001      	movs	r0, #1
 800ab06:	4770      	bx	lr
 800ab08:	2001      	movs	r0, #1
 800ab0a:	4770      	bx	lr
 800ab0c:	2001      	movs	r0, #1
 800ab0e:	4770      	bx	lr
      return 1;
 800ab10:	2001      	movs	r0, #1
 800ab12:	4770      	bx	lr
 800ab14:	2001      	movs	r0, #1
 800ab16:	4770      	bx	lr
 800ab18:	2001      	movs	r0, #1
}
 800ab1a:	4770      	bx	lr
 800ab1c:	20004ac0 	.word	0x20004ac0

0800ab20 <udp_init>:
}
 800ab20:	4770      	bx	lr
	...

0800ab24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ab24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab28:	b085      	sub	sp, #20
 800ab2a:	4680      	mov	r8, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ab2c:	8943      	ldrh	r3, [r0, #10]
 800ab2e:	2b07      	cmp	r3, #7
 800ab30:	d917      	bls.n	800ab62 <udp_input+0x3e>
 800ab32:	460f      	mov	r7, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ab34:	6844      	ldr	r4, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ab36:	4b42      	ldr	r3, [pc, #264]	; (800ac40 <udp_input+0x11c>)
 800ab38:	6819      	ldr	r1, [r3, #0]
 800ab3a:	6958      	ldr	r0, [r3, #20]
 800ab3c:	f002 fbb7 	bl	800d2ae <ip4_addr_isbroadcast_u32>
 800ab40:	9003      	str	r0, [sp, #12]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ab42:	8820      	ldrh	r0, [r4, #0]
 800ab44:	f7fb fac6 	bl	80060d4 <lwip_htons>
 800ab48:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800ab4a:	8860      	ldrh	r0, [r4, #2]
 800ab4c:	f7fb fac2 	bl	80060d4 <lwip_htons>
 800ab50:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab52:	4b3c      	ldr	r3, [pc, #240]	; (800ac44 <udp_input+0x120>)
 800ab54:	f8d3 9000 	ldr.w	r9, [r3]
 800ab58:	464c      	mov	r4, r9
  uncon_pcb = NULL;
 800ab5a:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800ab5e:	465d      	mov	r5, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab60:	e009      	b.n	800ab76 <udp_input+0x52>
    pbuf_free(p);
 800ab62:	f7fb ff79 	bl	8006a58 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ab66:	b005      	add	sp, #20
 800ab68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((pcb->remote_port == src) &&
 800ab6c:	8aa3      	ldrh	r3, [r4, #20]
 800ab6e:	4553      	cmp	r3, sl
 800ab70:	d015      	beq.n	800ab9e <udp_input+0x7a>
    prev = pcb;
 800ab72:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab74:	68e4      	ldr	r4, [r4, #12]
 800ab76:	b1fc      	cbz	r4, 800abb8 <udp_input+0x94>
    if ((pcb->local_port == dest) &&
 800ab78:	8a63      	ldrh	r3, [r4, #18]
 800ab7a:	42b3      	cmp	r3, r6
 800ab7c:	d1f9      	bne.n	800ab72 <udp_input+0x4e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ab7e:	9a03      	ldr	r2, [sp, #12]
 800ab80:	4639      	mov	r1, r7
 800ab82:	4620      	mov	r0, r4
 800ab84:	f7ff ffa4 	bl	800aad0 <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d0f2      	beq.n	800ab72 <udp_input+0x4e>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800ab8c:	7c23      	ldrb	r3, [r4, #16]
 800ab8e:	f013 0f04 	tst.w	r3, #4
 800ab92:	d1eb      	bne.n	800ab6c <udp_input+0x48>
 800ab94:	f1bb 0f00 	cmp.w	fp, #0
 800ab98:	d1e8      	bne.n	800ab6c <udp_input+0x48>
        uncon_pcb = pcb;
 800ab9a:	46a3      	mov	fp, r4
 800ab9c:	e7e6      	b.n	800ab6c <udp_input+0x48>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ab9e:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800aba0:	b11b      	cbz	r3, 800abaa <udp_input+0x86>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800aba2:	4a27      	ldr	r2, [pc, #156]	; (800ac40 <udp_input+0x11c>)
 800aba4:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d1e3      	bne.n	800ab72 <udp_input+0x4e>
        if (prev != NULL) {
 800abaa:	b12d      	cbz	r5, 800abb8 <udp_input+0x94>
          prev->next = pcb->next;
 800abac:	68e3      	ldr	r3, [r4, #12]
 800abae:	60eb      	str	r3, [r5, #12]
          pcb->next = udp_pcbs;
 800abb0:	f8c4 900c 	str.w	r9, [r4, #12]
          udp_pcbs = pcb;
 800abb4:	4b23      	ldr	r3, [pc, #140]	; (800ac44 <udp_input+0x120>)
 800abb6:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800abb8:	b18c      	cbz	r4, 800abde <udp_input+0xba>
  if (pcb != NULL) {
 800abba:	b194      	cbz	r4, 800abe2 <udp_input+0xbe>
    if (pbuf_header(p, -UDP_HLEN)) {
 800abbc:	f06f 0107 	mvn.w	r1, #7
 800abc0:	4640      	mov	r0, r8
 800abc2:	f7fb ff3f 	bl	8006a44 <pbuf_header>
 800abc6:	b9a8      	cbnz	r0, 800abf4 <udp_input+0xd0>
    if (pcb != NULL) {
 800abc8:	b31c      	cbz	r4, 800ac12 <udp_input+0xee>
      if (pcb->recv != NULL) {
 800abca:	69a5      	ldr	r5, [r4, #24]
 800abcc:	b1ed      	cbz	r5, 800ac0a <udp_input+0xe6>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800abce:	69e0      	ldr	r0, [r4, #28]
 800abd0:	f8cd a000 	str.w	sl, [sp]
 800abd4:	4b1c      	ldr	r3, [pc, #112]	; (800ac48 <udp_input+0x124>)
 800abd6:	4642      	mov	r2, r8
 800abd8:	4621      	mov	r1, r4
 800abda:	47a8      	blx	r5
 800abdc:	e7c3      	b.n	800ab66 <udp_input+0x42>
    pcb = uncon_pcb;
 800abde:	465c      	mov	r4, fp
 800abe0:	e7eb      	b.n	800abba <udp_input+0x96>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	4b16      	ldr	r3, [pc, #88]	; (800ac40 <udp_input+0x11c>)
 800abe6:	695b      	ldr	r3, [r3, #20]
  if (for_us) {
 800abe8:	429a      	cmp	r2, r3
 800abea:	d0e7      	beq.n	800abbc <udp_input+0x98>
    pbuf_free(p);
 800abec:	4640      	mov	r0, r8
 800abee:	f7fb ff33 	bl	8006a58 <pbuf_free>
  return;
 800abf2:	e7b8      	b.n	800ab66 <udp_input+0x42>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800abf4:	4b15      	ldr	r3, [pc, #84]	; (800ac4c <udp_input+0x128>)
 800abf6:	f240 1255 	movw	r2, #341	; 0x155
 800abfa:	4915      	ldr	r1, [pc, #84]	; (800ac50 <udp_input+0x12c>)
 800abfc:	4815      	ldr	r0, [pc, #84]	; (800ac54 <udp_input+0x130>)
 800abfe:	f004 f93f 	bl	800ee80 <iprintf>
      pbuf_free(p);
 800ac02:	4640      	mov	r0, r8
 800ac04:	f7fb ff28 	bl	8006a58 <pbuf_free>
      goto end;
 800ac08:	e7ad      	b.n	800ab66 <udp_input+0x42>
        pbuf_free(p);
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	f7fb ff24 	bl	8006a58 <pbuf_free>
        goto end;
 800ac10:	e7a9      	b.n	800ab66 <udp_input+0x42>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ac12:	9b03      	ldr	r3, [sp, #12]
 800ac14:	b983      	cbnz	r3, 800ac38 <udp_input+0x114>
 800ac16:	4b0a      	ldr	r3, [pc, #40]	; (800ac40 <udp_input+0x11c>)
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac1e:	2be0      	cmp	r3, #224	; 0xe0
 800ac20:	d00a      	beq.n	800ac38 <udp_input+0x114>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ac22:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <udp_input+0x11c>)
 800ac24:	8999      	ldrh	r1, [r3, #12]
 800ac26:	3108      	adds	r1, #8
 800ac28:	b209      	sxth	r1, r1
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	f7fb ff0f 	bl	8006a4e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ac30:	2103      	movs	r1, #3
 800ac32:	4640      	mov	r0, r8
 800ac34:	f002 f96a 	bl	800cf0c <icmp_dest_unreach>
      pbuf_free(p);
 800ac38:	4640      	mov	r0, r8
 800ac3a:	f7fb ff0d 	bl	8006a58 <pbuf_free>
 800ac3e:	e792      	b.n	800ab66 <udp_input+0x42>
 800ac40:	20004ac0 	.word	0x20004ac0
 800ac44:	20008208 	.word	0x20008208
 800ac48:	20004ad0 	.word	0x20004ad0
 800ac4c:	08011be8 	.word	0x08011be8
 800ac50:	08011c18 	.word	0x08011c18
 800ac54:	080101d8 	.word	0x080101d8

0800ac58 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ac58:	b570      	push	{r4, r5, r6, lr}
 800ac5a:	4604      	mov	r4, r0
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	b171      	cbz	r1, 800ac7e <udp_bind+0x26>
    ipaddr = IP4_ADDR_ANY;
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800ac60:	fab5 f385 	clz	r3, r5
 800ac64:	095b      	lsrs	r3, r3, #5
 800ac66:	2c00      	cmp	r4, #0
 800ac68:	bf08      	it	eq
 800ac6a:	2301      	moveq	r3, #1
 800ac6c:	bb6b      	cbnz	r3, 800acca <udp_bind+0x72>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ac6e:	4b1b      	ldr	r3, [pc, #108]	; (800acdc <udp_bind+0x84>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4619      	mov	r1, r3
 800ac74:	b129      	cbz	r1, 800ac82 <udp_bind+0x2a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ac76:	42a1      	cmp	r1, r4
 800ac78:	d014      	beq.n	800aca4 <udp_bind+0x4c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ac7a:	68c9      	ldr	r1, [r1, #12]
 800ac7c:	e7fa      	b.n	800ac74 <udp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ac7e:	4d18      	ldr	r5, [pc, #96]	; (800ace0 <udp_bind+0x88>)
 800ac80:	e7ee      	b.n	800ac60 <udp_bind+0x8>
  rebind = 0;
 800ac82:	2600      	movs	r6, #0
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800ac84:	b98a      	cbnz	r2, 800acaa <udp_bind+0x52>
    port = udp_new_port();
 800ac86:	f7ff fefd 	bl	800aa84 <udp_new_port>
    if (port == 0) {
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	b300      	cbz	r0, 800acd0 <udp_bind+0x78>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ac8e:	b1d5      	cbz	r5, 800acc6 <udp_bind+0x6e>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800ac94:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ac96:	b9f6      	cbnz	r6, 800acd6 <udp_bind+0x7e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ac98:	4b10      	ldr	r3, [pc, #64]	; (800acdc <udp_bind+0x84>)
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 800ac9e:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800aca0:	2000      	movs	r0, #0
}
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 800aca4:	2601      	movs	r6, #1
 800aca6:	e7ed      	b.n	800ac84 <udp_bind+0x2c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0ef      	beq.n	800ac8e <udp_bind+0x36>
      if (pcb != ipcb) {
 800acae:	42a3      	cmp	r3, r4
 800acb0:	d0fa      	beq.n	800aca8 <udp_bind+0x50>
          if ((ipcb->local_port == port) &&
 800acb2:	8a59      	ldrh	r1, [r3, #18]
 800acb4:	4291      	cmp	r1, r2
 800acb6:	d1f7      	bne.n	800aca8 <udp_bind+0x50>
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 800acbc:	4288      	cmp	r0, r1
 800acbe:	d1f3      	bne.n	800aca8 <udp_bind+0x50>
            return ERR_USE;
 800acc0:	f06f 0007 	mvn.w	r0, #7
 800acc4:	e7ed      	b.n	800aca2 <udp_bind+0x4a>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800acc6:	2300      	movs	r3, #0
 800acc8:	e7e3      	b.n	800ac92 <udp_bind+0x3a>
    return ERR_VAL;
 800acca:	f06f 0005 	mvn.w	r0, #5
 800acce:	e7e8      	b.n	800aca2 <udp_bind+0x4a>
      return ERR_USE;
 800acd0:	f06f 0007 	mvn.w	r0, #7
 800acd4:	e7e5      	b.n	800aca2 <udp_bind+0x4a>
  return ERR_OK;
 800acd6:	2000      	movs	r0, #0
 800acd8:	e7e3      	b.n	800aca2 <udp_bind+0x4a>
 800acda:	bf00      	nop
 800acdc:	20008208 	.word	0x20008208
 800ace0:	08012444 	.word	0x08012444

0800ace4 <udp_sendto_if_src>:
{
 800ace4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ace8:	b085      	sub	sp, #20
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800acea:	fab2 f582 	clz	r5, r2
 800acee:	096d      	lsrs	r5, r5, #5
 800acf0:	2800      	cmp	r0, #0
 800acf2:	bf08      	it	eq
 800acf4:	2501      	moveq	r5, #1
 800acf6:	2d00      	cmp	r5, #0
 800acf8:	d14f      	bne.n	800ad9a <udp_sendto_if_src+0xb6>
 800acfa:	4604      	mov	r4, r0
 800acfc:	4690      	mov	r8, r2
 800acfe:	4699      	mov	r9, r3
 800ad00:	460d      	mov	r5, r1
  if (pcb->local_port == 0) {
 800ad02:	8a42      	ldrh	r2, [r0, #18]
 800ad04:	b922      	cbnz	r2, 800ad10 <udp_sendto_if_src+0x2c>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ad06:	4601      	mov	r1, r0
 800ad08:	f7ff ffa6 	bl	800ac58 <udp_bind>
    if (err != ERR_OK) {
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	bb50      	cbnz	r0, 800ad66 <udp_sendto_if_src+0x82>
  if (pbuf_header(p, UDP_HLEN)) {
 800ad10:	2108      	movs	r1, #8
 800ad12:	4628      	mov	r0, r5
 800ad14:	f7fb fe96 	bl	8006a44 <pbuf_header>
 800ad18:	bb48      	cbnz	r0, 800ad6e <udp_sendto_if_src+0x8a>
    q = p;
 800ad1a:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ad1c:	8973      	ldrh	r3, [r6, #10]
 800ad1e:	2b07      	cmp	r3, #7
 800ad20:	d933      	bls.n	800ad8a <udp_sendto_if_src+0xa6>
  udphdr = (struct udp_hdr *)q->payload;
 800ad22:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800ad24:	8a60      	ldrh	r0, [r4, #18]
 800ad26:	f7fb f9d5 	bl	80060d4 <lwip_htons>
 800ad2a:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ad2c:	4648      	mov	r0, r9
 800ad2e:	f7fb f9d1 	bl	80060d4 <lwip_htons>
 800ad32:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 800ad34:	2300      	movs	r3, #0
 800ad36:	71bb      	strb	r3, [r7, #6]
 800ad38:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800ad3a:	8930      	ldrh	r0, [r6, #8]
 800ad3c:	f7fb f9ca 	bl	80060d4 <lwip_htons>
 800ad40:	80b8      	strh	r0, [r7, #4]
  ttl = pcb->ttl;
 800ad42:	7aa3      	ldrb	r3, [r4, #10]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ad44:	7a62      	ldrb	r2, [r4, #9]
 800ad46:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad48:	9102      	str	r1, [sp, #8]
 800ad4a:	2111      	movs	r1, #17
 800ad4c:	9101      	str	r1, [sp, #4]
 800ad4e:	9200      	str	r2, [sp, #0]
 800ad50:	4642      	mov	r2, r8
 800ad52:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ad54:	4630      	mov	r0, r6
 800ad56:	f002 fa19 	bl	800d18c <ip4_output_if_src>
 800ad5a:	4607      	mov	r7, r0
  if (q != p) {
 800ad5c:	42ae      	cmp	r6, r5
 800ad5e:	d002      	beq.n	800ad66 <udp_sendto_if_src+0x82>
    pbuf_free(q);
 800ad60:	4630      	mov	r0, r6
 800ad62:	f7fb fe79 	bl	8006a58 <pbuf_free>
}
 800ad66:	4638      	mov	r0, r7
 800ad68:	b005      	add	sp, #20
 800ad6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2108      	movs	r1, #8
 800ad72:	2001      	movs	r0, #1
 800ad74:	f7fb feda 	bl	8006b2c <pbuf_alloc>
    if (q == NULL) {
 800ad78:	4606      	mov	r6, r0
 800ad7a:	b188      	cbz	r0, 800ada0 <udp_sendto_if_src+0xbc>
    if (p->tot_len != 0) {
 800ad7c:	892b      	ldrh	r3, [r5, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0cc      	beq.n	800ad1c <udp_sendto_if_src+0x38>
      pbuf_chain(q, p);
 800ad82:	4629      	mov	r1, r5
 800ad84:	f7fc f898 	bl	8006eb8 <pbuf_chain>
 800ad88:	e7c8      	b.n	800ad1c <udp_sendto_if_src+0x38>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ad8a:	4b07      	ldr	r3, [pc, #28]	; (800ada8 <udp_sendto_if_src+0xc4>)
 800ad8c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ad90:	4906      	ldr	r1, [pc, #24]	; (800adac <udp_sendto_if_src+0xc8>)
 800ad92:	4807      	ldr	r0, [pc, #28]	; (800adb0 <udp_sendto_if_src+0xcc>)
 800ad94:	f004 f874 	bl	800ee80 <iprintf>
 800ad98:	e7c3      	b.n	800ad22 <udp_sendto_if_src+0x3e>
    return ERR_VAL;
 800ad9a:	f06f 0705 	mvn.w	r7, #5
 800ad9e:	e7e2      	b.n	800ad66 <udp_sendto_if_src+0x82>
      return ERR_MEM;
 800ada0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ada4:	e7df      	b.n	800ad66 <udp_sendto_if_src+0x82>
 800ada6:	bf00      	nop
 800ada8:	08011be8 	.word	0x08011be8
 800adac:	08011c2c 	.word	0x08011c2c
 800adb0:	080101d8 	.word	0x080101d8

0800adb4 <udp_sendto_if>:
{
 800adb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adb6:	b083      	sub	sp, #12
 800adb8:	9f08      	ldr	r7, [sp, #32]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800adba:	4604      	mov	r4, r0
 800adbc:	4616      	mov	r6, r2
 800adbe:	fab2 f282 	clz	r2, r2
 800adc2:	0952      	lsrs	r2, r2, #5
 800adc4:	2800      	cmp	r0, #0
 800adc6:	bf14      	ite	ne
 800adc8:	4610      	movne	r0, r2
 800adca:	2001      	moveq	r0, #1
 800adcc:	b9b0      	cbnz	r0, 800adfc <udp_sendto_if+0x48>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800adce:	4625      	mov	r5, r4
 800add0:	b15c      	cbz	r4, 800adea <udp_sendto_if+0x36>
 800add2:	6822      	ldr	r2, [r4, #0]
 800add4:	b14a      	cbz	r2, 800adea <udp_sendto_if+0x36>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800add6:	f002 00f0 	and.w	r0, r2, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800adda:	28e0      	cmp	r0, #224	; 0xe0
 800addc:	d005      	beq.n	800adea <udp_sendto_if+0x36>
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	4282      	cmp	r2, r0
 800ade2:	d003      	beq.n	800adec <udp_sendto_if+0x38>
      return ERR_RTE;
 800ade4:	f06f 0003 	mvn.w	r0, #3
 800ade8:	e006      	b.n	800adf8 <udp_sendto_if+0x44>
    src_ip = netif_ip_addr4(netif);
 800adea:	1d3d      	adds	r5, r7, #4
 800adec:	4632      	mov	r2, r6
 800adee:	4620      	mov	r0, r4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800adf0:	9501      	str	r5, [sp, #4]
 800adf2:	9700      	str	r7, [sp, #0]
 800adf4:	f7ff ff76 	bl	800ace4 <udp_sendto_if_src>
}
 800adf8:	b003      	add	sp, #12
 800adfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 800adfc:	f06f 0005 	mvn.w	r0, #5
 800ae00:	e7fa      	b.n	800adf8 <udp_sendto_if+0x44>
	...

0800ae04 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ae04:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800ae06:	460d      	mov	r5, r1
 800ae08:	fab1 f181 	clz	r1, r1
 800ae0c:	0949      	lsrs	r1, r1, #5
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	bf08      	it	eq
 800ae12:	2101      	moveq	r1, #1
 800ae14:	bb11      	cbnz	r1, 800ae5c <udp_connect+0x58>
 800ae16:	4604      	mov	r4, r0
 800ae18:	4616      	mov	r6, r2
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800ae1a:	8a42      	ldrh	r2, [r0, #18]
 800ae1c:	b17a      	cbz	r2, 800ae3e <udp_connect+0x3a>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ae1e:	b1ad      	cbz	r5, 800ae4c <udp_connect+0x48>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 800ae24:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ae26:	7c23      	ldrb	r3, [r4, #16]
 800ae28:	f043 0304 	orr.w	r3, r3, #4
 800ae2c:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ae2e:	4b0e      	ldr	r3, [pc, #56]	; (800ae68 <udp_connect+0x64>)
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	4613      	mov	r3, r2
 800ae34:	b163      	cbz	r3, 800ae50 <udp_connect+0x4c>
    if (pcb == ipcb) {
 800ae36:	42a3      	cmp	r3, r4
 800ae38:	d013      	beq.n	800ae62 <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	e7fa      	b.n	800ae34 <udp_connect+0x30>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ae3e:	4601      	mov	r1, r0
 800ae40:	f7ff ff0a 	bl	800ac58 <udp_bind>
    if (err != ERR_OK) {
 800ae44:	4603      	mov	r3, r0
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d0e9      	beq.n	800ae1e <udp_connect+0x1a>
 800ae4a:	e005      	b.n	800ae58 <udp_connect+0x54>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	e7e8      	b.n	800ae22 <udp_connect+0x1e>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800ae50:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800ae52:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <udp_connect+0x64>)
 800ae54:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800ae5c:	f06f 0305 	mvn.w	r3, #5
 800ae60:	e7fa      	b.n	800ae58 <udp_connect+0x54>
      return ERR_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	e7f8      	b.n	800ae58 <udp_connect+0x54>
 800ae66:	bf00      	nop
 800ae68:	20008208 	.word	0x20008208

0800ae6c <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ae6c:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800ae6e:	61c2      	str	r2, [r0, #28]
}
 800ae70:	4770      	bx	lr
	...

0800ae74 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800ae74:	b508      	push	{r3, lr}
 800ae76:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <udp_remove+0x34>)
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	4282      	cmp	r2, r0
 800ae7e:	d109      	bne.n	800ae94 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ae80:	68d2      	ldr	r2, [r2, #12]
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	e001      	b.n	800ae8a <udp_remove+0x16>
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ae86:	68cb      	ldr	r3, [r1, #12]
 800ae88:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	f7fb fc0a 	bl	80066a4 <memp_free>
}
 800ae90:	bd08      	pop	{r3, pc}
 800ae92:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	d0f8      	beq.n	800ae8a <udp_remove+0x16>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ae98:	68d3      	ldr	r3, [r2, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0f9      	beq.n	800ae92 <udp_remove+0x1e>
 800ae9e:	428b      	cmp	r3, r1
 800aea0:	d0f1      	beq.n	800ae86 <udp_remove+0x12>
 800aea2:	461a      	mov	r2, r3
 800aea4:	e7f6      	b.n	800ae94 <udp_remove+0x20>
 800aea6:	bf00      	nop
 800aea8:	20008208 	.word	0x20008208

0800aeac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800aeac:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800aeae:	2000      	movs	r0, #0
 800aeb0:	f7fb fbde 	bl	8006670 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	b128      	cbz	r0, 800aec4 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800aeb8:	2220      	movs	r2, #32
 800aeba:	2100      	movs	r1, #0
 800aebc:	f003 ffd8 	bl	800ee70 <memset>
    pcb->ttl = UDP_TTL;
 800aec0:	23ff      	movs	r3, #255	; 0xff
 800aec2:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800aec4:	4620      	mov	r0, r4
 800aec6:	bd10      	pop	{r4, pc}

0800aec8 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800aec8:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;
  pcb = udp_new();
 800aeca:	f7ff ffef 	bl	800aeac <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800aece:	bd08      	pop	{r3, pc}

0800aed0 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800aed0:	b1b8      	cbz	r0, 800af02 <udp_netif_ip_addr_changed+0x32>
 800aed2:	4602      	mov	r2, r0
 800aed4:	6803      	ldr	r3, [r0, #0]
 800aed6:	b1a3      	cbz	r3, 800af02 <udp_netif_ip_addr_changed+0x32>
 800aed8:	b199      	cbz	r1, 800af02 <udp_netif_ip_addr_changed+0x32>
 800aeda:	680b      	ldr	r3, [r1, #0]
 800aedc:	b18b      	cbz	r3, 800af02 <udp_netif_ip_addr_changed+0x32>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800aede:	4b09      	ldr	r3, [pc, #36]	; (800af04 <udp_netif_ip_addr_changed+0x34>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	b16b      	cbz	r3, 800af00 <udp_netif_ip_addr_changed+0x30>
{
 800aee4:	b410      	push	{r4}
 800aee6:	e001      	b.n	800aeec <udp_netif_ip_addr_changed+0x1c>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	b133      	cbz	r3, 800aefa <udp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800aeec:	681c      	ldr	r4, [r3, #0]
 800aeee:	6810      	ldr	r0, [r2, #0]
 800aef0:	4284      	cmp	r4, r0
 800aef2:	d1f9      	bne.n	800aee8 <udp_netif_ip_addr_changed+0x18>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800aef4:	6808      	ldr	r0, [r1, #0]
 800aef6:	6018      	str	r0, [r3, #0]
 800aef8:	e7f6      	b.n	800aee8 <udp_netif_ip_addr_changed+0x18>
      }
    }
  }
}
 800aefa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aefe:	4770      	bx	lr
 800af00:	4770      	bx	lr
 800af02:	4770      	bx	lr
 800af04:	20008208 	.word	0x20008208

0800af08 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800af08:	7a43      	ldrb	r3, [r0, #9]
 800af0a:	428b      	cmp	r3, r1
 800af0c:	d003      	beq.n	800af16 <dhcp_set_state+0xe>
    dhcp->state = new_state;
 800af0e:	7241      	strb	r1, [r0, #9]
    dhcp->tries = 0;
 800af10:	2300      	movs	r3, #0
 800af12:	7283      	strb	r3, [r0, #10]
    dhcp->request_timeout = 0;
 800af14:	82c3      	strh	r3, [r0, #22]
  }
}
 800af16:	4770      	bx	lr

0800af18 <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4604      	mov	r4, r0
 800af1c:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800af1e:	8a83      	ldrh	r3, [r0, #20]
 800af20:	3302      	adds	r3, #2
 800af22:	2b44      	cmp	r3, #68	; 0x44
 800af24:	d80f      	bhi.n	800af46 <dhcp_option_short+0x2e>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800af26:	6923      	ldr	r3, [r4, #16]
 800af28:	8aa2      	ldrh	r2, [r4, #20]
 800af2a:	1c51      	adds	r1, r2, #1
 800af2c:	82a1      	strh	r1, [r4, #20]
 800af2e:	0a29      	lsrs	r1, r5, #8
 800af30:	4413      	add	r3, r2
 800af32:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800af36:	6923      	ldr	r3, [r4, #16]
 800af38:	8aa2      	ldrh	r2, [r4, #20]
 800af3a:	1c51      	adds	r1, r2, #1
 800af3c:	82a1      	strh	r1, [r4, #20]
 800af3e:	4413      	add	r3, r2
 800af40:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 800af44:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800af46:	4b04      	ldr	r3, [pc, #16]	; (800af58 <dhcp_option_short+0x40>)
 800af48:	f240 5282 	movw	r2, #1410	; 0x582
 800af4c:	4903      	ldr	r1, [pc, #12]	; (800af5c <dhcp_option_short+0x44>)
 800af4e:	4804      	ldr	r0, [pc, #16]	; (800af60 <dhcp_option_short+0x48>)
 800af50:	f003 ff96 	bl	800ee80 <iprintf>
 800af54:	e7e7      	b.n	800af26 <dhcp_option_short+0xe>
 800af56:	bf00      	nop
 800af58:	08011ee4 	.word	0x08011ee4
 800af5c:	08011f1c 	.word	0x08011f1c
 800af60:	080101d8 	.word	0x080101d8

0800af64 <dhcp_option>:
{
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	4604      	mov	r4, r0
 800af68:	460e      	mov	r6, r1
 800af6a:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800af6c:	8a83      	ldrh	r3, [r0, #20]
 800af6e:	4413      	add	r3, r2
 800af70:	3302      	adds	r3, #2
 800af72:	2b44      	cmp	r3, #68	; 0x44
 800af74:	d80e      	bhi.n	800af94 <dhcp_option+0x30>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800af76:	6923      	ldr	r3, [r4, #16]
 800af78:	8aa2      	ldrh	r2, [r4, #20]
 800af7a:	1c51      	adds	r1, r2, #1
 800af7c:	82a1      	strh	r1, [r4, #20]
 800af7e:	4413      	add	r3, r2
 800af80:	f883 60f0 	strb.w	r6, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800af84:	6923      	ldr	r3, [r4, #16]
 800af86:	8aa2      	ldrh	r2, [r4, #20]
 800af88:	1c51      	adds	r1, r2, #1
 800af8a:	82a1      	strh	r1, [r4, #20]
 800af8c:	4413      	add	r3, r2
 800af8e:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 800af92:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800af94:	4b03      	ldr	r3, [pc, #12]	; (800afa4 <dhcp_option+0x40>)
 800af96:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800af9a:	4903      	ldr	r1, [pc, #12]	; (800afa8 <dhcp_option+0x44>)
 800af9c:	4803      	ldr	r0, [pc, #12]	; (800afac <dhcp_option+0x48>)
 800af9e:	f003 ff6f 	bl	800ee80 <iprintf>
 800afa2:	e7e8      	b.n	800af76 <dhcp_option+0x12>
 800afa4:	08011ee4 	.word	0x08011ee4
 800afa8:	08011e20 	.word	0x08011e20
 800afac:	080101d8 	.word	0x080101d8

0800afb0 <dhcp_option_byte>:
{
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4604      	mov	r4, r0
 800afb4:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800afb6:	8a83      	ldrh	r3, [r0, #20]
 800afb8:	2b43      	cmp	r3, #67	; 0x43
 800afba:	d807      	bhi.n	800afcc <dhcp_option_byte+0x1c>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	8aa2      	ldrh	r2, [r4, #20]
 800afc0:	1c51      	adds	r1, r2, #1
 800afc2:	82a1      	strh	r1, [r4, #20]
 800afc4:	4413      	add	r3, r2
 800afc6:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 800afca:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800afcc:	4b03      	ldr	r3, [pc, #12]	; (800afdc <dhcp_option_byte+0x2c>)
 800afce:	f240 527b 	movw	r2, #1403	; 0x57b
 800afd2:	4903      	ldr	r1, [pc, #12]	; (800afe0 <dhcp_option_byte+0x30>)
 800afd4:	4803      	ldr	r0, [pc, #12]	; (800afe4 <dhcp_option_byte+0x34>)
 800afd6:	f003 ff53 	bl	800ee80 <iprintf>
 800afda:	e7ef      	b.n	800afbc <dhcp_option_byte+0xc>
 800afdc:	08011ee4 	.word	0x08011ee4
 800afe0:	08011e68 	.word	0x08011e68
 800afe4:	080101d8 	.word	0x080101d8

0800afe8 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 800afe8:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800afea:	b170      	cbz	r0, 800b00a <dhcp_option_trailer+0x22>
 800afec:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800afee:	6903      	ldr	r3, [r0, #16]
 800aff0:	b19b      	cbz	r3, 800b01a <dhcp_option_trailer+0x32>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800aff2:	8aa3      	ldrh	r3, [r4, #20]
 800aff4:	2b43      	cmp	r3, #67	; 0x43
 800aff6:	d818      	bhi.n	800b02a <dhcp_option_trailer+0x42>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	8aa2      	ldrh	r2, [r4, #20]
 800affc:	1c51      	adds	r1, r2, #1
 800affe:	82a1      	strh	r1, [r4, #20]
 800b000:	4413      	add	r3, r2
 800b002:	22ff      	movs	r2, #255	; 0xff
 800b004:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800b008:	e020      	b.n	800b04c <dhcp_option_trailer+0x64>
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800b00a:	4b14      	ldr	r3, [pc, #80]	; (800b05c <dhcp_option_trailer+0x74>)
 800b00c:	f240 7282 	movw	r2, #1922	; 0x782
 800b010:	4913      	ldr	r1, [pc, #76]	; (800b060 <dhcp_option_trailer+0x78>)
 800b012:	4814      	ldr	r0, [pc, #80]	; (800b064 <dhcp_option_trailer+0x7c>)
 800b014:	f003 ff34 	bl	800ee80 <iprintf>
 800b018:	e01e      	b.n	800b058 <dhcp_option_trailer+0x70>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800b01a:	4b10      	ldr	r3, [pc, #64]	; (800b05c <dhcp_option_trailer+0x74>)
 800b01c:	f240 7283 	movw	r2, #1923	; 0x783
 800b020:	4911      	ldr	r1, [pc, #68]	; (800b068 <dhcp_option_trailer+0x80>)
 800b022:	4810      	ldr	r0, [pc, #64]	; (800b064 <dhcp_option_trailer+0x7c>)
 800b024:	f003 ff2c 	bl	800ee80 <iprintf>
 800b028:	e7e3      	b.n	800aff2 <dhcp_option_trailer+0xa>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800b02a:	4b0c      	ldr	r3, [pc, #48]	; (800b05c <dhcp_option_trailer+0x74>)
 800b02c:	f240 7284 	movw	r2, #1924	; 0x784
 800b030:	490e      	ldr	r1, [pc, #56]	; (800b06c <dhcp_option_trailer+0x84>)
 800b032:	480c      	ldr	r0, [pc, #48]	; (800b064 <dhcp_option_trailer+0x7c>)
 800b034:	f003 ff24 	bl	800ee80 <iprintf>
 800b038:	e7de      	b.n	800aff8 <dhcp_option_trailer+0x10>
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800b03a:	2b43      	cmp	r3, #67	; 0x43
 800b03c:	d80c      	bhi.n	800b058 <dhcp_option_trailer+0x70>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800b03e:	6922      	ldr	r2, [r4, #16]
 800b040:	1c59      	adds	r1, r3, #1
 800b042:	82a1      	strh	r1, [r4, #20]
 800b044:	4413      	add	r3, r2
 800b046:	2200      	movs	r2, #0
 800b048:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800b04c:	8aa3      	ldrh	r3, [r4, #20]
 800b04e:	2b43      	cmp	r3, #67	; 0x43
 800b050:	d9f3      	bls.n	800b03a <dhcp_option_trailer+0x52>
 800b052:	f013 0f03 	tst.w	r3, #3
 800b056:	d1f0      	bne.n	800b03a <dhcp_option_trailer+0x52>
  }
}
 800b058:	bd10      	pop	{r4, pc}
 800b05a:	bf00      	nop
 800b05c:	08011ee4 	.word	0x08011ee4
 800b060:	08011f60 	.word	0x08011f60
 800b064:	080101d8 	.word	0x080101d8
 800b068:	08011f84 	.word	0x08011f84
 800b06c:	08011fb0 	.word	0x08011fb0

0800b070 <dhcp_option_long>:
{
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4604      	mov	r4, r0
 800b074:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800b076:	8a83      	ldrh	r3, [r0, #20]
 800b078:	3304      	adds	r3, #4
 800b07a:	2b44      	cmp	r3, #68	; 0x44
 800b07c:	d821      	bhi.n	800b0c2 <dhcp_option_long+0x52>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800b07e:	6923      	ldr	r3, [r4, #16]
 800b080:	8aa2      	ldrh	r2, [r4, #20]
 800b082:	1c51      	adds	r1, r2, #1
 800b084:	82a1      	strh	r1, [r4, #20]
 800b086:	0e29      	lsrs	r1, r5, #24
 800b088:	4413      	add	r3, r2
 800b08a:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800b08e:	6923      	ldr	r3, [r4, #16]
 800b090:	8aa2      	ldrh	r2, [r4, #20]
 800b092:	1c51      	adds	r1, r2, #1
 800b094:	82a1      	strh	r1, [r4, #20]
 800b096:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800b09a:	4413      	add	r3, r2
 800b09c:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	8aa2      	ldrh	r2, [r4, #20]
 800b0a4:	1c51      	adds	r1, r2, #1
 800b0a6:	82a1      	strh	r1, [r4, #20]
 800b0a8:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800b0b2:	6923      	ldr	r3, [r4, #16]
 800b0b4:	8aa2      	ldrh	r2, [r4, #20]
 800b0b6:	1c51      	adds	r1, r2, #1
 800b0b8:	82a1      	strh	r1, [r4, #20]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 800b0c0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800b0c2:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <dhcp_option_long+0x64>)
 800b0c4:	f240 528a 	movw	r2, #1418	; 0x58a
 800b0c8:	4903      	ldr	r1, [pc, #12]	; (800b0d8 <dhcp_option_long+0x68>)
 800b0ca:	4804      	ldr	r0, [pc, #16]	; (800b0dc <dhcp_option_long+0x6c>)
 800b0cc:	f003 fed8 	bl	800ee80 <iprintf>
 800b0d0:	e7d5      	b.n	800b07e <dhcp_option_long+0xe>
 800b0d2:	bf00      	nop
 800b0d4:	08011ee4 	.word	0x08011ee4
 800b0d8:	08011ea4 	.word	0x08011ea4
 800b0dc:	080101d8 	.word	0x080101d8

0800b0e0 <dhcp_create_msg>:
{
 800b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d06d      	beq.n	800b1c4 <dhcp_create_msg+0xe4>
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	4615      	mov	r5, r2
 800b0ec:	4606      	mov	r6, r0
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800b0ee:	2900      	cmp	r1, #0
 800b0f0:	d072      	beq.n	800b1d8 <dhcp_create_msg+0xf8>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800b0f2:	68cb      	ldr	r3, [r1, #12]
 800b0f4:	b133      	cbz	r3, 800b104 <dhcp_create_msg+0x24>
 800b0f6:	4b6e      	ldr	r3, [pc, #440]	; (800b2b0 <dhcp_create_msg+0x1d0>)
 800b0f8:	f240 721f 	movw	r2, #1823	; 0x71f
 800b0fc:	496d      	ldr	r1, [pc, #436]	; (800b2b4 <dhcp_create_msg+0x1d4>)
 800b0fe:	486e      	ldr	r0, [pc, #440]	; (800b2b8 <dhcp_create_msg+0x1d8>)
 800b100:	f003 febe 	bl	800ee80 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800b104:	6923      	ldr	r3, [r4, #16]
 800b106:	b133      	cbz	r3, 800b116 <dhcp_create_msg+0x36>
 800b108:	4b69      	ldr	r3, [pc, #420]	; (800b2b0 <dhcp_create_msg+0x1d0>)
 800b10a:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800b10e:	496b      	ldr	r1, [pc, #428]	; (800b2bc <dhcp_create_msg+0x1dc>)
 800b110:	4869      	ldr	r0, [pc, #420]	; (800b2b8 <dhcp_create_msg+0x1d8>)
 800b112:	f003 feb5 	bl	800ee80 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800b116:	2200      	movs	r2, #0
 800b118:	f44f 719a 	mov.w	r1, #308	; 0x134
 800b11c:	4610      	mov	r0, r2
 800b11e:	f7fb fd05 	bl	8006b2c <pbuf_alloc>
 800b122:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 800b124:	2800      	cmp	r0, #0
 800b126:	f000 80c0 	beq.w	800b2aa <dhcp_create_msg+0x1ca>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800b12a:	8943      	ldrh	r3, [r0, #10]
 800b12c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800b130:	d35c      	bcc.n	800b1ec <dhcp_create_msg+0x10c>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800b132:	2d03      	cmp	r5, #3
 800b134:	d062      	beq.n	800b1fc <dhcp_create_msg+0x11c>
    if (dhcp->tries == 0) {
 800b136:	7aa3      	ldrb	r3, [r4, #10]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d063      	beq.n	800b204 <dhcp_create_msg+0x124>
    dhcp->xid = xid;
 800b13c:	4b60      	ldr	r3, [pc, #384]	; (800b2c0 <dhcp_create_msg+0x1e0>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6023      	str	r3, [r4, #0]
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800b142:	68e3      	ldr	r3, [r4, #12]
 800b144:	685a      	ldr	r2, [r3, #4]
 800b146:	6122      	str	r2, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800b148:	2301      	movs	r3, #1
 800b14a:	7013      	strb	r3, [r2, #0]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800b14c:	6922      	ldr	r2, [r4, #16]
 800b14e:	7053      	strb	r3, [r2, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b156:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	2700      	movs	r7, #0
 800b15c:	70df      	strb	r7, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800b15e:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800b162:	6820      	ldr	r0, [r4, #0]
 800b164:	f7fa ffb9 	bl	80060da <lwip_htonl>
 800b168:	f8c8 0004 	str.w	r0, [r8, #4]
  dhcp->msg_out->secs = 0;
 800b16c:	6923      	ldr	r3, [r4, #16]
 800b16e:	721f      	strb	r7, [r3, #8]
 800b170:	725f      	strb	r7, [r3, #9]
  dhcp->msg_out->flags = 0;
 800b172:	6923      	ldr	r3, [r4, #16]
 800b174:	729f      	strb	r7, [r3, #10]
 800b176:	72df      	strb	r7, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	731f      	strb	r7, [r3, #12]
 800b17c:	735f      	strb	r7, [r3, #13]
 800b17e:	739f      	strb	r7, [r3, #14]
 800b180:	73df      	strb	r7, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800b182:	2d04      	cmp	r5, #4
 800b184:	bf18      	it	ne
 800b186:	2d08      	cmpne	r5, #8
 800b188:	d008      	beq.n	800b19c <dhcp_create_msg+0xbc>
 800b18a:	2d07      	cmp	r5, #7
 800b18c:	d006      	beq.n	800b19c <dhcp_create_msg+0xbc>
 800b18e:	2d03      	cmp	r5, #3
 800b190:	d107      	bne.n	800b1a2 <dhcp_create_msg+0xc2>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800b192:	7a63      	ldrb	r3, [r4, #9]
 800b194:	3b04      	subs	r3, #4
 800b196:	b2db      	uxtb	r3, r3
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d802      	bhi.n	800b1a2 <dhcp_create_msg+0xc2>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800b19c:	6923      	ldr	r3, [r4, #16]
 800b19e:	6872      	ldr	r2, [r6, #4]
 800b1a0:	60da      	str	r2, [r3, #12]
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800b1a2:	6922      	ldr	r2, [r4, #16]
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	7413      	strb	r3, [r2, #16]
 800b1a8:	7453      	strb	r3, [r2, #17]
 800b1aa:	7493      	strb	r3, [r2, #18]
 800b1ac:	74d3      	strb	r3, [r2, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800b1ae:	6922      	ldr	r2, [r4, #16]
 800b1b0:	7513      	strb	r3, [r2, #20]
 800b1b2:	7553      	strb	r3, [r2, #21]
 800b1b4:	7593      	strb	r3, [r2, #22]
 800b1b6:	75d3      	strb	r3, [r2, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800b1b8:	6922      	ldr	r2, [r4, #16]
 800b1ba:	7613      	strb	r3, [r2, #24]
 800b1bc:	7653      	strb	r3, [r2, #25]
 800b1be:	7693      	strb	r3, [r2, #26]
 800b1c0:	76d3      	strb	r3, [r2, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800b1c2:	e02e      	b.n	800b222 <dhcp_create_msg+0x142>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800b1c4:	4b3a      	ldr	r3, [pc, #232]	; (800b2b0 <dhcp_create_msg+0x1d0>)
 800b1c6:	f240 721d 	movw	r2, #1821	; 0x71d
 800b1ca:	493e      	ldr	r1, [pc, #248]	; (800b2c4 <dhcp_create_msg+0x1e4>)
 800b1cc:	483a      	ldr	r0, [pc, #232]	; (800b2b8 <dhcp_create_msg+0x1d8>)
 800b1ce:	f003 fe57 	bl	800ee80 <iprintf>
 800b1d2:	f06f 000f 	mvn.w	r0, #15
 800b1d6:	e066      	b.n	800b2a6 <dhcp_create_msg+0x1c6>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800b1d8:	4b35      	ldr	r3, [pc, #212]	; (800b2b0 <dhcp_create_msg+0x1d0>)
 800b1da:	f240 721e 	movw	r2, #1822	; 0x71e
 800b1de:	493a      	ldr	r1, [pc, #232]	; (800b2c8 <dhcp_create_msg+0x1e8>)
 800b1e0:	4835      	ldr	r0, [pc, #212]	; (800b2b8 <dhcp_create_msg+0x1d8>)
 800b1e2:	f003 fe4d 	bl	800ee80 <iprintf>
 800b1e6:	f06f 0005 	mvn.w	r0, #5
 800b1ea:	e05c      	b.n	800b2a6 <dhcp_create_msg+0x1c6>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800b1ec:	4b30      	ldr	r3, [pc, #192]	; (800b2b0 <dhcp_create_msg+0x1d0>)
 800b1ee:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b1f2:	4936      	ldr	r1, [pc, #216]	; (800b2cc <dhcp_create_msg+0x1ec>)
 800b1f4:	4830      	ldr	r0, [pc, #192]	; (800b2b8 <dhcp_create_msg+0x1d8>)
 800b1f6:	f003 fe43 	bl	800ee80 <iprintf>
 800b1fa:	e79a      	b.n	800b132 <dhcp_create_msg+0x52>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800b1fc:	7a63      	ldrb	r3, [r4, #9]
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	d19f      	bne.n	800b142 <dhcp_create_msg+0x62>
 800b202:	e798      	b.n	800b136 <dhcp_create_msg+0x56>
      xid = LWIP_RAND();
 800b204:	f003 fe54 	bl	800eeb0 <rand>
 800b208:	4b2d      	ldr	r3, [pc, #180]	; (800b2c0 <dhcp_create_msg+0x1e0>)
 800b20a:	6018      	str	r0, [r3, #0]
 800b20c:	e796      	b.n	800b13c <dhcp_create_msg+0x5c>
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800b20e:	18f2      	adds	r2, r6, r3
 800b210:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 800b214:	e000      	b.n	800b218 <dhcp_create_msg+0x138>
 800b216:	2100      	movs	r1, #0
 800b218:	6922      	ldr	r2, [r4, #16]
 800b21a:	441a      	add	r2, r3
 800b21c:	7711      	strb	r1, [r2, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800b21e:	3301      	adds	r3, #1
 800b220:	b29b      	uxth	r3, r3
 800b222:	2b0f      	cmp	r3, #15
 800b224:	d807      	bhi.n	800b236 <dhcp_create_msg+0x156>
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800b226:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d9f3      	bls.n	800b216 <dhcp_create_msg+0x136>
 800b22e:	2b05      	cmp	r3, #5
 800b230:	d9ed      	bls.n	800b20e <dhcp_create_msg+0x12e>
 800b232:	2100      	movs	r1, #0
 800b234:	e7f0      	b.n	800b218 <dhcp_create_msg+0x138>
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800b236:	2300      	movs	r3, #0
 800b238:	e006      	b.n	800b248 <dhcp_create_msg+0x168>
    dhcp->msg_out->sname[i] = 0;
 800b23a:	6922      	ldr	r2, [r4, #16]
 800b23c:	441a      	add	r2, r3
 800b23e:	2100      	movs	r1, #0
 800b240:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800b244:	3301      	adds	r3, #1
 800b246:	b29b      	uxth	r3, r3
 800b248:	2b3f      	cmp	r3, #63	; 0x3f
 800b24a:	d9f6      	bls.n	800b23a <dhcp_create_msg+0x15a>
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800b24c:	2300      	movs	r3, #0
 800b24e:	e006      	b.n	800b25e <dhcp_create_msg+0x17e>
    dhcp->msg_out->file[i] = 0;
 800b250:	6922      	ldr	r2, [r4, #16]
 800b252:	441a      	add	r2, r3
 800b254:	2100      	movs	r1, #0
 800b256:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800b25a:	3301      	adds	r3, #1
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	2b7f      	cmp	r3, #127	; 0x7f
 800b260:	d9f6      	bls.n	800b250 <dhcp_create_msg+0x170>
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800b262:	6922      	ldr	r2, [r4, #16]
 800b264:	2300      	movs	r3, #0
 800b266:	2163      	movs	r1, #99	; 0x63
 800b268:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
 800b26c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800b270:	f882 00ed 	strb.w	r0, [r2, #237]	; 0xed
 800b274:	2053      	movs	r0, #83	; 0x53
 800b276:	f882 00ee 	strb.w	r0, [r2, #238]	; 0xee
 800b27a:	f882 10ef 	strb.w	r1, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
 800b27e:	82a3      	strh	r3, [r4, #20]
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800b280:	e005      	b.n	800b28e <dhcp_create_msg+0x1ae>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 800b282:	6922      	ldr	r2, [r4, #16]
 800b284:	441a      	add	r2, r3
 800b286:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800b28a:	3301      	adds	r3, #1
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	2b43      	cmp	r3, #67	; 0x43
 800b290:	d9f7      	bls.n	800b282 <dhcp_create_msg+0x1a2>
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800b292:	2201      	movs	r2, #1
 800b294:	2135      	movs	r1, #53	; 0x35
 800b296:	4620      	mov	r0, r4
 800b298:	f7ff fe64 	bl	800af64 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 800b29c:	4629      	mov	r1, r5
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f7ff fe86 	bl	800afb0 <dhcp_option_byte>
  return ERR_OK;
 800b2a4:	2000      	movs	r0, #0
}
 800b2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800b2aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2ae:	e7fa      	b.n	800b2a6 <dhcp_create_msg+0x1c6>
 800b2b0:	08011ee4 	.word	0x08011ee4
 800b2b4:	08011cd0 	.word	0x08011cd0
 800b2b8:	080101d8 	.word	0x080101d8
 800b2bc:	08011cf8 	.word	0x08011cf8
 800b2c0:	20004924 	.word	0x20004924
 800b2c4:	08011c90 	.word	0x08011c90
 800b2c8:	08011cb0 	.word	0x08011cb0
 800b2cc:	08011d20 	.word	0x08011d20

0800b2d0 <dhcp_handle_ack>:
{
 800b2d0:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b2d2:	6a04      	ldr	r4, [r0, #32]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800b2d8:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800b2da:	4b1a      	ldr	r3, [pc, #104]	; (800b344 <dhcp_handle_ack+0x74>)
 800b2dc:	78db      	ldrb	r3, [r3, #3]
 800b2de:	b113      	cbz	r3, 800b2e6 <dhcp_handle_ack+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800b2e0:	4b19      	ldr	r3, [pc, #100]	; (800b348 <dhcp_handle_ack+0x78>)
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	6363      	str	r3, [r4, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800b2e6:	4b17      	ldr	r3, [pc, #92]	; (800b344 <dhcp_handle_ack+0x74>)
 800b2e8:	791b      	ldrb	r3, [r3, #4]
 800b2ea:	b1f3      	cbz	r3, 800b32a <dhcp_handle_ack+0x5a>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800b2ec:	4b16      	ldr	r3, [pc, #88]	; (800b348 <dhcp_handle_ack+0x78>)
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800b2f2:	4b14      	ldr	r3, [pc, #80]	; (800b344 <dhcp_handle_ack+0x74>)
 800b2f4:	795b      	ldrb	r3, [r3, #5]
 800b2f6:	b1e3      	cbz	r3, 800b332 <dhcp_handle_ack+0x62>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800b2f8:	4b13      	ldr	r3, [pc, #76]	; (800b348 <dhcp_handle_ack+0x78>)
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800b2fe:	6863      	ldr	r3, [r4, #4]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800b304:	4b0f      	ldr	r3, [pc, #60]	; (800b344 <dhcp_handle_ack+0x74>)
 800b306:	799b      	ldrb	r3, [r3, #6]
 800b308:	b1cb      	cbz	r3, 800b33e <dhcp_handle_ack+0x6e>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800b30a:	4b0f      	ldr	r3, [pc, #60]	; (800b348 <dhcp_handle_ack+0x78>)
 800b30c:	6998      	ldr	r0, [r3, #24]
 800b30e:	f7fa fee4 	bl	80060da <lwip_htonl>
 800b312:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 800b314:	2301      	movs	r3, #1
 800b316:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800b318:	4b0a      	ldr	r3, [pc, #40]	; (800b344 <dhcp_handle_ack+0x74>)
 800b31a:	79db      	ldrb	r3, [r3, #7]
 800b31c:	b123      	cbz	r3, 800b328 <dhcp_handle_ack+0x58>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800b31e:	4b0a      	ldr	r3, [pc, #40]	; (800b348 <dhcp_handle_ack+0x78>)
 800b320:	69d8      	ldr	r0, [r3, #28]
 800b322:	f7fa feda 	bl	80060da <lwip_htonl>
 800b326:	6320      	str	r0, [r4, #48]	; 0x30
}
 800b328:	bd10      	pop	{r4, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800b32a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b32c:	085b      	lsrs	r3, r3, #1
 800b32e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b330:	e7df      	b.n	800b2f2 <dhcp_handle_ack+0x22>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800b332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b334:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b338:	08db      	lsrs	r3, r3, #3
 800b33a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b33c:	e7df      	b.n	800b2fe <dhcp_handle_ack+0x2e>
    dhcp->subnet_mask_given = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	72e3      	strb	r3, [r4, #11]
 800b342:	e7e9      	b.n	800b318 <dhcp_handle_ack+0x48>
 800b344:	2000820c 	.word	0x2000820c
 800b348:	20008214 	.word	0x20008214

0800b34c <dhcp_delete_msg>:
{
 800b34c:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800b34e:	b160      	cbz	r0, 800b36a <dhcp_delete_msg+0x1e>
 800b350:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800b352:	68c3      	ldr	r3, [r0, #12]
 800b354:	b18b      	cbz	r3, 800b37a <dhcp_delete_msg+0x2e>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800b356:	6923      	ldr	r3, [r4, #16]
 800b358:	b1bb      	cbz	r3, 800b38a <dhcp_delete_msg+0x3e>
  if (dhcp->p_out != NULL) {
 800b35a:	68e0      	ldr	r0, [r4, #12]
 800b35c:	b108      	cbz	r0, 800b362 <dhcp_delete_msg+0x16>
    pbuf_free(dhcp->p_out);
 800b35e:	f7fb fb7b 	bl	8006a58 <pbuf_free>
  dhcp->p_out = NULL;
 800b362:	2300      	movs	r3, #0
 800b364:	60e3      	str	r3, [r4, #12]
  dhcp->msg_out = NULL;
 800b366:	6123      	str	r3, [r4, #16]
}
 800b368:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800b36a:	4b0c      	ldr	r3, [pc, #48]	; (800b39c <dhcp_delete_msg+0x50>)
 800b36c:	f240 726d 	movw	r2, #1901	; 0x76d
 800b370:	490b      	ldr	r1, [pc, #44]	; (800b3a0 <dhcp_delete_msg+0x54>)
 800b372:	480c      	ldr	r0, [pc, #48]	; (800b3a4 <dhcp_delete_msg+0x58>)
 800b374:	f003 fd84 	bl	800ee80 <iprintf>
 800b378:	e7f6      	b.n	800b368 <dhcp_delete_msg+0x1c>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800b37a:	4b08      	ldr	r3, [pc, #32]	; (800b39c <dhcp_delete_msg+0x50>)
 800b37c:	f240 726e 	movw	r2, #1902	; 0x76e
 800b380:	4909      	ldr	r1, [pc, #36]	; (800b3a8 <dhcp_delete_msg+0x5c>)
 800b382:	4808      	ldr	r0, [pc, #32]	; (800b3a4 <dhcp_delete_msg+0x58>)
 800b384:	f003 fd7c 	bl	800ee80 <iprintf>
 800b388:	e7e5      	b.n	800b356 <dhcp_delete_msg+0xa>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800b38a:	4b04      	ldr	r3, [pc, #16]	; (800b39c <dhcp_delete_msg+0x50>)
 800b38c:	f240 726f 	movw	r2, #1903	; 0x76f
 800b390:	4906      	ldr	r1, [pc, #24]	; (800b3ac <dhcp_delete_msg+0x60>)
 800b392:	4804      	ldr	r0, [pc, #16]	; (800b3a4 <dhcp_delete_msg+0x58>)
 800b394:	f003 fd74 	bl	800ee80 <iprintf>
 800b398:	e7df      	b.n	800b35a <dhcp_delete_msg+0xe>
 800b39a:	bf00      	nop
 800b39c:	08011ee4 	.word	0x08011ee4
 800b3a0:	08011d84 	.word	0x08011d84
 800b3a4:	080101d8 	.word	0x080101d8
 800b3a8:	08011da4 	.word	0x08011da4
 800b3ac:	08011dcc 	.word	0x08011dcc

0800b3b0 <dhcp_discover>:
{
 800b3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b3b6:	6a04      	ldr	r4, [r0, #32]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800b3bc:	2106      	movs	r1, #6
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7ff fda2 	bl	800af08 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7ff fe89 	bl	800b0e0 <dhcp_create_msg>
  if (result == ERR_OK) {
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	b1b8      	cbz	r0, 800b402 <dhcp_discover+0x52>
  if (dhcp->tries < 255) {
 800b3d2:	7aa3      	ldrb	r3, [r4, #10]
 800b3d4:	2bff      	cmp	r3, #255	; 0xff
 800b3d6:	d001      	beq.n	800b3dc <dhcp_discover+0x2c>
    dhcp->tries++;
 800b3d8:	3301      	adds	r3, #1
 800b3da:	72a3      	strb	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800b3dc:	7aa2      	ldrb	r2, [r4, #10]
 800b3de:	2a05      	cmp	r2, #5
 800b3e0:	d83f      	bhi.n	800b462 <dhcp_discover+0xb2>
 800b3e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3e6:	4093      	lsls	r3, r2
 800b3e8:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b3ea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b3ee:	4a1e      	ldr	r2, [pc, #120]	; (800b468 <dhcp_discover+0xb8>)
 800b3f0:	fb82 1203 	smull	r1, r2, r2, r3
 800b3f4:	17db      	asrs	r3, r3, #31
 800b3f6:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800b3fa:	82e3      	strh	r3, [r4, #22]
}
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	b003      	add	sp, #12
 800b400:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b402:	2202      	movs	r2, #2
 800b404:	2139      	movs	r1, #57	; 0x39
 800b406:	4620      	mov	r0, r4
 800b408:	f7ff fdac 	bl	800af64 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800b40c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800b40e:	4620      	mov	r0, r4
 800b410:	f7ff fd82 	bl	800af18 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b414:	2203      	movs	r2, #3
 800b416:	2137      	movs	r1, #55	; 0x37
 800b418:	4620      	mov	r0, r4
 800b41a:	f7ff fda3 	bl	800af64 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b41e:	2600      	movs	r6, #0
 800b420:	e006      	b.n	800b430 <dhcp_discover+0x80>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800b422:	4b12      	ldr	r3, [pc, #72]	; (800b46c <dhcp_discover+0xbc>)
 800b424:	5d99      	ldrb	r1, [r3, r6]
 800b426:	4620      	mov	r0, r4
 800b428:	f7ff fdc2 	bl	800afb0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b42c:	3601      	adds	r6, #1
 800b42e:	b2f6      	uxtb	r6, r6
 800b430:	2e02      	cmp	r6, #2
 800b432:	d9f6      	bls.n	800b422 <dhcp_discover+0x72>
    dhcp_option_trailer(dhcp);
 800b434:	4620      	mov	r0, r4
 800b436:	f7ff fdd7 	bl	800afe8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800b43a:	8aa1      	ldrh	r1, [r4, #20]
 800b43c:	31f0      	adds	r1, #240	; 0xf0
 800b43e:	b289      	uxth	r1, r1
 800b440:	68e0      	ldr	r0, [r4, #12]
 800b442:	f7fb fc5b 	bl	8006cfc <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800b446:	68e1      	ldr	r1, [r4, #12]
 800b448:	4b09      	ldr	r3, [pc, #36]	; (800b470 <dhcp_discover+0xc0>)
 800b44a:	6818      	ldr	r0, [r3, #0]
 800b44c:	4b09      	ldr	r3, [pc, #36]	; (800b474 <dhcp_discover+0xc4>)
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	9700      	str	r7, [sp, #0]
 800b452:	2343      	movs	r3, #67	; 0x43
 800b454:	4a08      	ldr	r2, [pc, #32]	; (800b478 <dhcp_discover+0xc8>)
 800b456:	f7ff fc45 	bl	800ace4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800b45a:	4620      	mov	r0, r4
 800b45c:	f7ff ff76 	bl	800b34c <dhcp_delete_msg>
 800b460:	e7b7      	b.n	800b3d2 <dhcp_discover+0x22>
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800b462:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b466:	e7c0      	b.n	800b3ea <dhcp_discover+0x3a>
 800b468:	10624dd3 	.word	0x10624dd3
 800b46c:	08011df4 	.word	0x08011df4
 800b470:	2000491c 	.word	0x2000491c
 800b474:	08012444 	.word	0x08012444
 800b478:	08012448 	.word	0x08012448

0800b47c <dhcp_select>:
{
 800b47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b47e:	b083      	sub	sp, #12
 800b480:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b482:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800b484:	2101      	movs	r1, #1
 800b486:	4620      	mov	r0, r4
 800b488:	f7ff fd3e 	bl	800af08 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800b48c:	2203      	movs	r2, #3
 800b48e:	4621      	mov	r1, r4
 800b490:	4638      	mov	r0, r7
 800b492:	f7ff fe25 	bl	800b0e0 <dhcp_create_msg>
  if (result == ERR_OK) {
 800b496:	4605      	mov	r5, r0
 800b498:	b1b8      	cbz	r0, 800b4ca <dhcp_select+0x4e>
  if (dhcp->tries < 255) {
 800b49a:	7aa3      	ldrb	r3, [r4, #10]
 800b49c:	2bff      	cmp	r3, #255	; 0xff
 800b49e:	d001      	beq.n	800b4a4 <dhcp_select+0x28>
    dhcp->tries++;
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	72a3      	strb	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800b4a4:	7aa2      	ldrb	r2, [r4, #10]
 800b4a6:	2a05      	cmp	r2, #5
 800b4a8:	d857      	bhi.n	800b55a <dhcp_select+0xde>
 800b4aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4ae:	4093      	lsls	r3, r2
 800b4b0:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b4b2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b4b6:	4a2a      	ldr	r2, [pc, #168]	; (800b560 <dhcp_select+0xe4>)
 800b4b8:	fb82 1203 	smull	r1, r2, r2, r3
 800b4bc:	17db      	asrs	r3, r3, #31
 800b4be:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800b4c2:	82e3      	strh	r3, [r4, #22]
}
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	b003      	add	sp, #12
 800b4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b4ca:	2202      	movs	r2, #2
 800b4cc:	2139      	movs	r1, #57	; 0x39
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f7ff fd48 	bl	800af64 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800b4d4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f7ff fd1e 	bl	800af18 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800b4dc:	2204      	movs	r2, #4
 800b4de:	2132      	movs	r1, #50	; 0x32
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f7ff fd3f 	bl	800af64 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b4e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b4e8:	f7fa fdf7 	bl	80060da <lwip_htonl>
 800b4ec:	4601      	mov	r1, r0
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f7ff fdbe 	bl	800b070 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800b4f4:	2204      	movs	r2, #4
 800b4f6:	2136      	movs	r1, #54	; 0x36
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f7ff fd33 	bl	800af64 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800b4fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b500:	f7fa fdeb 	bl	80060da <lwip_htonl>
 800b504:	4601      	mov	r1, r0
 800b506:	4620      	mov	r0, r4
 800b508:	f7ff fdb2 	bl	800b070 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b50c:	2203      	movs	r2, #3
 800b50e:	2137      	movs	r1, #55	; 0x37
 800b510:	4620      	mov	r0, r4
 800b512:	f7ff fd27 	bl	800af64 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b516:	2600      	movs	r6, #0
 800b518:	e006      	b.n	800b528 <dhcp_select+0xac>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800b51a:	4b12      	ldr	r3, [pc, #72]	; (800b564 <dhcp_select+0xe8>)
 800b51c:	5d99      	ldrb	r1, [r3, r6]
 800b51e:	4620      	mov	r0, r4
 800b520:	f7ff fd46 	bl	800afb0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b524:	3601      	adds	r6, #1
 800b526:	b2f6      	uxtb	r6, r6
 800b528:	2e02      	cmp	r6, #2
 800b52a:	d9f6      	bls.n	800b51a <dhcp_select+0x9e>
    dhcp_option_trailer(dhcp);
 800b52c:	4620      	mov	r0, r4
 800b52e:	f7ff fd5b 	bl	800afe8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800b532:	8aa1      	ldrh	r1, [r4, #20]
 800b534:	31f0      	adds	r1, #240	; 0xf0
 800b536:	b289      	uxth	r1, r1
 800b538:	68e0      	ldr	r0, [r4, #12]
 800b53a:	f7fb fbdf 	bl	8006cfc <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800b53e:	68e1      	ldr	r1, [r4, #12]
 800b540:	4b09      	ldr	r3, [pc, #36]	; (800b568 <dhcp_select+0xec>)
 800b542:	6818      	ldr	r0, [r3, #0]
 800b544:	4b09      	ldr	r3, [pc, #36]	; (800b56c <dhcp_select+0xf0>)
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	9700      	str	r7, [sp, #0]
 800b54a:	2343      	movs	r3, #67	; 0x43
 800b54c:	4a08      	ldr	r2, [pc, #32]	; (800b570 <dhcp_select+0xf4>)
 800b54e:	f7ff fbc9 	bl	800ace4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800b552:	4620      	mov	r0, r4
 800b554:	f7ff fefa 	bl	800b34c <dhcp_delete_msg>
 800b558:	e79f      	b.n	800b49a <dhcp_select+0x1e>
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800b55a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b55e:	e7a8      	b.n	800b4b2 <dhcp_select+0x36>
 800b560:	10624dd3 	.word	0x10624dd3
 800b564:	08011df4 	.word	0x08011df4
 800b568:	2000491c 	.word	0x2000491c
 800b56c:	08012444 	.word	0x08012444
 800b570:	08012448 	.word	0x08012448

0800b574 <dhcp_handle_offer>:
{
 800b574:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b576:	6a05      	ldr	r5, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800b578:	4b07      	ldr	r3, [pc, #28]	; (800b598 <dhcp_handle_offer+0x24>)
 800b57a:	789b      	ldrb	r3, [r3, #2]
 800b57c:	b15b      	cbz	r3, 800b596 <dhcp_handle_offer+0x22>
 800b57e:	4604      	mov	r4, r0
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800b580:	4b06      	ldr	r3, [pc, #24]	; (800b59c <dhcp_handle_offer+0x28>)
 800b582:	6898      	ldr	r0, [r3, #8]
 800b584:	f7fa fda9 	bl	80060da <lwip_htonl>
 800b588:	6268      	str	r0, [r5, #36]	; 0x24
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800b58a:	686b      	ldr	r3, [r5, #4]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	62ab      	str	r3, [r5, #40]	; 0x28
    dhcp_select(netif);
 800b590:	4620      	mov	r0, r4
 800b592:	f7ff ff73 	bl	800b47c <dhcp_select>
}
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	2000820c 	.word	0x2000820c
 800b59c:	20008214 	.word	0x20008214

0800b5a0 <dhcp_decline>:
{
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b5a6:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800b5a8:	210c      	movs	r1, #12
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f7ff fcac 	bl	800af08 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800b5b0:	2204      	movs	r2, #4
 800b5b2:	4621      	mov	r1, r4
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	f7ff fd93 	bl	800b0e0 <dhcp_create_msg>
  if (result == ERR_OK) {
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	b148      	cbz	r0, 800b5d2 <dhcp_decline+0x32>
  if (dhcp->tries < 255) {
 800b5be:	7aa3      	ldrb	r3, [r4, #10]
 800b5c0:	2bff      	cmp	r3, #255	; 0xff
 800b5c2:	d001      	beq.n	800b5c8 <dhcp_decline+0x28>
    dhcp->tries++;
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	72a3      	strb	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b5c8:	2314      	movs	r3, #20
 800b5ca:	82e3      	strh	r3, [r4, #22]
}
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	b002      	add	sp, #8
 800b5d0:	bd70      	pop	{r4, r5, r6, pc}
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800b5d2:	2204      	movs	r2, #4
 800b5d4:	2132      	movs	r1, #50	; 0x32
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f7ff fcc4 	bl	800af64 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b5dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b5de:	f7fa fd7c 	bl	80060da <lwip_htonl>
 800b5e2:	4601      	mov	r1, r0
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f7ff fd43 	bl	800b070 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f7ff fcfc 	bl	800afe8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800b5f0:	8aa1      	ldrh	r1, [r4, #20]
 800b5f2:	31f0      	adds	r1, #240	; 0xf0
 800b5f4:	b289      	uxth	r1, r1
 800b5f6:	68e0      	ldr	r0, [r4, #12]
 800b5f8:	f7fb fb80 	bl	8006cfc <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800b5fc:	68e1      	ldr	r1, [r4, #12]
 800b5fe:	4b06      	ldr	r3, [pc, #24]	; (800b618 <dhcp_decline+0x78>)
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	4b06      	ldr	r3, [pc, #24]	; (800b61c <dhcp_decline+0x7c>)
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	9500      	str	r5, [sp, #0]
 800b608:	2343      	movs	r3, #67	; 0x43
 800b60a:	4a05      	ldr	r2, [pc, #20]	; (800b620 <dhcp_decline+0x80>)
 800b60c:	f7ff fb6a 	bl	800ace4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800b610:	4620      	mov	r0, r4
 800b612:	f7ff fe9b 	bl	800b34c <dhcp_delete_msg>
 800b616:	e7d2      	b.n	800b5be <dhcp_decline+0x1e>
 800b618:	2000491c 	.word	0x2000491c
 800b61c:	08012444 	.word	0x08012444
 800b620:	08012448 	.word	0x08012448

0800b624 <dhcp_rebind>:
{
 800b624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b626:	b083      	sub	sp, #12
 800b628:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b62a:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800b62c:	2104      	movs	r1, #4
 800b62e:	4620      	mov	r0, r4
 800b630:	f7ff fc6a 	bl	800af08 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800b634:	2203      	movs	r2, #3
 800b636:	4621      	mov	r1, r4
 800b638:	4638      	mov	r0, r7
 800b63a:	f7ff fd51 	bl	800b0e0 <dhcp_create_msg>
  if (result == ERR_OK) {
 800b63e:	4606      	mov	r6, r0
 800b640:	b1c8      	cbz	r0, 800b676 <dhcp_rebind+0x52>
  if (dhcp->tries < 255) {
 800b642:	7aa3      	ldrb	r3, [r4, #10]
 800b644:	2bff      	cmp	r3, #255	; 0xff
 800b646:	d001      	beq.n	800b64c <dhcp_rebind+0x28>
    dhcp->tries++;
 800b648:	3301      	adds	r3, #1
 800b64a:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800b64c:	7aa3      	ldrb	r3, [r4, #10]
 800b64e:	2b09      	cmp	r3, #9
 800b650:	d83f      	bhi.n	800b6d2 <dhcp_rebind+0xae>
 800b652:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800b656:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b65a:	00d3      	lsls	r3, r2, #3
 800b65c:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b65e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b662:	4a1d      	ldr	r2, [pc, #116]	; (800b6d8 <dhcp_rebind+0xb4>)
 800b664:	fb82 1203 	smull	r1, r2, r2, r3
 800b668:	17db      	asrs	r3, r3, #31
 800b66a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800b66e:	82e3      	strh	r3, [r4, #22]
}
 800b670:	4630      	mov	r0, r6
 800b672:	b003      	add	sp, #12
 800b674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b676:	2202      	movs	r2, #2
 800b678:	2139      	movs	r1, #57	; 0x39
 800b67a:	4620      	mov	r0, r4
 800b67c:	f7ff fc72 	bl	800af64 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800b680:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800b682:	4620      	mov	r0, r4
 800b684:	f7ff fc48 	bl	800af18 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b688:	2203      	movs	r2, #3
 800b68a:	2137      	movs	r1, #55	; 0x37
 800b68c:	4620      	mov	r0, r4
 800b68e:	f7ff fc69 	bl	800af64 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b692:	2500      	movs	r5, #0
 800b694:	e006      	b.n	800b6a4 <dhcp_rebind+0x80>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800b696:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <dhcp_rebind+0xb8>)
 800b698:	5d59      	ldrb	r1, [r3, r5]
 800b69a:	4620      	mov	r0, r4
 800b69c:	f7ff fc88 	bl	800afb0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	b2ed      	uxtb	r5, r5
 800b6a4:	2d02      	cmp	r5, #2
 800b6a6:	d9f6      	bls.n	800b696 <dhcp_rebind+0x72>
    dhcp_option_trailer(dhcp);
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f7ff fc9d 	bl	800afe8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800b6ae:	8aa1      	ldrh	r1, [r4, #20]
 800b6b0:	31f0      	adds	r1, #240	; 0xf0
 800b6b2:	b289      	uxth	r1, r1
 800b6b4:	68e0      	ldr	r0, [r4, #12]
 800b6b6:	f7fb fb21 	bl	8006cfc <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800b6ba:	68e1      	ldr	r1, [r4, #12]
 800b6bc:	4b08      	ldr	r3, [pc, #32]	; (800b6e0 <dhcp_rebind+0xbc>)
 800b6be:	6818      	ldr	r0, [r3, #0]
 800b6c0:	9700      	str	r7, [sp, #0]
 800b6c2:	2343      	movs	r3, #67	; 0x43
 800b6c4:	4a07      	ldr	r2, [pc, #28]	; (800b6e4 <dhcp_rebind+0xc0>)
 800b6c6:	f7ff fb75 	bl	800adb4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f7ff fe3e 	bl	800b34c <dhcp_delete_msg>
 800b6d0:	e7b7      	b.n	800b642 <dhcp_rebind+0x1e>
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800b6d2:	f242 7310 	movw	r3, #10000	; 0x2710
 800b6d6:	e7c2      	b.n	800b65e <dhcp_rebind+0x3a>
 800b6d8:	10624dd3 	.word	0x10624dd3
 800b6dc:	08011df4 	.word	0x08011df4
 800b6e0:	2000491c 	.word	0x2000491c
 800b6e4:	08012448 	.word	0x08012448

0800b6e8 <dhcp_t2_timeout>:
{
 800b6e8:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b6ea:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b6ec:	7a63      	ldrb	r3, [r4, #9]
 800b6ee:	2b0a      	cmp	r3, #10
 800b6f0:	bf18      	it	ne
 800b6f2:	2b01      	cmpne	r3, #1
 800b6f4:	d003      	beq.n	800b6fe <dhcp_t2_timeout+0x16>
 800b6f6:	2b05      	cmp	r3, #5
 800b6f8:	d001      	beq.n	800b6fe <dhcp_t2_timeout+0x16>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d10b      	bne.n	800b716 <dhcp_t2_timeout+0x2e>
    dhcp_rebind(netif);
 800b6fe:	f7ff ff91 	bl	800b624 <dhcp_rebind>
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800b702:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800b704:	8c22      	ldrh	r2, [r4, #32]
 800b706:	1a9b      	subs	r3, r3, r2
 800b708:	2b01      	cmp	r3, #1
 800b70a:	dd04      	ble.n	800b716 <dhcp_t2_timeout+0x2e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800b70c:	461a      	mov	r2, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	db02      	blt.n	800b718 <dhcp_t2_timeout+0x30>
 800b712:	1052      	asrs	r2, r2, #1
 800b714:	83e2      	strh	r2, [r4, #30]
}
 800b716:	bd10      	pop	{r4, pc}
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	e7fa      	b.n	800b712 <dhcp_t2_timeout+0x2a>

0800b71c <dhcp_reboot>:
{
 800b71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b71e:	b083      	sub	sp, #12
 800b720:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b722:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800b724:	2103      	movs	r1, #3
 800b726:	4620      	mov	r0, r4
 800b728:	f7ff fbee 	bl	800af08 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800b72c:	2203      	movs	r2, #3
 800b72e:	4621      	mov	r1, r4
 800b730:	4638      	mov	r0, r7
 800b732:	f7ff fcd5 	bl	800b0e0 <dhcp_create_msg>
  if (result == ERR_OK) {
 800b736:	4606      	mov	r6, r0
 800b738:	b1c8      	cbz	r0, 800b76e <dhcp_reboot+0x52>
  if (dhcp->tries < 255) {
 800b73a:	7aa3      	ldrb	r3, [r4, #10]
 800b73c:	2bff      	cmp	r3, #255	; 0xff
 800b73e:	d001      	beq.n	800b744 <dhcp_reboot+0x28>
    dhcp->tries++;
 800b740:	3301      	adds	r3, #1
 800b742:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800b744:	7aa3      	ldrb	r3, [r4, #10]
 800b746:	2b09      	cmp	r3, #9
 800b748:	d84c      	bhi.n	800b7e4 <dhcp_reboot+0xc8>
 800b74a:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800b74e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b752:	00d3      	lsls	r3, r2, #3
 800b754:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b756:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b75a:	4a24      	ldr	r2, [pc, #144]	; (800b7ec <dhcp_reboot+0xd0>)
 800b75c:	fb82 1203 	smull	r1, r2, r2, r3
 800b760:	17db      	asrs	r3, r3, #31
 800b762:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800b766:	82e3      	strh	r3, [r4, #22]
}
 800b768:	4630      	mov	r0, r6
 800b76a:	b003      	add	sp, #12
 800b76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b76e:	2202      	movs	r2, #2
 800b770:	2139      	movs	r1, #57	; 0x39
 800b772:	4620      	mov	r0, r4
 800b774:	f7ff fbf6 	bl	800af64 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800b778:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b77c:	4620      	mov	r0, r4
 800b77e:	f7ff fbcb 	bl	800af18 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800b782:	2204      	movs	r2, #4
 800b784:	2132      	movs	r1, #50	; 0x32
 800b786:	4620      	mov	r0, r4
 800b788:	f7ff fbec 	bl	800af64 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b78c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b78e:	f7fa fca4 	bl	80060da <lwip_htonl>
 800b792:	4601      	mov	r1, r0
 800b794:	4620      	mov	r0, r4
 800b796:	f7ff fc6b 	bl	800b070 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b79a:	2203      	movs	r2, #3
 800b79c:	2137      	movs	r1, #55	; 0x37
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f7ff fbe0 	bl	800af64 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b7a4:	2500      	movs	r5, #0
 800b7a6:	e006      	b.n	800b7b6 <dhcp_reboot+0x9a>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800b7a8:	4b11      	ldr	r3, [pc, #68]	; (800b7f0 <dhcp_reboot+0xd4>)
 800b7aa:	5d59      	ldrb	r1, [r3, r5]
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f7ff fbff 	bl	800afb0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b7b2:	3501      	adds	r5, #1
 800b7b4:	b2ed      	uxtb	r5, r5
 800b7b6:	2d02      	cmp	r5, #2
 800b7b8:	d9f6      	bls.n	800b7a8 <dhcp_reboot+0x8c>
    dhcp_option_trailer(dhcp);
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f7ff fc14 	bl	800afe8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800b7c0:	8aa1      	ldrh	r1, [r4, #20]
 800b7c2:	31f0      	adds	r1, #240	; 0xf0
 800b7c4:	b289      	uxth	r1, r1
 800b7c6:	68e0      	ldr	r0, [r4, #12]
 800b7c8:	f7fb fa98 	bl	8006cfc <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800b7cc:	68e1      	ldr	r1, [r4, #12]
 800b7ce:	4b09      	ldr	r3, [pc, #36]	; (800b7f4 <dhcp_reboot+0xd8>)
 800b7d0:	6818      	ldr	r0, [r3, #0]
 800b7d2:	9700      	str	r7, [sp, #0]
 800b7d4:	2343      	movs	r3, #67	; 0x43
 800b7d6:	4a08      	ldr	r2, [pc, #32]	; (800b7f8 <dhcp_reboot+0xdc>)
 800b7d8:	f7ff faec 	bl	800adb4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f7ff fdb5 	bl	800b34c <dhcp_delete_msg>
 800b7e2:	e7aa      	b.n	800b73a <dhcp_reboot+0x1e>
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800b7e4:	f242 7310 	movw	r3, #10000	; 0x2710
 800b7e8:	e7b5      	b.n	800b756 <dhcp_reboot+0x3a>
 800b7ea:	bf00      	nop
 800b7ec:	10624dd3 	.word	0x10624dd3
 800b7f0:	08011df4 	.word	0x08011df4
 800b7f4:	2000491c 	.word	0x2000491c
 800b7f8:	08012448 	.word	0x08012448

0800b7fc <dhcp_check>:
{
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b800:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800b802:	2108      	movs	r1, #8
 800b804:	4620      	mov	r0, r4
 800b806:	f7ff fb7f 	bl	800af08 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800b80a:	2200      	movs	r2, #0
 800b80c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800b810:	4628      	mov	r0, r5
 800b812:	f001 f8fb 	bl	800ca0c <etharp_query>
  if (dhcp->tries < 255) {
 800b816:	7aa3      	ldrb	r3, [r4, #10]
 800b818:	2bff      	cmp	r3, #255	; 0xff
 800b81a:	d001      	beq.n	800b820 <dhcp_check+0x24>
    dhcp->tries++;
 800b81c:	3301      	adds	r3, #1
 800b81e:	72a3      	strb	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b820:	2301      	movs	r3, #1
 800b822:	82e3      	strh	r3, [r4, #22]
}
 800b824:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b828 <dhcp_bind>:
{
 800b828:	b530      	push	{r4, r5, lr}
 800b82a:	b083      	sub	sp, #12
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d063      	beq.n	800b8f8 <dhcp_bind+0xd0>
 800b830:	4605      	mov	r5, r0
  dhcp = netif_dhcp_data(netif);
 800b832:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800b834:	2c00      	cmp	r4, #0
 800b836:	d067      	beq.n	800b908 <dhcp_bind+0xe0>
  dhcp->lease_used = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	8423      	strh	r3, [r4, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800b83c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b83e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b842:	d00e      	beq.n	800b862 <dhcp_bind+0x3a>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800b844:	331e      	adds	r3, #30
 800b846:	4a3d      	ldr	r2, [pc, #244]	; (800b93c <dhcp_bind+0x114>)
 800b848:	fba2 2303 	umull	r2, r3, r2, r3
 800b84c:	095b      	lsrs	r3, r3, #5
     if (timeout > 0xffff) {
 800b84e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b852:	d301      	bcc.n	800b858 <dhcp_bind+0x30>
       timeout = 0xffff;
 800b854:	f64f 73ff 	movw	r3, #65535	; 0xffff
     dhcp->t0_timeout = (u16_t)timeout;
 800b858:	b29b      	uxth	r3, r3
 800b85a:	8463      	strh	r3, [r4, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800b85c:	b90b      	cbnz	r3, 800b862 <dhcp_bind+0x3a>
       dhcp->t0_timeout = 1;
 800b85e:	2301      	movs	r3, #1
 800b860:	8463      	strh	r3, [r4, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800b862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b868:	d010      	beq.n	800b88c <dhcp_bind+0x64>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800b86a:	331e      	adds	r3, #30
 800b86c:	4a33      	ldr	r2, [pc, #204]	; (800b93c <dhcp_bind+0x114>)
 800b86e:	fba2 2303 	umull	r2, r3, r2, r3
 800b872:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800b874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b878:	d301      	bcc.n	800b87e <dhcp_bind+0x56>
      timeout = 0xffff;
 800b87a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t1_timeout = (u16_t)timeout;
 800b87e:	b29b      	uxth	r3, r3
 800b880:	8323      	strh	r3, [r4, #24]
    if (dhcp->t1_timeout == 0) {
 800b882:	b90b      	cbnz	r3, 800b888 <dhcp_bind+0x60>
      dhcp->t1_timeout = 1;
 800b884:	2301      	movs	r3, #1
 800b886:	8323      	strh	r3, [r4, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800b888:	8b23      	ldrh	r3, [r4, #24]
 800b88a:	83a3      	strh	r3, [r4, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800b88c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b88e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b892:	d010      	beq.n	800b8b6 <dhcp_bind+0x8e>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800b894:	331e      	adds	r3, #30
 800b896:	4a29      	ldr	r2, [pc, #164]	; (800b93c <dhcp_bind+0x114>)
 800b898:	fba2 2303 	umull	r2, r3, r2, r3
 800b89c:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800b89e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8a2:	d301      	bcc.n	800b8a8 <dhcp_bind+0x80>
      timeout = 0xffff;
 800b8a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t2_timeout = (u16_t)timeout;
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	8363      	strh	r3, [r4, #26]
    if (dhcp->t2_timeout == 0) {
 800b8ac:	b90b      	cbnz	r3, 800b8b2 <dhcp_bind+0x8a>
      dhcp->t2_timeout = 1;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	8363      	strh	r3, [r4, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800b8b2:	8b63      	ldrh	r3, [r4, #26]
 800b8b4:	83e3      	strh	r3, [r4, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800b8b6:	8b22      	ldrh	r2, [r4, #24]
 800b8b8:	8b63      	ldrh	r3, [r4, #26]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d302      	bcc.n	800b8c4 <dhcp_bind+0x9c>
 800b8be:	b10b      	cbz	r3, 800b8c4 <dhcp_bind+0x9c>
    dhcp->t1_timeout = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	8323      	strh	r3, [r4, #24]
  if (dhcp->subnet_mask_given) {
 800b8c4:	7ae3      	ldrb	r3, [r4, #11]
 800b8c6:	b33b      	cbz	r3, 800b918 <dhcp_bind+0xf0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800b8c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b8ca:	9301      	str	r3, [sp, #4]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800b8cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b8ce:	9300      	str	r3, [sp, #0]
  if (ip4_addr_isany_val(gw_addr)) {
 800b8d0:	b92b      	cbnz	r3, 800b8de <dhcp_bind+0xb6>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800b8d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8d4:	9a01      	ldr	r2, [sp, #4]
 800b8d6:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800b8d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b8dc:	9300      	str	r3, [sp, #0]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800b8de:	210a      	movs	r1, #10
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f7ff fb11 	bl	800af08 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800b8e6:	466b      	mov	r3, sp
 800b8e8:	aa01      	add	r2, sp, #4
 800b8ea:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f7fa ff36 	bl	8006760 <netif_set_addr>
}
 800b8f4:	b003      	add	sp, #12
 800b8f6:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800b8f8:	4b11      	ldr	r3, [pc, #68]	; (800b940 <dhcp_bind+0x118>)
 800b8fa:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800b8fe:	4911      	ldr	r1, [pc, #68]	; (800b944 <dhcp_bind+0x11c>)
 800b900:	4811      	ldr	r0, [pc, #68]	; (800b948 <dhcp_bind+0x120>)
 800b902:	f003 fabd 	bl	800ee80 <iprintf>
 800b906:	e7f5      	b.n	800b8f4 <dhcp_bind+0xcc>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800b908:	4b0d      	ldr	r3, [pc, #52]	; (800b940 <dhcp_bind+0x118>)
 800b90a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b90e:	490f      	ldr	r1, [pc, #60]	; (800b94c <dhcp_bind+0x124>)
 800b910:	480d      	ldr	r0, [pc, #52]	; (800b948 <dhcp_bind+0x120>)
 800b912:	f003 fab5 	bl	800ee80 <iprintf>
 800b916:	e7ed      	b.n	800b8f4 <dhcp_bind+0xcc>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800b918:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (first_octet <= 127) {
 800b91c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b920:	d102      	bne.n	800b928 <dhcp_bind+0x100>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800b922:	23ff      	movs	r3, #255	; 0xff
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	e7d1      	b.n	800b8cc <dhcp_bind+0xa4>
    } else if (first_octet >= 192) {
 800b928:	2bbf      	cmp	r3, #191	; 0xbf
 800b92a:	d903      	bls.n	800b934 <dhcp_bind+0x10c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800b92c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	e7cb      	b.n	800b8cc <dhcp_bind+0xa4>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800b934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	e7c7      	b.n	800b8cc <dhcp_bind+0xa4>
 800b93c:	88888889 	.word	0x88888889
 800b940:	08011ee4 	.word	0x08011ee4
 800b944:	08011c5c 	.word	0x08011c5c
 800b948:	080101d8 	.word	0x080101d8
 800b94c:	08011c78 	.word	0x08011c78

0800b950 <dhcp_handle_nak>:
{
 800b950:	b510      	push	{r4, lr}
 800b952:	4604      	mov	r4, r0
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800b954:	210c      	movs	r1, #12
 800b956:	6a00      	ldr	r0, [r0, #32]
 800b958:	f7ff fad6 	bl	800af08 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800b95c:	4904      	ldr	r1, [pc, #16]	; (800b970 <dhcp_handle_nak+0x20>)
 800b95e:	460b      	mov	r3, r1
 800b960:	460a      	mov	r2, r1
 800b962:	4620      	mov	r0, r4
 800b964:	f7fa fefc 	bl	8006760 <netif_set_addr>
  dhcp_discover(netif);
 800b968:	4620      	mov	r0, r4
 800b96a:	f7ff fd21 	bl	800b3b0 <dhcp_discover>
}
 800b96e:	bd10      	pop	{r4, pc}
 800b970:	08012444 	.word	0x08012444

0800b974 <dhcp_dec_pcb_refcount>:
{
 800b974:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800b976:	4b0c      	ldr	r3, [pc, #48]	; (800b9a8 <dhcp_dec_pcb_refcount+0x34>)
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	b133      	cbz	r3, 800b98a <dhcp_dec_pcb_refcount+0x16>
  dhcp_pcb_refcount--;
 800b97c:	4a0a      	ldr	r2, [pc, #40]	; (800b9a8 <dhcp_dec_pcb_refcount+0x34>)
 800b97e:	7813      	ldrb	r3, [r2, #0]
 800b980:	3b01      	subs	r3, #1
 800b982:	b2db      	uxtb	r3, r3
 800b984:	7013      	strb	r3, [r2, #0]
  if (dhcp_pcb_refcount == 0) {
 800b986:	b13b      	cbz	r3, 800b998 <dhcp_dec_pcb_refcount+0x24>
}
 800b988:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800b98a:	4b08      	ldr	r3, [pc, #32]	; (800b9ac <dhcp_dec_pcb_refcount+0x38>)
 800b98c:	22f3      	movs	r2, #243	; 0xf3
 800b98e:	4908      	ldr	r1, [pc, #32]	; (800b9b0 <dhcp_dec_pcb_refcount+0x3c>)
 800b990:	4808      	ldr	r0, [pc, #32]	; (800b9b4 <dhcp_dec_pcb_refcount+0x40>)
 800b992:	f003 fa75 	bl	800ee80 <iprintf>
 800b996:	e7f1      	b.n	800b97c <dhcp_dec_pcb_refcount+0x8>
    udp_remove(dhcp_pcb);
 800b998:	4c07      	ldr	r4, [pc, #28]	; (800b9b8 <dhcp_dec_pcb_refcount+0x44>)
 800b99a:	6820      	ldr	r0, [r4, #0]
 800b99c:	f7ff fa6a 	bl	800ae74 <udp_remove>
    dhcp_pcb = NULL;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	6023      	str	r3, [r4, #0]
}
 800b9a4:	e7f0      	b.n	800b988 <dhcp_dec_pcb_refcount+0x14>
 800b9a6:	bf00      	nop
 800b9a8:	20004920 	.word	0x20004920
 800b9ac:	08011ee4 	.word	0x08011ee4
 800b9b0:	08011d60 	.word	0x08011d60
 800b9b4:	080101d8 	.word	0x080101d8
 800b9b8:	2000491c 	.word	0x2000491c

0800b9bc <dhcp_inc_pcb_refcount>:
{
 800b9bc:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800b9be:	4b17      	ldr	r3, [pc, #92]	; (800ba1c <dhcp_inc_pcb_refcount+0x60>)
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	bb0b      	cbnz	r3, 800ba08 <dhcp_inc_pcb_refcount+0x4c>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800b9c4:	4b16      	ldr	r3, [pc, #88]	; (800ba20 <dhcp_inc_pcb_refcount+0x64>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	b12b      	cbz	r3, 800b9d6 <dhcp_inc_pcb_refcount+0x1a>
 800b9ca:	4b16      	ldr	r3, [pc, #88]	; (800ba24 <dhcp_inc_pcb_refcount+0x68>)
 800b9cc:	22d9      	movs	r2, #217	; 0xd9
 800b9ce:	4916      	ldr	r1, [pc, #88]	; (800ba28 <dhcp_inc_pcb_refcount+0x6c>)
 800b9d0:	4816      	ldr	r0, [pc, #88]	; (800ba2c <dhcp_inc_pcb_refcount+0x70>)
 800b9d2:	f003 fa55 	bl	800ee80 <iprintf>
    dhcp_pcb = udp_new();
 800b9d6:	f7ff fa69 	bl	800aeac <udp_new>
 800b9da:	4b11      	ldr	r3, [pc, #68]	; (800ba20 <dhcp_inc_pcb_refcount+0x64>)
 800b9dc:	6018      	str	r0, [r3, #0]
    if (dhcp_pcb == NULL) {
 800b9de:	b1c8      	cbz	r0, 800ba14 <dhcp_inc_pcb_refcount+0x58>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800b9e0:	7a03      	ldrb	r3, [r0, #8]
 800b9e2:	f043 0320 	orr.w	r3, r3, #32
 800b9e6:	7203      	strb	r3, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800b9e8:	4d11      	ldr	r5, [pc, #68]	; (800ba30 <dhcp_inc_pcb_refcount+0x74>)
 800b9ea:	2244      	movs	r2, #68	; 0x44
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	f7ff f933 	bl	800ac58 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800b9f2:	4c0b      	ldr	r4, [pc, #44]	; (800ba20 <dhcp_inc_pcb_refcount+0x64>)
 800b9f4:	2243      	movs	r2, #67	; 0x43
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	6820      	ldr	r0, [r4, #0]
 800b9fa:	f7ff fa03 	bl	800ae04 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800b9fe:	2200      	movs	r2, #0
 800ba00:	490c      	ldr	r1, [pc, #48]	; (800ba34 <dhcp_inc_pcb_refcount+0x78>)
 800ba02:	6820      	ldr	r0, [r4, #0]
 800ba04:	f7ff fa32 	bl	800ae6c <udp_recv>
  dhcp_pcb_refcount++;
 800ba08:	4a04      	ldr	r2, [pc, #16]	; (800ba1c <dhcp_inc_pcb_refcount+0x60>)
 800ba0a:	7813      	ldrb	r3, [r2, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800ba10:	2000      	movs	r0, #0
}
 800ba12:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba18:	e7fb      	b.n	800ba12 <dhcp_inc_pcb_refcount+0x56>
 800ba1a:	bf00      	nop
 800ba1c:	20004920 	.word	0x20004920
 800ba20:	2000491c 	.word	0x2000491c
 800ba24:	08011ee4 	.word	0x08011ee4
 800ba28:	08011df8 	.word	0x08011df8
 800ba2c:	080101d8 	.word	0x080101d8
 800ba30:	08012444 	.word	0x08012444
 800ba34:	0800bea1 	.word	0x0800bea1

0800ba38 <dhcp_parse_reply>:
  dhcp_clear_all_options(dhcp);
 800ba38:	4bc1      	ldr	r3, [pc, #772]	; (800bd40 <dhcp_parse_reply+0x308>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 800ba40:	894b      	ldrh	r3, [r1, #10]
 800ba42:	2b2b      	cmp	r3, #43	; 0x2b
 800ba44:	f240 8216 	bls.w	800be74 <dhcp_parse_reply+0x43c>
{
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	b087      	sub	sp, #28
 800ba4e:	9102      	str	r1, [sp, #8]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800ba50:	684b      	ldr	r3, [r1, #4]
 800ba52:	6043      	str	r3, [r0, #4]
  options_idx_max = p->tot_len;
 800ba54:	890d      	ldrh	r5, [r1, #8]
  int parse_sname_as_options = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	9303      	str	r3, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 800ba5a:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  q = p;
 800ba5e:	9f02      	ldr	r7, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 800ba60:	e010      	b.n	800ba84 <dhcp_parse_reply+0x4c>
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800ba62:	25ec      	movs	r5, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800ba64:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 800ba68:	e7f9      	b.n	800ba5e <dhcp_parse_reply+0x26>
      parse_sname_as_options = 1;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800ba6e:	25ec      	movs	r5, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800ba70:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 800ba74:	e7f3      	b.n	800ba5e <dhcp_parse_reply+0x26>
    options_idx -= q->len;
 800ba76:	ebab 0b03 	sub.w	fp, fp, r3
 800ba7a:	fa1f fb8b 	uxth.w	fp, fp
    options_idx_max -= q->len;
 800ba7e:	1aed      	subs	r5, r5, r3
 800ba80:	b2ad      	uxth	r5, r5
    q = q->next;
 800ba82:	683f      	ldr	r7, [r7, #0]
  while ((q != NULL) && (options_idx >= q->len)) {
 800ba84:	b117      	cbz	r7, 800ba8c <dhcp_parse_reply+0x54>
 800ba86:	897b      	ldrh	r3, [r7, #10]
 800ba88:	455b      	cmp	r3, fp
 800ba8a:	d9f4      	bls.n	800ba76 <dhcp_parse_reply+0x3e>
  if (q == NULL) {
 800ba8c:	2f00      	cmp	r7, #0
 800ba8e:	f000 81f4 	beq.w	800be7a <dhcp_parse_reply+0x442>
  options = (u8_t*)q->payload;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	9301      	str	r3, [sp, #4]
  offset = options_idx;
 800ba96:	465c      	mov	r4, fp
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ba98:	e025      	b.n	800bae6 <dhcp_parse_reply+0xae>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	b113      	cbz	r3, 800baa4 <dhcp_parse_reply+0x6c>
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	e03b      	b.n	800bb1c <dhcp_parse_reply+0xe4>
 800baa4:	2300      	movs	r3, #0
 800baa6:	e039      	b.n	800bb1c <dhcp_parse_reply+0xe4>
        offset--;
 800baa8:	3c01      	subs	r4, #1
 800baaa:	b2a4      	uxth	r4, r4
    int decode_idx = -1;
 800baac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
        decode_len = len = 0;
 800bab0:	2600      	movs	r6, #0
 800bab2:	4633      	mov	r3, r6
    offset += len + 2;
 800bab4:	441c      	add	r4, r3
 800bab6:	b2a4      	uxth	r4, r4
 800bab8:	3402      	adds	r4, #2
 800baba:	b2a4      	uxth	r4, r4
    if (decode_len > 0) {
 800babc:	2e00      	cmp	r6, #0
 800babe:	f040 813c 	bne.w	800bd3a <dhcp_parse_reply+0x302>
    if (offset >= q->len) {
 800bac2:	897b      	ldrh	r3, [r7, #10]
 800bac4:	42a3      	cmp	r3, r4
 800bac6:	d80e      	bhi.n	800bae6 <dhcp_parse_reply+0xae>
      offset -= q->len;
 800bac8:	1ae4      	subs	r4, r4, r3
 800baca:	b2a4      	uxth	r4, r4
      offset_max -= q->len;
 800bacc:	1aed      	subs	r5, r5, r3
 800bace:	b2ad      	uxth	r5, r5
      if ((offset < offset_max) && offset_max) {
 800bad0:	2d00      	cmp	r5, #0
 800bad2:	bf18      	it	ne
 800bad4:	42ac      	cmpne	r4, r5
 800bad6:	f080 81b0 	bcs.w	800be3a <dhcp_parse_reply+0x402>
        q = q->next;
 800bada:	683f      	ldr	r7, [r7, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800badc:	2f00      	cmp	r7, #0
 800bade:	f000 81a2 	beq.w	800be26 <dhcp_parse_reply+0x3ee>
        options = (u8_t*)q->payload;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800bae6:	42ac      	cmp	r4, r5
 800bae8:	bf2c      	ite	cs
 800baea:	2300      	movcs	r3, #0
 800baec:	2301      	movcc	r3, #1
 800baee:	2f00      	cmp	r7, #0
 800baf0:	bf08      	it	eq
 800baf2:	2300      	moveq	r3, #0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f000 81a0 	beq.w	800be3a <dhcp_parse_reply+0x402>
 800bafa:	4621      	mov	r1, r4
 800bafc:	9b01      	ldr	r3, [sp, #4]
 800bafe:	5d1a      	ldrb	r2, [r3, r4]
 800bb00:	2aff      	cmp	r2, #255	; 0xff
 800bb02:	f000 819a 	beq.w	800be3a <dhcp_parse_reply+0x402>
    u16_t val_offset = offset + 2;
 800bb06:	f104 0902 	add.w	r9, r4, #2
 800bb0a:	fa1f f989 	uxth.w	r9, r9
    if ((offset + 1) < q->len) {
 800bb0e:	1c63      	adds	r3, r4, #1
 800bb10:	8978      	ldrh	r0, [r7, #10]
 800bb12:	4283      	cmp	r3, r0
 800bb14:	dac1      	bge.n	800ba9a <dhcp_parse_reply+0x62>
      len = options[offset + 1];
 800bb16:	3101      	adds	r1, #1
 800bb18:	9b01      	ldr	r3, [sp, #4]
 800bb1a:	5c5b      	ldrb	r3, [r3, r1]
    switch(op) {
 800bb1c:	2a3b      	cmp	r2, #59	; 0x3b
 800bb1e:	f200 8108 	bhi.w	800bd32 <dhcp_parse_reply+0x2fa>
 800bb22:	a101      	add	r1, pc, #4	; (adr r1, 800bb28 <dhcp_parse_reply+0xf0>)
 800bb24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb28:	0800baa9 	.word	0x0800baa9
 800bb2c:	0800bc19 	.word	0x0800bc19
 800bb30:	0800bd33 	.word	0x0800bd33
 800bb34:	0800bc39 	.word	0x0800bc39
 800bb38:	0800bd33 	.word	0x0800bd33
 800bb3c:	0800bd33 	.word	0x0800bd33
 800bb40:	0800bd33 	.word	0x0800bd33
 800bb44:	0800bd33 	.word	0x0800bd33
 800bb48:	0800bd33 	.word	0x0800bd33
 800bb4c:	0800bd33 	.word	0x0800bd33
 800bb50:	0800bd33 	.word	0x0800bd33
 800bb54:	0800bd33 	.word	0x0800bd33
 800bb58:	0800bd33 	.word	0x0800bd33
 800bb5c:	0800bd33 	.word	0x0800bd33
 800bb60:	0800bd33 	.word	0x0800bd33
 800bb64:	0800bd33 	.word	0x0800bd33
 800bb68:	0800bd33 	.word	0x0800bd33
 800bb6c:	0800bd33 	.word	0x0800bd33
 800bb70:	0800bd33 	.word	0x0800bd33
 800bb74:	0800bd33 	.word	0x0800bd33
 800bb78:	0800bd33 	.word	0x0800bd33
 800bb7c:	0800bd33 	.word	0x0800bd33
 800bb80:	0800bd33 	.word	0x0800bd33
 800bb84:	0800bd33 	.word	0x0800bd33
 800bb88:	0800bd33 	.word	0x0800bd33
 800bb8c:	0800bd33 	.word	0x0800bd33
 800bb90:	0800bd33 	.word	0x0800bd33
 800bb94:	0800bd33 	.word	0x0800bd33
 800bb98:	0800bd33 	.word	0x0800bd33
 800bb9c:	0800bd33 	.word	0x0800bd33
 800bba0:	0800bd33 	.word	0x0800bd33
 800bba4:	0800bd33 	.word	0x0800bd33
 800bba8:	0800bd33 	.word	0x0800bd33
 800bbac:	0800bd33 	.word	0x0800bd33
 800bbb0:	0800bd33 	.word	0x0800bd33
 800bbb4:	0800bd33 	.word	0x0800bd33
 800bbb8:	0800bd33 	.word	0x0800bd33
 800bbbc:	0800bd33 	.word	0x0800bd33
 800bbc0:	0800bd33 	.word	0x0800bd33
 800bbc4:	0800bd33 	.word	0x0800bd33
 800bbc8:	0800bd33 	.word	0x0800bd33
 800bbcc:	0800bd33 	.word	0x0800bd33
 800bbd0:	0800bd33 	.word	0x0800bd33
 800bbd4:	0800bd33 	.word	0x0800bd33
 800bbd8:	0800bd33 	.word	0x0800bd33
 800bbdc:	0800bd33 	.word	0x0800bd33
 800bbe0:	0800bd33 	.word	0x0800bd33
 800bbe4:	0800bd33 	.word	0x0800bd33
 800bbe8:	0800bd33 	.word	0x0800bd33
 800bbec:	0800bd33 	.word	0x0800bd33
 800bbf0:	0800bd33 	.word	0x0800bd33
 800bbf4:	0800bc59 	.word	0x0800bc59
 800bbf8:	0800bc79 	.word	0x0800bc79
 800bbfc:	0800bcb3 	.word	0x0800bcb3
 800bc00:	0800bcd3 	.word	0x0800bcd3
 800bc04:	0800bd33 	.word	0x0800bd33
 800bc08:	0800bd33 	.word	0x0800bd33
 800bc0c:	0800bd33 	.word	0x0800bd33
 800bc10:	0800bcf3 	.word	0x0800bcf3
 800bc14:	0800bd13 	.word	0x0800bd13
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800bc18:	2b04      	cmp	r3, #4
 800bc1a:	d103      	bne.n	800bc24 <dhcp_parse_reply+0x1ec>
    decode_len = len;
 800bc1c:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800bc1e:	f04f 0806 	mov.w	r8, #6
 800bc22:	e747      	b.n	800bab4 <dhcp_parse_reply+0x7c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800bc24:	4b47      	ldr	r3, [pc, #284]	; (800bd44 <dhcp_parse_reply+0x30c>)
 800bc26:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800bc2a:	4947      	ldr	r1, [pc, #284]	; (800bd48 <dhcp_parse_reply+0x310>)
 800bc2c:	4847      	ldr	r0, [pc, #284]	; (800bd4c <dhcp_parse_reply+0x314>)
 800bc2e:	f003 f927 	bl	800ee80 <iprintf>
 800bc32:	f06f 0005 	mvn.w	r0, #5
 800bc36:	e0f3      	b.n	800be20 <dhcp_parse_reply+0x3e8>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d903      	bls.n	800bc44 <dhcp_parse_reply+0x20c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800bc3c:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 800bc40:	2604      	movs	r6, #4
 800bc42:	e737      	b.n	800bab4 <dhcp_parse_reply+0x7c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800bc44:	4b3f      	ldr	r3, [pc, #252]	; (800bd44 <dhcp_parse_reply+0x30c>)
 800bc46:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800bc4a:	4941      	ldr	r1, [pc, #260]	; (800bd50 <dhcp_parse_reply+0x318>)
 800bc4c:	483f      	ldr	r0, [pc, #252]	; (800bd4c <dhcp_parse_reply+0x314>)
 800bc4e:	f003 f917 	bl	800ee80 <iprintf>
 800bc52:	f06f 0005 	mvn.w	r0, #5
 800bc56:	e0e3      	b.n	800be20 <dhcp_parse_reply+0x3e8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	d103      	bne.n	800bc64 <dhcp_parse_reply+0x22c>
    decode_len = len;
 800bc5c:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800bc5e:	f04f 0803 	mov.w	r8, #3
 800bc62:	e727      	b.n	800bab4 <dhcp_parse_reply+0x7c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800bc64:	4b37      	ldr	r3, [pc, #220]	; (800bd44 <dhcp_parse_reply+0x30c>)
 800bc66:	f240 6209 	movw	r2, #1545	; 0x609
 800bc6a:	4937      	ldr	r1, [pc, #220]	; (800bd48 <dhcp_parse_reply+0x310>)
 800bc6c:	4837      	ldr	r0, [pc, #220]	; (800bd4c <dhcp_parse_reply+0x314>)
 800bc6e:	f003 f907 	bl	800ee80 <iprintf>
 800bc72:	f06f 0005 	mvn.w	r0, #5
 800bc76:	e0d3      	b.n	800be20 <dhcp_parse_reply+0x3e8>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d106      	bne.n	800bc8a <dhcp_parse_reply+0x252>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800bc7c:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 800bc80:	d10d      	bne.n	800bc9e <dhcp_parse_reply+0x266>
    decode_len = len;
 800bc82:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800bc84:	f04f 0800 	mov.w	r8, #0
 800bc88:	e714      	b.n	800bab4 <dhcp_parse_reply+0x7c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800bc8a:	4b2e      	ldr	r3, [pc, #184]	; (800bd44 <dhcp_parse_reply+0x30c>)
 800bc8c:	f240 6217 	movw	r2, #1559	; 0x617
 800bc90:	4930      	ldr	r1, [pc, #192]	; (800bd54 <dhcp_parse_reply+0x31c>)
 800bc92:	482e      	ldr	r0, [pc, #184]	; (800bd4c <dhcp_parse_reply+0x314>)
 800bc94:	f003 f8f4 	bl	800ee80 <iprintf>
 800bc98:	f06f 0005 	mvn.w	r0, #5
 800bc9c:	e0c0      	b.n	800be20 <dhcp_parse_reply+0x3e8>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800bc9e:	4b29      	ldr	r3, [pc, #164]	; (800bd44 <dhcp_parse_reply+0x30c>)
 800bca0:	f240 6219 	movw	r2, #1561	; 0x619
 800bca4:	492c      	ldr	r1, [pc, #176]	; (800bd58 <dhcp_parse_reply+0x320>)
 800bca6:	4829      	ldr	r0, [pc, #164]	; (800bd4c <dhcp_parse_reply+0x314>)
 800bca8:	f003 f8ea 	bl	800ee80 <iprintf>
 800bcac:	f06f 0005 	mvn.w	r0, #5
 800bcb0:	e0b6      	b.n	800be20 <dhcp_parse_reply+0x3e8>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d103      	bne.n	800bcbe <dhcp_parse_reply+0x286>
    decode_len = len;
 800bcb6:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800bcb8:	f04f 0801 	mov.w	r8, #1
 800bcbc:	e6fa      	b.n	800bab4 <dhcp_parse_reply+0x7c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800bcbe:	4b21      	ldr	r3, [pc, #132]	; (800bd44 <dhcp_parse_reply+0x30c>)
 800bcc0:	f240 621d 	movw	r2, #1565	; 0x61d
 800bcc4:	4923      	ldr	r1, [pc, #140]	; (800bd54 <dhcp_parse_reply+0x31c>)
 800bcc6:	4821      	ldr	r0, [pc, #132]	; (800bd4c <dhcp_parse_reply+0x314>)
 800bcc8:	f003 f8da 	bl	800ee80 <iprintf>
 800bccc:	f06f 0005 	mvn.w	r0, #5
 800bcd0:	e0a6      	b.n	800be20 <dhcp_parse_reply+0x3e8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800bcd2:	2b04      	cmp	r3, #4
 800bcd4:	d103      	bne.n	800bcde <dhcp_parse_reply+0x2a6>
    decode_len = len;
 800bcd6:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800bcd8:	f04f 0802 	mov.w	r8, #2
 800bcdc:	e6ea      	b.n	800bab4 <dhcp_parse_reply+0x7c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800bcde:	4b19      	ldr	r3, [pc, #100]	; (800bd44 <dhcp_parse_reply+0x30c>)
 800bce0:	f240 6221 	movw	r2, #1569	; 0x621
 800bce4:	4918      	ldr	r1, [pc, #96]	; (800bd48 <dhcp_parse_reply+0x310>)
 800bce6:	4819      	ldr	r0, [pc, #100]	; (800bd4c <dhcp_parse_reply+0x314>)
 800bce8:	f003 f8ca 	bl	800ee80 <iprintf>
 800bcec:	f06f 0005 	mvn.w	r0, #5
 800bcf0:	e096      	b.n	800be20 <dhcp_parse_reply+0x3e8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800bcf2:	2b04      	cmp	r3, #4
 800bcf4:	d103      	bne.n	800bcfe <dhcp_parse_reply+0x2c6>
    decode_len = len;
 800bcf6:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800bcf8:	f04f 0804 	mov.w	r8, #4
 800bcfc:	e6da      	b.n	800bab4 <dhcp_parse_reply+0x7c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800bcfe:	4b11      	ldr	r3, [pc, #68]	; (800bd44 <dhcp_parse_reply+0x30c>)
 800bd00:	f240 6225 	movw	r2, #1573	; 0x625
 800bd04:	4910      	ldr	r1, [pc, #64]	; (800bd48 <dhcp_parse_reply+0x310>)
 800bd06:	4811      	ldr	r0, [pc, #68]	; (800bd4c <dhcp_parse_reply+0x314>)
 800bd08:	f003 f8ba 	bl	800ee80 <iprintf>
 800bd0c:	f06f 0005 	mvn.w	r0, #5
 800bd10:	e086      	b.n	800be20 <dhcp_parse_reply+0x3e8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	d103      	bne.n	800bd1e <dhcp_parse_reply+0x2e6>
    decode_len = len;
 800bd16:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800bd18:	f04f 0805 	mov.w	r8, #5
 800bd1c:	e6ca      	b.n	800bab4 <dhcp_parse_reply+0x7c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800bd1e:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <dhcp_parse_reply+0x30c>)
 800bd20:	f240 6229 	movw	r2, #1577	; 0x629
 800bd24:	4908      	ldr	r1, [pc, #32]	; (800bd48 <dhcp_parse_reply+0x310>)
 800bd26:	4809      	ldr	r0, [pc, #36]	; (800bd4c <dhcp_parse_reply+0x314>)
 800bd28:	f003 f8aa 	bl	800ee80 <iprintf>
 800bd2c:	f06f 0005 	mvn.w	r0, #5
 800bd30:	e076      	b.n	800be20 <dhcp_parse_reply+0x3e8>
    int decode_idx = -1;
 800bd32:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
        decode_len = 0;
 800bd36:	2600      	movs	r6, #0
 800bd38:	e6bc      	b.n	800bab4 <dhcp_parse_reply+0x7c>
      u32_t value = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	9305      	str	r3, [sp, #20]
 800bd3e:	e039      	b.n	800bdb4 <dhcp_parse_reply+0x37c>
 800bd40:	2000820c 	.word	0x2000820c
 800bd44:	08011ee4 	.word	0x08011ee4
 800bd48:	08011ff0 	.word	0x08011ff0
 800bd4c:	080101d8 	.word	0x080101d8
 800bd50:	08011ffc 	.word	0x08011ffc
 800bd54:	08012010 	.word	0x08012010
 800bd58:	0801201c 	.word	0x0801201c
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800bd5c:	4b48      	ldr	r3, [pc, #288]	; (800be80 <dhcp_parse_reply+0x448>)
 800bd5e:	f813 3008 	ldrb.w	r3, [r3, r8]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f47f aead 	bne.w	800bac2 <dhcp_parse_reply+0x8a>
        copy_len = LWIP_MIN(decode_len, 4);
 800bd68:	46b2      	mov	sl, r6
 800bd6a:	2e04      	cmp	r6, #4
 800bd6c:	bf28      	it	cs
 800bd6e:	f04f 0a04 	movcs.w	sl, #4
 800bd72:	fa5f fa8a 	uxtb.w	sl, sl
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800bd76:	464b      	mov	r3, r9
 800bd78:	4652      	mov	r2, sl
 800bd7a:	a905      	add	r1, sp, #20
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	f7fb f943 	bl	8007008 <pbuf_copy_partial>
 800bd82:	4550      	cmp	r0, sl
 800bd84:	d14a      	bne.n	800be1c <dhcp_parse_reply+0x3e4>
        if (decode_len > 4) {
 800bd86:	2e04      	cmp	r6, #4
 800bd88:	d929      	bls.n	800bdde <dhcp_parse_reply+0x3a6>
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800bd8a:	f016 0f03 	tst.w	r6, #3
 800bd8e:	d11c      	bne.n	800bdca <dhcp_parse_reply+0x392>
          dhcp_got_option(dhcp, decode_idx);
 800bd90:	4b3b      	ldr	r3, [pc, #236]	; (800be80 <dhcp_parse_reply+0x448>)
 800bd92:	2201      	movs	r2, #1
 800bd94:	f803 2008 	strb.w	r2, [r3, r8]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800bd98:	9805      	ldr	r0, [sp, #20]
 800bd9a:	f7fa f99e 	bl	80060da <lwip_htonl>
 800bd9e:	4b39      	ldr	r3, [pc, #228]	; (800be84 <dhcp_parse_reply+0x44c>)
 800bda0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          decode_len -= 4;
 800bda4:	3e04      	subs	r6, #4
 800bda6:	b2f6      	uxtb	r6, r6
          val_offset += 4;
 800bda8:	f109 0904 	add.w	r9, r9, #4
 800bdac:	fa1f f989 	uxth.w	r9, r9
          decode_idx++;
 800bdb0:	f108 0801 	add.w	r8, r8, #1
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800bdb4:	f1b8 0f07 	cmp.w	r8, #7
 800bdb8:	d9d0      	bls.n	800bd5c <dhcp_parse_reply+0x324>
 800bdba:	4b33      	ldr	r3, [pc, #204]	; (800be88 <dhcp_parse_reply+0x450>)
 800bdbc:	f240 6236 	movw	r2, #1590	; 0x636
 800bdc0:	4932      	ldr	r1, [pc, #200]	; (800be8c <dhcp_parse_reply+0x454>)
 800bdc2:	4833      	ldr	r0, [pc, #204]	; (800be90 <dhcp_parse_reply+0x458>)
 800bdc4:	f003 f85c 	bl	800ee80 <iprintf>
 800bdc8:	e7c8      	b.n	800bd5c <dhcp_parse_reply+0x324>
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800bdca:	4b2f      	ldr	r3, [pc, #188]	; (800be88 <dhcp_parse_reply+0x450>)
 800bdcc:	f240 623e 	movw	r2, #1598	; 0x63e
 800bdd0:	4930      	ldr	r1, [pc, #192]	; (800be94 <dhcp_parse_reply+0x45c>)
 800bdd2:	482f      	ldr	r0, [pc, #188]	; (800be90 <dhcp_parse_reply+0x458>)
 800bdd4:	f003 f854 	bl	800ee80 <iprintf>
 800bdd8:	f06f 0005 	mvn.w	r0, #5
 800bddc:	e020      	b.n	800be20 <dhcp_parse_reply+0x3e8>
        } else if (decode_len == 4) {
 800bdde:	2e04      	cmp	r6, #4
 800bde0:	d00d      	beq.n	800bdfe <dhcp_parse_reply+0x3c6>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800bde2:	2e01      	cmp	r6, #1
 800bde4:	d110      	bne.n	800be08 <dhcp_parse_reply+0x3d0>
          value = ((u8_t*)&value)[0];
 800bde6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800bdea:	9305      	str	r3, [sp, #20]
        dhcp_got_option(dhcp, decode_idx);
 800bdec:	4b24      	ldr	r3, [pc, #144]	; (800be80 <dhcp_parse_reply+0x448>)
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f803 2008 	strb.w	r2, [r3, r8]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800bdf4:	4b23      	ldr	r3, [pc, #140]	; (800be84 <dhcp_parse_reply+0x44c>)
 800bdf6:	9a05      	ldr	r2, [sp, #20]
 800bdf8:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
 800bdfc:	e661      	b.n	800bac2 <dhcp_parse_reply+0x8a>
          value = lwip_ntohl(value);
 800bdfe:	9805      	ldr	r0, [sp, #20]
 800be00:	f7fa f96b 	bl	80060da <lwip_htonl>
 800be04:	9005      	str	r0, [sp, #20]
 800be06:	e7f1      	b.n	800bdec <dhcp_parse_reply+0x3b4>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800be08:	4b1f      	ldr	r3, [pc, #124]	; (800be88 <dhcp_parse_reply+0x450>)
 800be0a:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800be0e:	4922      	ldr	r1, [pc, #136]	; (800be98 <dhcp_parse_reply+0x460>)
 800be10:	481f      	ldr	r0, [pc, #124]	; (800be90 <dhcp_parse_reply+0x458>)
 800be12:	f003 f835 	bl	800ee80 <iprintf>
 800be16:	f06f 0005 	mvn.w	r0, #5
 800be1a:	e001      	b.n	800be20 <dhcp_parse_reply+0x3e8>
          return ERR_BUF;
 800be1c:	f06f 0001 	mvn.w	r0, #1
}
 800be20:	b007      	add	sp, #28
 800be22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800be26:	4b18      	ldr	r3, [pc, #96]	; (800be88 <dhcp_parse_reply+0x450>)
 800be28:	f240 6254 	movw	r2, #1620	; 0x654
 800be2c:	491b      	ldr	r1, [pc, #108]	; (800be9c <dhcp_parse_reply+0x464>)
 800be2e:	4818      	ldr	r0, [pc, #96]	; (800be90 <dhcp_parse_reply+0x458>)
 800be30:	f003 f826 	bl	800ee80 <iprintf>
 800be34:	f06f 0005 	mvn.w	r0, #5
 800be38:	e7f2      	b.n	800be20 <dhcp_parse_reply+0x3e8>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800be3a:	4b11      	ldr	r3, [pc, #68]	; (800be80 <dhcp_parse_reply+0x448>)
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	b163      	cbz	r3, 800be5a <dhcp_parse_reply+0x422>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800be40:	4b10      	ldr	r3, [pc, #64]	; (800be84 <dhcp_parse_reply+0x44c>)
 800be42:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800be44:	4a0e      	ldr	r2, [pc, #56]	; (800be80 <dhcp_parse_reply+0x448>)
 800be46:	2100      	movs	r1, #0
 800be48:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	f43f ae09 	beq.w	800ba62 <dhcp_parse_reply+0x2a>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800be50:	2b02      	cmp	r3, #2
 800be52:	d00a      	beq.n	800be6a <dhcp_parse_reply+0x432>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800be54:	2b03      	cmp	r3, #3
 800be56:	f43f ae08 	beq.w	800ba6a <dhcp_parse_reply+0x32>
  } else if (parse_sname_as_options) {
 800be5a:	9b03      	ldr	r3, [sp, #12]
 800be5c:	b143      	cbz	r3, 800be70 <dhcp_parse_reply+0x438>
    parse_sname_as_options = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800be62:	256c      	movs	r5, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 800be64:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800be68:	e5f9      	b.n	800ba5e <dhcp_parse_reply+0x26>
      parse_sname_as_options = 1;
 800be6a:	2301      	movs	r3, #1
 800be6c:	9303      	str	r3, [sp, #12]
 800be6e:	e7f4      	b.n	800be5a <dhcp_parse_reply+0x422>
  return ERR_OK;
 800be70:	2000      	movs	r0, #0
 800be72:	e7d5      	b.n	800be20 <dhcp_parse_reply+0x3e8>
    return ERR_BUF;
 800be74:	f06f 0001 	mvn.w	r0, #1
}
 800be78:	4770      	bx	lr
    return ERR_BUF;
 800be7a:	f06f 0001 	mvn.w	r0, #1
 800be7e:	e7cf      	b.n	800be20 <dhcp_parse_reply+0x3e8>
 800be80:	2000820c 	.word	0x2000820c
 800be84:	20008214 	.word	0x20008214
 800be88:	08011ee4 	.word	0x08011ee4
 800be8c:	08012034 	.word	0x08012034
 800be90:	080101d8 	.word	0x080101d8
 800be94:	08012048 	.word	0x08012048
 800be98:	08012060 	.word	0x08012060
 800be9c:	08012074 	.word	0x08012074

0800bea0 <dhcp_recv>:
{
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	4615      	mov	r5, r2
  struct netif *netif = ip_current_input_netif();
 800bea4:	4b3c      	ldr	r3, [pc, #240]	; (800bf98 <dhcp_recv+0xf8>)
 800bea6:	685e      	ldr	r6, [r3, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bea8:	6a34      	ldr	r4, [r6, #32]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800beaa:	6857      	ldr	r7, [r2, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800beac:	b184      	cbz	r4, 800bed0 <dhcp_recv+0x30>
 800beae:	7a23      	ldrb	r3, [r4, #8]
 800beb0:	b173      	cbz	r3, 800bed0 <dhcp_recv+0x30>
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800beb2:	6863      	ldr	r3, [r4, #4]
 800beb4:	b133      	cbz	r3, 800bec4 <dhcp_recv+0x24>
 800beb6:	4b39      	ldr	r3, [pc, #228]	; (800bf9c <dhcp_recv+0xfc>)
 800beb8:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800bebc:	4938      	ldr	r1, [pc, #224]	; (800bfa0 <dhcp_recv+0x100>)
 800bebe:	4839      	ldr	r0, [pc, #228]	; (800bfa4 <dhcp_recv+0x104>)
 800bec0:	f002 ffde 	bl	800ee80 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800bec4:	896b      	ldrh	r3, [r5, #10]
 800bec6:	2b2b      	cmp	r3, #43	; 0x2b
 800bec8:	d902      	bls.n	800bed0 <dhcp_recv+0x30>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 800beca:	783b      	ldrb	r3, [r7, #0]
 800becc:	2b02      	cmp	r3, #2
 800bece:	d006      	beq.n	800bede <dhcp_recv+0x3e>
  if (dhcp != NULL) {
 800bed0:	b10c      	cbz	r4, 800bed6 <dhcp_recv+0x36>
    dhcp->msg_in = NULL;
 800bed2:	2300      	movs	r3, #0
 800bed4:	6063      	str	r3, [r4, #4]
  pbuf_free(p);
 800bed6:	4628      	mov	r0, r5
 800bed8:	f7fa fdbe 	bl	8006a58 <pbuf_free>
}
 800bedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800bede:	2300      	movs	r3, #0
 800bee0:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d90b      	bls.n	800bf00 <dhcp_recv+0x60>
 800bee8:	2b05      	cmp	r3, #5
 800beea:	d809      	bhi.n	800bf00 <dhcp_recv+0x60>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800beec:	18f2      	adds	r2, r6, r3
 800beee:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 800bef2:	18fa      	adds	r2, r7, r3
 800bef4:	7f12      	ldrb	r2, [r2, #28]
 800bef6:	4291      	cmp	r1, r2
 800bef8:	d1ea      	bne.n	800bed0 <dhcp_recv+0x30>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800befa:	3301      	adds	r3, #1
 800befc:	b2db      	uxtb	r3, r3
 800befe:	e7ef      	b.n	800bee0 <dhcp_recv+0x40>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7fa f8ea 	bl	80060da <lwip_htonl>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	4298      	cmp	r0, r3
 800bf0a:	d1e1      	bne.n	800bed0 <dhcp_recv+0x30>
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f7ff fd92 	bl	800ba38 <dhcp_parse_reply>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d1db      	bne.n	800bed0 <dhcp_recv+0x30>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800bf18:	4b23      	ldr	r3, [pc, #140]	; (800bfa8 <dhcp_recv+0x108>)
 800bf1a:	785b      	ldrb	r3, [r3, #1]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d0d7      	beq.n	800bed0 <dhcp_recv+0x30>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800bf20:	4b22      	ldr	r3, [pc, #136]	; (800bfac <dhcp_recv+0x10c>)
 800bf22:	791b      	ldrb	r3, [r3, #4]
  if (msg_type == DHCP_ACK) {
 800bf24:	2b05      	cmp	r3, #5
 800bf26:	d00c      	beq.n	800bf42 <dhcp_recv+0xa2>
  else if ((msg_type == DHCP_NAK) &&
 800bf28:	2b06      	cmp	r3, #6
 800bf2a:	d028      	beq.n	800bf7e <dhcp_recv+0xde>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d1cf      	bne.n	800bed0 <dhcp_recv+0x30>
 800bf30:	7a63      	ldrb	r3, [r4, #9]
 800bf32:	2b06      	cmp	r3, #6
 800bf34:	d1cc      	bne.n	800bed0 <dhcp_recv+0x30>
    dhcp->request_timeout = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	82e3      	strh	r3, [r4, #22]
    dhcp_handle_offer(netif);
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	f7ff fb1a 	bl	800b574 <dhcp_handle_offer>
 800bf40:	e7c6      	b.n	800bed0 <dhcp_recv+0x30>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800bf42:	7a63      	ldrb	r3, [r4, #9]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d00a      	beq.n	800bf5e <dhcp_recv+0xbe>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800bf48:	3b03      	subs	r3, #3
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	d8bf      	bhi.n	800bed0 <dhcp_recv+0x30>
      dhcp_handle_ack(netif);
 800bf50:	4630      	mov	r0, r6
 800bf52:	f7ff f9bd 	bl	800b2d0 <dhcp_handle_ack>
      dhcp_bind(netif);
 800bf56:	4630      	mov	r0, r6
 800bf58:	f7ff fc66 	bl	800b828 <dhcp_bind>
 800bf5c:	e7b8      	b.n	800bed0 <dhcp_recv+0x30>
      dhcp_handle_ack(netif);
 800bf5e:	4630      	mov	r0, r6
 800bf60:	f7ff f9b6 	bl	800b2d0 <dhcp_handle_ack>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800bf64:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800bf68:	f013 0f08 	tst.w	r3, #8
 800bf6c:	d003      	beq.n	800bf76 <dhcp_recv+0xd6>
        dhcp_check(netif);
 800bf6e:	4630      	mov	r0, r6
 800bf70:	f7ff fc44 	bl	800b7fc <dhcp_check>
 800bf74:	e7ac      	b.n	800bed0 <dhcp_recv+0x30>
        dhcp_bind(netif);
 800bf76:	4630      	mov	r0, r6
 800bf78:	f7ff fc56 	bl	800b828 <dhcp_bind>
 800bf7c:	e7a8      	b.n	800bed0 <dhcp_recv+0x30>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bf7e:	7a62      	ldrb	r2, [r4, #9]
  else if ((msg_type == DHCP_NAK) &&
 800bf80:	2a01      	cmp	r2, #1
 800bf82:	bf18      	it	ne
 800bf84:	2a03      	cmpne	r2, #3
 800bf86:	d003      	beq.n	800bf90 <dhcp_recv+0xf0>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bf88:	2a04      	cmp	r2, #4
 800bf8a:	d001      	beq.n	800bf90 <dhcp_recv+0xf0>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800bf8c:	2a05      	cmp	r2, #5
 800bf8e:	d1cd      	bne.n	800bf2c <dhcp_recv+0x8c>
    dhcp_handle_nak(netif);
 800bf90:	4630      	mov	r0, r6
 800bf92:	f7ff fcdd 	bl	800b950 <dhcp_handle_nak>
 800bf96:	e79b      	b.n	800bed0 <dhcp_recv+0x30>
 800bf98:	20004ac0 	.word	0x20004ac0
 800bf9c:	08011ee4 	.word	0x08011ee4
 800bfa0:	08012088 	.word	0x08012088
 800bfa4:	080101d8 	.word	0x080101d8
 800bfa8:	2000820c 	.word	0x2000820c
 800bfac:	20008214 	.word	0x20008214

0800bfb0 <dhcp_arp_reply>:
{
 800bfb0:	b508      	push	{r3, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bfb2:	b130      	cbz	r0, 800bfc2 <dhcp_arp_reply+0x12>
 800bfb4:	4602      	mov	r2, r0
  dhcp = netif_dhcp_data(netif);
 800bfb6:	6a03      	ldr	r3, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800bfb8:	b113      	cbz	r3, 800bfc0 <dhcp_arp_reply+0x10>
 800bfba:	7a58      	ldrb	r0, [r3, #9]
 800bfbc:	2808      	cmp	r0, #8
 800bfbe:	d008      	beq.n	800bfd2 <dhcp_arp_reply+0x22>
}
 800bfc0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bfc2:	4b08      	ldr	r3, [pc, #32]	; (800bfe4 <dhcp_arp_reply+0x34>)
 800bfc4:	f240 327b 	movw	r2, #891	; 0x37b
 800bfc8:	4907      	ldr	r1, [pc, #28]	; (800bfe8 <dhcp_arp_reply+0x38>)
 800bfca:	4808      	ldr	r0, [pc, #32]	; (800bfec <dhcp_arp_reply+0x3c>)
 800bfcc:	f002 ff58 	bl	800ee80 <iprintf>
 800bfd0:	e7f6      	b.n	800bfc0 <dhcp_arp_reply+0x10>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800bfd2:	6809      	ldr	r1, [r1, #0]
 800bfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	d1f2      	bne.n	800bfc0 <dhcp_arp_reply+0x10>
      dhcp_decline(netif);
 800bfda:	4610      	mov	r0, r2
 800bfdc:	f7ff fae0 	bl	800b5a0 <dhcp_decline>
 800bfe0:	e7ee      	b.n	800bfc0 <dhcp_arp_reply+0x10>
 800bfe2:	bf00      	nop
 800bfe4:	08011ee4 	.word	0x08011ee4
 800bfe8:	0801209c 	.word	0x0801209c
 800bfec:	080101d8 	.word	0x080101d8

0800bff0 <dhcp_renew>:
{
 800bff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bff2:	b083      	sub	sp, #12
 800bff4:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bff6:	6a04      	ldr	r4, [r0, #32]
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800bff8:	2105      	movs	r1, #5
 800bffa:	4620      	mov	r0, r4
 800bffc:	f7fe ff84 	bl	800af08 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800c000:	2203      	movs	r2, #3
 800c002:	4621      	mov	r1, r4
 800c004:	4638      	mov	r0, r7
 800c006:	f7ff f86b 	bl	800b0e0 <dhcp_create_msg>
  if (result == ERR_OK) {
 800c00a:	4606      	mov	r6, r0
 800c00c:	b1c8      	cbz	r0, 800c042 <dhcp_renew+0x52>
  if (dhcp->tries < 255) {
 800c00e:	7aa3      	ldrb	r3, [r4, #10]
 800c010:	2bff      	cmp	r3, #255	; 0xff
 800c012:	d001      	beq.n	800c018 <dhcp_renew+0x28>
    dhcp->tries++;
 800c014:	3301      	adds	r3, #1
 800c016:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800c018:	7aa3      	ldrb	r3, [r4, #10]
 800c01a:	2b09      	cmp	r3, #9
 800c01c:	d840      	bhi.n	800c0a0 <dhcp_renew+0xb0>
 800c01e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800c022:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c026:	0113      	lsls	r3, r2, #4
 800c028:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800c02a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c02e:	4a1e      	ldr	r2, [pc, #120]	; (800c0a8 <dhcp_renew+0xb8>)
 800c030:	fb82 1203 	smull	r1, r2, r2, r3
 800c034:	17db      	asrs	r3, r3, #31
 800c036:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800c03a:	82e3      	strh	r3, [r4, #22]
}
 800c03c:	4630      	mov	r0, r6
 800c03e:	b003      	add	sp, #12
 800c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c042:	2202      	movs	r2, #2
 800c044:	2139      	movs	r1, #57	; 0x39
 800c046:	4620      	mov	r0, r4
 800c048:	f7fe ff8c 	bl	800af64 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800c04c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800c04e:	4620      	mov	r0, r4
 800c050:	f7fe ff62 	bl	800af18 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c054:	2203      	movs	r2, #3
 800c056:	2137      	movs	r1, #55	; 0x37
 800c058:	4620      	mov	r0, r4
 800c05a:	f7fe ff83 	bl	800af64 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c05e:	2500      	movs	r5, #0
 800c060:	e006      	b.n	800c070 <dhcp_renew+0x80>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800c062:	4b12      	ldr	r3, [pc, #72]	; (800c0ac <dhcp_renew+0xbc>)
 800c064:	5d59      	ldrb	r1, [r3, r5]
 800c066:	4620      	mov	r0, r4
 800c068:	f7fe ffa2 	bl	800afb0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c06c:	3501      	adds	r5, #1
 800c06e:	b2ed      	uxtb	r5, r5
 800c070:	2d02      	cmp	r5, #2
 800c072:	d9f6      	bls.n	800c062 <dhcp_renew+0x72>
    dhcp_option_trailer(dhcp);
 800c074:	4620      	mov	r0, r4
 800c076:	f7fe ffb7 	bl	800afe8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800c07a:	8aa1      	ldrh	r1, [r4, #20]
 800c07c:	31f0      	adds	r1, #240	; 0xf0
 800c07e:	b289      	uxth	r1, r1
 800c080:	68e0      	ldr	r0, [r4, #12]
 800c082:	f7fa fe3b 	bl	8006cfc <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800c086:	68e1      	ldr	r1, [r4, #12]
 800c088:	4b09      	ldr	r3, [pc, #36]	; (800c0b0 <dhcp_renew+0xc0>)
 800c08a:	6818      	ldr	r0, [r3, #0]
 800c08c:	9700      	str	r7, [sp, #0]
 800c08e:	2343      	movs	r3, #67	; 0x43
 800c090:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800c094:	f7fe fe8e 	bl	800adb4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff f957 	bl	800b34c <dhcp_delete_msg>
 800c09e:	e7b6      	b.n	800c00e <dhcp_renew+0x1e>
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800c0a0:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c0a4:	e7c1      	b.n	800c02a <dhcp_renew+0x3a>
 800c0a6:	bf00      	nop
 800c0a8:	10624dd3 	.word	0x10624dd3
 800c0ac:	08011df4 	.word	0x08011df4
 800c0b0:	2000491c 	.word	0x2000491c

0800c0b4 <dhcp_t1_timeout>:
{
 800c0b4:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c0b6:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c0b8:	7a63      	ldrb	r3, [r4, #9]
 800c0ba:	2b0a      	cmp	r3, #10
 800c0bc:	bf18      	it	ne
 800c0be:	2b01      	cmpne	r3, #1
 800c0c0:	d002      	beq.n	800c0c8 <dhcp_t1_timeout+0x14>
 800c0c2:	2b05      	cmp	r3, #5
 800c0c4:	d000      	beq.n	800c0c8 <dhcp_t1_timeout+0x14>
}
 800c0c6:	bd10      	pop	{r4, pc}
    dhcp_renew(netif);
 800c0c8:	f7ff ff92 	bl	800bff0 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800c0cc:	8b63      	ldrh	r3, [r4, #26]
 800c0ce:	8c22      	ldrh	r2, [r4, #32]
 800c0d0:	1a9b      	subs	r3, r3, r2
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	ddf7      	ble.n	800c0c6 <dhcp_t1_timeout+0x12>
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	db02      	blt.n	800c0e2 <dhcp_t1_timeout+0x2e>
 800c0dc:	1052      	asrs	r2, r2, #1
 800c0de:	83a2      	strh	r2, [r4, #28]
}
 800c0e0:	e7f1      	b.n	800c0c6 <dhcp_t1_timeout+0x12>
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	e7fa      	b.n	800c0dc <dhcp_t1_timeout+0x28>
	...

0800c0e8 <dhcp_stop>:
{
 800c0e8:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800c0ea:	b188      	cbz	r0, 800c110 <dhcp_stop+0x28>
  dhcp = netif_dhcp_data(netif);
 800c0ec:	6a04      	ldr	r4, [r0, #32]
  if (dhcp != NULL) {
 800c0ee:	b174      	cbz	r4, 800c10e <dhcp_stop+0x26>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800c0f0:	6863      	ldr	r3, [r4, #4]
 800c0f2:	b133      	cbz	r3, 800c102 <dhcp_stop+0x1a>
 800c0f4:	4b0d      	ldr	r3, [pc, #52]	; (800c12c <dhcp_stop+0x44>)
 800c0f6:	f240 524f 	movw	r2, #1359	; 0x54f
 800c0fa:	490d      	ldr	r1, [pc, #52]	; (800c130 <dhcp_stop+0x48>)
 800c0fc:	480d      	ldr	r0, [pc, #52]	; (800c134 <dhcp_stop+0x4c>)
 800c0fe:	f002 febf 	bl	800ee80 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800c102:	2100      	movs	r1, #0
 800c104:	4620      	mov	r0, r4
 800c106:	f7fe feff 	bl	800af08 <dhcp_set_state>
    if (dhcp->pcb_allocated != 0) {
 800c10a:	7a23      	ldrb	r3, [r4, #8]
 800c10c:	b943      	cbnz	r3, 800c120 <dhcp_stop+0x38>
}
 800c10e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800c110:	4b06      	ldr	r3, [pc, #24]	; (800c12c <dhcp_stop+0x44>)
 800c112:	f240 5242 	movw	r2, #1346	; 0x542
 800c116:	4908      	ldr	r1, [pc, #32]	; (800c138 <dhcp_stop+0x50>)
 800c118:	4806      	ldr	r0, [pc, #24]	; (800c134 <dhcp_stop+0x4c>)
 800c11a:	f002 feb1 	bl	800ee80 <iprintf>
 800c11e:	e7f6      	b.n	800c10e <dhcp_stop+0x26>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c120:	f7ff fc28 	bl	800b974 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800c124:	2300      	movs	r3, #0
 800c126:	7223      	strb	r3, [r4, #8]
 800c128:	e7f1      	b.n	800c10e <dhcp_stop+0x26>
 800c12a:	bf00      	nop
 800c12c:	08011ee4 	.word	0x08011ee4
 800c130:	08012088 	.word	0x08012088
 800c134:	080101d8 	.word	0x080101d8
 800c138:	0801211c 	.word	0x0801211c

0800c13c <dhcp_start>:
{
 800c13c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800c13e:	b388      	cbz	r0, 800c1a4 <dhcp_start+0x68>
 800c140:	4605      	mov	r5, r0
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800c142:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800c146:	f013 0f01 	tst.w	r3, #1
 800c14a:	d035      	beq.n	800c1b8 <dhcp_start+0x7c>
  dhcp = netif_dhcp_data(netif);
 800c14c:	6a04      	ldr	r4, [r0, #32]
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800c14e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800c150:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800c154:	d34a      	bcc.n	800c1ec <dhcp_start+0xb0>
  if (dhcp == NULL) {
 800c156:	2c00      	cmp	r4, #0
 800c158:	d038      	beq.n	800c1cc <dhcp_start+0x90>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800c15a:	68e3      	ldr	r3, [r4, #12]
 800c15c:	b133      	cbz	r3, 800c16c <dhcp_start+0x30>
 800c15e:	4b28      	ldr	r3, [pc, #160]	; (800c200 <dhcp_start+0xc4>)
 800c160:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800c164:	4927      	ldr	r1, [pc, #156]	; (800c204 <dhcp_start+0xc8>)
 800c166:	4828      	ldr	r0, [pc, #160]	; (800c208 <dhcp_start+0xcc>)
 800c168:	f002 fe8a 	bl	800ee80 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800c16c:	6863      	ldr	r3, [r4, #4]
 800c16e:	b133      	cbz	r3, 800c17e <dhcp_start+0x42>
 800c170:	4b23      	ldr	r3, [pc, #140]	; (800c200 <dhcp_start+0xc4>)
 800c172:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c176:	4925      	ldr	r1, [pc, #148]	; (800c20c <dhcp_start+0xd0>)
 800c178:	4823      	ldr	r0, [pc, #140]	; (800c208 <dhcp_start+0xcc>)
 800c17a:	f002 fe81 	bl	800ee80 <iprintf>
    if (dhcp->pcb_allocated != 0) {
 800c17e:	7a23      	ldrb	r3, [r4, #8]
 800c180:	bb5b      	cbnz	r3, 800c1da <dhcp_start+0x9e>
  memset(dhcp, 0, sizeof(struct dhcp));
 800c182:	2240      	movs	r2, #64	; 0x40
 800c184:	2100      	movs	r1, #0
 800c186:	4620      	mov	r0, r4
 800c188:	f002 fe72 	bl	800ee70 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800c18c:	f7ff fc16 	bl	800b9bc <dhcp_inc_pcb_refcount>
 800c190:	bb90      	cbnz	r0, 800c1f8 <dhcp_start+0xbc>
  dhcp->pcb_allocated = 1;
 800c192:	2301      	movs	r3, #1
 800c194:	7223      	strb	r3, [r4, #8]
  result = dhcp_discover(netif);
 800c196:	4628      	mov	r0, r5
 800c198:	f7ff f90a 	bl	800b3b0 <dhcp_discover>
  if (result != ERR_OK) {
 800c19c:	4603      	mov	r3, r0
 800c19e:	b9f8      	cbnz	r0, 800c1e0 <dhcp_start+0xa4>
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800c1a4:	4b16      	ldr	r3, [pc, #88]	; (800c200 <dhcp_start+0xc4>)
 800c1a6:	f240 22d6 	movw	r2, #726	; 0x2d6
 800c1aa:	4919      	ldr	r1, [pc, #100]	; (800c210 <dhcp_start+0xd4>)
 800c1ac:	4816      	ldr	r0, [pc, #88]	; (800c208 <dhcp_start+0xcc>)
 800c1ae:	f002 fe67 	bl	800ee80 <iprintf>
 800c1b2:	f06f 030f 	mvn.w	r3, #15
 800c1b6:	e7f3      	b.n	800c1a0 <dhcp_start+0x64>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800c1b8:	4b11      	ldr	r3, [pc, #68]	; (800c200 <dhcp_start+0xc4>)
 800c1ba:	f240 22d7 	movw	r2, #727	; 0x2d7
 800c1be:	4915      	ldr	r1, [pc, #84]	; (800c214 <dhcp_start+0xd8>)
 800c1c0:	4811      	ldr	r0, [pc, #68]	; (800c208 <dhcp_start+0xcc>)
 800c1c2:	f002 fe5d 	bl	800ee80 <iprintf>
 800c1c6:	f06f 030f 	mvn.w	r3, #15
 800c1ca:	e7e9      	b.n	800c1a0 <dhcp_start+0x64>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800c1cc:	2040      	movs	r0, #64	; 0x40
 800c1ce:	f7fa f93f 	bl	8006450 <mem_malloc>
    if (dhcp == NULL) {
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	b168      	cbz	r0, 800c1f2 <dhcp_start+0xb6>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800c1d6:	6228      	str	r0, [r5, #32]
 800c1d8:	e7d3      	b.n	800c182 <dhcp_start+0x46>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c1da:	f7ff fbcb 	bl	800b974 <dhcp_dec_pcb_refcount>
 800c1de:	e7d0      	b.n	800c182 <dhcp_start+0x46>
    dhcp_stop(netif);
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f7ff ff81 	bl	800c0e8 <dhcp_stop>
    return ERR_MEM;
 800c1e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1ea:	e7d9      	b.n	800c1a0 <dhcp_start+0x64>
    return ERR_MEM;
 800c1ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1f0:	e7d6      	b.n	800c1a0 <dhcp_start+0x64>
      return ERR_MEM;
 800c1f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1f6:	e7d3      	b.n	800c1a0 <dhcp_start+0x64>
    return ERR_MEM;
 800c1f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1fc:	e7d0      	b.n	800c1a0 <dhcp_start+0x64>
 800c1fe:	bf00      	nop
 800c200:	08011ee4 	.word	0x08011ee4
 800c204:	08012104 	.word	0x08012104
 800c208:	080101d8 	.word	0x080101d8
 800c20c:	08012088 	.word	0x08012088
 800c210:	0801209c 	.word	0x0801209c
 800c214:	080120e0 	.word	0x080120e0

0800c218 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800c218:	b178      	cbz	r0, 800c23a <dhcp_supplied_address+0x22>
 800c21a:	6a03      	ldr	r3, [r0, #32]
 800c21c:	b17b      	cbz	r3, 800c23e <dhcp_supplied_address+0x26>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800c21e:	7a5b      	ldrb	r3, [r3, #9]
 800c220:	2b05      	cmp	r3, #5
 800c222:	bf18      	it	ne
 800c224:	2b0a      	cmpne	r3, #10
 800c226:	d005      	beq.n	800c234 <dhcp_supplied_address+0x1c>
 800c228:	2b04      	cmp	r3, #4
 800c22a:	d001      	beq.n	800c230 <dhcp_supplied_address+0x18>
 800c22c:	2000      	movs	r0, #0
 800c22e:	e002      	b.n	800c236 <dhcp_supplied_address+0x1e>
 800c230:	2001      	movs	r0, #1
 800c232:	e000      	b.n	800c236 <dhcp_supplied_address+0x1e>
 800c234:	2001      	movs	r0, #1
 800c236:	b2c0      	uxtb	r0, r0
 800c238:	4770      	bx	lr
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
 800c23a:	2000      	movs	r0, #0
 800c23c:	4770      	bx	lr
 800c23e:	2000      	movs	r0, #0
}
 800c240:	4770      	bx	lr
	...

0800c244 <dhcp_release>:
{
 800c244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c246:	b085      	sub	sp, #20
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c248:	6a04      	ldr	r4, [r0, #32]
  if (dhcp == NULL) {
 800c24a:	2c00      	cmp	r4, #0
 800c24c:	d04b      	beq.n	800c2e6 <dhcp_release+0xa2>
 800c24e:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800c250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c252:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800c254:	f7ff ffe0 	bl	800c218 <dhcp_supplied_address>
 800c258:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800c25a:	2100      	movs	r1, #0
 800c25c:	4620      	mov	r0, r4
 800c25e:	f7fe fe53 	bl	800af08 <dhcp_set_state>
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800c262:	2300      	movs	r3, #0
 800c264:	6263      	str	r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800c266:	62a3      	str	r3, [r4, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c268:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c26a:	6323      	str	r3, [r4, #48]	; 0x30
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800c26c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c26e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c270:	6363      	str	r3, [r4, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800c272:	8463      	strh	r3, [r4, #34]	; 0x22
 800c274:	8423      	strh	r3, [r4, #32]
 800c276:	83e3      	strh	r3, [r4, #30]
 800c278:	83a3      	strh	r3, [r4, #28]
  if (!is_dhcp_supplied_address) {
 800c27a:	b91e      	cbnz	r6, 800c284 <dhcp_release+0x40>
    return ERR_OK;
 800c27c:	2600      	movs	r6, #0
}
 800c27e:	4630      	mov	r0, r6
 800c280:	b005      	add	sp, #20
 800c282:	bdf0      	pop	{r4, r5, r6, r7, pc}
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800c284:	2207      	movs	r2, #7
 800c286:	4621      	mov	r1, r4
 800c288:	4628      	mov	r0, r5
 800c28a:	f7fe ff29 	bl	800b0e0 <dhcp_create_msg>
  if (result == ERR_OK) {
 800c28e:	4606      	mov	r6, r0
 800c290:	b130      	cbz	r0, 800c2a0 <dhcp_release+0x5c>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c292:	4916      	ldr	r1, [pc, #88]	; (800c2ec <dhcp_release+0xa8>)
 800c294:	460b      	mov	r3, r1
 800c296:	460a      	mov	r2, r1
 800c298:	4628      	mov	r0, r5
 800c29a:	f7fa fa61 	bl	8006760 <netif_set_addr>
  return result;
 800c29e:	e7ee      	b.n	800c27e <dhcp_release+0x3a>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800c2a0:	2204      	movs	r2, #4
 800c2a2:	2136      	movs	r1, #54	; 0x36
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f7fe fe5d 	bl	800af64 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800c2aa:	af04      	add	r7, sp, #16
 800c2ac:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 800c2b0:	f7f9 ff13 	bl	80060da <lwip_htonl>
 800c2b4:	4601      	mov	r1, r0
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f7fe feda 	bl	800b070 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f7fe fe93 	bl	800afe8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800c2c2:	8aa1      	ldrh	r1, [r4, #20]
 800c2c4:	31f0      	adds	r1, #240	; 0xf0
 800c2c6:	b289      	uxth	r1, r1
 800c2c8:	68e0      	ldr	r0, [r4, #12]
 800c2ca:	f7fa fd17 	bl	8006cfc <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800c2ce:	68e1      	ldr	r1, [r4, #12]
 800c2d0:	4b07      	ldr	r3, [pc, #28]	; (800c2f0 <dhcp_release+0xac>)
 800c2d2:	6818      	ldr	r0, [r3, #0]
 800c2d4:	9500      	str	r5, [sp, #0]
 800c2d6:	2343      	movs	r3, #67	; 0x43
 800c2d8:	463a      	mov	r2, r7
 800c2da:	f7fe fd6b 	bl	800adb4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f7ff f834 	bl	800b34c <dhcp_delete_msg>
 800c2e4:	e7d5      	b.n	800c292 <dhcp_release+0x4e>
    return ERR_ARG;
 800c2e6:	f06f 060f 	mvn.w	r6, #15
 800c2ea:	e7c8      	b.n	800c27e <dhcp_release+0x3a>
 800c2ec:	08012444 	.word	0x08012444
 800c2f0:	2000491c 	.word	0x2000491c

0800c2f4 <dhcp_coarse_tmr>:
{
 800c2f4:	b510      	push	{r4, lr}
  struct netif *netif = netif_list;
 800c2f6:	4b17      	ldr	r3, [pc, #92]	; (800c354 <dhcp_coarse_tmr+0x60>)
 800c2f8:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 800c2fa:	e006      	b.n	800c30a <dhcp_coarse_tmr+0x16>
        dhcp_release(netif);
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f7ff ffa1 	bl	800c244 <dhcp_release>
        dhcp_discover(netif);
 800c302:	4620      	mov	r0, r4
 800c304:	f7ff f854 	bl	800b3b0 <dhcp_discover>
    netif = netif->next;
 800c308:	6824      	ldr	r4, [r4, #0]
  while (netif != NULL) {
 800c30a:	b314      	cbz	r4, 800c352 <dhcp_coarse_tmr+0x5e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800c30c:	6a23      	ldr	r3, [r4, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d0fa      	beq.n	800c308 <dhcp_coarse_tmr+0x14>
 800c312:	7a5a      	ldrb	r2, [r3, #9]
 800c314:	2a00      	cmp	r2, #0
 800c316:	d0f7      	beq.n	800c308 <dhcp_coarse_tmr+0x14>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800c318:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800c31a:	b129      	cbz	r1, 800c328 <dhcp_coarse_tmr+0x34>
 800c31c:	8c1a      	ldrh	r2, [r3, #32]
 800c31e:	3201      	adds	r2, #1
 800c320:	b292      	uxth	r2, r2
 800c322:	841a      	strh	r2, [r3, #32]
 800c324:	4291      	cmp	r1, r2
 800c326:	d0e9      	beq.n	800c2fc <dhcp_coarse_tmr+0x8>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800c328:	8bda      	ldrh	r2, [r3, #30]
 800c32a:	b11a      	cbz	r2, 800c334 <dhcp_coarse_tmr+0x40>
 800c32c:	1e51      	subs	r1, r2, #1
 800c32e:	83d9      	strh	r1, [r3, #30]
 800c330:	2a01      	cmp	r2, #1
 800c332:	d00a      	beq.n	800c34a <dhcp_coarse_tmr+0x56>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800c334:	8b9a      	ldrh	r2, [r3, #28]
 800c336:	2a00      	cmp	r2, #0
 800c338:	d0e6      	beq.n	800c308 <dhcp_coarse_tmr+0x14>
 800c33a:	1e51      	subs	r1, r2, #1
 800c33c:	8399      	strh	r1, [r3, #28]
 800c33e:	2a01      	cmp	r2, #1
 800c340:	d1e2      	bne.n	800c308 <dhcp_coarse_tmr+0x14>
        dhcp_t1_timeout(netif);
 800c342:	4620      	mov	r0, r4
 800c344:	f7ff feb6 	bl	800c0b4 <dhcp_t1_timeout>
 800c348:	e7de      	b.n	800c308 <dhcp_coarse_tmr+0x14>
        dhcp_t2_timeout(netif);
 800c34a:	4620      	mov	r0, r4
 800c34c:	f7ff f9cc 	bl	800b6e8 <dhcp_t2_timeout>
 800c350:	e7da      	b.n	800c308 <dhcp_coarse_tmr+0x14>
}
 800c352:	bd10      	pop	{r4, pc}
 800c354:	200081e0 	.word	0x200081e0

0800c358 <dhcp_timeout>:
{
 800c358:	b510      	push	{r4, lr}
 800c35a:	4604      	mov	r4, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c35c:	6a02      	ldr	r2, [r0, #32]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800c35e:	7a53      	ldrb	r3, [r2, #9]
 800c360:	2b06      	cmp	r3, #6
 800c362:	bf18      	it	ne
 800c364:	2b0c      	cmpne	r3, #12
 800c366:	d00b      	beq.n	800c380 <dhcp_timeout+0x28>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d00c      	beq.n	800c386 <dhcp_timeout+0x2e>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800c36c:	2b08      	cmp	r3, #8
 800c36e:	d016      	beq.n	800c39e <dhcp_timeout+0x46>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800c370:	2b03      	cmp	r3, #3
 800c372:	d107      	bne.n	800c384 <dhcp_timeout+0x2c>
    if (dhcp->tries < REBOOT_TRIES) {
 800c374:	7a93      	ldrb	r3, [r2, #10]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d91a      	bls.n	800c3b0 <dhcp_timeout+0x58>
      dhcp_discover(netif);
 800c37a:	f7ff f819 	bl	800b3b0 <dhcp_discover>
}
 800c37e:	e001      	b.n	800c384 <dhcp_timeout+0x2c>
    dhcp_discover(netif);
 800c380:	f7ff f816 	bl	800b3b0 <dhcp_discover>
}
 800c384:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 5) {
 800c386:	7a93      	ldrb	r3, [r2, #10]
 800c388:	2b05      	cmp	r3, #5
 800c38a:	d802      	bhi.n	800c392 <dhcp_timeout+0x3a>
      dhcp_select(netif);
 800c38c:	f7ff f876 	bl	800b47c <dhcp_select>
 800c390:	e7f8      	b.n	800c384 <dhcp_timeout+0x2c>
      dhcp_release(netif);
 800c392:	f7ff ff57 	bl	800c244 <dhcp_release>
      dhcp_discover(netif);
 800c396:	4620      	mov	r0, r4
 800c398:	f7ff f80a 	bl	800b3b0 <dhcp_discover>
 800c39c:	e7f2      	b.n	800c384 <dhcp_timeout+0x2c>
    if (dhcp->tries <= 1) {
 800c39e:	7a93      	ldrb	r3, [r2, #10]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d902      	bls.n	800c3aa <dhcp_timeout+0x52>
      dhcp_bind(netif);
 800c3a4:	f7ff fa40 	bl	800b828 <dhcp_bind>
 800c3a8:	e7ec      	b.n	800c384 <dhcp_timeout+0x2c>
      dhcp_check(netif);
 800c3aa:	f7ff fa27 	bl	800b7fc <dhcp_check>
 800c3ae:	e7e9      	b.n	800c384 <dhcp_timeout+0x2c>
      dhcp_reboot(netif);
 800c3b0:	f7ff f9b4 	bl	800b71c <dhcp_reboot>
 800c3b4:	e7e6      	b.n	800c384 <dhcp_timeout+0x2c>
	...

0800c3b8 <dhcp_fine_tmr>:
{
 800c3b8:	b510      	push	{r4, lr}
  struct netif *netif = netif_list;
 800c3ba:	4b0b      	ldr	r3, [pc, #44]	; (800c3e8 <dhcp_fine_tmr+0x30>)
 800c3bc:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 800c3be:	e002      	b.n	800c3c6 <dhcp_fine_tmr+0xe>
      else if (dhcp->request_timeout == 1) {
 800c3c0:	2a01      	cmp	r2, #1
 800c3c2:	d00a      	beq.n	800c3da <dhcp_fine_tmr+0x22>
    netif = netif->next;
 800c3c4:	6824      	ldr	r4, [r4, #0]
  while (netif != NULL) {
 800c3c6:	b174      	cbz	r4, 800c3e6 <dhcp_fine_tmr+0x2e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800c3c8:	6a23      	ldr	r3, [r4, #32]
    if (dhcp != NULL) {
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d0fa      	beq.n	800c3c4 <dhcp_fine_tmr+0xc>
      if (dhcp->request_timeout > 1) {
 800c3ce:	8ada      	ldrh	r2, [r3, #22]
 800c3d0:	2a01      	cmp	r2, #1
 800c3d2:	d9f5      	bls.n	800c3c0 <dhcp_fine_tmr+0x8>
        dhcp->request_timeout--;
 800c3d4:	3a01      	subs	r2, #1
 800c3d6:	82da      	strh	r2, [r3, #22]
 800c3d8:	e7f4      	b.n	800c3c4 <dhcp_fine_tmr+0xc>
        dhcp->request_timeout--;
 800c3da:	3a01      	subs	r2, #1
 800c3dc:	82da      	strh	r2, [r3, #22]
        dhcp_timeout(netif);
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f7ff ffba 	bl	800c358 <dhcp_timeout>
 800c3e4:	e7ee      	b.n	800c3c4 <dhcp_fine_tmr+0xc>
}
 800c3e6:	bd10      	pop	{r4, pc}
 800c3e8:	200081e0 	.word	0x200081e0

0800c3ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c3ec:	b510      	push	{r4, lr}
 800c3ee:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c3f0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800c3f4:	00d3      	lsls	r3, r2, #3
 800c3f6:	4a09      	ldr	r2, [pc, #36]	; (800c41c <etharp_free_entry+0x30>)
 800c3f8:	58d0      	ldr	r0, [r2, r3]
 800c3fa:	b138      	cbz	r0, 800c40c <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c3fc:	f7fa fb2c 	bl	8006a58 <pbuf_free>
    arp_table[i].q = NULL;
 800c400:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800c404:	00d3      	lsls	r3, r2, #3
 800c406:	4a05      	ldr	r2, [pc, #20]	; (800c41c <etharp_free_entry+0x30>)
 800c408:	2100      	movs	r1, #0
 800c40a:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c40c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800c410:	00e2      	lsls	r2, r4, #3
 800c412:	4b02      	ldr	r3, [pc, #8]	; (800c41c <etharp_free_entry+0x30>)
 800c414:	4413      	add	r3, r2
 800c416:	2200      	movs	r2, #0
 800c418:	751a      	strb	r2, [r3, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c41a:	bd10      	pop	{r4, pc}
 800c41c:	20004928 	.word	0x20004928

0800c420 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800c420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c424:	f04f 0c00 	mov.w	ip, #0
 800c428:	46e3      	mov	fp, ip
 800c42a:	46e1      	mov	r9, ip
  s8_t old_queue = ARP_TABLE_SIZE;
 800c42c:	f04f 0e0a 	mov.w	lr, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c430:	4663      	mov	r3, ip
  s8_t empty = ARP_TABLE_SIZE;
 800c432:	4675      	mov	r5, lr
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c434:	46f0      	mov	r8, lr
 800c436:	46f2      	mov	sl, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c438:	e01b      	b.n	800c472 <etharp_find_entry+0x52>
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 800c43a:	b1c2      	cbz	r2, 800c46e <etharp_find_entry+0x4e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c43c:	b140      	cbz	r0, 800c450 <etharp_find_entry+0x30>
 800c43e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800c442:	00f7      	lsls	r7, r6, #3
 800c444:	4e59      	ldr	r6, [pc, #356]	; (800c5ac <etharp_find_entry+0x18c>)
 800c446:	443e      	add	r6, r7
 800c448:	6876      	ldr	r6, [r6, #4]
 800c44a:	6807      	ldr	r7, [r0, #0]
 800c44c:	42b7      	cmp	r7, r6
 800c44e:	d01f      	beq.n	800c490 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c450:	2a01      	cmp	r2, #1
 800c452:	d01f      	beq.n	800c494 <etharp_find_entry+0x74>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c454:	2a01      	cmp	r2, #1
 800c456:	d90a      	bls.n	800c46e <etharp_find_entry+0x4e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c458:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800c45c:	00e6      	lsls	r6, r4, #3
 800c45e:	4a53      	ldr	r2, [pc, #332]	; (800c5ac <etharp_find_entry+0x18c>)
 800c460:	4432      	add	r2, r6
 800c462:	8a52      	ldrh	r2, [r2, #18]
 800c464:	4562      	cmp	r2, ip
 800c466:	d302      	bcc.n	800c46e <etharp_find_entry+0x4e>
            old_stable = i;
 800c468:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 800c46c:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c46e:	3301      	adds	r3, #1
 800c470:	b2db      	uxtb	r3, r3
 800c472:	2b09      	cmp	r3, #9
 800c474:	d82c      	bhi.n	800c4d0 <etharp_find_entry+0xb0>
    u8_t state = arp_table[i].state;
 800c476:	461c      	mov	r4, r3
 800c478:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800c47c:	00d6      	lsls	r6, r2, #3
 800c47e:	4a4b      	ldr	r2, [pc, #300]	; (800c5ac <etharp_find_entry+0x18c>)
 800c480:	4432      	add	r2, r6
 800c482:	7d12      	ldrb	r2, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c484:	2d0a      	cmp	r5, #10
 800c486:	bf08      	it	eq
 800c488:	2a00      	cmpeq	r2, #0
 800c48a:	d1d6      	bne.n	800c43a <etharp_find_entry+0x1a>
      empty = i;
 800c48c:	b25d      	sxtb	r5, r3
 800c48e:	e7ee      	b.n	800c46e <etharp_find_entry+0x4e>
        return i;
 800c490:	b258      	sxtb	r0, r3
 800c492:	e041      	b.n	800c518 <etharp_find_entry+0xf8>
        if (arp_table[i].q != NULL) {
 800c494:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800c498:	00f2      	lsls	r2, r6, #3
 800c49a:	4e44      	ldr	r6, [pc, #272]	; (800c5ac <etharp_find_entry+0x18c>)
 800c49c:	58b2      	ldr	r2, [r6, r2]
 800c49e:	b15a      	cbz	r2, 800c4b8 <etharp_find_entry+0x98>
          if (arp_table[i].ctime >= age_queue) {
 800c4a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800c4a4:	00e6      	lsls	r6, r4, #3
 800c4a6:	4a41      	ldr	r2, [pc, #260]	; (800c5ac <etharp_find_entry+0x18c>)
 800c4a8:	4432      	add	r2, r6
 800c4aa:	8a52      	ldrh	r2, [r2, #18]
 800c4ac:	454a      	cmp	r2, r9
 800c4ae:	d3de      	bcc.n	800c46e <etharp_find_entry+0x4e>
            old_queue = i;
 800c4b0:	fa4f fe83 	sxtb.w	lr, r3
            age_queue = arp_table[i].ctime;
 800c4b4:	4691      	mov	r9, r2
 800c4b6:	e7da      	b.n	800c46e <etharp_find_entry+0x4e>
          if (arp_table[i].ctime >= age_pending) {
 800c4b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800c4bc:	00e6      	lsls	r6, r4, #3
 800c4be:	4a3b      	ldr	r2, [pc, #236]	; (800c5ac <etharp_find_entry+0x18c>)
 800c4c0:	4432      	add	r2, r6
 800c4c2:	8a52      	ldrh	r2, [r2, #18]
 800c4c4:	455a      	cmp	r2, fp
 800c4c6:	d3d2      	bcc.n	800c46e <etharp_find_entry+0x4e>
            old_pending = i;
 800c4c8:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 800c4cc:	4693      	mov	fp, r2
 800c4ce:	e7ce      	b.n	800c46e <etharp_find_entry+0x4e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c4d0:	f011 0f02 	tst.w	r1, #2
 800c4d4:	d164      	bne.n	800c5a0 <etharp_find_entry+0x180>
 800c4d6:	2d0a      	cmp	r5, #10
 800c4d8:	d020      	beq.n	800c51c <etharp_find_entry+0xfc>
 800c4da:	4606      	mov	r6, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c4dc:	2d09      	cmp	r5, #9
 800c4de:	dc23      	bgt.n	800c528 <etharp_find_entry+0x108>
    i = empty;
 800c4e0:	b2ed      	uxtb	r5, r5
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c4e2:	2d09      	cmp	r5, #9
 800c4e4:	d84c      	bhi.n	800c580 <etharp_find_entry+0x160>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c4e6:	462c      	mov	r4, r5
 800c4e8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800c4ec:	00da      	lsls	r2, r3, #3
 800c4ee:	4b2f      	ldr	r3, [pc, #188]	; (800c5ac <etharp_find_entry+0x18c>)
 800c4f0:	4413      	add	r3, r2
 800c4f2:	7d1b      	ldrb	r3, [r3, #20]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d14b      	bne.n	800c590 <etharp_find_entry+0x170>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c4f8:	b136      	cbz	r6, 800c508 <etharp_find_entry+0xe8>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c4fa:	6831      	ldr	r1, [r6, #0]
 800c4fc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c500:	00da      	lsls	r2, r3, #3
 800c502:	4b2a      	ldr	r3, [pc, #168]	; (800c5ac <etharp_find_entry+0x18c>)
 800c504:	4413      	add	r3, r2
 800c506:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800c508:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800c50c:	00e2      	lsls	r2, r4, #3
 800c50e:	4b27      	ldr	r3, [pc, #156]	; (800c5ac <etharp_find_entry+0x18c>)
 800c510:	4413      	add	r3, r2
 800c512:	2200      	movs	r2, #0
 800c514:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800c516:	b268      	sxtb	r0, r5
}
 800c518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c51c:	f011 0f01 	tst.w	r1, #1
 800c520:	d1db      	bne.n	800c4da <etharp_find_entry+0xba>
    return (s8_t)ERR_MEM;
 800c522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c526:	e7f7      	b.n	800c518 <etharp_find_entry+0xf8>
    if (old_stable < ARP_TABLE_SIZE) {
 800c528:	f1b8 0f09 	cmp.w	r8, #9
 800c52c:	dc14      	bgt.n	800c558 <etharp_find_entry+0x138>
      i = old_stable;
 800c52e:	fa5f f588 	uxtb.w	r5, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c532:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800c536:	00d3      	lsls	r3, r2, #3
 800c538:	4a1c      	ldr	r2, [pc, #112]	; (800c5ac <etharp_find_entry+0x18c>)
 800c53a:	58d3      	ldr	r3, [r2, r3]
 800c53c:	b133      	cbz	r3, 800c54c <etharp_find_entry+0x12c>
 800c53e:	4b1c      	ldr	r3, [pc, #112]	; (800c5b0 <etharp_find_entry+0x190>)
 800c540:	f240 126f 	movw	r2, #367	; 0x16f
 800c544:	491b      	ldr	r1, [pc, #108]	; (800c5b4 <etharp_find_entry+0x194>)
 800c546:	481c      	ldr	r0, [pc, #112]	; (800c5b8 <etharp_find_entry+0x198>)
 800c548:	f002 fc9a 	bl	800ee80 <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c54c:	2d09      	cmp	r5, #9
 800c54e:	d80f      	bhi.n	800c570 <etharp_find_entry+0x150>
    etharp_free_entry(i);
 800c550:	4628      	mov	r0, r5
 800c552:	f7ff ff4b 	bl	800c3ec <etharp_free_entry>
 800c556:	e7c4      	b.n	800c4e2 <etharp_find_entry+0xc2>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c558:	f1ba 0f09 	cmp.w	sl, #9
 800c55c:	dc02      	bgt.n	800c564 <etharp_find_entry+0x144>
      i = old_pending;
 800c55e:	fa5f f58a 	uxtb.w	r5, sl
 800c562:	e7f3      	b.n	800c54c <etharp_find_entry+0x12c>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c564:	f1be 0f09 	cmp.w	lr, #9
 800c568:	dc1d      	bgt.n	800c5a6 <etharp_find_entry+0x186>
      i = old_queue;
 800c56a:	fa5f f58e 	uxtb.w	r5, lr
 800c56e:	e7ed      	b.n	800c54c <etharp_find_entry+0x12c>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c570:	4b0f      	ldr	r3, [pc, #60]	; (800c5b0 <etharp_find_entry+0x190>)
 800c572:	f240 1281 	movw	r2, #385	; 0x181
 800c576:	4911      	ldr	r1, [pc, #68]	; (800c5bc <etharp_find_entry+0x19c>)
 800c578:	480f      	ldr	r0, [pc, #60]	; (800c5b8 <etharp_find_entry+0x198>)
 800c57a:	f002 fc81 	bl	800ee80 <iprintf>
 800c57e:	e7e7      	b.n	800c550 <etharp_find_entry+0x130>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <etharp_find_entry+0x190>)
 800c582:	f240 1285 	movw	r2, #389	; 0x185
 800c586:	490d      	ldr	r1, [pc, #52]	; (800c5bc <etharp_find_entry+0x19c>)
 800c588:	480b      	ldr	r0, [pc, #44]	; (800c5b8 <etharp_find_entry+0x198>)
 800c58a:	f002 fc79 	bl	800ee80 <iprintf>
 800c58e:	e7aa      	b.n	800c4e6 <etharp_find_entry+0xc6>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c590:	4b07      	ldr	r3, [pc, #28]	; (800c5b0 <etharp_find_entry+0x190>)
 800c592:	f240 1287 	movw	r2, #391	; 0x187
 800c596:	490a      	ldr	r1, [pc, #40]	; (800c5c0 <etharp_find_entry+0x1a0>)
 800c598:	4807      	ldr	r0, [pc, #28]	; (800c5b8 <etharp_find_entry+0x198>)
 800c59a:	f002 fc71 	bl	800ee80 <iprintf>
 800c59e:	e7ab      	b.n	800c4f8 <etharp_find_entry+0xd8>
    return (s8_t)ERR_MEM;
 800c5a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5a4:	e7b8      	b.n	800c518 <etharp_find_entry+0xf8>
      return (s8_t)ERR_MEM;
 800c5a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5aa:	e7b5      	b.n	800c518 <etharp_find_entry+0xf8>
 800c5ac:	20004928 	.word	0x20004928
 800c5b0:	08012138 	.word	0x08012138
 800c5b4:	08012170 	.word	0x08012170
 800c5b8:	080101d8 	.word	0x080101d8
 800c5bc:	08012188 	.word	0x08012188
 800c5c0:	0801219c 	.word	0x0801219c

0800c5c4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	4616      	mov	r6, r2
 800c5ce:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c5d0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800c5d4:	2b06      	cmp	r3, #6
 800c5d6:	d13b      	bne.n	800c650 <etharp_update_arp_entry+0x8c>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c5d8:	2d00      	cmp	r5, #0
 800c5da:	d041      	beq.n	800c660 <etharp_update_arp_entry+0x9c>
 800c5dc:	6828      	ldr	r0, [r5, #0]
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d041      	beq.n	800c666 <etharp_update_arp_entry+0xa2>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	f000 fe63 	bl	800d2ae <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d13f      	bne.n	800c66c <etharp_update_arp_entry+0xa8>
      ip4_addr_ismulticast(ipaddr)) {
 800c5ec:	682b      	ldr	r3, [r5, #0]
 800c5ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c5f2:	2be0      	cmp	r3, #224	; 0xe0
 800c5f4:	d03d      	beq.n	800c672 <etharp_update_arp_entry+0xae>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c5f6:	4622      	mov	r2, r4
 800c5f8:	4639      	mov	r1, r7
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f7ff ff10 	bl	800c420 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800c600:	2800      	cmp	r0, #0
 800c602:	db23      	blt.n	800c64c <etharp_update_arp_entry+0x88>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c604:	4d1d      	ldr	r5, [pc, #116]	; (800c67c <etharp_update_arp_entry+0xb8>)
 800c606:	0042      	lsls	r2, r0, #1
 800c608:	1813      	adds	r3, r2, r0
 800c60a:	00d9      	lsls	r1, r3, #3
 800c60c:	186f      	adds	r7, r5, r1
 800c60e:	2302      	movs	r3, #2
 800c610:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c612:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800c614:	460b      	mov	r3, r1
 800c616:	3308      	adds	r3, #8
 800c618:	442b      	add	r3, r5
 800c61a:	6832      	ldr	r2, [r6, #0]
 800c61c:	605a      	str	r2, [r3, #4]
 800c61e:	88b2      	ldrh	r2, [r6, #4]
 800c620:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c622:	2300      	movs	r3, #0
 800c624:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c626:	586d      	ldr	r5, [r5, r1]
 800c628:	b335      	cbz	r5, 800c678 <etharp_update_arp_entry+0xb4>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800c62a:	2700      	movs	r7, #0
 800c62c:	4a13      	ldr	r2, [pc, #76]	; (800c67c <etharp_update_arp_entry+0xb8>)
 800c62e:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	4633      	mov	r3, r6
 800c638:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800c63c:	4629      	mov	r1, r5
 800c63e:	4620      	mov	r0, r4
 800c640:	f001 fa9c 	bl	800db7c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c644:	4628      	mov	r0, r5
 800c646:	f7fa fa07 	bl	8006a58 <pbuf_free>
  }
  return ERR_OK;
 800c64a:	4638      	mov	r0, r7
}
 800c64c:	b003      	add	sp, #12
 800c64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c650:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <etharp_update_arp_entry+0xbc>)
 800c652:	f240 12ab 	movw	r2, #427	; 0x1ab
 800c656:	490b      	ldr	r1, [pc, #44]	; (800c684 <etharp_update_arp_entry+0xc0>)
 800c658:	480b      	ldr	r0, [pc, #44]	; (800c688 <etharp_update_arp_entry+0xc4>)
 800c65a:	f002 fc11 	bl	800ee80 <iprintf>
 800c65e:	e7bb      	b.n	800c5d8 <etharp_update_arp_entry+0x14>
    return ERR_ARG;
 800c660:	f06f 000f 	mvn.w	r0, #15
 800c664:	e7f2      	b.n	800c64c <etharp_update_arp_entry+0x88>
 800c666:	f06f 000f 	mvn.w	r0, #15
 800c66a:	e7ef      	b.n	800c64c <etharp_update_arp_entry+0x88>
 800c66c:	f06f 000f 	mvn.w	r0, #15
 800c670:	e7ec      	b.n	800c64c <etharp_update_arp_entry+0x88>
 800c672:	f06f 000f 	mvn.w	r0, #15
 800c676:	e7e9      	b.n	800c64c <etharp_update_arp_entry+0x88>
  return ERR_OK;
 800c678:	2000      	movs	r0, #0
 800c67a:	e7e7      	b.n	800c64c <etharp_update_arp_entry+0x88>
 800c67c:	20004928 	.word	0x20004928
 800c680:	08012138 	.word	0x08012138
 800c684:	080122e0 	.word	0x080122e0
 800c688:	080101d8 	.word	0x080101d8

0800c68c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	b082      	sub	sp, #8
 800c692:	4689      	mov	r9, r1
 800c694:	4692      	mov	sl, r2
 800c696:	4698      	mov	r8, r3
 800c698:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c69a:	4607      	mov	r7, r0
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d041      	beq.n	800c724 <etharp_raw+0x98>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	211c      	movs	r1, #28
 800c6a4:	2002      	movs	r0, #2
 800c6a6:	f7fa fa41 	bl	8006b2c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d051      	beq.n	800c754 <etharp_raw+0xc8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c6b0:	8943      	ldrh	r3, [r0, #10]
 800c6b2:	2b1b      	cmp	r3, #27
 800c6b4:	d93e      	bls.n	800c734 <etharp_raw+0xa8>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c6b6:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c6b8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800c6bc:	f7f9 fd0a 	bl	80060d4 <lwip_htons>
 800c6c0:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c6c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6c6:	2b06      	cmp	r3, #6
 800c6c8:	d13c      	bne.n	800c744 <etharp_raw+0xb8>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800c6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c6ce:	60a3      	str	r3, [r4, #8]
 800c6d0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800c6d4:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800c6d6:	682b      	ldr	r3, [r5, #0]
 800c6d8:	f8c4 3012 	str.w	r3, [r4, #18]
 800c6dc:	88ab      	ldrh	r3, [r5, #4]
 800c6de:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800c6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800c6e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c6ee:	2500      	movs	r5, #0
 800c6f0:	7025      	strb	r5, [r4, #0]
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c6f6:	2308      	movs	r3, #8
 800c6f8:	70a3      	strb	r3, [r4, #2]
 800c6fa:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c6fc:	2306      	movs	r3, #6
 800c6fe:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c700:	2304      	movs	r3, #4
 800c702:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c704:	f640 0306 	movw	r3, #2054	; 0x806
 800c708:	9300      	str	r3, [sp, #0]
 800c70a:	4653      	mov	r3, sl
 800c70c:	464a      	mov	r2, r9
 800c70e:	4631      	mov	r1, r6
 800c710:	4638      	mov	r0, r7
 800c712:	f001 fa33 	bl	800db7c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c716:	4630      	mov	r0, r6
 800c718:	f7fa f99e 	bl	8006a58 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800c71c:	4628      	mov	r0, r5
}
 800c71e:	b002      	add	sp, #8
 800c720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c724:	4b0d      	ldr	r3, [pc, #52]	; (800c75c <etharp_raw+0xd0>)
 800c726:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800c72a:	490d      	ldr	r1, [pc, #52]	; (800c760 <etharp_raw+0xd4>)
 800c72c:	480d      	ldr	r0, [pc, #52]	; (800c764 <etharp_raw+0xd8>)
 800c72e:	f002 fba7 	bl	800ee80 <iprintf>
 800c732:	e7b5      	b.n	800c6a0 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c734:	4b09      	ldr	r3, [pc, #36]	; (800c75c <etharp_raw+0xd0>)
 800c736:	f240 4264 	movw	r2, #1124	; 0x464
 800c73a:	490b      	ldr	r1, [pc, #44]	; (800c768 <etharp_raw+0xdc>)
 800c73c:	4809      	ldr	r0, [pc, #36]	; (800c764 <etharp_raw+0xd8>)
 800c73e:	f002 fb9f 	bl	800ee80 <iprintf>
 800c742:	e7b8      	b.n	800c6b6 <etharp_raw+0x2a>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c744:	4b05      	ldr	r3, [pc, #20]	; (800c75c <etharp_raw+0xd0>)
 800c746:	f240 426b 	movw	r2, #1131	; 0x46b
 800c74a:	4908      	ldr	r1, [pc, #32]	; (800c76c <etharp_raw+0xe0>)
 800c74c:	4805      	ldr	r0, [pc, #20]	; (800c764 <etharp_raw+0xd8>)
 800c74e:	f002 fb97 	bl	800ee80 <iprintf>
 800c752:	e7ba      	b.n	800c6ca <etharp_raw+0x3e>
    return ERR_MEM;
 800c754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c758:	e7e1      	b.n	800c71e <etharp_raw+0x92>
 800c75a:	bf00      	nop
 800c75c:	08012138 	.word	0x08012138
 800c760:	0801209c 	.word	0x0801209c
 800c764:	080101d8 	.word	0x080101d8
 800c768:	08012268 	.word	0x08012268
 800c76c:	0801229c 	.word	0x0801229c

0800c770 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c770:	b530      	push	{r4, r5, lr}
 800c772:	b085      	sub	sp, #20
 800c774:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c776:	f100 0429 	add.w	r4, r0, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c77a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c77c:	2501      	movs	r5, #1
 800c77e:	9503      	str	r5, [sp, #12]
 800c780:	9102      	str	r1, [sp, #8]
 800c782:	4904      	ldr	r1, [pc, #16]	; (800c794 <etharp_request_dst+0x24>)
 800c784:	9101      	str	r1, [sp, #4]
 800c786:	9300      	str	r3, [sp, #0]
 800c788:	4623      	mov	r3, r4
 800c78a:	4621      	mov	r1, r4
 800c78c:	f7ff ff7e 	bl	800c68c <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800c790:	b005      	add	sp, #20
 800c792:	bd30      	pop	{r4, r5, pc}
 800c794:	08012670 	.word	0x08012670

0800c798 <etharp_cleanup_netif>:
{
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c79c:	2400      	movs	r4, #0
 800c79e:	e001      	b.n	800c7a4 <etharp_cleanup_netif+0xc>
 800c7a0:	3401      	adds	r4, #1
 800c7a2:	b2e4      	uxtb	r4, r4
 800c7a4:	2c09      	cmp	r4, #9
 800c7a6:	d810      	bhi.n	800c7ca <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c7ae:	00da      	lsls	r2, r3, #3
 800c7b0:	4b06      	ldr	r3, [pc, #24]	; (800c7cc <etharp_cleanup_netif+0x34>)
 800c7b2:	4413      	add	r3, r2
 800c7b4:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0f2      	beq.n	800c7a0 <etharp_cleanup_netif+0x8>
 800c7ba:	4b04      	ldr	r3, [pc, #16]	; (800c7cc <etharp_cleanup_netif+0x34>)
 800c7bc:	4413      	add	r3, r2
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	42ab      	cmp	r3, r5
 800c7c2:	d1ed      	bne.n	800c7a0 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800c7c4:	f7ff fe12 	bl	800c3ec <etharp_free_entry>
 800c7c8:	e7ea      	b.n	800c7a0 <etharp_cleanup_netif+0x8>
}
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	20004928 	.word	0x20004928

0800c7d0 <etharp_input>:
{
 800c7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d4:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c7d6:	b179      	cbz	r1, 800c7f8 <etharp_input+0x28>
 800c7d8:	4604      	mov	r4, r0
 800c7da:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800c7dc:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c7de:	882b      	ldrh	r3, [r5, #0]
 800c7e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7e4:	d102      	bne.n	800c7ec <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c7e6:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c7e8:	2b06      	cmp	r3, #6
 800c7ea:	d00d      	beq.n	800c808 <etharp_input+0x38>
    pbuf_free(p);
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7fa f933 	bl	8006a58 <pbuf_free>
}
 800c7f2:	b006      	add	sp, #24
 800c7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c7f8:	4b24      	ldr	r3, [pc, #144]	; (800c88c <etharp_input+0xbc>)
 800c7fa:	f44f 7222 	mov.w	r2, #648	; 0x288
 800c7fe:	4924      	ldr	r1, [pc, #144]	; (800c890 <etharp_input+0xc0>)
 800c800:	4824      	ldr	r0, [pc, #144]	; (800c894 <etharp_input+0xc4>)
 800c802:	f002 fb3d 	bl	800ee80 <iprintf>
 800c806:	e7f4      	b.n	800c7f2 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c808:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c80a:	2b04      	cmp	r3, #4
 800c80c:	d1ee      	bne.n	800c7ec <etharp_input+0x1c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c80e:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c810:	2b08      	cmp	r3, #8
 800c812:	d1eb      	bne.n	800c7ec <etharp_input+0x1c>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800c814:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800c818:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800c81a:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c81c:	684b      	ldr	r3, [r1, #4]
 800c81e:	b99b      	cbnz	r3, 800c848 <etharp_input+0x78>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c820:	f105 0808 	add.w	r8, r5, #8
    for_us = 0;
 800c824:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c826:	2302      	movs	r3, #2
 800c828:	4642      	mov	r2, r8
 800c82a:	a905      	add	r1, sp, #20
 800c82c:	4630      	mov	r0, r6
 800c82e:	f7ff fec9 	bl	800c5c4 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 800c832:	88eb      	ldrh	r3, [r5, #6]
 800c834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c838:	d011      	beq.n	800c85e <etharp_input+0x8e>
 800c83a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c83e:	d020      	beq.n	800c882 <etharp_input+0xb2>
  pbuf_free(p);
 800c840:	4620      	mov	r0, r4
 800c842:	f7fa f909 	bl	8006a58 <pbuf_free>
 800c846:	e7d4      	b.n	800c7f2 <etharp_input+0x22>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c848:	42bb      	cmp	r3, r7
 800c84a:	bf14      	ite	ne
 800c84c:	2700      	movne	r7, #0
 800c84e:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c850:	f105 0808 	add.w	r8, r5, #8
 800c854:	b10f      	cbz	r7, 800c85a <etharp_input+0x8a>
 800c856:	2301      	movs	r3, #1
 800c858:	e7e6      	b.n	800c828 <etharp_input+0x58>
 800c85a:	2302      	movs	r3, #2
 800c85c:	e7e4      	b.n	800c828 <etharp_input+0x58>
    if (for_us) {
 800c85e:	2f00      	cmp	r7, #0
 800c860:	d0ee      	beq.n	800c840 <etharp_input+0x70>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c862:	f106 0129 	add.w	r1, r6, #41	; 0x29
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c866:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 800c868:	2202      	movs	r2, #2
 800c86a:	9203      	str	r2, [sp, #12]
 800c86c:	aa05      	add	r2, sp, #20
 800c86e:	9202      	str	r2, [sp, #8]
 800c870:	f8cd 8004 	str.w	r8, [sp, #4]
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	460b      	mov	r3, r1
 800c878:	4642      	mov	r2, r8
 800c87a:	4630      	mov	r0, r6
 800c87c:	f7ff ff06 	bl	800c68c <etharp_raw>
 800c880:	e7de      	b.n	800c840 <etharp_input+0x70>
    dhcp_arp_reply(netif, &sipaddr);
 800c882:	a905      	add	r1, sp, #20
 800c884:	4630      	mov	r0, r6
 800c886:	f7ff fb93 	bl	800bfb0 <dhcp_arp_reply>
    break;
 800c88a:	e7d9      	b.n	800c840 <etharp_input+0x70>
 800c88c:	08012138 	.word	0x08012138
 800c890:	0801209c 	.word	0x0801209c
 800c894:	080101d8 	.word	0x080101d8

0800c898 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c898:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c89a:	4a02      	ldr	r2, [pc, #8]	; (800c8a4 <etharp_request+0xc>)
 800c89c:	f7ff ff68 	bl	800c770 <etharp_request_dst>
}
 800c8a0:	bd08      	pop	{r3, pc}
 800c8a2:	bf00      	nop
 800c8a4:	080125fc 	.word	0x080125fc

0800c8a8 <etharp_tmr>:
{
 800c8a8:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8aa:	2400      	movs	r4, #0
 800c8ac:	e005      	b.n	800c8ba <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c8ae:	2b04      	cmp	r3, #4
 800c8b0:	d91d      	bls.n	800c8ee <etharp_tmr+0x46>
        etharp_free_entry(i);
 800c8b2:	f7ff fd9b 	bl	800c3ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8b6:	3401      	adds	r4, #1
 800c8b8:	b2e4      	uxtb	r4, r4
 800c8ba:	2c09      	cmp	r4, #9
 800c8bc:	d838      	bhi.n	800c930 <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 800c8be:	4620      	mov	r0, r4
 800c8c0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c8c4:	00da      	lsls	r2, r3, #3
 800c8c6:	4b1b      	ldr	r3, [pc, #108]	; (800c934 <etharp_tmr+0x8c>)
 800c8c8:	4413      	add	r3, r2
 800c8ca:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d0f2      	beq.n	800c8b6 <etharp_tmr+0xe>
      arp_table[i].ctime++;
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	4a18      	ldr	r2, [pc, #96]	; (800c934 <etharp_tmr+0x8c>)
 800c8d4:	440a      	add	r2, r1
 800c8d6:	8a53      	ldrh	r3, [r2, #18]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c8de:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c8e2:	d2e6      	bcs.n	800c8b2 <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c8e4:	4a13      	ldr	r2, [pc, #76]	; (800c934 <etharp_tmr+0x8c>)
 800c8e6:	440a      	add	r2, r1
 800c8e8:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c8ea:	2a01      	cmp	r2, #1
 800c8ec:	d0df      	beq.n	800c8ae <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c8ee:	2a03      	cmp	r2, #3
 800c8f0:	d00e      	beq.n	800c910 <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c8f2:	2a04      	cmp	r2, #4
 800c8f4:	d014      	beq.n	800c920 <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c8f6:	2a01      	cmp	r2, #1
 800c8f8:	d1dd      	bne.n	800c8b6 <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c8fa:	4a0e      	ldr	r2, [pc, #56]	; (800c934 <etharp_tmr+0x8c>)
 800c8fc:	0043      	lsls	r3, r0, #1
 800c8fe:	181d      	adds	r5, r3, r0
 800c900:	00e9      	lsls	r1, r5, #3
 800c902:	4411      	add	r1, r2
 800c904:	460a      	mov	r2, r1
 800c906:	3104      	adds	r1, #4
 800c908:	6890      	ldr	r0, [r2, #8]
 800c90a:	f7ff ffc5 	bl	800c898 <etharp_request>
 800c90e:	e7d2      	b.n	800c8b6 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c910:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c914:	00c2      	lsls	r2, r0, #3
 800c916:	4b07      	ldr	r3, [pc, #28]	; (800c934 <etharp_tmr+0x8c>)
 800c918:	4413      	add	r3, r2
 800c91a:	2204      	movs	r2, #4
 800c91c:	751a      	strb	r2, [r3, #20]
 800c91e:	e7ca      	b.n	800c8b6 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c920:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c924:	00c2      	lsls	r2, r0, #3
 800c926:	4b03      	ldr	r3, [pc, #12]	; (800c934 <etharp_tmr+0x8c>)
 800c928:	4413      	add	r3, r2
 800c92a:	2202      	movs	r2, #2
 800c92c:	751a      	strb	r2, [r3, #20]
 800c92e:	e7c2      	b.n	800c8b6 <etharp_tmr+0xe>
}
 800c930:	bd38      	pop	{r3, r4, r5, pc}
 800c932:	bf00      	nop
 800c934:	20004928 	.word	0x20004928

0800c938 <etharp_output_to_arp_index>:
{
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	4605      	mov	r5, r0
 800c93e:	460e      	mov	r6, r1
 800c940:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c942:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800c946:	00da      	lsls	r2, r3, #3
 800c948:	4b2c      	ldr	r3, [pc, #176]	; (800c9fc <etharp_output_to_arp_index+0xc4>)
 800c94a:	4413      	add	r3, r2
 800c94c:	7d1b      	ldrb	r3, [r3, #20]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d919      	bls.n	800c986 <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c952:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c956:	00da      	lsls	r2, r3, #3
 800c958:	4b28      	ldr	r3, [pc, #160]	; (800c9fc <etharp_output_to_arp_index+0xc4>)
 800c95a:	4413      	add	r3, r2
 800c95c:	7d1b      	ldrb	r3, [r3, #20]
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d019      	beq.n	800c996 <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c962:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800c966:	00e3      	lsls	r3, r4, #3
 800c968:	3308      	adds	r3, #8
 800c96a:	4a24      	ldr	r2, [pc, #144]	; (800c9fc <etharp_output_to_arp_index+0xc4>)
 800c96c:	4413      	add	r3, r2
 800c96e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c972:	9200      	str	r2, [sp, #0]
 800c974:	3304      	adds	r3, #4
 800c976:	f105 0229 	add.w	r2, r5, #41	; 0x29
 800c97a:	4631      	mov	r1, r6
 800c97c:	4628      	mov	r0, r5
 800c97e:	f001 f8fd 	bl	800db7c <ethernet_output>
}
 800c982:	b002      	add	sp, #8
 800c984:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c986:	4b1e      	ldr	r3, [pc, #120]	; (800ca00 <etharp_output_to_arp_index+0xc8>)
 800c988:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c98c:	491d      	ldr	r1, [pc, #116]	; (800ca04 <etharp_output_to_arp_index+0xcc>)
 800c98e:	481e      	ldr	r0, [pc, #120]	; (800ca08 <etharp_output_to_arp_index+0xd0>)
 800c990:	f002 fa76 	bl	800ee80 <iprintf>
 800c994:	e7dd      	b.n	800c952 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c996:	4b19      	ldr	r3, [pc, #100]	; (800c9fc <etharp_output_to_arp_index+0xc4>)
 800c998:	4413      	add	r3, r2
 800c99a:	8a5b      	ldrh	r3, [r3, #18]
 800c99c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c9a0:	d819      	bhi.n	800c9d6 <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c9a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c9a6:	d3dc      	bcc.n	800c962 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c9a8:	4a14      	ldr	r2, [pc, #80]	; (800c9fc <etharp_output_to_arp_index+0xc4>)
 800c9aa:	0063      	lsls	r3, r4, #1
 800c9ac:	1918      	adds	r0, r3, r4
 800c9ae:	00c1      	lsls	r1, r0, #3
 800c9b0:	4608      	mov	r0, r1
 800c9b2:	4411      	add	r1, r2
 800c9b4:	3008      	adds	r0, #8
 800c9b6:	4402      	add	r2, r0
 800c9b8:	3204      	adds	r2, #4
 800c9ba:	3104      	adds	r1, #4
 800c9bc:	4628      	mov	r0, r5
 800c9be:	f7ff fed7 	bl	800c770 <etharp_request_dst>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d1cd      	bne.n	800c962 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c9c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c9ca:	00da      	lsls	r2, r3, #3
 800c9cc:	4b0b      	ldr	r3, [pc, #44]	; (800c9fc <etharp_output_to_arp_index+0xc4>)
 800c9ce:	4413      	add	r3, r2
 800c9d0:	2203      	movs	r2, #3
 800c9d2:	751a      	strb	r2, [r3, #20]
 800c9d4:	e7c5      	b.n	800c962 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c9d6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800c9da:	00d3      	lsls	r3, r2, #3
 800c9dc:	4907      	ldr	r1, [pc, #28]	; (800c9fc <etharp_output_to_arp_index+0xc4>)
 800c9de:	4419      	add	r1, r3
 800c9e0:	3104      	adds	r1, #4
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	f7ff ff58 	bl	800c898 <etharp_request>
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d1ba      	bne.n	800c962 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c9ec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c9f0:	00da      	lsls	r2, r3, #3
 800c9f2:	4b02      	ldr	r3, [pc, #8]	; (800c9fc <etharp_output_to_arp_index+0xc4>)
 800c9f4:	4413      	add	r3, r2
 800c9f6:	2203      	movs	r2, #3
 800c9f8:	751a      	strb	r2, [r3, #20]
 800c9fa:	e7b2      	b.n	800c962 <etharp_output_to_arp_index+0x2a>
 800c9fc:	20004928 	.word	0x20004928
 800ca00:	08012138 	.word	0x08012138
 800ca04:	080121e8 	.word	0x080121e8
 800ca08:	080101d8 	.word	0x080101d8

0800ca0c <etharp_query>:
{
 800ca0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	4607      	mov	r7, r0
 800ca14:	460d      	mov	r5, r1
 800ca16:	4691      	mov	r9, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800ca18:	f100 0a29 	add.w	sl, r0, #41	; 0x29
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca1c:	4601      	mov	r1, r0
 800ca1e:	6828      	ldr	r0, [r5, #0]
 800ca20:	f000 fc45 	bl	800d2ae <ip4_addr_isbroadcast_u32>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	f040 80b3 	bne.w	800cb90 <etharp_query+0x184>
      ip4_addr_ismulticast(ipaddr) ||
 800ca2a:	682b      	ldr	r3, [r5, #0]
 800ca2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca30:	2ae0      	cmp	r2, #224	; 0xe0
 800ca32:	f000 80b0 	beq.w	800cb96 <etharp_query+0x18a>
      ip4_addr_ismulticast(ipaddr) ||
 800ca36:	2d00      	cmp	r5, #0
 800ca38:	f000 80b0 	beq.w	800cb9c <etharp_query+0x190>
      ip4_addr_isany(ipaddr)) {
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 80b0 	beq.w	800cba2 <etharp_query+0x196>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ca42:	463a      	mov	r2, r7
 800ca44:	2101      	movs	r1, #1
 800ca46:	4628      	mov	r0, r5
 800ca48:	f7ff fcea 	bl	800c420 <etharp_find_entry>
  if (i < 0) {
 800ca4c:	1e04      	subs	r4, r0, #0
 800ca4e:	db5c      	blt.n	800cb0a <etharp_query+0xfe>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ca50:	4626      	mov	r6, r4
 800ca52:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ca56:	00da      	lsls	r2, r3, #3
 800ca58:	4b55      	ldr	r3, [pc, #340]	; (800cbb0 <etharp_query+0x1a4>)
 800ca5a:	4413      	add	r3, r2
 800ca5c:	7d1b      	ldrb	r3, [r3, #20]
 800ca5e:	bb3b      	cbnz	r3, 800cab0 <etharp_query+0xa4>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ca60:	0062      	lsls	r2, r4, #1
 800ca62:	4422      	add	r2, r4
 800ca64:	00d1      	lsls	r1, r2, #3
 800ca66:	4b52      	ldr	r3, [pc, #328]	; (800cbb0 <etharp_query+0x1a4>)
 800ca68:	440b      	add	r3, r1
 800ca6a:	f04f 0801 	mov.w	r8, #1
 800ca6e:	f883 8014 	strb.w	r8, [r3, #20]
    arp_table[i].netif = netif;
 800ca72:	609f      	str	r7, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ca74:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800ca78:	00da      	lsls	r2, r3, #3
 800ca7a:	4b4d      	ldr	r3, [pc, #308]	; (800cbb0 <etharp_query+0x1a4>)
 800ca7c:	4413      	add	r3, r2
 800ca7e:	7d1b      	ldrb	r3, [r3, #20]
 800ca80:	b1cb      	cbz	r3, 800cab6 <etharp_query+0xaa>
  if (is_new_entry || (q == NULL)) {
 800ca82:	f1b9 0f00 	cmp.w	r9, #0
 800ca86:	bf14      	ite	ne
 800ca88:	4643      	movne	r3, r8
 800ca8a:	2301      	moveq	r3, #1
 800ca8c:	b9db      	cbnz	r3, 800cac6 <etharp_query+0xba>
  err_t result = ERR_MEM;
 800ca8e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  LWIP_ASSERT("q != NULL", q != NULL);
 800ca92:	f1b9 0f00 	cmp.w	r9, #0
 800ca96:	d020      	beq.n	800cada <etharp_query+0xce>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ca98:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800ca9c:	00da      	lsls	r2, r3, #3
 800ca9e:	4b44      	ldr	r3, [pc, #272]	; (800cbb0 <etharp_query+0x1a4>)
 800caa0:	4413      	add	r3, r2
 800caa2:	7d1b      	ldrb	r3, [r3, #20]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d820      	bhi.n	800caea <etharp_query+0xde>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d046      	beq.n	800cb3a <etharp_query+0x12e>
 800caac:	462c      	mov	r4, r5
 800caae:	e02c      	b.n	800cb0a <etharp_query+0xfe>
  int is_new_entry = 0;
 800cab0:	f04f 0800 	mov.w	r8, #0
 800cab4:	e7de      	b.n	800ca74 <etharp_query+0x68>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cab6:	4b3f      	ldr	r3, [pc, #252]	; (800cbb4 <etharp_query+0x1a8>)
 800cab8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800cabc:	493e      	ldr	r1, [pc, #248]	; (800cbb8 <etharp_query+0x1ac>)
 800cabe:	483f      	ldr	r0, [pc, #252]	; (800cbbc <etharp_query+0x1b0>)
 800cac0:	f002 f9de 	bl	800ee80 <iprintf>
 800cac4:	e7dd      	b.n	800ca82 <etharp_query+0x76>
    result = etharp_request(netif, ipaddr);
 800cac6:	4629      	mov	r1, r5
 800cac8:	4638      	mov	r0, r7
 800caca:	f7ff fee5 	bl	800c898 <etharp_request>
 800cace:	4605      	mov	r5, r0
    if (q == NULL) {
 800cad0:	f1b9 0f00 	cmp.w	r9, #0
 800cad4:	d1dd      	bne.n	800ca92 <etharp_query+0x86>
      return result;
 800cad6:	4604      	mov	r4, r0
 800cad8:	e017      	b.n	800cb0a <etharp_query+0xfe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cada:	4b36      	ldr	r3, [pc, #216]	; (800cbb4 <etharp_query+0x1a8>)
 800cadc:	f240 32db 	movw	r2, #987	; 0x3db
 800cae0:	4937      	ldr	r1, [pc, #220]	; (800cbc0 <etharp_query+0x1b4>)
 800cae2:	4836      	ldr	r0, [pc, #216]	; (800cbbc <etharp_query+0x1b0>)
 800cae4:	f002 f9cc 	bl	800ee80 <iprintf>
 800cae8:	e7d6      	b.n	800ca98 <etharp_query+0x8c>
    ETHARP_SET_HINT(netif, i);
 800caea:	4b36      	ldr	r3, [pc, #216]	; (800cbc4 <etharp_query+0x1b8>)
 800caec:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800caee:	4613      	mov	r3, r2
 800caf0:	3308      	adds	r3, #8
 800caf2:	4a2f      	ldr	r2, [pc, #188]	; (800cbb0 <etharp_query+0x1a4>)
 800caf4:	4413      	add	r3, r2
 800caf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cafa:	9200      	str	r2, [sp, #0]
 800cafc:	3304      	adds	r3, #4
 800cafe:	4652      	mov	r2, sl
 800cb00:	4649      	mov	r1, r9
 800cb02:	4638      	mov	r0, r7
 800cb04:	f001 f83a 	bl	800db7c <ethernet_output>
 800cb08:	4604      	mov	r4, r0
}
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	b002      	add	sp, #8
 800cb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cb12:	4b28      	ldr	r3, [pc, #160]	; (800cbb4 <etharp_query+0x1a8>)
 800cb14:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800cb18:	492b      	ldr	r1, [pc, #172]	; (800cbc8 <etharp_query+0x1bc>)
 800cb1a:	4828      	ldr	r0, [pc, #160]	; (800cbbc <etharp_query+0x1b0>)
 800cb1c:	f002 f9b0 	bl	800ee80 <iprintf>
      if (p->type != PBUF_ROM) {
 800cb20:	7b23      	ldrb	r3, [r4, #12]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d11e      	bne.n	800cb64 <etharp_query+0x158>
      p = p->next;
 800cb26:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800cb28:	b14c      	cbz	r4, 800cb3e <etharp_query+0x132>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cb2a:	8962      	ldrh	r2, [r4, #10]
 800cb2c:	8923      	ldrh	r3, [r4, #8]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d1f6      	bne.n	800cb20 <etharp_query+0x114>
 800cb32:	6823      	ldr	r3, [r4, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1ec      	bne.n	800cb12 <etharp_query+0x106>
 800cb38:	e7f2      	b.n	800cb20 <etharp_query+0x114>
    p = q;
 800cb3a:	464c      	mov	r4, r9
 800cb3c:	e7f4      	b.n	800cb28 <etharp_query+0x11c>
    int copy_needed = 0;
 800cb3e:	2300      	movs	r3, #0
    if (copy_needed) {
 800cb40:	b193      	cbz	r3, 800cb68 <etharp_query+0x15c>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800cb42:	2200      	movs	r2, #0
 800cb44:	8921      	ldrh	r1, [r4, #8]
 800cb46:	2002      	movs	r0, #2
 800cb48:	f7f9 fff0 	bl	8006b2c <pbuf_alloc>
      if (p != NULL) {
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	b178      	cbz	r0, 800cb70 <etharp_query+0x164>
        if (pbuf_copy(p, q) != ERR_OK) {
 800cb50:	4649      	mov	r1, r9
 800cb52:	f7fa f9b9 	bl	8006ec8 <pbuf_copy>
 800cb56:	b158      	cbz	r0, 800cb70 <etharp_query+0x164>
          pbuf_free(p);
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f7f9 ff7d 	bl	8006a58 <pbuf_free>
      result = ERR_MEM;
 800cb5e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cb62:	e7d2      	b.n	800cb0a <etharp_query+0xfe>
        copy_needed = 1;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e7eb      	b.n	800cb40 <etharp_query+0x134>
      pbuf_ref(p);
 800cb68:	4648      	mov	r0, r9
 800cb6a:	f7fa f949 	bl	8006e00 <pbuf_ref>
      p = q;
 800cb6e:	464c      	mov	r4, r9
    if (p != NULL) {
 800cb70:	b1d4      	cbz	r4, 800cba8 <etharp_query+0x19c>
      if (arp_table[i].q != NULL) {
 800cb72:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800cb76:	00d3      	lsls	r3, r2, #3
 800cb78:	4a0d      	ldr	r2, [pc, #52]	; (800cbb0 <etharp_query+0x1a4>)
 800cb7a:	58d0      	ldr	r0, [r2, r3]
 800cb7c:	b108      	cbz	r0, 800cb82 <etharp_query+0x176>
        pbuf_free(arp_table[i].q);
 800cb7e:	f7f9 ff6b 	bl	8006a58 <pbuf_free>
      arp_table[i].q = p;
 800cb82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800cb86:	00f3      	lsls	r3, r6, #3
 800cb88:	4a09      	ldr	r2, [pc, #36]	; (800cbb0 <etharp_query+0x1a4>)
 800cb8a:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 800cb8c:	2400      	movs	r4, #0
 800cb8e:	e7bc      	b.n	800cb0a <etharp_query+0xfe>
    return ERR_ARG;
 800cb90:	f06f 040f 	mvn.w	r4, #15
 800cb94:	e7b9      	b.n	800cb0a <etharp_query+0xfe>
 800cb96:	f06f 040f 	mvn.w	r4, #15
 800cb9a:	e7b6      	b.n	800cb0a <etharp_query+0xfe>
 800cb9c:	f06f 040f 	mvn.w	r4, #15
 800cba0:	e7b3      	b.n	800cb0a <etharp_query+0xfe>
 800cba2:	f06f 040f 	mvn.w	r4, #15
 800cba6:	e7b0      	b.n	800cb0a <etharp_query+0xfe>
      result = ERR_MEM;
 800cba8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cbac:	e7ad      	b.n	800cb0a <etharp_query+0xfe>
 800cbae:	bf00      	nop
 800cbb0:	20004928 	.word	0x20004928
 800cbb4:	08012138 	.word	0x08012138
 800cbb8:	08012218 	.word	0x08012218
 800cbbc:	080101d8 	.word	0x080101d8
 800cbc0:	08012240 	.word	0x08012240
 800cbc4:	20004a18 	.word	0x20004a18
 800cbc8:	0801224c 	.word	0x0801224c

0800cbcc <etharp_output>:
{
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	460e      	mov	r6, r1
 800cbd2:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d02f      	beq.n	800cc3a <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cbda:	2e00      	cmp	r6, #0
 800cbdc:	d035      	beq.n	800cc4a <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cbde:	2c00      	cmp	r4, #0
 800cbe0:	d03b      	beq.n	800cc5a <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	6820      	ldr	r0, [r4, #0]
 800cbe6:	f000 fb62 	bl	800d2ae <ip4_addr_isbroadcast_u32>
 800cbea:	2800      	cmp	r0, #0
 800cbec:	d17a      	bne.n	800cce4 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cbf4:	2ae0      	cmp	r2, #224	; 0xe0
 800cbf6:	d038      	beq.n	800cc6a <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cbf8:	686a      	ldr	r2, [r5, #4]
 800cbfa:	68a9      	ldr	r1, [r5, #8]
 800cbfc:	405a      	eors	r2, r3
 800cbfe:	420a      	tst	r2, r1
 800cc00:	d009      	beq.n	800cc16 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 800cc02:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc04:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d004      	beq.n	800cc16 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cc0c:	68eb      	ldr	r3, [r5, #12]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d074      	beq.n	800ccfc <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 800cc12:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cc16:	4b3b      	ldr	r3, [pc, #236]	; (800cd04 <etharp_output+0x138>)
 800cc18:	781a      	ldrb	r2, [r3, #0]
 800cc1a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800cc1e:	00d9      	lsls	r1, r3, #3
 800cc20:	4b39      	ldr	r3, [pc, #228]	; (800cd08 <etharp_output+0x13c>)
 800cc22:	440b      	add	r3, r1
 800cc24:	7d1b      	ldrb	r3, [r3, #20]
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d954      	bls.n	800ccd4 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cc2a:	6820      	ldr	r0, [r4, #0]
 800cc2c:	4b36      	ldr	r3, [pc, #216]	; (800cd08 <etharp_output+0x13c>)
 800cc2e:	440b      	add	r3, r1
 800cc30:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cc32:	4298      	cmp	r0, r3
 800cc34:	d02f      	beq.n	800cc96 <etharp_output+0xca>
 800cc36:	2200      	movs	r2, #0
 800cc38:	e034      	b.n	800cca4 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cc3a:	4b34      	ldr	r3, [pc, #208]	; (800cd0c <etharp_output+0x140>)
 800cc3c:	f240 321b 	movw	r2, #795	; 0x31b
 800cc40:	4933      	ldr	r1, [pc, #204]	; (800cd10 <etharp_output+0x144>)
 800cc42:	4834      	ldr	r0, [pc, #208]	; (800cd14 <etharp_output+0x148>)
 800cc44:	f002 f91c 	bl	800ee80 <iprintf>
 800cc48:	e7c7      	b.n	800cbda <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cc4a:	4b30      	ldr	r3, [pc, #192]	; (800cd0c <etharp_output+0x140>)
 800cc4c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cc50:	4931      	ldr	r1, [pc, #196]	; (800cd18 <etharp_output+0x14c>)
 800cc52:	4830      	ldr	r0, [pc, #192]	; (800cd14 <etharp_output+0x148>)
 800cc54:	f002 f914 	bl	800ee80 <iprintf>
 800cc58:	e7c1      	b.n	800cbde <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cc5a:	4b2c      	ldr	r3, [pc, #176]	; (800cd0c <etharp_output+0x140>)
 800cc5c:	f240 321d 	movw	r2, #797	; 0x31d
 800cc60:	492e      	ldr	r1, [pc, #184]	; (800cd1c <etharp_output+0x150>)
 800cc62:	482c      	ldr	r0, [pc, #176]	; (800cd14 <etharp_output+0x148>)
 800cc64:	f002 f90c 	bl	800ee80 <iprintf>
 800cc68:	e7bb      	b.n	800cbe2 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cc70:	2300      	movs	r3, #0
 800cc72:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cc76:	235e      	movs	r3, #94	; 0x5e
 800cc78:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cc7c:	7863      	ldrb	r3, [r4, #1]
 800cc7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc82:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cc86:	78a3      	ldrb	r3, [r4, #2]
 800cc88:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cc8c:	78e3      	ldrb	r3, [r4, #3]
 800cc8e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800cc92:	ab02      	add	r3, sp, #8
 800cc94:	e027      	b.n	800cce6 <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cc96:	4631      	mov	r1, r6
 800cc98:	4628      	mov	r0, r5
 800cc9a:	f7ff fe4d 	bl	800c938 <etharp_output_to_arp_index>
 800cc9e:	e02b      	b.n	800ccf8 <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cca0:	3201      	adds	r2, #1
 800cca2:	b252      	sxtb	r2, r2
 800cca4:	2a09      	cmp	r2, #9
 800cca6:	dc17      	bgt.n	800ccd8 <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cca8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800ccac:	00d9      	lsls	r1, r3, #3
 800ccae:	4b16      	ldr	r3, [pc, #88]	; (800cd08 <etharp_output+0x13c>)
 800ccb0:	440b      	add	r3, r1
 800ccb2:	7d1b      	ldrb	r3, [r3, #20]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d9f3      	bls.n	800cca0 <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	4b13      	ldr	r3, [pc, #76]	; (800cd08 <etharp_output+0x13c>)
 800ccbc:	440b      	add	r3, r1
 800ccbe:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ccc0:	4298      	cmp	r0, r3
 800ccc2:	d1ed      	bne.n	800cca0 <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 800ccc4:	b2d2      	uxtb	r2, r2
 800ccc6:	4b0f      	ldr	r3, [pc, #60]	; (800cd04 <etharp_output+0x138>)
 800ccc8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ccca:	4631      	mov	r1, r6
 800cccc:	4628      	mov	r0, r5
 800ccce:	f7ff fe33 	bl	800c938 <etharp_output_to_arp_index>
 800ccd2:	e011      	b.n	800ccf8 <etharp_output+0x12c>
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	e7e5      	b.n	800cca4 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 800ccd8:	4632      	mov	r2, r6
 800ccda:	4621      	mov	r1, r4
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f7ff fe95 	bl	800ca0c <etharp_query>
 800cce2:	e009      	b.n	800ccf8 <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800cce4:	4b0e      	ldr	r3, [pc, #56]	; (800cd20 <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800cce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccea:	9200      	str	r2, [sp, #0]
 800ccec:	f105 0229 	add.w	r2, r5, #41	; 0x29
 800ccf0:	4631      	mov	r1, r6
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f000 ff42 	bl	800db7c <ethernet_output>
}
 800ccf8:	b004      	add	sp, #16
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 800ccfc:	f06f 0003 	mvn.w	r0, #3
 800cd00:	e7fa      	b.n	800ccf8 <etharp_output+0x12c>
 800cd02:	bf00      	nop
 800cd04:	20004a18 	.word	0x20004a18
 800cd08:	20004928 	.word	0x20004928
 800cd0c:	08012138 	.word	0x08012138
 800cd10:	0801209c 	.word	0x0801209c
 800cd14:	080101d8 	.word	0x080101d8
 800cd18:	08012240 	.word	0x08012240
 800cd1c:	080121c8 	.word	0x080121c8
 800cd20:	080125fc 	.word	0x080125fc

0800cd24 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd28:	b086      	sub	sp, #24
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	4688      	mov	r8, r1
 800cd2e:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cd30:	2200      	movs	r2, #0
 800cd32:	2124      	movs	r1, #36	; 0x24
 800cd34:	2001      	movs	r0, #1
 800cd36:	f7f9 fef9 	bl	8006b2c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d037      	beq.n	800cdae <icmp_send_response+0x8a>
 800cd3e:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cd40:	8943      	ldrh	r3, [r0, #10]
 800cd42:	2b23      	cmp	r3, #35	; 0x23
 800cd44:	d936      	bls.n	800cdb4 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cd46:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cd4a:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800cd4c:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800cd50:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	7123      	strb	r3, [r4, #4]
 800cd56:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800cd58:	71a3      	strb	r3, [r4, #6]
 800cd5a:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cd5c:	686f      	ldr	r7, [r5, #4]
 800cd5e:	6873      	ldr	r3, [r6, #4]
 800cd60:	681e      	ldr	r6, [r3, #0]
 800cd62:	6858      	ldr	r0, [r3, #4]
 800cd64:	6899      	ldr	r1, [r3, #8]
 800cd66:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800cd6a:	60be      	str	r6, [r7, #8]
 800cd6c:	60f8      	str	r0, [r7, #12]
 800cd6e:	6139      	str	r1, [r7, #16]
 800cd70:	f8c7 e014 	str.w	lr, [r7, #20]
 800cd74:	691e      	ldr	r6, [r3, #16]
 800cd76:	6958      	ldr	r0, [r3, #20]
 800cd78:	6999      	ldr	r1, [r3, #24]
 800cd7a:	61be      	str	r6, [r7, #24]
 800cd7c:	61f8      	str	r0, [r7, #28]
 800cd7e:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cd80:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800cd84:	a806      	add	r0, sp, #24
 800cd86:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cd8a:	f000 f8cb 	bl	800cf24 <ip4_route>
#endif
  if (netif != NULL) {
 800cd8e:	b158      	cbz	r0, 800cda8 <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cd90:	2100      	movs	r1, #0
 800cd92:	70a1      	strb	r1, [r4, #2]
 800cd94:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cd96:	9002      	str	r0, [sp, #8]
 800cd98:	2301      	movs	r3, #1
 800cd9a:	9301      	str	r3, [sp, #4]
 800cd9c:	9100      	str	r1, [sp, #0]
 800cd9e:	23ff      	movs	r3, #255	; 0xff
 800cda0:	aa05      	add	r2, sp, #20
 800cda2:	4628      	mov	r0, r5
 800cda4:	f000 fa6e 	bl	800d284 <ip4_output_if>
  }
  pbuf_free(q);
 800cda8:	4628      	mov	r0, r5
 800cdaa:	f7f9 fe55 	bl	8006a58 <pbuf_free>
}
 800cdae:	b006      	add	sp, #24
 800cdb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cdb4:	4b03      	ldr	r3, [pc, #12]	; (800cdc4 <icmp_send_response+0xa0>)
 800cdb6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800cdba:	4903      	ldr	r1, [pc, #12]	; (800cdc8 <icmp_send_response+0xa4>)
 800cdbc:	4803      	ldr	r0, [pc, #12]	; (800cdcc <icmp_send_response+0xa8>)
 800cdbe:	f002 f85f 	bl	800ee80 <iprintf>
 800cdc2:	e7c0      	b.n	800cd46 <icmp_send_response+0x22>
 800cdc4:	08012370 	.word	0x08012370
 800cdc8:	080123a8 	.word	0x080123a8
 800cdcc:	080101d8 	.word	0x080101d8

0800cdd0 <icmp_input>:
{
 800cdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd4:	b084      	sub	sp, #16
 800cdd6:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800cdd8:	4b47      	ldr	r3, [pc, #284]	; (800cef8 <icmp_input+0x128>)
 800cdda:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 800cddc:	7834      	ldrb	r4, [r6, #0]
 800cdde:	f004 040f 	and.w	r4, r4, #15
 800cde2:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800cde4:	2c13      	cmp	r4, #19
 800cde6:	d915      	bls.n	800ce14 <icmp_input+0x44>
 800cde8:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 800cdea:	8943      	ldrh	r3, [r0, #10]
 800cdec:	2b03      	cmp	r3, #3
 800cdee:	d911      	bls.n	800ce14 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800cdf0:	6843      	ldr	r3, [r0, #4]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 800cdf4:	2b08      	cmp	r3, #8
 800cdf6:	d15d      	bne.n	800ceb4 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cdf8:	4b3f      	ldr	r3, [pc, #252]	; (800cef8 <icmp_input+0x128>)
 800cdfa:	6958      	ldr	r0, [r3, #20]
 800cdfc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800ce00:	2be0      	cmp	r3, #224	; 0xe0
 800ce02:	d023      	beq.n	800ce4c <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ce04:	4b3c      	ldr	r3, [pc, #240]	; (800cef8 <icmp_input+0x128>)
 800ce06:	6819      	ldr	r1, [r3, #0]
 800ce08:	f000 fa51 	bl	800d2ae <ip4_addr_isbroadcast_u32>
 800ce0c:	b9f0      	cbnz	r0, 800ce4c <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ce0e:	892b      	ldrh	r3, [r5, #8]
 800ce10:	2b07      	cmp	r3, #7
 800ce12:	d805      	bhi.n	800ce20 <icmp_input+0x50>
  pbuf_free(p);
 800ce14:	4628      	mov	r0, r5
 800ce16:	f7f9 fe1f 	bl	8006a58 <pbuf_free>
}
 800ce1a:	b004      	add	sp, #16
 800ce1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800ce20:	f104 010e 	add.w	r1, r4, #14
 800ce24:	4628      	mov	r0, r5
 800ce26:	f7f9 fe0d 	bl	8006a44 <pbuf_header>
 800ce2a:	b3a8      	cbz	r0, 800ce98 <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800ce2c:	8929      	ldrh	r1, [r5, #8]
 800ce2e:	4421      	add	r1, r4
 800ce30:	2200      	movs	r2, #0
 800ce32:	b289      	uxth	r1, r1
 800ce34:	2002      	movs	r0, #2
 800ce36:	f7f9 fe79 	bl	8006b2c <pbuf_alloc>
      if (r == NULL) {
 800ce3a:	4680      	mov	r8, r0
 800ce3c:	b130      	cbz	r0, 800ce4c <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ce3e:	8942      	ldrh	r2, [r0, #10]
 800ce40:	f104 0308 	add.w	r3, r4, #8
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d205      	bcs.n	800ce54 <icmp_input+0x84>
        pbuf_free(r);
 800ce48:	f7f9 fe06 	bl	8006a58 <pbuf_free>
  pbuf_free(p);
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	f7f9 fe03 	bl	8006a58 <pbuf_free>
  return;
 800ce52:	e7e2      	b.n	800ce1a <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 800ce54:	4622      	mov	r2, r4
 800ce56:	4631      	mov	r1, r6
 800ce58:	6840      	ldr	r0, [r0, #4]
 800ce5a:	f001 fffe 	bl	800ee5a <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800ce5e:	4261      	negs	r1, r4
 800ce60:	4640      	mov	r0, r8
 800ce62:	f7f9 fdef 	bl	8006a44 <pbuf_header>
 800ce66:	b148      	cbz	r0, 800ce7c <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ce68:	4b24      	ldr	r3, [pc, #144]	; (800cefc <icmp_input+0x12c>)
 800ce6a:	22af      	movs	r2, #175	; 0xaf
 800ce6c:	4924      	ldr	r1, [pc, #144]	; (800cf00 <icmp_input+0x130>)
 800ce6e:	4825      	ldr	r0, [pc, #148]	; (800cf04 <icmp_input+0x134>)
 800ce70:	f002 f806 	bl	800ee80 <iprintf>
        pbuf_free(r);
 800ce74:	4640      	mov	r0, r8
 800ce76:	f7f9 fdef 	bl	8006a58 <pbuf_free>
        goto icmperr;
 800ce7a:	e7e7      	b.n	800ce4c <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 800ce7c:	4629      	mov	r1, r5
 800ce7e:	4640      	mov	r0, r8
 800ce80:	f7fa f822 	bl	8006ec8 <pbuf_copy>
 800ce84:	b118      	cbz	r0, 800ce8e <icmp_input+0xbe>
        pbuf_free(r);
 800ce86:	4640      	mov	r0, r8
 800ce88:	f7f9 fde6 	bl	8006a58 <pbuf_free>
        goto icmperr;
 800ce8c:	e7de      	b.n	800ce4c <icmp_input+0x7c>
      pbuf_free(p);
 800ce8e:	4628      	mov	r0, r5
 800ce90:	f7f9 fde2 	bl	8006a58 <pbuf_free>
      p = r;
 800ce94:	4645      	mov	r5, r8
 800ce96:	e007      	b.n	800cea8 <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800ce98:	f64f 71f2 	movw	r1, #65522	; 0xfff2
 800ce9c:	1b09      	subs	r1, r1, r4
 800ce9e:	b209      	sxth	r1, r1
 800cea0:	4628      	mov	r0, r5
 800cea2:	f7f9 fdcf 	bl	8006a44 <pbuf_header>
 800cea6:	b948      	cbnz	r0, 800cebc <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 800cea8:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800ceaa:	4621      	mov	r1, r4
 800ceac:	4628      	mov	r0, r5
 800ceae:	f7f9 fdc9 	bl	8006a44 <pbuf_header>
 800ceb2:	b150      	cbz	r0, 800ceca <icmp_input+0xfa>
  pbuf_free(p);
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f7f9 fdcf 	bl	8006a58 <pbuf_free>
  return;
 800ceba:	e7ae      	b.n	800ce1a <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cebc:	4b0f      	ldr	r3, [pc, #60]	; (800cefc <icmp_input+0x12c>)
 800cebe:	22c0      	movs	r2, #192	; 0xc0
 800cec0:	4911      	ldr	r1, [pc, #68]	; (800cf08 <icmp_input+0x138>)
 800cec2:	4810      	ldr	r0, [pc, #64]	; (800cf04 <icmp_input+0x134>)
 800cec4:	f001 ffdc 	bl	800ee80 <iprintf>
        goto icmperr;
 800cec8:	e7c0      	b.n	800ce4c <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800ceca:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 800cecc:	490a      	ldr	r1, [pc, #40]	; (800cef8 <icmp_input+0x128>)
 800cece:	694b      	ldr	r3, [r1, #20]
 800ced0:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ced2:	690b      	ldr	r3, [r1, #16]
 800ced4:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ced6:	2200      	movs	r2, #0
 800ced8:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 800ceda:	70b2      	strb	r2, [r6, #2]
 800cedc:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800cede:	23ff      	movs	r3, #255	; 0xff
 800cee0:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800cee2:	7282      	strb	r2, [r0, #10]
 800cee4:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cee6:	9702      	str	r7, [sp, #8]
 800cee8:	2001      	movs	r0, #1
 800ceea:	9001      	str	r0, [sp, #4]
 800ceec:	9200      	str	r2, [sp, #0]
 800ceee:	3114      	adds	r1, #20
 800cef0:	4628      	mov	r0, r5
 800cef2:	f000 f9c7 	bl	800d284 <ip4_output_if>
 800cef6:	e7dd      	b.n	800ceb4 <icmp_input+0xe4>
 800cef8:	20004ac0 	.word	0x20004ac0
 800cefc:	08012370 	.word	0x08012370
 800cf00:	08012304 	.word	0x08012304
 800cf04:	080101d8 	.word	0x080101d8
 800cf08:	0801233c 	.word	0x0801233c

0800cf0c <icmp_dest_unreach>:
{
 800cf0c:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 800cf0e:	460a      	mov	r2, r1
 800cf10:	2103      	movs	r1, #3
 800cf12:	f7ff ff07 	bl	800cd24 <icmp_send_response>
}
 800cf16:	bd08      	pop	{r3, pc}

0800cf18 <icmp_time_exceeded>:
{
 800cf18:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 800cf1a:	460a      	mov	r2, r1
 800cf1c:	210b      	movs	r1, #11
 800cf1e:	f7ff ff01 	bl	800cd24 <icmp_send_response>
}
 800cf22:	bd08      	pop	{r3, pc}

0800cf24 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800cf24:	4b27      	ldr	r3, [pc, #156]	; (800cfc4 <ip4_route+0xa0>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	e02d      	b.n	800cf86 <ip4_route+0x62>
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	b1bb      	cbz	r3, 800cf5e <ip4_route+0x3a>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf2e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cf32:	f012 0f01 	tst.w	r2, #1
 800cf36:	d0f8      	beq.n	800cf2a <ip4_route+0x6>
 800cf38:	f012 0f04 	tst.w	r2, #4
 800cf3c:	d0f5      	beq.n	800cf2a <ip4_route+0x6>
 800cf3e:	6859      	ldr	r1, [r3, #4]
 800cf40:	2900      	cmp	r1, #0
 800cf42:	d0f2      	beq.n	800cf2a <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cf44:	6804      	ldr	r4, [r0, #0]
 800cf46:	689d      	ldr	r5, [r3, #8]
 800cf48:	4061      	eors	r1, r4
 800cf4a:	4229      	tst	r1, r5
 800cf4c:	d016      	beq.n	800cf7c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cf4e:	f012 0f02 	tst.w	r2, #2
 800cf52:	d1ea      	bne.n	800cf2a <ip4_route+0x6>
 800cf54:	68da      	ldr	r2, [r3, #12]
 800cf56:	4294      	cmp	r4, r2
 800cf58:	d1e7      	bne.n	800cf2a <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	e00a      	b.n	800cf74 <ip4_route+0x50>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cf5e:	4a1a      	ldr	r2, [pc, #104]	; (800cfc8 <ip4_route+0xa4>)
 800cf60:	6810      	ldr	r0, [r2, #0]
 800cf62:	b138      	cbz	r0, 800cf74 <ip4_route+0x50>
 800cf64:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 800cf68:	f002 0205 	and.w	r2, r2, #5
 800cf6c:	2a05      	cmp	r2, #5
 800cf6e:	d107      	bne.n	800cf80 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800cf70:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cf72:	b10a      	cbz	r2, 800cf78 <ip4_route+0x54>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800cf74:	bc30      	pop	{r4, r5}
 800cf76:	4770      	bx	lr
    return NULL;
 800cf78:	4618      	mov	r0, r3
 800cf7a:	e7fb      	b.n	800cf74 <ip4_route+0x50>
        return netif;
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	e7f9      	b.n	800cf74 <ip4_route+0x50>
    return NULL;
 800cf80:	4618      	mov	r0, r3
 800cf82:	e7f7      	b.n	800cf74 <ip4_route+0x50>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	b163      	cbz	r3, 800cfa2 <ip4_route+0x7e>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf88:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cf8c:	f012 0f01 	tst.w	r2, #1
 800cf90:	d0f8      	beq.n	800cf84 <ip4_route+0x60>
 800cf92:	f012 0f04 	tst.w	r2, #4
 800cf96:	d0f5      	beq.n	800cf84 <ip4_route+0x60>
 800cf98:	6859      	ldr	r1, [r3, #4]
 800cf9a:	2900      	cmp	r1, #0
 800cf9c:	d0f2      	beq.n	800cf84 <ip4_route+0x60>
{
 800cf9e:	b430      	push	{r4, r5}
 800cfa0:	e7d0      	b.n	800cf44 <ip4_route+0x20>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cfa2:	4a09      	ldr	r2, [pc, #36]	; (800cfc8 <ip4_route+0xa4>)
 800cfa4:	6810      	ldr	r0, [r2, #0]
 800cfa6:	b138      	cbz	r0, 800cfb8 <ip4_route+0x94>
 800cfa8:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 800cfac:	f002 0205 	and.w	r2, r2, #5
 800cfb0:	2a05      	cmp	r2, #5
 800cfb2:	d104      	bne.n	800cfbe <ip4_route+0x9a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800cfb4:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cfb6:	b102      	cbz	r2, 800cfba <ip4_route+0x96>
}
 800cfb8:	4770      	bx	lr
    return NULL;
 800cfba:	4618      	mov	r0, r3
 800cfbc:	4770      	bx	lr
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	200081e0 	.word	0x200081e0
 800cfc8:	200081e4 	.word	0x200081e4

0800cfcc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd0:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cfd2:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800cfd4:	783b      	ldrb	r3, [r7, #0]
 800cfd6:	091a      	lsrs	r2, r3, #4
 800cfd8:	2a04      	cmp	r2, #4
 800cfda:	d004      	beq.n	800cfe6 <ip4_input+0x1a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cfdc:	f7f9 fd3c 	bl	8006a58 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe6:	4688      	mov	r8, r1
  iphdr_hlen = IPH_HL(iphdr);
 800cfe8:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 800cfec:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cfee:	8878      	ldrh	r0, [r7, #2]
 800cff0:	f7f9 f870 	bl	80060d4 <lwip_htons>
 800cff4:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800cff6:	892b      	ldrh	r3, [r5, #8]
 800cff8:	4283      	cmp	r3, r0
 800cffa:	d814      	bhi.n	800d026 <ip4_input+0x5a>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cffc:	896b      	ldrh	r3, [r5, #10]
 800cffe:	42b3      	cmp	r3, r6
 800d000:	d316      	bcc.n	800d030 <ip4_input+0x64>
 800d002:	892b      	ldrh	r3, [r5, #8]
 800d004:	42a3      	cmp	r3, r4
 800d006:	d313      	bcc.n	800d030 <ip4_input+0x64>
 800d008:	2e13      	cmp	r6, #19
 800d00a:	d911      	bls.n	800d030 <ip4_input+0x64>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	4a5d      	ldr	r2, [pc, #372]	; (800d184 <ip4_input+0x1b8>)
 800d010:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d012:	68f9      	ldr	r1, [r7, #12]
 800d014:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d01a:	2be0      	cmp	r3, #224	; 0xe0
 800d01c:	d00c      	beq.n	800d038 <ip4_input+0x6c>
    netif = inp;
 800d01e:	4644      	mov	r4, r8
    int first = 1;
 800d020:	f04f 0901 	mov.w	r9, #1
 800d024:	e016      	b.n	800d054 <ip4_input+0x88>
    pbuf_realloc(p, iphdr_len);
 800d026:	4601      	mov	r1, r0
 800d028:	4628      	mov	r0, r5
 800d02a:	f7f9 fe67 	bl	8006cfc <pbuf_realloc>
 800d02e:	e7e5      	b.n	800cffc <ip4_input+0x30>
    pbuf_free(p);
 800d030:	4628      	mov	r0, r5
 800d032:	f7f9 fd11 	bl	8006a58 <pbuf_free>
    return ERR_OK;
 800d036:	e7d3      	b.n	800cfe0 <ip4_input+0x14>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d038:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 800d03c:	f013 0f01 	tst.w	r3, #1
 800d040:	d061      	beq.n	800d106 <ip4_input+0x13a>
 800d042:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d046:	bb13      	cbnz	r3, 800d08e <ip4_input+0xc2>
 800d048:	2400      	movs	r4, #0
 800d04a:	e05d      	b.n	800d108 <ip4_input+0x13c>
        netif = netif->next;
 800d04c:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 800d04e:	4544      	cmp	r4, r8
 800d050:	d01b      	beq.n	800d08a <ip4_input+0xbe>
    } while (netif != NULL);
 800d052:	b1fc      	cbz	r4, 800d094 <ip4_input+0xc8>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d054:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800d058:	f013 0f01 	tst.w	r3, #1
 800d05c:	d009      	beq.n	800d072 <ip4_input+0xa6>
 800d05e:	6863      	ldr	r3, [r4, #4]
 800d060:	b13b      	cbz	r3, 800d072 <ip4_input+0xa6>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d062:	4a48      	ldr	r2, [pc, #288]	; (800d184 <ip4_input+0x1b8>)
 800d064:	6950      	ldr	r0, [r2, #20]
 800d066:	4283      	cmp	r3, r0
 800d068:	d014      	beq.n	800d094 <ip4_input+0xc8>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d06a:	4621      	mov	r1, r4
 800d06c:	f000 f91f 	bl	800d2ae <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d070:	b980      	cbnz	r0, 800d094 <ip4_input+0xc8>
      if (first) {
 800d072:	f1b9 0f00 	cmp.w	r9, #0
 800d076:	d0e9      	beq.n	800d04c <ip4_input+0x80>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800d078:	4b42      	ldr	r3, [pc, #264]	; (800d184 <ip4_input+0x1b8>)
 800d07a:	7d1b      	ldrb	r3, [r3, #20]
 800d07c:	2b7f      	cmp	r3, #127	; 0x7f
 800d07e:	d008      	beq.n	800d092 <ip4_input+0xc6>
        netif = netif_list;
 800d080:	4b41      	ldr	r3, [pc, #260]	; (800d188 <ip4_input+0x1bc>)
 800d082:	681c      	ldr	r4, [r3, #0]
        first = 0;
 800d084:	f04f 0900 	mov.w	r9, #0
 800d088:	e7e1      	b.n	800d04e <ip4_input+0x82>
        netif = netif->next;
 800d08a:	6824      	ldr	r4, [r4, #0]
 800d08c:	e7e1      	b.n	800d052 <ip4_input+0x86>
      netif = inp;
 800d08e:	4644      	mov	r4, r8
 800d090:	e000      	b.n	800d094 <ip4_input+0xc8>
          netif = NULL;
 800d092:	2400      	movs	r4, #0
  if (netif == NULL) {
 800d094:	2c00      	cmp	r4, #0
 800d096:	d037      	beq.n	800d108 <ip4_input+0x13c>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800d098:	4b3a      	ldr	r3, [pc, #232]	; (800d184 <ip4_input+0x1b8>)
 800d09a:	6918      	ldr	r0, [r3, #16]
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d13d      	bne.n	800d11c <ip4_input+0x150>
  if (netif == NULL) {
 800d0a0:	2c00      	cmp	r4, #0
 800d0a2:	d049      	beq.n	800d138 <ip4_input+0x16c>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d0a4:	88fb      	ldrh	r3, [r7, #6]
 800d0a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	b133      	cbz	r3, 800d0bc <ip4_input+0xf0>
    p = ip4_reass(p);
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f000 fb46 	bl	800d740 <ip4_reass>
    if (p == NULL) {
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d092      	beq.n	800cfe0 <ip4_input+0x14>
    iphdr = (struct ip_hdr *)p->payload;
 800d0ba:	6847      	ldr	r7, [r0, #4]
  ip_data.current_netif = netif;
 800d0bc:	4a31      	ldr	r2, [pc, #196]	; (800d184 <ip4_input+0x1b8>)
 800d0be:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 800d0c0:	f8c2 8004 	str.w	r8, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d0c4:	6097      	str	r7, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800d0c6:	783b      	ldrb	r3, [r7, #0]
 800d0c8:	f003 030f 	and.w	r3, r3, #15
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800d0d0:	4271      	negs	r1, r6
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	f7f9 fcb6 	bl	8006a44 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800d0d8:	7a7b      	ldrb	r3, [r7, #9]
 800d0da:	2b06      	cmp	r3, #6
 800d0dc:	d03d      	beq.n	800d15a <ip4_input+0x18e>
 800d0de:	2b11      	cmp	r3, #17
 800d0e0:	d02e      	beq.n	800d140 <ip4_input+0x174>
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d03e      	beq.n	800d164 <ip4_input+0x198>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	4b26      	ldr	r3, [pc, #152]	; (800d184 <ip4_input+0x1b8>)
 800d0ea:	6958      	ldr	r0, [r3, #20]
 800d0ec:	f000 f8df 	bl	800d2ae <ip4_addr_isbroadcast_u32>
 800d0f0:	b928      	cbnz	r0, 800d0fe <ip4_input+0x132>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d0f2:	4b24      	ldr	r3, [pc, #144]	; (800d184 <ip4_input+0x1b8>)
 800d0f4:	695b      	ldr	r3, [r3, #20]
 800d0f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d0fa:	2be0      	cmp	r3, #224	; 0xe0
 800d0fc:	d137      	bne.n	800d16e <ip4_input+0x1a2>
      pbuf_free(p);
 800d0fe:	4628      	mov	r0, r5
 800d100:	f7f9 fcaa 	bl	8006a58 <pbuf_free>
 800d104:	e020      	b.n	800d148 <ip4_input+0x17c>
 800d106:	2400      	movs	r4, #0
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800d108:	7a7b      	ldrb	r3, [r7, #9]
 800d10a:	2b11      	cmp	r3, #17
 800d10c:	d1c4      	bne.n	800d098 <ip4_input+0xcc>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800d10e:	19bb      	adds	r3, r7, r6
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800d110:	885b      	ldrh	r3, [r3, #2]
 800d112:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800d116:	d1bf      	bne.n	800d098 <ip4_input+0xcc>
        netif = inp;
 800d118:	4644      	mov	r4, r8
 800d11a:	e7c1      	b.n	800d0a0 <ip4_input+0xd4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d11c:	4641      	mov	r1, r8
 800d11e:	f000 f8c6 	bl	800d2ae <ip4_addr_isbroadcast_u32>
 800d122:	b928      	cbnz	r0, 800d130 <ip4_input+0x164>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d124:	4b17      	ldr	r3, [pc, #92]	; (800d184 <ip4_input+0x1b8>)
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d12c:	2be0      	cmp	r3, #224	; 0xe0
 800d12e:	d1b7      	bne.n	800d0a0 <ip4_input+0xd4>
      pbuf_free(p);
 800d130:	4628      	mov	r0, r5
 800d132:	f7f9 fc91 	bl	8006a58 <pbuf_free>
      return ERR_OK;
 800d136:	e753      	b.n	800cfe0 <ip4_input+0x14>
    pbuf_free(p);
 800d138:	4628      	mov	r0, r5
 800d13a:	f7f9 fc8d 	bl	8006a58 <pbuf_free>
    return ERR_OK;
 800d13e:	e74f      	b.n	800cfe0 <ip4_input+0x14>
      udp_input(p, inp);
 800d140:	4641      	mov	r1, r8
 800d142:	4628      	mov	r0, r5
 800d144:	f7fd fcee 	bl	800ab24 <udp_input>
  ip_data.current_netif = NULL;
 800d148:	4b0e      	ldr	r3, [pc, #56]	; (800d184 <ip4_input+0x1b8>)
 800d14a:	2200      	movs	r2, #0
 800d14c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d14e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d150:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d152:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d154:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d156:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800d158:	e742      	b.n	800cfe0 <ip4_input+0x14>
      tcp_input(p, inp);
 800d15a:	4641      	mov	r1, r8
 800d15c:	4628      	mov	r0, r5
 800d15e:	f7fc f90b 	bl	8009378 <tcp_input>
      break;
 800d162:	e7f1      	b.n	800d148 <ip4_input+0x17c>
      icmp_input(p, inp);
 800d164:	4641      	mov	r1, r8
 800d166:	4628      	mov	r0, r5
 800d168:	f7ff fe32 	bl	800cdd0 <icmp_input>
      break;
 800d16c:	e7ec      	b.n	800d148 <ip4_input+0x17c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800d16e:	4631      	mov	r1, r6
 800d170:	4628      	mov	r0, r5
 800d172:	f7f9 fc6c 	bl	8006a4e <pbuf_header_force>
        p->payload = iphdr;
 800d176:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d178:	2102      	movs	r1, #2
 800d17a:	4628      	mov	r0, r5
 800d17c:	f7ff fec6 	bl	800cf0c <icmp_dest_unreach>
 800d180:	e7bd      	b.n	800d0fe <ip4_input+0x132>
 800d182:	bf00      	nop
 800d184:	20004ac0 	.word	0x20004ac0
 800d188:	200081e0 	.word	0x200081e0

0800d18c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800d18c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d190:	b083      	sub	sp, #12
 800d192:	4605      	mov	r5, r0
 800d194:	4689      	mov	r9, r1
 800d196:	4616      	mov	r6, r2
 800d198:	4698      	mov	r8, r3
 800d19a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d19c:	89c3      	ldrh	r3, [r0, #14]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d13d      	bne.n	800d21e <ip4_output_if_src+0x92>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d1a2:	2e00      	cmp	r6, #0
 800d1a4:	d04f      	beq.n	800d246 <ip4_output_if_src+0xba>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800d1a6:	2114      	movs	r1, #20
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	f7f9 fc4b 	bl	8006a44 <pbuf_header>
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d158      	bne.n	800d264 <ip4_output_if_src+0xd8>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d1b2:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d1b4:	896b      	ldrh	r3, [r5, #10]
 800d1b6:	2b13      	cmp	r3, #19
 800d1b8:	d939      	bls.n	800d22e <ip4_output_if_src+0xa2>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d1ba:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d1be:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800d1c2:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d1c4:	6833      	ldr	r3, [r6, #0]
 800d1c6:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d1c8:	2345      	movs	r3, #69	; 0x45
 800d1ca:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800d1cc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d1d0:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d1d2:	8928      	ldrh	r0, [r5, #8]
 800d1d4:	f7f8 ff7e 	bl	80060d4 <lwip_htons>
 800d1d8:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d1da:	2300      	movs	r3, #0
 800d1dc:	71a3      	strb	r3, [r4, #6]
 800d1de:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d1e0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800d280 <ip4_output_if_src+0xf4>
 800d1e4:	f8b8 0000 	ldrh.w	r0, [r8]
 800d1e8:	f7f8 ff74 	bl	80060d4 <lwip_htons>
 800d1ec:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d1ee:	f8b8 3000 	ldrh.w	r3, [r8]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 800d1f8:	f1b9 0f00 	cmp.w	r9, #0
 800d1fc:	d01f      	beq.n	800d23e <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d1fe:	f8d9 3000 	ldr.w	r3, [r9]
 800d202:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d204:	2300      	movs	r3, #0
 800d206:	72a3      	strb	r3, [r4, #10]
 800d208:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d20a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d20c:	bb0b      	cbnz	r3, 800d252 <ip4_output_if_src+0xc6>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	4632      	mov	r2, r6
 800d212:	4629      	mov	r1, r5
 800d214:	4638      	mov	r0, r7
 800d216:	4798      	blx	r3
}
 800d218:	b003      	add	sp, #12
 800d21a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d21e:	4b13      	ldr	r3, [pc, #76]	; (800d26c <ip4_output_if_src+0xe0>)
 800d220:	f240 3233 	movw	r2, #819	; 0x333
 800d224:	4912      	ldr	r1, [pc, #72]	; (800d270 <ip4_output_if_src+0xe4>)
 800d226:	4813      	ldr	r0, [pc, #76]	; (800d274 <ip4_output_if_src+0xe8>)
 800d228:	f001 fe2a 	bl	800ee80 <iprintf>
 800d22c:	e7b9      	b.n	800d1a2 <ip4_output_if_src+0x16>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d22e:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <ip4_output_if_src+0xe0>)
 800d230:	f240 3261 	movw	r2, #865	; 0x361
 800d234:	4910      	ldr	r1, [pc, #64]	; (800d278 <ip4_output_if_src+0xec>)
 800d236:	480f      	ldr	r0, [pc, #60]	; (800d274 <ip4_output_if_src+0xe8>)
 800d238:	f001 fe22 	bl	800ee80 <iprintf>
 800d23c:	e7bd      	b.n	800d1ba <ip4_output_if_src+0x2e>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d23e:	4b0f      	ldr	r3, [pc, #60]	; (800d27c <ip4_output_if_src+0xf0>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	60e3      	str	r3, [r4, #12]
 800d244:	e7de      	b.n	800d204 <ip4_output_if_src+0x78>
    iphdr = (struct ip_hdr *)p->payload;
 800d246:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	ae02      	add	r6, sp, #8
 800d24c:	f846 3d04 	str.w	r3, [r6, #-4]!
 800d250:	e7db      	b.n	800d20a <ip4_output_if_src+0x7e>
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d252:	892a      	ldrh	r2, [r5, #8]
 800d254:	4293      	cmp	r3, r2
 800d256:	d2da      	bcs.n	800d20e <ip4_output_if_src+0x82>
    return ip4_frag(p, netif, dest);
 800d258:	4632      	mov	r2, r6
 800d25a:	4639      	mov	r1, r7
 800d25c:	4628      	mov	r0, r5
 800d25e:	f000 fb43 	bl	800d8e8 <ip4_frag>
 800d262:	e7d9      	b.n	800d218 <ip4_output_if_src+0x8c>
      return ERR_BUF;
 800d264:	f06f 0001 	mvn.w	r0, #1
 800d268:	e7d6      	b.n	800d218 <ip4_output_if_src+0x8c>
 800d26a:	bf00      	nop
 800d26c:	080123d4 	.word	0x080123d4
 800d270:	08012408 	.word	0x08012408
 800d274:	080101d8 	.word	0x080101d8
 800d278:	08012414 	.word	0x08012414
 800d27c:	08012444 	.word	0x08012444
 800d280:	20004a1a 	.word	0x20004a1a

0800d284 <ip4_output_if>:
{
 800d284:	b530      	push	{r4, r5, lr}
 800d286:	b085      	sub	sp, #20
 800d288:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 800d28a:	4615      	mov	r5, r2
 800d28c:	b11a      	cbz	r2, 800d296 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800d28e:	b109      	cbz	r1, 800d294 <ip4_output_if+0x10>
 800d290:	680a      	ldr	r2, [r1, #0]
 800d292:	b902      	cbnz	r2, 800d296 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800d294:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d296:	9402      	str	r4, [sp, #8]
 800d298:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800d29c:	9201      	str	r2, [sp, #4]
 800d29e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800d2a2:	9200      	str	r2, [sp, #0]
 800d2a4:	462a      	mov	r2, r5
 800d2a6:	f7ff ff71 	bl	800d18c <ip4_output_if_src>
}
 800d2aa:	b005      	add	sp, #20
 800d2ac:	bd30      	pop	{r4, r5, pc}

0800d2ae <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d2ae:	1e43      	subs	r3, r0, #1
 800d2b0:	f113 0f03 	cmn.w	r3, #3
 800d2b4:	d811      	bhi.n	800d2da <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d2b6:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800d2ba:	f013 0f02 	tst.w	r3, #2
 800d2be:	d00e      	beq.n	800d2de <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d2c0:	684b      	ldr	r3, [r1, #4]
 800d2c2:	4283      	cmp	r3, r0
 800d2c4:	d00d      	beq.n	800d2e2 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d2c6:	688a      	ldr	r2, [r1, #8]
 800d2c8:	4043      	eors	r3, r0
 800d2ca:	4213      	tst	r3, r2
 800d2cc:	d10b      	bne.n	800d2e6 <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d2ce:	43d2      	mvns	r2, r2
 800d2d0:	ea32 0300 	bics.w	r3, r2, r0
 800d2d4:	d009      	beq.n	800d2ea <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800d2d6:	2000      	movs	r0, #0
 800d2d8:	4770      	bx	lr
    return 1;
 800d2da:	2001      	movs	r0, #1
 800d2dc:	4770      	bx	lr
    return 0;
 800d2de:	2000      	movs	r0, #0
 800d2e0:	4770      	bx	lr
    return 0;
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	4770      	bx	lr
    return 0;
 800d2e6:	2000      	movs	r0, #0
 800d2e8:	4770      	bx	lr
    return 1;
 800d2ea:	2001      	movs	r0, #1
  }
}
 800d2ec:	4770      	bx	lr
	...

0800d2f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d2f0:	b538      	push	{r3, r4, r5, lr}
 800d2f2:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d2f4:	4b0c      	ldr	r3, [pc, #48]	; (800d328 <ip_reass_dequeue_datagram+0x38>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4283      	cmp	r3, r0
 800d2fa:	d008      	beq.n	800d30e <ip_reass_dequeue_datagram+0x1e>
 800d2fc:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d2fe:	b151      	cbz	r1, 800d316 <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d304:	4621      	mov	r1, r4
 800d306:	2004      	movs	r0, #4
 800d308:	f7f9 f9cc 	bl	80066a4 <memp_free>
}
 800d30c:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800d30e:	6802      	ldr	r2, [r0, #0]
 800d310:	4b05      	ldr	r3, [pc, #20]	; (800d328 <ip_reass_dequeue_datagram+0x38>)
 800d312:	601a      	str	r2, [r3, #0]
 800d314:	e7f6      	b.n	800d304 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d316:	4b05      	ldr	r3, [pc, #20]	; (800d32c <ip_reass_dequeue_datagram+0x3c>)
 800d318:	f240 1245 	movw	r2, #325	; 0x145
 800d31c:	4904      	ldr	r1, [pc, #16]	; (800d330 <ip_reass_dequeue_datagram+0x40>)
 800d31e:	4805      	ldr	r0, [pc, #20]	; (800d334 <ip_reass_dequeue_datagram+0x44>)
 800d320:	f001 fdae 	bl	800ee80 <iprintf>
 800d324:	e7ec      	b.n	800d300 <ip_reass_dequeue_datagram+0x10>
 800d326:	bf00      	nop
 800d328:	20004a20 	.word	0x20004a20
 800d32c:	0801253c 	.word	0x0801253c
 800d330:	08012578 	.word	0x08012578
 800d334:	080101d8 	.word	0x080101d8

0800d338 <ip_reass_free_complete_datagram>:
{
 800d338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d33c:	4680      	mov	r8, r0
 800d33e:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d340:	4281      	cmp	r1, r0
 800d342:	d015      	beq.n	800d370 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 800d344:	f1b9 0f00 	cmp.w	r9, #0
 800d348:	d009      	beq.n	800d35e <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d34a:	f8d9 3000 	ldr.w	r3, [r9]
 800d34e:	4543      	cmp	r3, r8
 800d350:	d005      	beq.n	800d35e <ip_reass_free_complete_datagram+0x26>
 800d352:	4b30      	ldr	r3, [pc, #192]	; (800d414 <ip_reass_free_complete_datagram+0xdc>)
 800d354:	22ad      	movs	r2, #173	; 0xad
 800d356:	4930      	ldr	r1, [pc, #192]	; (800d418 <ip_reass_free_complete_datagram+0xe0>)
 800d358:	4830      	ldr	r0, [pc, #192]	; (800d41c <ip_reass_free_complete_datagram+0xe4>)
 800d35a:	f001 fd91 	bl	800ee80 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d35e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d362:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 800d364:	889a      	ldrh	r2, [r3, #4]
 800d366:	b152      	cbz	r2, 800d37e <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 800d368:	2600      	movs	r6, #0
  p = ipr->p;
 800d36a:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 800d36e:	e028      	b.n	800d3c2 <ip_reass_free_complete_datagram+0x8a>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d370:	4b28      	ldr	r3, [pc, #160]	; (800d414 <ip_reass_free_complete_datagram+0xdc>)
 800d372:	22ab      	movs	r2, #171	; 0xab
 800d374:	492a      	ldr	r1, [pc, #168]	; (800d420 <ip_reass_free_complete_datagram+0xe8>)
 800d376:	4829      	ldr	r0, [pc, #164]	; (800d41c <ip_reass_free_complete_datagram+0xe4>)
 800d378:	f001 fd82 	bl	800ee80 <iprintf>
 800d37c:	e7e2      	b.n	800d344 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d384:	4643      	mov	r3, r8
 800d386:	6862      	ldr	r2, [r4, #4]
 800d388:	f853 1f08 	ldr.w	r1, [r3, #8]!
 800d38c:	685e      	ldr	r6, [r3, #4]
 800d38e:	689d      	ldr	r5, [r3, #8]
 800d390:	68d8      	ldr	r0, [r3, #12]
 800d392:	6011      	str	r1, [r2, #0]
 800d394:	6056      	str	r6, [r2, #4]
 800d396:	6095      	str	r5, [r2, #8]
 800d398:	60d0      	str	r0, [r2, #12]
 800d39a:	6919      	ldr	r1, [r3, #16]
 800d39c:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d39e:	2101      	movs	r1, #1
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f7ff fdb9 	bl	800cf18 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f7f9 fd20 	bl	8006dec <pbuf_clen>
 800d3ac:	4606      	mov	r6, r0
    pbuf_free(p);
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f7f9 fb52 	bl	8006a58 <pbuf_free>
 800d3b4:	e7d9      	b.n	800d36a <ip_reass_free_complete_datagram+0x32>
    pbufs_freed += clen;
 800d3b6:	4435      	add	r5, r6
 800d3b8:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f7f9 fb4c 	bl	8006a58 <pbuf_free>
    p = iprh->next_pbuf;
 800d3c0:	463c      	mov	r4, r7
  while (p != NULL) {
 800d3c2:	b184      	cbz	r4, 800d3e6 <ip_reass_free_complete_datagram+0xae>
    iprh = (struct ip_reass_helper *)p->payload;
 800d3c4:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 800d3c6:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f7f9 fd0f 	bl	8006dec <pbuf_clen>
 800d3ce:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d3d0:	1833      	adds	r3, r6, r0
 800d3d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3d6:	dbee      	blt.n	800d3b6 <ip_reass_free_complete_datagram+0x7e>
 800d3d8:	4b0e      	ldr	r3, [pc, #56]	; (800d414 <ip_reass_free_complete_datagram+0xdc>)
 800d3da:	22cc      	movs	r2, #204	; 0xcc
 800d3dc:	4911      	ldr	r1, [pc, #68]	; (800d424 <ip_reass_free_complete_datagram+0xec>)
 800d3de:	480f      	ldr	r0, [pc, #60]	; (800d41c <ip_reass_free_complete_datagram+0xe4>)
 800d3e0:	f001 fd4e 	bl	800ee80 <iprintf>
 800d3e4:	e7e7      	b.n	800d3b6 <ip_reass_free_complete_datagram+0x7e>
  ip_reass_dequeue_datagram(ipr, prev);
 800d3e6:	4649      	mov	r1, r9
 800d3e8:	4640      	mov	r0, r8
 800d3ea:	f7ff ff81 	bl	800d2f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800d3ee:	4b0e      	ldr	r3, [pc, #56]	; (800d428 <ip_reass_free_complete_datagram+0xf0>)
 800d3f0:	881b      	ldrh	r3, [r3, #0]
 800d3f2:	42b3      	cmp	r3, r6
 800d3f4:	d306      	bcc.n	800d404 <ip_reass_free_complete_datagram+0xcc>
  ip_reass_pbufcount -= pbufs_freed;
 800d3f6:	4a0c      	ldr	r2, [pc, #48]	; (800d428 <ip_reass_free_complete_datagram+0xf0>)
 800d3f8:	8813      	ldrh	r3, [r2, #0]
 800d3fa:	1b9b      	subs	r3, r3, r6
 800d3fc:	8013      	strh	r3, [r2, #0]
}
 800d3fe:	4630      	mov	r0, r6
 800d400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800d404:	4b03      	ldr	r3, [pc, #12]	; (800d414 <ip_reass_free_complete_datagram+0xdc>)
 800d406:	22d2      	movs	r2, #210	; 0xd2
 800d408:	4908      	ldr	r1, [pc, #32]	; (800d42c <ip_reass_free_complete_datagram+0xf4>)
 800d40a:	4804      	ldr	r0, [pc, #16]	; (800d41c <ip_reass_free_complete_datagram+0xe4>)
 800d40c:	f001 fd38 	bl	800ee80 <iprintf>
 800d410:	e7f1      	b.n	800d3f6 <ip_reass_free_complete_datagram+0xbe>
 800d412:	bf00      	nop
 800d414:	0801253c 	.word	0x0801253c
 800d418:	080125a0 	.word	0x080125a0
 800d41c:	080101d8 	.word	0x080101d8
 800d420:	08012594 	.word	0x08012594
 800d424:	080125b4 	.word	0x080125b4
 800d428:	20004a1c 	.word	0x20004a1c
 800d42c:	080125d4 	.word	0x080125d4

0800d430 <ip_reass_remove_oldest_datagram>:
{
 800d430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d434:	4606      	mov	r6, r0
 800d436:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800d438:	2700      	movs	r7, #0
 800d43a:	e02f      	b.n	800d49c <ip_reass_remove_oldest_datagram+0x6c>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d43c:	699a      	ldr	r2, [r3, #24]
 800d43e:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800d442:	4562      	cmp	r2, ip
 800d444:	d111      	bne.n	800d46a <ip_reass_remove_oldest_datagram+0x3a>
 800d446:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800d44a:	88b2      	ldrh	r2, [r6, #4]
 800d44c:	4594      	cmp	ip, r2
 800d44e:	d10c      	bne.n	800d46a <ip_reass_remove_oldest_datagram+0x3a>
 800d450:	e001      	b.n	800d456 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800d452:	4629      	mov	r1, r5
          oldest = r;
 800d454:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	b192      	cbz	r2, 800d480 <ip_reass_remove_oldest_datagram+0x50>
 800d45a:	461d      	mov	r5, r3
 800d45c:	4613      	mov	r3, r2
    while (r != NULL) {
 800d45e:	b18b      	cbz	r3, 800d484 <ip_reass_remove_oldest_datagram+0x54>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d460:	695a      	ldr	r2, [r3, #20]
 800d462:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800d466:	4562      	cmp	r2, ip
 800d468:	d0e8      	beq.n	800d43c <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 800d46a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d0f0      	beq.n	800d452 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 800d470:	f893 c01f 	ldrb.w	ip, [r3, #31]
 800d474:	7fc2      	ldrb	r2, [r0, #31]
 800d476:	4594      	cmp	ip, r2
 800d478:	d8ed      	bhi.n	800d456 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800d47a:	4629      	mov	r1, r5
          oldest = r;
 800d47c:	4618      	mov	r0, r3
 800d47e:	e7ea      	b.n	800d456 <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 800d480:	462b      	mov	r3, r5
 800d482:	e7ea      	b.n	800d45a <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 800d484:	b110      	cbz	r0, 800d48c <ip_reass_remove_oldest_datagram+0x5c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d486:	f7ff ff57 	bl	800d338 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800d48a:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d48c:	4547      	cmp	r7, r8
 800d48e:	bfac      	ite	ge
 800d490:	2300      	movge	r3, #0
 800d492:	2301      	movlt	r3, #1
 800d494:	2c01      	cmp	r4, #1
 800d496:	bfd8      	it	le
 800d498:	2300      	movle	r3, #0
 800d49a:	b133      	cbz	r3, 800d4aa <ip_reass_remove_oldest_datagram+0x7a>
    r = reassdatagrams;
 800d49c:	4b04      	ldr	r3, [pc, #16]	; (800d4b0 <ip_reass_remove_oldest_datagram+0x80>)
 800d49e:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 800d4a0:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800d4a2:	4621      	mov	r1, r4
    prev = NULL;
 800d4a4:	4625      	mov	r5, r4
    oldest = NULL;
 800d4a6:	4620      	mov	r0, r4
    while (r != NULL) {
 800d4a8:	e7d9      	b.n	800d45e <ip_reass_remove_oldest_datagram+0x2e>
}
 800d4aa:	4638      	mov	r0, r7
 800d4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b0:	20004a20 	.word	0x20004a20

0800d4b4 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d4b4:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	b120      	cbz	r0, 800d4c4 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	2005      	movs	r0, #5
 800d4be:	f7f9 f8f1 	bl	80066a4 <memp_free>
}
 800d4c2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800d4c4:	4b03      	ldr	r3, [pc, #12]	; (800d4d4 <ip_frag_free_pbuf_custom_ref+0x20>)
 800d4c6:	f240 22ae 	movw	r2, #686	; 0x2ae
 800d4ca:	4903      	ldr	r1, [pc, #12]	; (800d4d8 <ip_frag_free_pbuf_custom_ref+0x24>)
 800d4cc:	4803      	ldr	r0, [pc, #12]	; (800d4dc <ip_frag_free_pbuf_custom_ref+0x28>)
 800d4ce:	f001 fcd7 	bl	800ee80 <iprintf>
 800d4d2:	e7f2      	b.n	800d4ba <ip_frag_free_pbuf_custom_ref+0x6>
 800d4d4:	0801253c 	.word	0x0801253c
 800d4d8:	08011cc4 	.word	0x08011cc4
 800d4dc:	080101d8 	.word	0x080101d8

0800d4e0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d4e0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	b138      	cbz	r0, 800d4f6 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800d4e6:	6960      	ldr	r0, [r4, #20]
 800d4e8:	b108      	cbz	r0, 800d4ee <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800d4ea:	f7f9 fab5 	bl	8006a58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f7ff ffe0 	bl	800d4b4 <ip_frag_free_pbuf_custom_ref>
}
 800d4f4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d4f6:	4b04      	ldr	r3, [pc, #16]	; (800d508 <ipfrag_free_pbuf_custom+0x28>)
 800d4f8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800d4fc:	4903      	ldr	r1, [pc, #12]	; (800d50c <ipfrag_free_pbuf_custom+0x2c>)
 800d4fe:	4804      	ldr	r0, [pc, #16]	; (800d510 <ipfrag_free_pbuf_custom+0x30>)
 800d500:	f001 fcbe 	bl	800ee80 <iprintf>
 800d504:	e7ef      	b.n	800d4e6 <ipfrag_free_pbuf_custom+0x6>
 800d506:	bf00      	nop
 800d508:	0801253c 	.word	0x0801253c
 800d50c:	080125f0 	.word	0x080125f0
 800d510:	080101d8 	.word	0x080101d8

0800d514 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 800d514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d518:	4680      	mov	r8, r0
 800d51a:	460f      	mov	r7, r1
 800d51c:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 800d51e:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d520:	8860      	ldrh	r0, [r4, #2]
 800d522:	f7f8 fdd7 	bl	80060d4 <lwip_htons>
 800d526:	7826      	ldrb	r6, [r4, #0]
 800d528:	f006 060f 	and.w	r6, r6, #15
 800d52c:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 800d530:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d532:	88e0      	ldrh	r0, [r4, #6]
 800d534:	f7f8 fdce 	bl	80060d4 <lwip_htons>
 800d538:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d53c:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 800d53e:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 800d540:	2400      	movs	r4, #0
 800d542:	702c      	strb	r4, [r5, #0]
 800d544:	706c      	strb	r4, [r5, #1]
 800d546:	70ac      	strb	r4, [r5, #2]
 800d548:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 800d54a:	80aa      	strh	r2, [r5, #4]
  iprh->end = offset + len;
 800d54c:	eb06 0c02 	add.w	ip, r6, r2
 800d550:	fa1f fc8c 	uxth.w	ip, ip
 800d554:	f8a5 c006 	strh.w	ip, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 800d558:	f8d8 0004 	ldr.w	r0, [r8, #4]
  int valid = 1;
 800d55c:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 800d55e:	e033      	b.n	800d5c8 <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 800d560:	6028      	str	r0, [r5, #0]
      if (iprh_prev != NULL) {
 800d562:	b34c      	cbz	r4, 800d5b8 <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d564:	88e1      	ldrh	r1, [r4, #6]
 800d566:	4291      	cmp	r1, r2
 800d568:	d87d      	bhi.n	800d666 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
 800d56a:	889b      	ldrh	r3, [r3, #4]
 800d56c:	459c      	cmp	ip, r3
 800d56e:	d87a      	bhi.n	800d666 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        iprh_prev->next_pbuf = new_p;
 800d570:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 800d572:	88ab      	ldrh	r3, [r5, #4]
 800d574:	4299      	cmp	r1, r3
 800d576:	d000      	beq.n	800d57a <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 800d578:	2600      	movs	r6, #0
  if (q == NULL) {
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d036      	beq.n	800d5ec <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d57e:	f1b9 0f00 	cmp.w	r9, #0
 800d582:	d104      	bne.n	800d58e <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 800d584:	f898 301e 	ldrb.w	r3, [r8, #30]
 800d588:	f013 0f01 	tst.w	r3, #1
 800d58c:	d079      	beq.n	800d682 <ip_reass_chain_frag_into_datagram_and_validate+0x16e>
    if (valid) {
 800d58e:	2e00      	cmp	r6, #0
 800d590:	d067      	beq.n	800d662 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d592:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d060      	beq.n	800d65c <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 800d59a:	6858      	ldr	r0, [r3, #4]
 800d59c:	8883      	ldrh	r3, [r0, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d15e      	bne.n	800d660 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 800d5a2:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 800d5a4:	2a00      	cmp	r2, #0
 800d5a6:	d044      	beq.n	800d632 <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 800d5a8:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 800d5aa:	88e9      	ldrh	r1, [r5, #6]
 800d5ac:	889a      	ldrh	r2, [r3, #4]
 800d5ae:	4291      	cmp	r1, r2
 800d5b0:	d13d      	bne.n	800d62e <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 800d5b2:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 800d5b4:	461d      	mov	r5, r3
 800d5b6:	e7f5      	b.n	800d5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 800d5b8:	889b      	ldrh	r3, [r3, #4]
 800d5ba:	459c      	cmp	ip, r3
 800d5bc:	d853      	bhi.n	800d666 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        ipr->p = new_p;
 800d5be:	f8c8 7004 	str.w	r7, [r8, #4]
 800d5c2:	e7da      	b.n	800d57a <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 800d5c4:	6818      	ldr	r0, [r3, #0]
    iprh_prev = iprh_tmp;
 800d5c6:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d0d6      	beq.n	800d57a <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800d5cc:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 800d5ce:	8899      	ldrh	r1, [r3, #4]
 800d5d0:	4291      	cmp	r1, r2
 800d5d2:	d8c5      	bhi.n	800d560 <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 800d5d4:	4291      	cmp	r1, r2
 800d5d6:	d046      	beq.n	800d666 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start < iprh_tmp->end) {
 800d5d8:	88d8      	ldrh	r0, [r3, #6]
 800d5da:	4290      	cmp	r0, r2
 800d5dc:	d843      	bhi.n	800d666 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
      if (iprh_prev != NULL) {
 800d5de:	2c00      	cmp	r4, #0
 800d5e0:	d0f0      	beq.n	800d5c4 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 800d5e2:	88e0      	ldrh	r0, [r4, #6]
 800d5e4:	4281      	cmp	r1, r0
 800d5e6:	d0ed      	beq.n	800d5c4 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 800d5e8:	2600      	movs	r6, #0
 800d5ea:	e7eb      	b.n	800d5c4 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 800d5ec:	b194      	cbz	r4, 800d614 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d5ee:	88e2      	ldrh	r2, [r4, #6]
 800d5f0:	88ab      	ldrh	r3, [r5, #4]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d806      	bhi.n	800d604 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 800d5f6:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 800d5f8:	88e2      	ldrh	r2, [r4, #6]
 800d5fa:	88ab      	ldrh	r3, [r5, #4]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d0be      	beq.n	800d57e <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 800d600:	2600      	movs	r6, #0
 800d602:	e7bc      	b.n	800d57e <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d604:	4b20      	ldr	r3, [pc, #128]	; (800d688 <ip_reass_chain_frag_into_datagram_and_validate+0x174>)
 800d606:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d60a:	4920      	ldr	r1, [pc, #128]	; (800d68c <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 800d60c:	4820      	ldr	r0, [pc, #128]	; (800d690 <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 800d60e:	f001 fc37 	bl	800ee80 <iprintf>
 800d612:	e7f0      	b.n	800d5f6 <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d614:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d618:	b133      	cbz	r3, 800d628 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 800d61a:	4b1b      	ldr	r3, [pc, #108]	; (800d688 <ip_reass_chain_frag_into_datagram_and_validate+0x174>)
 800d61c:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800d620:	491c      	ldr	r1, [pc, #112]	; (800d694 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 800d622:	481b      	ldr	r0, [pc, #108]	; (800d690 <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 800d624:	f001 fc2c 	bl	800ee80 <iprintf>
      ipr->p = new_p;
 800d628:	f8c8 7004 	str.w	r7, [r8, #4]
 800d62c:	e7a7      	b.n	800d57e <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 800d62e:	461d      	mov	r5, r3
            valid = 0;
 800d630:	2600      	movs	r6, #0
        if (valid) {
 800d632:	b1b6      	cbz	r6, 800d662 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 800d634:	42a8      	cmp	r0, r5
 800d636:	d009      	beq.n	800d64c <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d638:	682b      	ldr	r3, [r5, #0]
 800d63a:	b193      	cbz	r3, 800d662 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 800d63c:	4b12      	ldr	r3, [pc, #72]	; (800d688 <ip_reass_chain_frag_into_datagram_and_validate+0x174>)
 800d63e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800d642:	4915      	ldr	r1, [pc, #84]	; (800d698 <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 800d644:	4812      	ldr	r0, [pc, #72]	; (800d690 <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 800d646:	f001 fc1b 	bl	800ee80 <iprintf>
 800d64a:	e00a      	b.n	800d662 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 800d64c:	4b0e      	ldr	r3, [pc, #56]	; (800d688 <ip_reass_chain_frag_into_datagram_and_validate+0x174>)
 800d64e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800d652:	4912      	ldr	r1, [pc, #72]	; (800d69c <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 800d654:	480e      	ldr	r0, [pc, #56]	; (800d690 <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 800d656:	f001 fc13 	bl	800ee80 <iprintf>
 800d65a:	e7ed      	b.n	800d638 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 800d65c:	2600      	movs	r6, #0
 800d65e:	e000      	b.n	800d662 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 800d660:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d662:	4630      	mov	r0, r6
 800d664:	e00b      	b.n	800d67e <ip_reass_chain_frag_into_datagram_and_validate+0x16a>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d666:	4638      	mov	r0, r7
 800d668:	f7f9 fbc0 	bl	8006dec <pbuf_clen>
 800d66c:	4a0c      	ldr	r2, [pc, #48]	; (800d6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 800d66e:	8813      	ldrh	r3, [r2, #0]
 800d670:	1a18      	subs	r0, r3, r0
 800d672:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 800d674:	4638      	mov	r0, r7
 800d676:	f7f9 f9ef 	bl	8006a58 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d67a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800d67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d682:	4648      	mov	r0, r9
 800d684:	e7fb      	b.n	800d67e <ip_reass_chain_frag_into_datagram_and_validate+0x16a>
 800d686:	bf00      	nop
 800d688:	0801253c 	.word	0x0801253c
 800d68c:	080124b0 	.word	0x080124b0
 800d690:	080101d8 	.word	0x080101d8
 800d694:	080124d0 	.word	0x080124d0
 800d698:	08012518 	.word	0x08012518
 800d69c:	08012508 	.word	0x08012508
 800d6a0:	20004a1c 	.word	0x20004a1c

0800d6a4 <ip_frag_alloc_pbuf_custom_ref>:
{
 800d6a4:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d6a6:	2005      	movs	r0, #5
 800d6a8:	f7f8 ffe2 	bl	8006670 <memp_malloc>
}
 800d6ac:	bd08      	pop	{r3, pc}
	...

0800d6b0 <ip_reass_enqueue_new_datagram>:
{
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	4605      	mov	r5, r0
 800d6b4:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d6b6:	2004      	movs	r0, #4
 800d6b8:	f7f8 ffda 	bl	8006670 <memp_malloc>
  if (ipr == NULL) {
 800d6bc:	4604      	mov	r4, r0
 800d6be:	b1c8      	cbz	r0, 800d6f4 <ip_reass_enqueue_new_datagram+0x44>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	6062      	str	r2, [r4, #4]
 800d6c4:	60a2      	str	r2, [r4, #8]
 800d6c6:	60e2      	str	r2, [r4, #12]
 800d6c8:	6122      	str	r2, [r4, #16]
 800d6ca:	6162      	str	r2, [r4, #20]
 800d6cc:	61a2      	str	r2, [r4, #24]
 800d6ce:	61e2      	str	r2, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800d6d4:	4b0e      	ldr	r3, [pc, #56]	; (800d710 <ip_reass_enqueue_new_datagram+0x60>)
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800d6da:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d6dc:	682a      	ldr	r2, [r5, #0]
 800d6de:	686e      	ldr	r6, [r5, #4]
 800d6e0:	68a8      	ldr	r0, [r5, #8]
 800d6e2:	68e9      	ldr	r1, [r5, #12]
 800d6e4:	60a2      	str	r2, [r4, #8]
 800d6e6:	60e6      	str	r6, [r4, #12]
 800d6e8:	6120      	str	r0, [r4, #16]
 800d6ea:	6161      	str	r1, [r4, #20]
 800d6ec:	692a      	ldr	r2, [r5, #16]
 800d6ee:	61a2      	str	r2, [r4, #24]
}
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d6f4:	4631      	mov	r1, r6
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f7ff fe9a 	bl	800d430 <ip_reass_remove_oldest_datagram>
 800d6fc:	42b0      	cmp	r0, r6
 800d6fe:	da02      	bge.n	800d706 <ip_reass_enqueue_new_datagram+0x56>
    if (ipr == NULL)
 800d700:	2c00      	cmp	r4, #0
 800d702:	d1dd      	bne.n	800d6c0 <ip_reass_enqueue_new_datagram+0x10>
 800d704:	e7f4      	b.n	800d6f0 <ip_reass_enqueue_new_datagram+0x40>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d706:	2004      	movs	r0, #4
 800d708:	f7f8 ffb2 	bl	8006670 <memp_malloc>
 800d70c:	4604      	mov	r4, r0
 800d70e:	e7f7      	b.n	800d700 <ip_reass_enqueue_new_datagram+0x50>
 800d710:	20004a20 	.word	0x20004a20

0800d714 <ip_reass_tmr>:
{
 800d714:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800d716:	4b09      	ldr	r3, [pc, #36]	; (800d73c <ip_reass_tmr+0x28>)
 800d718:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800d71a:	2400      	movs	r4, #0
  while (r != NULL) {
 800d71c:	e004      	b.n	800d728 <ip_reass_tmr+0x14>
      r = r->next;
 800d71e:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800d720:	4621      	mov	r1, r4
 800d722:	f7ff fe09 	bl	800d338 <ip_reass_free_complete_datagram>
      r = r->next;
 800d726:	4628      	mov	r0, r5
  while (r != NULL) {
 800d728:	b138      	cbz	r0, 800d73a <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 800d72a:	7fc3      	ldrb	r3, [r0, #31]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d0f6      	beq.n	800d71e <ip_reass_tmr+0xa>
      r->timer--;
 800d730:	3b01      	subs	r3, #1
 800d732:	77c3      	strb	r3, [r0, #31]
      prev = r;
 800d734:	4604      	mov	r4, r0
      r = r->next;
 800d736:	6800      	ldr	r0, [r0, #0]
 800d738:	e7f6      	b.n	800d728 <ip_reass_tmr+0x14>
}
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	20004a20 	.word	0x20004a20

0800d740 <ip4_reass>:
{
 800d740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d744:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 800d746:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d748:	782b      	ldrb	r3, [r5, #0]
 800d74a:	f003 030f 	and.w	r3, r3, #15
 800d74e:	2b05      	cmp	r3, #5
 800d750:	d124      	bne.n	800d79c <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d752:	88e8      	ldrh	r0, [r5, #6]
 800d754:	f7f8 fcbe 	bl	80060d4 <lwip_htons>
 800d758:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d75c:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d75e:	8868      	ldrh	r0, [r5, #2]
 800d760:	f7f8 fcb8 	bl	80060d4 <lwip_htons>
 800d764:	782e      	ldrb	r6, [r5, #0]
 800d766:	f006 060f 	and.w	r6, r6, #15
 800d76a:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 800d76e:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 800d770:	4648      	mov	r0, r9
 800d772:	f7f9 fb3b 	bl	8006dec <pbuf_clen>
 800d776:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d778:	4b59      	ldr	r3, [pc, #356]	; (800d8e0 <ip4_reass+0x1a0>)
 800d77a:	881b      	ldrh	r3, [r3, #0]
 800d77c:	4403      	add	r3, r0
 800d77e:	2b0a      	cmp	r3, #10
 800d780:	dc02      	bgt.n	800d788 <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d782:	4b58      	ldr	r3, [pc, #352]	; (800d8e4 <ip4_reass+0x1a4>)
 800d784:	681c      	ldr	r4, [r3, #0]
 800d786:	e00f      	b.n	800d7a8 <ip4_reass+0x68>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d788:	4601      	mov	r1, r0
 800d78a:	4628      	mov	r0, r5
 800d78c:	f7ff fe50 	bl	800d430 <ip_reass_remove_oldest_datagram>
 800d790:	b120      	cbz	r0, 800d79c <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d792:	4b53      	ldr	r3, [pc, #332]	; (800d8e0 <ip4_reass+0x1a0>)
 800d794:	881b      	ldrh	r3, [r3, #0]
 800d796:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d798:	2b0a      	cmp	r3, #10
 800d79a:	ddf2      	ble.n	800d782 <ip4_reass+0x42>
  pbuf_free(p);
 800d79c:	4648      	mov	r0, r9
 800d79e:	f7f9 f95b 	bl	8006a58 <pbuf_free>
  return NULL;
 800d7a2:	2700      	movs	r7, #0
 800d7a4:	e096      	b.n	800d8d4 <ip4_reass+0x194>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d7a6:	6824      	ldr	r4, [r4, #0]
 800d7a8:	b15c      	cbz	r4, 800d7c2 <ip4_reass+0x82>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d7aa:	6962      	ldr	r2, [r4, #20]
 800d7ac:	68eb      	ldr	r3, [r5, #12]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d1f9      	bne.n	800d7a6 <ip4_reass+0x66>
 800d7b2:	69a2      	ldr	r2, [r4, #24]
 800d7b4:	692b      	ldr	r3, [r5, #16]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d1f5      	bne.n	800d7a6 <ip4_reass+0x66>
 800d7ba:	89a2      	ldrh	r2, [r4, #12]
 800d7bc:	88ab      	ldrh	r3, [r5, #4]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d1f1      	bne.n	800d7a6 <ip4_reass+0x66>
  if (ipr == NULL) {
 800d7c2:	2c00      	cmp	r4, #0
 800d7c4:	d048      	beq.n	800d858 <ip4_reass+0x118>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d7c6:	88e8      	ldrh	r0, [r5, #6]
 800d7c8:	f7f8 fc84 	bl	80060d4 <lwip_htons>
 800d7cc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d049      	beq.n	800d868 <ip4_reass+0x128>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d7d4:	88ed      	ldrh	r5, [r5, #6]
 800d7d6:	f005 0520 	and.w	r5, r5, #32
 800d7da:	2d00      	cmp	r5, #0
 800d7dc:	bf0c      	ite	eq
 800d7de:	2201      	moveq	r2, #1
 800d7e0:	2200      	movne	r2, #0
  if (is_last) {
 800d7e2:	d107      	bne.n	800d7f4 <ip4_reass+0xb4>
    u16_t datagram_len = (u16_t)(offset + len);
 800d7e4:	19bb      	adds	r3, r7, r6
 800d7e6:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d7e8:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 800d7ec:	428b      	cmp	r3, r1
 800d7ee:	bf98      	it	ls
 800d7f0:	429f      	cmpls	r7, r3
 800d7f2:	d8d3      	bhi.n	800d79c <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	f7ff fe8c 	bl	800d514 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d7fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d800:	d0cc      	beq.n	800d79c <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d802:	4b37      	ldr	r3, [pc, #220]	; (800d8e0 <ip4_reass+0x1a0>)
 800d804:	881a      	ldrh	r2, [r3, #0]
 800d806:	4490      	add	r8, r2
 800d808:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 800d80c:	b92d      	cbnz	r5, 800d81a <ip4_reass+0xda>
    u16_t datagram_len = (u16_t)(offset + len);
 800d80e:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 800d810:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d812:	7fa3      	ldrb	r3, [r4, #30]
 800d814:	f043 0301 	orr.w	r3, r3, #1
 800d818:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d81a:	2801      	cmp	r0, #1
 800d81c:	d15d      	bne.n	800d8da <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 800d81e:	8ba3      	ldrh	r3, [r4, #28]
 800d820:	3314      	adds	r3, #20
 800d822:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d824:	6863      	ldr	r3, [r4, #4]
 800d826:	685e      	ldr	r6, [r3, #4]
 800d828:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d82a:	4623      	mov	r3, r4
 800d82c:	f853 2f08 	ldr.w	r2, [r3, #8]!
 800d830:	685f      	ldr	r7, [r3, #4]
 800d832:	6898      	ldr	r0, [r3, #8]
 800d834:	68d9      	ldr	r1, [r3, #12]
 800d836:	6032      	str	r2, [r6, #0]
 800d838:	6077      	str	r7, [r6, #4]
 800d83a:	60b0      	str	r0, [r6, #8]
 800d83c:	60f1      	str	r1, [r6, #12]
 800d83e:	691a      	ldr	r2, [r3, #16]
 800d840:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d842:	8ba0      	ldrh	r0, [r4, #28]
 800d844:	f7f8 fc46 	bl	80060d4 <lwip_htons>
 800d848:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d84a:	2300      	movs	r3, #0
 800d84c:	71b3      	strb	r3, [r6, #6]
 800d84e:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d850:	72b3      	strb	r3, [r6, #10]
 800d852:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800d854:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 800d856:	e026      	b.n	800d8a6 <ip4_reass+0x166>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d858:	4641      	mov	r1, r8
 800d85a:	4628      	mov	r0, r5
 800d85c:	f7ff ff28 	bl	800d6b0 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 800d860:	4604      	mov	r4, r0
 800d862:	2800      	cmp	r0, #0
 800d864:	d1b6      	bne.n	800d7d4 <ip4_reass+0x94>
 800d866:	e799      	b.n	800d79c <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d868:	89e0      	ldrh	r0, [r4, #14]
 800d86a:	f7f8 fc33 	bl	80060d4 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d86e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d872:	2800      	cmp	r0, #0
 800d874:	d0ae      	beq.n	800d7d4 <ip4_reass+0x94>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d876:	682a      	ldr	r2, [r5, #0]
 800d878:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800d87c:	68a8      	ldr	r0, [r5, #8]
 800d87e:	68e9      	ldr	r1, [r5, #12]
 800d880:	60a2      	str	r2, [r4, #8]
 800d882:	f8c4 c00c 	str.w	ip, [r4, #12]
 800d886:	6120      	str	r0, [r4, #16]
 800d888:	6161      	str	r1, [r4, #20]
 800d88a:	692a      	ldr	r2, [r5, #16]
 800d88c:	61a2      	str	r2, [r4, #24]
 800d88e:	e7a1      	b.n	800d7d4 <ip4_reass+0x94>
      iprh = (struct ip_reass_helper*)r->payload;
 800d890:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 800d892:	f06f 0113 	mvn.w	r1, #19
 800d896:	4628      	mov	r0, r5
 800d898:	f7f9 f8d4 	bl	8006a44 <pbuf_header>
      pbuf_cat(p, r);
 800d89c:	4629      	mov	r1, r5
 800d89e:	4638      	mov	r0, r7
 800d8a0:	f7f9 faca 	bl	8006e38 <pbuf_cat>
      r = iprh->next_pbuf;
 800d8a4:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 800d8a6:	2d00      	cmp	r5, #0
 800d8a8:	d1f2      	bne.n	800d890 <ip4_reass+0x150>
    if (ipr == reassdatagrams) {
 800d8aa:	4b0e      	ldr	r3, [pc, #56]	; (800d8e4 <ip4_reass+0x1a4>)
 800d8ac:	6819      	ldr	r1, [r3, #0]
 800d8ae:	42a1      	cmp	r1, r4
 800d8b0:	d005      	beq.n	800d8be <ip4_reass+0x17e>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d8b2:	b129      	cbz	r1, 800d8c0 <ip4_reass+0x180>
        if (ipr_prev->next == ipr) {
 800d8b4:	680b      	ldr	r3, [r1, #0]
 800d8b6:	42a3      	cmp	r3, r4
 800d8b8:	d002      	beq.n	800d8c0 <ip4_reass+0x180>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	e7f9      	b.n	800d8b2 <ip4_reass+0x172>
      ipr_prev = NULL;
 800d8be:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f7ff fd15 	bl	800d2f0 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	f7f9 fa90 	bl	8006dec <pbuf_clen>
 800d8cc:	4a04      	ldr	r2, [pc, #16]	; (800d8e0 <ip4_reass+0x1a0>)
 800d8ce:	8813      	ldrh	r3, [r2, #0]
 800d8d0:	1a18      	subs	r0, r3, r0
 800d8d2:	8010      	strh	r0, [r2, #0]
}
 800d8d4:	4638      	mov	r0, r7
 800d8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return NULL;
 800d8da:	2700      	movs	r7, #0
 800d8dc:	e7fa      	b.n	800d8d4 <ip4_reass+0x194>
 800d8de:	bf00      	nop
 800d8e0:	20004a1c 	.word	0x20004a1c
 800d8e4:	20004a20 	.word	0x20004a20

0800d8e8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ec:	b08d      	sub	sp, #52	; 0x34
 800d8ee:	4606      	mov	r6, r0
 800d8f0:	9108      	str	r1, [sp, #32]
 800d8f2:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d8f4:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
 800d8f6:	3b14      	subs	r3, #20
 800d8f8:	d44d      	bmi.n	800d996 <ip4_frag+0xae>
 800d8fa:	10db      	asrs	r3, r3, #3
 800d8fc:	9307      	str	r3, [sp, #28]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d902:	f8d6 a004 	ldr.w	sl, [r6, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d906:	f89a 3000 	ldrb.w	r3, [sl]
 800d90a:	f003 030f 	and.w	r3, r3, #15
 800d90e:	2b05      	cmp	r3, #5
 800d910:	d143      	bne.n	800d99a <ip4_frag+0xb2>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d912:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800d916:	f7f8 fbdd 	bl	80060d4 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800d91a:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800d91e:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d920:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800d924:	d143      	bne.n	800d9ae <ip4_frag+0xc6>

  left = p->tot_len - IP_HLEN;
 800d926:	f8b6 8008 	ldrh.w	r8, [r6, #8]
 800d92a:	f1a8 0814 	sub.w	r8, r8, #20
 800d92e:	fa1f fb88 	uxth.w	fp, r8
  u16_t poff = IP_HLEN;
 800d932:	f04f 0914 	mov.w	r9, #20
  u16_t newpbuflen = 0;
 800d936:	2400      	movs	r4, #0

  while (left) {
 800d938:	f1bb 0f00 	cmp.w	fp, #0
 800d93c:	f000 80b9 	beq.w	800dab2 <ip4_frag+0x1ca>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d940:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d944:	00db      	lsls	r3, r3, #3
 800d946:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d94a:	455b      	cmp	r3, fp
 800d94c:	bfa8      	it	ge
 800d94e:	465b      	movge	r3, fp
 800d950:	b29b      	uxth	r3, r3
 800d952:	9305      	str	r3, [sp, #20]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d954:	2200      	movs	r2, #0
 800d956:	2114      	movs	r1, #20
 800d958:	2002      	movs	r0, #2
 800d95a:	f7f9 f8e7 	bl	8006b2c <pbuf_alloc>
    if (rambuf == NULL) {
 800d95e:	9004      	str	r0, [sp, #16]
 800d960:	2800      	cmp	r0, #0
 800d962:	f000 80a8 	beq.w	800dab6 <ip4_frag+0x1ce>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d966:	8973      	ldrh	r3, [r6, #10]
 800d968:	2b13      	cmp	r3, #19
 800d96a:	d92a      	bls.n	800d9c2 <ip4_frag+0xda>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d96c:	9f04      	ldr	r7, [sp, #16]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8da 2000 	ldr.w	r2, [sl]
 800d974:	f8da 5004 	ldr.w	r5, [sl, #4]
 800d978:	f8da 0008 	ldr.w	r0, [sl, #8]
 800d97c:	f8da 100c 	ldr.w	r1, [sl, #12]
 800d980:	601a      	str	r2, [r3, #0]
 800d982:	605d      	str	r5, [r3, #4]
 800d984:	6098      	str	r0, [r3, #8]
 800d986:	60d9      	str	r1, [r3, #12]
 800d988:	f8da 2010 	ldr.w	r2, [sl, #16]
 800d98c:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d98e:	f8d7 8004 	ldr.w	r8, [r7, #4]

    left_to_copy = fragsize;
 800d992:	9d05      	ldr	r5, [sp, #20]
    while (left_to_copy) {
 800d994:	e03d      	b.n	800da12 <ip4_frag+0x12a>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d996:	3307      	adds	r3, #7
 800d998:	e7af      	b.n	800d8fa <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d99a:	4b48      	ldr	r3, [pc, #288]	; (800dabc <ip4_frag+0x1d4>)
 800d99c:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d9a0:	4947      	ldr	r1, [pc, #284]	; (800dac0 <ip4_frag+0x1d8>)
 800d9a2:	4848      	ldr	r0, [pc, #288]	; (800dac4 <ip4_frag+0x1dc>)
 800d9a4:	f001 fa6c 	bl	800ee80 <iprintf>
 800d9a8:	f06f 0005 	mvn.w	r0, #5
 800d9ac:	e043      	b.n	800da36 <ip4_frag+0x14e>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d9ae:	4b43      	ldr	r3, [pc, #268]	; (800dabc <ip4_frag+0x1d4>)
 800d9b0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d9b4:	4944      	ldr	r1, [pc, #272]	; (800dac8 <ip4_frag+0x1e0>)
 800d9b6:	4843      	ldr	r0, [pc, #268]	; (800dac4 <ip4_frag+0x1dc>)
 800d9b8:	f001 fa62 	bl	800ee80 <iprintf>
 800d9bc:	f06f 0005 	mvn.w	r0, #5
 800d9c0:	e039      	b.n	800da36 <ip4_frag+0x14e>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d9c2:	4b3e      	ldr	r3, [pc, #248]	; (800dabc <ip4_frag+0x1d4>)
 800d9c4:	f240 3209 	movw	r2, #777	; 0x309
 800d9c8:	4940      	ldr	r1, [pc, #256]	; (800dacc <ip4_frag+0x1e4>)
 800d9ca:	483e      	ldr	r0, [pc, #248]	; (800dac4 <ip4_frag+0x1dc>)
 800d9cc:	f001 fa58 	bl	800ee80 <iprintf>
 800d9d0:	e7cc      	b.n	800d96c <ip4_frag+0x84>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d9d2:	f7ff fe67 	bl	800d6a4 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 800d9d6:	4607      	mov	r7, r0
 800d9d8:	b340      	cbz	r0, 800da2c <ip4_frag+0x144>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 800d9da:	6873      	ldr	r3, [r6, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d9dc:	444b      	add	r3, r9
 800d9de:	9401      	str	r4, [sp, #4]
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2202      	movs	r2, #2
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	2004      	movs	r0, #4
 800d9ea:	f7f8 ffef 	bl	80069cc <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800d9ee:	9003      	str	r0, [sp, #12]
 800d9f0:	b320      	cbz	r0, 800da3c <ip4_frag+0x154>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f7f9 fa04 	bl	8006e00 <pbuf_ref>
      pcr->original = p;
 800d9f8:	617e      	str	r6, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d9fa:	4b35      	ldr	r3, [pc, #212]	; (800dad0 <ip4_frag+0x1e8>)
 800d9fc:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d9fe:	9903      	ldr	r1, [sp, #12]
 800da00:	9804      	ldr	r0, [sp, #16]
 800da02:	f7f9 fa19 	bl	8006e38 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800da06:	1b2d      	subs	r5, r5, r4
 800da08:	b2ad      	uxth	r5, r5
      if (left_to_copy) {
 800da0a:	b115      	cbz	r5, 800da12 <ip4_frag+0x12a>
        poff = 0;
        p = p->next;
 800da0c:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 800da0e:	f04f 0900 	mov.w	r9, #0
    while (left_to_copy) {
 800da12:	b1e5      	cbz	r5, 800da4e <ip4_frag+0x166>
      u16_t plen = p->len - poff;
 800da14:	8974      	ldrh	r4, [r6, #10]
 800da16:	eba4 0409 	sub.w	r4, r4, r9
 800da1a:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800da1c:	42ac      	cmp	r4, r5
 800da1e:	bf28      	it	cs
 800da20:	462c      	movcs	r4, r5
      if (!newpbuflen) {
 800da22:	2c00      	cmp	r4, #0
 800da24:	d1d5      	bne.n	800d9d2 <ip4_frag+0xea>
        p = p->next;
 800da26:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 800da28:	46a1      	mov	r9, r4
        continue;
 800da2a:	e7f2      	b.n	800da12 <ip4_frag+0x12a>
        pbuf_free(rambuf);
 800da2c:	9804      	ldr	r0, [sp, #16]
 800da2e:	f7f9 f813 	bl	8006a58 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800da32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800da36:	b00d      	add	sp, #52	; 0x34
 800da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800da3c:	4638      	mov	r0, r7
 800da3e:	f7ff fd39 	bl	800d4b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800da42:	9804      	ldr	r0, [sp, #16]
 800da44:	f7f9 f808 	bl	8006a58 <pbuf_free>
  return ERR_MEM;
 800da48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        goto memerr;
 800da4c:	e7f3      	b.n	800da36 <ip4_frag+0x14e>
    poff += newpbuflen;
 800da4e:	44a1      	add	r9, r4
 800da50:	fa1f f989 	uxth.w	r9, r9
    last = (left <= netif->mtu - IP_HLEN);
 800da54:	9b08      	ldr	r3, [sp, #32]
 800da56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da58:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 800da5a:	9a06      	ldr	r2, [sp, #24]
 800da5c:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 800da60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da62:	429a      	cmp	r2, r3
 800da64:	dd01      	ble.n	800da6a <ip4_frag+0x182>
      tmp = tmp | IP_MF;
 800da66:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800da6a:	f7f8 fb33 	bl	80060d4 <lwip_htons>
 800da6e:	f8a8 0006 	strh.w	r0, [r8, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800da72:	9d05      	ldr	r5, [sp, #20]
 800da74:	f105 0014 	add.w	r0, r5, #20
 800da78:	b280      	uxth	r0, r0
 800da7a:	f7f8 fb2b 	bl	80060d4 <lwip_htons>
 800da7e:	f8a8 0002 	strh.w	r0, [r8, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800da82:	2300      	movs	r3, #0
 800da84:	f888 300a 	strb.w	r3, [r8, #10]
 800da88:	f888 300b 	strb.w	r3, [r8, #11]
    netif->output(netif, rambuf, dest);
 800da8c:	9808      	ldr	r0, [sp, #32]
 800da8e:	6943      	ldr	r3, [r0, #20]
 800da90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da92:	9f04      	ldr	r7, [sp, #16]
 800da94:	4639      	mov	r1, r7
 800da96:	4798      	blx	r3
    pbuf_free(rambuf);
 800da98:	4638      	mov	r0, r7
 800da9a:	f7f8 ffdd 	bl	8006a58 <pbuf_free>
    left -= fragsize;
 800da9e:	ebab 0b05 	sub.w	fp, fp, r5
 800daa2:	fa1f fb8b 	uxth.w	fp, fp
    ofo += nfb;
 800daa6:	9b06      	ldr	r3, [sp, #24]
 800daa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daaa:	4413      	add	r3, r2
 800daac:	b29b      	uxth	r3, r3
 800daae:	9306      	str	r3, [sp, #24]
 800dab0:	e742      	b.n	800d938 <ip4_frag+0x50>
  return ERR_OK;
 800dab2:	2000      	movs	r0, #0
 800dab4:	e7bf      	b.n	800da36 <ip4_frag+0x14e>
  return ERR_MEM;
 800dab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daba:	e7bc      	b.n	800da36 <ip4_frag+0x14e>
 800dabc:	0801253c 	.word	0x0801253c
 800dac0:	0801244c 	.word	0x0801244c
 800dac4:	080101d8 	.word	0x080101d8
 800dac8:	08012474 	.word	0x08012474
 800dacc:	08012490 	.word	0x08012490
 800dad0:	0800d4e1 	.word	0x0800d4e1

0800dad4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad6:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800dad8:	8945      	ldrh	r5, [r0, #10]
 800dada:	2d0e      	cmp	r5, #14
 800dadc:	d916      	bls.n	800db0c <ethernet_input+0x38>
 800dade:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dae0:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800dae2:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dae4:	7803      	ldrb	r3, [r0, #0]
 800dae6:	f013 0f01 	tst.w	r3, #1
 800daea:	d00a      	beq.n	800db02 <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800daec:	2b01      	cmp	r3, #1
 800daee:	d012      	beq.n	800db16 <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800daf0:	2206      	movs	r2, #6
 800daf2:	4921      	ldr	r1, [pc, #132]	; (800db78 <ethernet_input+0xa4>)
 800daf4:	f001 f9a2 	bl	800ee3c <memcmp>
 800daf8:	b918      	cbnz	r0, 800db02 <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dafa:	7b63      	ldrb	r3, [r4, #13]
 800dafc:	f043 0308 	orr.w	r3, r3, #8
 800db00:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800db02:	2e08      	cmp	r6, #8
 800db04:	d012      	beq.n	800db2c <ethernet_input+0x58>
 800db06:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800db0a:	d022      	beq.n	800db52 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800db0c:	4620      	mov	r0, r4
 800db0e:	f7f8 ffa3 	bl	8006a58 <pbuf_free>
  return ERR_OK;
}
 800db12:	2000      	movs	r0, #0
 800db14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800db16:	7843      	ldrb	r3, [r0, #1]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d1f2      	bne.n	800db02 <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800db1c:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800db1e:	2b5e      	cmp	r3, #94	; 0x5e
 800db20:	d1ef      	bne.n	800db02 <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 800db22:	7b63      	ldrb	r3, [r4, #13]
 800db24:	f043 0310 	orr.w	r3, r3, #16
 800db28:	7363      	strb	r3, [r4, #13]
 800db2a:	e7ea      	b.n	800db02 <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800db2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db30:	f013 0f08 	tst.w	r3, #8
 800db34:	d0ea      	beq.n	800db0c <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800db36:	2d0d      	cmp	r5, #13
 800db38:	d9e8      	bls.n	800db0c <ethernet_input+0x38>
 800db3a:	f06f 010d 	mvn.w	r1, #13
 800db3e:	4620      	mov	r0, r4
 800db40:	f7f8 ff80 	bl	8006a44 <pbuf_header>
 800db44:	2800      	cmp	r0, #0
 800db46:	d1e1      	bne.n	800db0c <ethernet_input+0x38>
        ip4_input(p, netif);
 800db48:	4639      	mov	r1, r7
 800db4a:	4620      	mov	r0, r4
 800db4c:	f7ff fa3e 	bl	800cfcc <ip4_input>
      break;
 800db50:	e7df      	b.n	800db12 <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800db52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db56:	f013 0f08 	tst.w	r3, #8
 800db5a:	d0d7      	beq.n	800db0c <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800db5c:	2d0d      	cmp	r5, #13
 800db5e:	d9d5      	bls.n	800db0c <ethernet_input+0x38>
 800db60:	f06f 010d 	mvn.w	r1, #13
 800db64:	4620      	mov	r0, r4
 800db66:	f7f8 ff6d 	bl	8006a44 <pbuf_header>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d1ce      	bne.n	800db0c <ethernet_input+0x38>
        etharp_input(p, netif);
 800db6e:	4639      	mov	r1, r7
 800db70:	4620      	mov	r0, r4
 800db72:	f7fe fe2d 	bl	800c7d0 <etharp_input>
      break;
 800db76:	e7cc      	b.n	800db12 <ethernet_input+0x3e>
 800db78:	080125fc 	.word	0x080125fc

0800db7c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800db7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db80:	4605      	mov	r5, r0
 800db82:	460c      	mov	r4, r1
 800db84:	4616      	mov	r6, r2
 800db86:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800db88:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800db8c:	f7f8 faa2 	bl	80060d4 <lwip_htons>
 800db90:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800db92:	210e      	movs	r1, #14
 800db94:	4620      	mov	r0, r4
 800db96:	f7f8 ff55 	bl	8006a44 <pbuf_header>
 800db9a:	b9e8      	cbnz	r0, 800dbd8 <ethernet_output+0x5c>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800db9c:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 800db9e:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	88ba      	ldrh	r2, [r7, #4]
 800dba8:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800dbaa:	6832      	ldr	r2, [r6, #0]
 800dbac:	f8c3 2006 	str.w	r2, [r3, #6]
 800dbb0:	88b2      	ldrh	r2, [r6, #4]
 800dbb2:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dbb4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800dbb8:	2b06      	cmp	r3, #6
 800dbba:	d105      	bne.n	800dbc8 <ethernet_output+0x4c>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dbbc:	69ab      	ldr	r3, [r5, #24]
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dbc8:	4b05      	ldr	r3, [pc, #20]	; (800dbe0 <ethernet_output+0x64>)
 800dbca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800dbce:	4905      	ldr	r1, [pc, #20]	; (800dbe4 <ethernet_output+0x68>)
 800dbd0:	4805      	ldr	r0, [pc, #20]	; (800dbe8 <ethernet_output+0x6c>)
 800dbd2:	f001 f955 	bl	800ee80 <iprintf>
 800dbd6:	e7f1      	b.n	800dbbc <ethernet_output+0x40>
  return ERR_BUF;
 800dbd8:	f06f 0001 	mvn.w	r0, #1
 800dbdc:	e7f2      	b.n	800dbc4 <ethernet_output+0x48>
 800dbde:	bf00      	nop
 800dbe0:	08012604 	.word	0x08012604
 800dbe4:	0801263c 	.word	0x0801263c
 800dbe8:	080101d8 	.word	0x080101d8

0800dbec <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800dbec:	b510      	push	{r4, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800dbf2:	9100      	str	r1, [sp, #0]
 800dbf4:	2304      	movs	r3, #4
 800dbf6:	9301      	str	r3, [sp, #4]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	4668      	mov	r0, sp
 800dbfc:	f7f5 f858 	bl	8002cb0 <osMessageCreate>
 800dc00:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800dc02:	b110      	cbz	r0, 800dc0a <sys_mbox_new+0x1e>
  return ERR_MEM;
 
 return ERR_OK;
 800dc04:	2000      	movs	r0, #0
}
 800dc06:	b002      	add	sp, #8
 800dc08:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 800dc0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc0e:	e7fa      	b.n	800dc06 <sys_mbox_new+0x1a>

0800dc10 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800dc10:	b510      	push	{r4, lr}
 800dc12:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 800dc14:	6800      	ldr	r0, [r0, #0]
 800dc16:	f7f5 f8d7 	bl	8002dc8 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 800dc1a:	6820      	ldr	r0, [r4, #0]
 800dc1c:	f7f5 f8e1 	bl	8002de2 <osMessageDelete>

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800dc20:	bd10      	pop	{r4, pc}

0800dc22 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800dc22:	b538      	push	{r3, r4, r5, lr}
 800dc24:	4605      	mov	r5, r0
 800dc26:	460c      	mov	r4, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800dc28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc2c:	4621      	mov	r1, r4
 800dc2e:	6828      	ldr	r0, [r5, #0]
 800dc30:	f7f5 f846 	bl	8002cc0 <osMessagePut>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d1f7      	bne.n	800dc28 <sys_mbox_post+0x6>
}
 800dc38:	bd38      	pop	{r3, r4, r5, pc}

0800dc3a <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800dc3a:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	6800      	ldr	r0, [r0, #0]
 800dc40:	f7f5 f83e 	bl	8002cc0 <osMessagePut>
 800dc44:	b900      	cbnz	r0, 800dc48 <sys_mbox_trypost+0xe>
#endif /* SYS_STATS */
			
   }

   return result;
}
 800dc46:	bd08      	pop	{r3, pc}
      result = ERR_MEM;
 800dc48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc4c:	e7fb      	b.n	800dc46 <sys_mbox_trypost+0xc>

0800dc4e <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800dc4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc50:	b089      	sub	sp, #36	; 0x24
 800dc52:	4606      	mov	r6, r0
 800dc54:	460f      	mov	r7, r1
 800dc56:	4615      	mov	r5, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800dc58:	f7f4 ff08 	bl	8002a6c <osKernelSysTick>
 800dc5c:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800dc5e:	b185      	cbz	r5, 800dc82 <sys_arch_mbox_fetch+0x34>
  { 
    event = osMessageGet (*mbox, timeout);
 800dc60:	462a      	mov	r2, r5
 800dc62:	6831      	ldr	r1, [r6, #0]
 800dc64:	a805      	add	r0, sp, #20
 800dc66:	f7f5 f85f 	bl	8002d28 <osMessageGet>
    
    if(event.status == osEventMessage)
 800dc6a:	9b05      	ldr	r3, [sp, #20]
 800dc6c:	2b10      	cmp	r3, #16
 800dc6e:	d002      	beq.n	800dc76 <sys_arch_mbox_fetch+0x28>
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 800dc70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc74:	e016      	b.n	800dca4 <sys_arch_mbox_fetch+0x56>
      *msg = (void *)event.value.v;
 800dc76:	9b06      	ldr	r3, [sp, #24]
 800dc78:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 800dc7a:	f7f4 fef7 	bl	8002a6c <osKernelSysTick>
 800dc7e:	1b00      	subs	r0, r0, r4
 800dc80:	e010      	b.n	800dca4 <sys_arch_mbox_fetch+0x56>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 800dc82:	466d      	mov	r5, sp
 800dc84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc88:	6831      	ldr	r1, [r6, #0]
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	f7f5 f84c 	bl	8002d28 <osMessageGet>
 800dc90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc94:	ab08      	add	r3, sp, #32
 800dc96:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800dc9a:	9b06      	ldr	r3, [sp, #24]
 800dc9c:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 800dc9e:	f7f4 fee5 	bl	8002a6c <osKernelSysTick>
 800dca2:	1b00      	subs	r0, r0, r4
  }
}
 800dca4:	b009      	add	sp, #36	; 0x24
 800dca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dca8 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800dca8:	b510      	push	{r4, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 800dcae:	2200      	movs	r2, #0
 800dcb0:	6801      	ldr	r1, [r0, #0]
 800dcb2:	a801      	add	r0, sp, #4
 800dcb4:	f7f5 f838 	bl	8002d28 <osMessageGet>
  
  if(event.status == osEventMessage)
 800dcb8:	9b01      	ldr	r3, [sp, #4]
 800dcba:	2b10      	cmp	r3, #16
 800dcbc:	d104      	bne.n	800dcc8 <sys_arch_mbox_tryfetch+0x20>
  {
    *msg = (void *)event.value.v;
 800dcbe:	9b02      	ldr	r3, [sp, #8]
 800dcc0:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 800dcc2:	2000      	movs	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 800dcc4:	b004      	add	sp, #16
 800dcc6:	bd10      	pop	{r4, pc}
    return SYS_MBOX_EMPTY;
 800dcc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dccc:	e7fa      	b.n	800dcc4 <sys_arch_mbox_tryfetch+0x1c>

0800dcce <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
  if (*mbox == SYS_MBOX_NULL) 
 800dcce:	6803      	ldr	r3, [r0, #0]
 800dcd0:	b10b      	cbz	r3, 800dcd6 <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 800dcd2:	2001      	movs	r0, #1
}                                             
 800dcd4:	4770      	bx	lr
    return 0;
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	4770      	bx	lr

0800dcda <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
  *mbox = SYS_MBOX_NULL;                      
 800dcda:	2300      	movs	r3, #0
 800dcdc:	6003      	str	r3, [r0, #0]
}                                             
 800dcde:	4770      	bx	lr

0800dce0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800dce0:	b530      	push	{r4, r5, lr}
 800dce2:	b083      	sub	sp, #12
 800dce4:	4604      	mov	r4, r0
 800dce6:	460d      	mov	r5, r1
  osSemaphoreDef(SEM);
 800dce8:	a802      	add	r0, sp, #8
 800dcea:	2300      	movs	r3, #0
 800dcec:	f840 3d04 	str.w	r3, [r0, #-4]!

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800dcf0:	2101      	movs	r1, #1
 800dcf2:	f7f4 ff55 	bl	8002ba0 <osSemaphoreCreate>
 800dcf6:	6020      	str	r0, [r4, #0]
	
  if(*sem == NULL)
 800dcf8:	b140      	cbz	r0, 800dd0c <sys_sem_new+0x2c>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 800dcfa:	b115      	cbz	r5, 800dd02 <sys_sem_new+0x22>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 800dcfc:	2000      	movs	r0, #0
}
 800dcfe:	b003      	add	sp, #12
 800dd00:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem,0);
 800dd02:	2100      	movs	r1, #0
 800dd04:	f7f4 ff60 	bl	8002bc8 <osSemaphoreWait>
	return ERR_OK;
 800dd08:	2000      	movs	r0, #0
 800dd0a:	e7f8      	b.n	800dcfe <sys_sem_new+0x1e>
		return ERR_MEM;
 800dd0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd10:	e7f5      	b.n	800dcfe <sys_sem_new+0x1e>

0800dd12 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800dd12:	b570      	push	{r4, r5, r6, lr}
 800dd14:	4604      	mov	r4, r0
 800dd16:	460e      	mov	r6, r1
  uint32_t starttime = osKernelSysTick();
 800dd18:	f7f4 fea8 	bl	8002a6c <osKernelSysTick>
 800dd1c:	4605      	mov	r5, r0
  
  if(timeout != 0)
 800dd1e:	b956      	cbnz	r6, 800dd36 <sys_arch_sem_wait+0x24>
      return SYS_ARCH_TIMEOUT;
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800dd20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800dd24:	6820      	ldr	r0, [r4, #0]
 800dd26:	f7f4 ff4f 	bl	8002bc8 <osSemaphoreWait>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d1f8      	bne.n	800dd20 <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 800dd2e:	f7f4 fe9d 	bl	8002a6c <osKernelSysTick>
 800dd32:	1b40      	subs	r0, r0, r5
  }
}
 800dd34:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800dd36:	4631      	mov	r1, r6
 800dd38:	6820      	ldr	r0, [r4, #0]
 800dd3a:	f7f4 ff45 	bl	8002bc8 <osSemaphoreWait>
 800dd3e:	b918      	cbnz	r0, 800dd48 <sys_arch_sem_wait+0x36>
      return (osKernelSysTick() - starttime);
 800dd40:	f7f4 fe94 	bl	8002a6c <osKernelSysTick>
 800dd44:	1b40      	subs	r0, r0, r5
 800dd46:	e7f5      	b.n	800dd34 <sys_arch_sem_wait+0x22>
      return SYS_ARCH_TIMEOUT;
 800dd48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd4c:	e7f2      	b.n	800dd34 <sys_arch_sem_wait+0x22>

0800dd4e <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800dd4e:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 800dd50:	6800      	ldr	r0, [r0, #0]
 800dd52:	f7f4 ff73 	bl	8002c3c <osSemaphoreRelease>
}
 800dd56:	bd08      	pop	{r3, pc}

0800dd58 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800dd58:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 800dd5a:	6800      	ldr	r0, [r0, #0]
 800dd5c:	f7f4 ff9c 	bl	8002c98 <osSemaphoreDelete>
}
 800dd60:	bd08      	pop	{r3, pc}

0800dd62 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 800dd62:	6803      	ldr	r3, [r0, #0]
 800dd64:	b10b      	cbz	r3, 800dd6a <sys_sem_valid+0x8>
    return 0;
  else
    return 1;                                       
 800dd66:	2001      	movs	r0, #1
}
 800dd68:	4770      	bx	lr
    return 0;
 800dd6a:	2000      	movs	r0, #0
 800dd6c:	4770      	bx	lr

0800dd6e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 800dd6e:	2300      	movs	r3, #0
 800dd70:	6003      	str	r3, [r0, #0]
} 
 800dd72:	4770      	bx	lr

0800dd74 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800dd74:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800dd76:	4803      	ldr	r0, [pc, #12]	; (800dd84 <sys_init+0x10>)
 800dd78:	f7f4 fea5 	bl	8002ac6 <osMutexCreate>
 800dd7c:	4b02      	ldr	r3, [pc, #8]	; (800dd88 <sys_init+0x14>)
 800dd7e:	6018      	str	r0, [r3, #0]
}
 800dd80:	bd08      	pop	{r3, pc}
 800dd82:	bf00      	nop
 800dd84:	08012678 	.word	0x08012678
 800dd88:	20008238 	.word	0x20008238

0800dd8c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800dd8c:	b510      	push	{r4, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 800dd92:	a802      	add	r0, sp, #8
 800dd94:	2300      	movs	r3, #0
 800dd96:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800dd9a:	f7f4 fe94 	bl	8002ac6 <osMutexCreate>
 800dd9e:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800dda0:	b110      	cbz	r0, 800dda8 <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800dda2:	2000      	movs	r0, #0
}
 800dda4:	b002      	add	sp, #8
 800dda6:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 800dda8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddac:	e7fa      	b.n	800dda4 <sys_mutex_new+0x18>

0800ddae <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800ddae:	b508      	push	{r3, lr}
  osMutexWait (*mutex, osWaitForever);
 800ddb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ddb4:	6800      	ldr	r0, [r0, #0]
 800ddb6:	f7f4 fe8b 	bl	8002ad0 <osMutexWait>
}
 800ddba:	bd08      	pop	{r3, pc}

0800ddbc <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800ddbc:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800ddbe:	6800      	ldr	r0, [r0, #0]
 800ddc0:	f7f4 fec0 	bl	8002b44 <osMutexRelease>
}
 800ddc4:	bd08      	pop	{r3, pc}

0800ddc6 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800ddc6:	b500      	push	{lr}
 800ddc8:	b087      	sub	sp, #28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ddca:	9001      	str	r0, [sp, #4]
 800ddcc:	9102      	str	r1, [sp, #8]
 800ddce:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800ddd2:	f8ad 100c 	strh.w	r1, [sp, #12]
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	9104      	str	r1, [sp, #16]
 800ddda:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800dddc:	4611      	mov	r1, r2
 800ddde:	a801      	add	r0, sp, #4
 800dde0:	f7f4 fe4e 	bl	8002a80 <osThreadCreate>
}
 800dde4:	b007      	add	sp, #28
 800dde6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ddec <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800ddec:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800ddee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ddf2:	4b03      	ldr	r3, [pc, #12]	; (800de00 <sys_arch_protect+0x14>)
 800ddf4:	6818      	ldr	r0, [r3, #0]
 800ddf6:	f7f4 fe6b 	bl	8002ad0 <osMutexWait>
  return (sys_prot_t)1;
}
 800ddfa:	2001      	movs	r0, #1
 800ddfc:	bd08      	pop	{r3, pc}
 800ddfe:	bf00      	nop
 800de00:	20008238 	.word	0x20008238

0800de04 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800de04:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800de06:	4b02      	ldr	r3, [pc, #8]	; (800de10 <sys_arch_unprotect+0xc>)
 800de08:	6818      	ldr	r0, [r3, #0]
 800de0a:	f7f4 fe9b 	bl	8002b44 <osMutexRelease>
}
 800de0e:	bd08      	pop	{r3, pc}
 800de10:	20008238 	.word	0x20008238

0800de14 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800de14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800de18:	4833      	ldr	r0, [pc, #204]	; (800dee8 <low_level_input+0xd4>)
 800de1a:	f7f2 fe83 	bl	8000b24 <HAL_ETH_GetReceivedFrame_IT>
 800de1e:	2800      	cmp	r0, #0
 800de20:	d15e      	bne.n	800dee0 <low_level_input+0xcc>
    return NULL;
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800de22:	4b31      	ldr	r3, [pc, #196]	; (800dee8 <low_level_input+0xd4>)
 800de24:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800de26:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
  
  if (len > 0)
 800de2a:	b929      	cbnz	r1, 800de38 <low_level_input+0x24>
  struct pbuf *p = NULL;
 800de2c:	f04f 0800 	mov.w	r8, #0
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800de30:	4b2d      	ldr	r3, [pc, #180]	; (800dee8 <low_level_input+0xd4>)
 800de32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800de34:	2100      	movs	r1, #0
 800de36:	e03a      	b.n	800deae <low_level_input+0x9a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800de38:	2203      	movs	r2, #3
 800de3a:	2004      	movs	r0, #4
 800de3c:	f7f8 fe76 	bl	8006b2c <pbuf_alloc>
  if (p != NULL)
 800de40:	4680      	mov	r8, r0
 800de42:	2800      	cmp	r0, #0
 800de44:	d0f4      	beq.n	800de30 <low_level_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800de46:	4b28      	ldr	r3, [pc, #160]	; (800dee8 <low_level_input+0xd4>)
 800de48:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800de4a:	4682      	mov	sl, r0
    bufferoffset = 0;
 800de4c:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800de4e:	e021      	b.n	800de94 <low_level_input+0x80>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800de50:	f8da 0004 	ldr.w	r0, [sl, #4]
 800de54:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800de58:	1b12      	subs	r2, r2, r4
 800de5a:	eb09 0104 	add.w	r1, r9, r4
 800de5e:	4430      	add	r0, r6
 800de60:	f000 fffb 	bl	800ee5a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800de64:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800de66:	f8d7 9008 	ldr.w	r9, [r7, #8]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800de6a:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800de6e:	1b36      	subs	r6, r6, r4
 800de70:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 800de74:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800de76:	18a5      	adds	r5, r4, r2
 800de78:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800de7c:	429d      	cmp	r5, r3
 800de7e:	d8e7      	bhi.n	800de50 <low_level_input+0x3c>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800de80:	f8da 0004 	ldr.w	r0, [sl, #4]
 800de84:	eb09 0104 	add.w	r1, r9, r4
 800de88:	4430      	add	r0, r6
 800de8a:	f000 ffe6 	bl	800ee5a <memcpy>
    for(q = p; q != NULL; q = q->next)
 800de8e:	f8da a000 	ldr.w	sl, [sl]
      bufferoffset = bufferoffset + byteslefttocopy;
 800de92:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 800de94:	f1ba 0f00 	cmp.w	sl, #0
 800de98:	d0ca      	beq.n	800de30 <low_level_input+0x1c>
      byteslefttocopy = q->len;
 800de9a:	f8ba 200a 	ldrh.w	r2, [sl, #10]
      payloadoffset = 0;
 800de9e:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800dea0:	e7e9      	b.n	800de76 <low_level_input+0x62>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800dea8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800deaa:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800deac:	3101      	adds	r1, #1
 800deae:	4a0e      	ldr	r2, [pc, #56]	; (800dee8 <low_level_input+0xd4>)
 800deb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800deb2:	428a      	cmp	r2, r1
 800deb4:	d8f5      	bhi.n	800dea2 <low_level_input+0x8e>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800deb6:	4b0c      	ldr	r3, [pc, #48]	; (800dee8 <low_level_input+0xd4>)
 800deb8:	2200      	movs	r2, #0
 800deba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f241 0214 	movw	r2, #4116	; 0x1014
 800dec2:	589a      	ldr	r2, [r3, r2]
 800dec4:	f012 0f80 	tst.w	r2, #128	; 0x80
 800dec8:	d007      	beq.n	800deda <low_level_input+0xc6>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800deca:	f241 0214 	movw	r2, #4116	; 0x1014
 800dece:	2180      	movs	r1, #128	; 0x80
 800ded0:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800ded2:	f241 0208 	movw	r2, #4104	; 0x1008
 800ded6:	2100      	movs	r1, #0
 800ded8:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800deda:	4640      	mov	r0, r8
 800dedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 800dee0:	f04f 0800 	mov.w	r8, #0
 800dee4:	e7f9      	b.n	800deda <low_level_input+0xc6>
 800dee6:	bf00      	nop
 800dee8:	20009b0c 	.word	0x20009b0c

0800deec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800deec:	b538      	push	{r3, r4, r5, lr}
 800deee:	4605      	mov	r5, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800def0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800def4:	4b0b      	ldr	r3, [pc, #44]	; (800df24 <ethernetif_input+0x38>)
 800def6:	6818      	ldr	r0, [r3, #0]
 800def8:	f7f4 fe66 	bl	8002bc8 <osSemaphoreWait>
 800defc:	2800      	cmp	r0, #0
 800defe:	d1f7      	bne.n	800def0 <ethernetif_input+0x4>
 800df00:	e001      	b.n	800df06 <ethernetif_input+0x1a>
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
      } while(p!=NULL);
 800df02:	2c00      	cmp	r4, #0
 800df04:	d0f4      	beq.n	800def0 <ethernetif_input+0x4>
        p = low_level_input( netif );
 800df06:	4628      	mov	r0, r5
 800df08:	f7ff ff84 	bl	800de14 <low_level_input>
        if   (p != NULL)
 800df0c:	4604      	mov	r4, r0
 800df0e:	2800      	cmp	r0, #0
 800df10:	d0f7      	beq.n	800df02 <ethernetif_input+0x16>
          if (netif->input( p, netif) != ERR_OK )
 800df12:	692b      	ldr	r3, [r5, #16]
 800df14:	4629      	mov	r1, r5
 800df16:	4798      	blx	r3
 800df18:	2800      	cmp	r0, #0
 800df1a:	d0f2      	beq.n	800df02 <ethernetif_input+0x16>
            pbuf_free(p);
 800df1c:	4620      	mov	r0, r4
 800df1e:	f7f8 fd9b 	bl	8006a58 <pbuf_free>
 800df22:	e7ee      	b.n	800df02 <ethernetif_input+0x16>
 800df24:	20004a24 	.word	0x20004a24

0800df28 <low_level_output>:
{
 800df28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2c:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800df2e:	4b2c      	ldr	r3, [pc, #176]	; (800dfe0 <low_level_output+0xb8>)
 800df30:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800df32:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 800df36:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 800df38:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 800df3a:	f1bb 0f00 	cmp.w	fp, #0
 800df3e:	d032      	beq.n	800dfa6 <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800df40:	6833      	ldr	r3, [r6, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	db35      	blt.n	800dfb2 <low_level_output+0x8a>
      byteslefttocopy = q->len;
 800df46:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 800df4a:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800df4c:	eb04 0809 	add.w	r8, r4, r9
 800df50:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800df54:	4598      	cmp	r8, r3
 800df56:	d919      	bls.n	800df8c <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800df58:	f8db 1004 	ldr.w	r1, [fp, #4]
 800df5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800df60:	1b12      	subs	r2, r2, r4
 800df62:	4429      	add	r1, r5
 800df64:	eb0a 0004 	add.w	r0, sl, r4
 800df68:	f000 ff77 	bl	800ee5a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800df6c:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800df6e:	6833      	ldr	r3, [r6, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	db21      	blt.n	800dfb8 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800df74:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800df78:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800df7c:	1b2d      	subs	r5, r5, r4
 800df7e:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800df82:	1b3f      	subs	r7, r7, r4
 800df84:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800df88:	2400      	movs	r4, #0
 800df8a:	e7df      	b.n	800df4c <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800df8c:	f8db 1004 	ldr.w	r1, [fp, #4]
 800df90:	464a      	mov	r2, r9
 800df92:	4429      	add	r1, r5
 800df94:	eb0a 0004 	add.w	r0, sl, r4
 800df98:	f000 ff5f 	bl	800ee5a <memcpy>
      framelength = framelength + byteslefttocopy;
 800df9c:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 800df9e:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 800dfa2:	4644      	mov	r4, r8
 800dfa4:	e7c9      	b.n	800df3a <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800dfa6:	4639      	mov	r1, r7
 800dfa8:	480d      	ldr	r0, [pc, #52]	; (800dfe0 <low_level_output+0xb8>)
 800dfaa:	f7f2 fd29 	bl	8000a00 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800dfae:	2000      	movs	r0, #0
 800dfb0:	e004      	b.n	800dfbc <low_level_output+0x94>
        errval = ERR_USE;
 800dfb2:	f06f 0007 	mvn.w	r0, #7
 800dfb6:	e001      	b.n	800dfbc <low_level_output+0x94>
          errval = ERR_USE;
 800dfb8:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800dfbc:	4b08      	ldr	r3, [pc, #32]	; (800dfe0 <low_level_output+0xb8>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f241 0214 	movw	r2, #4116	; 0x1014
 800dfc4:	589a      	ldr	r2, [r3, r2]
 800dfc6:	f012 0f20 	tst.w	r2, #32
 800dfca:	d007      	beq.n	800dfdc <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800dfcc:	f241 0214 	movw	r2, #4116	; 0x1014
 800dfd0:	2120      	movs	r1, #32
 800dfd2:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800dfd4:	f241 0204 	movw	r2, #4100	; 0x1004
 800dfd8:	2100      	movs	r1, #0
 800dfda:	5099      	str	r1, [r3, r2]
}
 800dfdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe0:	20009b0c 	.word	0x20009b0c

0800dfe4 <low_level_init>:
{ 
 800dfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfe6:	b08b      	sub	sp, #44	; 0x2c
 800dfe8:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 800dfea:	2300      	movs	r3, #0
 800dfec:	9309      	str	r3, [sp, #36]	; 0x24
  heth.Instance = ETH;
 800dfee:	483d      	ldr	r0, [pc, #244]	; (800e0e4 <low_level_init+0x100>)
 800dff0:	4a3d      	ldr	r2, [pc, #244]	; (800e0e8 <low_level_init+0x104>)
 800dff2:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800dff4:	2201      	movs	r2, #1
 800dff6:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800dff8:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 800dffa:	f88d 301c 	strb.w	r3, [sp, #28]
  MACAddr[1] = 0x80;
 800dffe:	2180      	movs	r1, #128	; 0x80
 800e000:	f88d 101d 	strb.w	r1, [sp, #29]
  MACAddr[2] = 0xE1;
 800e004:	21e1      	movs	r1, #225	; 0xe1
 800e006:	f88d 101e 	strb.w	r1, [sp, #30]
  MACAddr[3] = 0x00;
 800e00a:	f88d 301f 	strb.w	r3, [sp, #31]
  MACAddr[4] = 0x00;
 800e00e:	f88d 3020 	strb.w	r3, [sp, #32]
  MACAddr[5] = 0x00;
 800e012:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  heth.Init.MACAddr = &MACAddr[0];
 800e016:	a907      	add	r1, sp, #28
 800e018:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800e01a:	6182      	str	r2, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800e01c:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800e01e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e022:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e024:	f7f2 fe88 	bl	8000d38 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800e028:	b928      	cbnz	r0, 800e036 <low_level_init+0x52>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800e02a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800e02e:	f043 0304 	orr.w	r3, r3, #4
 800e032:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800e036:	4d2b      	ldr	r5, [pc, #172]	; (800e0e4 <low_level_init+0x100>)
 800e038:	2304      	movs	r3, #4
 800e03a:	4a2c      	ldr	r2, [pc, #176]	; (800e0ec <low_level_init+0x108>)
 800e03c:	492c      	ldr	r1, [pc, #176]	; (800e0f0 <low_level_init+0x10c>)
 800e03e:	4628      	mov	r0, r5
 800e040:	f7f2 fc6f 	bl	8000922 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800e044:	2304      	movs	r3, #4
 800e046:	4a2b      	ldr	r2, [pc, #172]	; (800e0f4 <low_level_init+0x110>)
 800e048:	492b      	ldr	r1, [pc, #172]	; (800e0f8 <low_level_init+0x114>)
 800e04a:	4628      	mov	r0, r5
 800e04c:	f7f2 fca2 	bl	8000994 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e050:	2306      	movs	r3, #6
 800e052:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e056:	696b      	ldr	r3, [r5, #20]
 800e058:	781a      	ldrb	r2, [r3, #0]
 800e05a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e05e:	785a      	ldrb	r2, [r3, #1]
 800e060:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e064:	789a      	ldrb	r2, [r3, #2]
 800e066:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e06a:	78da      	ldrb	r2, [r3, #3]
 800e06c:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e070:	791a      	ldrb	r2, [r3, #4]
 800e072:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e076:	795b      	ldrb	r3, [r3, #5]
 800e078:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 800e07c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e080:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e082:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800e086:	f043 030a 	orr.w	r3, r3, #10
 800e08a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  osSemaphoreDef(SEM);
 800e08e:	a80a      	add	r0, sp, #40	; 0x28
 800e090:	2300      	movs	r3, #0
 800e092:	f840 3d10 	str.w	r3, [r0, #-16]!
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800e096:	2101      	movs	r1, #1
 800e098:	f7f4 fd82 	bl	8002ba0 <osSemaphoreCreate>
 800e09c:	4b17      	ldr	r3, [pc, #92]	; (800e0fc <low_level_init+0x118>)
 800e09e:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800e0a0:	ae01      	add	r6, sp, #4
 800e0a2:	4f17      	ldr	r7, [pc, #92]	; (800e100 <low_level_init+0x11c>)
 800e0a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	6033      	str	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 800e0ac:	4621      	mov	r1, r4
 800e0ae:	a801      	add	r0, sp, #4
 800e0b0:	f7f4 fce6 	bl	8002a80 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	f7f2 ff69 	bl	8000f8c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800e0ba:	aa09      	add	r2, sp, #36	; 0x24
 800e0bc:	210b      	movs	r1, #11
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f7f2 fdc4 	bl	8000c4c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800e0c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0c6:	f042 020b 	orr.w	r2, r2, #11
 800e0ca:	9209      	str	r2, [sp, #36]	; 0x24
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800e0cc:	210b      	movs	r1, #11
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	f7f2 fdf8 	bl	8000cc4 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800e0d4:	aa09      	add	r2, sp, #36	; 0x24
 800e0d6:	210b      	movs	r1, #11
 800e0d8:	4628      	mov	r0, r5
 800e0da:	f7f2 fdb7 	bl	8000c4c <HAL_ETH_ReadPHYRegister>
}
 800e0de:	b00b      	add	sp, #44	; 0x2c
 800e0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	20009b0c 	.word	0x20009b0c
 800e0e8:	40028000 	.word	0x40028000
 800e0ec:	20009b54 	.word	0x20009b54
 800e0f0:	2000823c 	.word	0x2000823c
 800e0f4:	200082bc 	.word	0x200082bc
 800e0f8:	20009a8c 	.word	0x20009a8c
 800e0fc:	20004a24 	.word	0x20004a24
 800e100:	080100fc 	.word	0x080100fc

0800e104 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800e104:	6802      	ldr	r2, [r0, #0]
 800e106:	4b2d      	ldr	r3, [pc, #180]	; (800e1bc <HAL_ETH_MspInit+0xb8>)
 800e108:	429a      	cmp	r2, r3
 800e10a:	d000      	beq.n	800e10e <HAL_ETH_MspInit+0xa>
 800e10c:	4770      	bx	lr
{
 800e10e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e110:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_ETH_CLK_ENABLE();
 800e112:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800e116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e118:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800e11c:	631a      	str	r2, [r3, #48]	; 0x30
 800e11e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e120:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800e124:	9200      	str	r2, [sp, #0]
 800e126:	9a00      	ldr	r2, [sp, #0]
 800e128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e12a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e12e:	631a      	str	r2, [r3, #48]	; 0x30
 800e130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e132:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800e136:	9201      	str	r2, [sp, #4]
 800e138:	9a01      	ldr	r2, [sp, #4]
 800e13a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e13c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800e140:	631a      	str	r2, [r3, #48]	; 0x30
 800e142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e148:	9302      	str	r3, [sp, #8]
 800e14a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800e14c:	2332      	movs	r3, #50	; 0x32
 800e14e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e150:	2702      	movs	r7, #2
 800e152:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e154:	2400      	movs	r4, #0
 800e156:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e158:	2603      	movs	r6, #3
 800e15a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e15c:	250b      	movs	r5, #11
 800e15e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e160:	a903      	add	r1, sp, #12
 800e162:	4817      	ldr	r0, [pc, #92]	; (800e1c0 <HAL_ETH_MspInit+0xbc>)
 800e164:	f7f2 ff34 	bl	8000fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800e168:	2386      	movs	r3, #134	; 0x86
 800e16a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e16c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e16e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e170:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e172:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e174:	a903      	add	r1, sp, #12
 800e176:	4813      	ldr	r0, [pc, #76]	; (800e1c4 <HAL_ETH_MspInit+0xc0>)
 800e178:	f7f2 ff2a 	bl	8000fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800e17c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e180:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e182:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e184:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e186:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e188:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800e18a:	a903      	add	r1, sp, #12
 800e18c:	480e      	ldr	r0, [pc, #56]	; (800e1c8 <HAL_ETH_MspInit+0xc4>)
 800e18e:	f7f2 ff1f 	bl	8000fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800e192:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e196:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e198:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e19a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e19c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e19e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e1a0:	a903      	add	r1, sp, #12
 800e1a2:	480a      	ldr	r0, [pc, #40]	; (800e1cc <HAL_ETH_MspInit+0xc8>)
 800e1a4:	f7f2 ff14 	bl	8000fd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800e1a8:	4622      	mov	r2, r4
 800e1aa:	2105      	movs	r1, #5
 800e1ac:	203d      	movs	r0, #61	; 0x3d
 800e1ae:	f7f2 fa73 	bl	8000698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e1b2:	203d      	movs	r0, #61	; 0x3d
 800e1b4:	f7f2 faa0 	bl	80006f8 <HAL_NVIC_EnableIRQ>
}
 800e1b8:	b009      	add	sp, #36	; 0x24
 800e1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1bc:	40028000 	.word	0x40028000
 800e1c0:	40020800 	.word	0x40020800
 800e1c4:	40020000 	.word	0x40020000
 800e1c8:	40020400 	.word	0x40020400
 800e1cc:	40021800 	.word	0x40021800

0800e1d0 <HAL_ETH_RxCpltCallback>:
{
 800e1d0:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 800e1d2:	4b02      	ldr	r3, [pc, #8]	; (800e1dc <HAL_ETH_RxCpltCallback+0xc>)
 800e1d4:	6818      	ldr	r0, [r3, #0]
 800e1d6:	f7f4 fd31 	bl	8002c3c <osSemaphoreRelease>
}
 800e1da:	bd08      	pop	{r3, pc}
 800e1dc:	20004a24 	.word	0x20004a24

0800e1e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e1e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	b170      	cbz	r0, 800e204 <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800e1e6:	2373      	movs	r3, #115	; 0x73
 800e1e8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800e1ec:	2374      	movs	r3, #116	; 0x74
 800e1ee:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e1f2:	4b08      	ldr	r3, [pc, #32]	; (800e214 <ethernetif_init+0x34>)
 800e1f4:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e1f6:	4b08      	ldr	r3, [pc, #32]	; (800e218 <ethernetif_init+0x38>)
 800e1f8:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f7ff fef2 	bl	800dfe4 <low_level_init>

  return ERR_OK;
}
 800e200:	2000      	movs	r0, #0
 800e202:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e204:	4b05      	ldr	r3, [pc, #20]	; (800e21c <ethernetif_init+0x3c>)
 800e206:	f240 2247 	movw	r2, #583	; 0x247
 800e20a:	4905      	ldr	r1, [pc, #20]	; (800e220 <ethernetif_init+0x40>)
 800e20c:	4805      	ldr	r0, [pc, #20]	; (800e224 <ethernetif_init+0x44>)
 800e20e:	f000 fe37 	bl	800ee80 <iprintf>
 800e212:	e7e8      	b.n	800e1e6 <ethernetif_init+0x6>
 800e214:	0800cbcd 	.word	0x0800cbcd
 800e218:	0800df29 	.word	0x0800df29
 800e21c:	0801267c 	.word	0x0801267c
 800e220:	0801209c 	.word	0x0801209c
 800e224:	080101d8 	.word	0x080101d8

0800e228 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800e228:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800e22a:	f7f2 fa09 	bl	8000640 <HAL_GetTick>
}
 800e22e:	bd08      	pop	{r3, pc}

0800e230 <http_server_serve>:
  * @brief serve tcp connection
  * @param conn: pointer on connection structure
  * @retval None
  */
void http_server_serve(struct netconn *conn)
{
 800e230:	b530      	push	{r4, r5, lr}
 800e232:	b087      	sub	sp, #28
 800e234:	4604      	mov	r4, r0
  char* buf;
  u16_t buflen;

  /* Read the data from the port, blocking if nothing yet there.
   We assume the request (the part we care about) is in one netbuf */
  recv_err = netconn_recv(conn, &inbuf);
 800e236:	a905      	add	r1, sp, #20
 800e238:	f7f6 fcae 	bl	8004b98 <netconn_recv>

  if (recv_err == ERR_OK)
 800e23c:	b910      	cbnz	r0, 800e244 <http_server_serve+0x14>
  {
    if (netconn_err(conn) == ERR_OK)
 800e23e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e242:	b13b      	cbz	r3, 800e254 <http_server_serve+0x24>
        }
      }
    }

  /* Close the connection (server closes in HTTP) */
  netconn_close(conn);
 800e244:	4620      	mov	r0, r4
 800e246:	f7f6 fd5d 	bl	8004d04 <netconn_close>

  /* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
  netbuf_delete(inbuf);
 800e24a:	9805      	ldr	r0, [sp, #20]
 800e24c:	f7f7 fdd8 	bl	8005e00 <netbuf_delete>
}
 800e250:	b007      	add	sp, #28
 800e252:	bd30      	pop	{r4, r5, pc}
      netbuf_data(inbuf, (void**)&buf, &buflen);
 800e254:	f10d 020e 	add.w	r2, sp, #14
 800e258:	a904      	add	r1, sp, #16
 800e25a:	9805      	ldr	r0, [sp, #20]
 800e25c:	f7f7 fde0 	bl	8005e20 <netbuf_data>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 800e260:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e264:	2b04      	cmp	r3, #4
 800e266:	d9ed      	bls.n	800e244 <http_server_serve+0x14>
 800e268:	9d04      	ldr	r5, [sp, #16]
 800e26a:	2205      	movs	r2, #5
 800e26c:	4933      	ldr	r1, [pc, #204]	; (800e33c <http_server_serve+0x10c>)
 800e26e:	4628      	mov	r0, r5
 800e270:	f000 fe5a 	bl	800ef28 <strncmp>
 800e274:	2800      	cmp	r0, #0
 800e276:	d1e5      	bne.n	800e244 <http_server_serve+0x14>
    	  if (strncmp((char const *)buf,"GET /index.html",15)==0) {
 800e278:	220f      	movs	r2, #15
 800e27a:	4931      	ldr	r1, [pc, #196]	; (800e340 <http_server_serve+0x110>)
 800e27c:	4628      	mov	r0, r5
 800e27e:	f000 fe53 	bl	800ef28 <strncmp>
 800e282:	2800      	cmp	r0, #0
 800e284:	d034      	beq.n	800e2f0 <http_server_serve+0xc0>
    	  if (strncmp((char const *)buf,"GET /event1", 9) == 0) {
 800e286:	2209      	movs	r2, #9
 800e288:	492e      	ldr	r1, [pc, #184]	; (800e344 <http_server_serve+0x114>)
 800e28a:	9804      	ldr	r0, [sp, #16]
 800e28c:	f000 fe4c 	bl	800ef28 <strncmp>
 800e290:	2800      	cmp	r0, #0
 800e292:	d036      	beq.n	800e302 <http_server_serve+0xd2>
    	  if (strncmp((char const *)buf,"GET /event2", 9) == 0) {
 800e294:	2209      	movs	r2, #9
 800e296:	492c      	ldr	r1, [pc, #176]	; (800e348 <http_server_serve+0x118>)
 800e298:	9804      	ldr	r0, [sp, #16]
 800e29a:	f000 fe45 	bl	800ef28 <strncmp>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d033      	beq.n	800e30a <http_server_serve+0xda>
    	  if (strncmp((char const *)buf,"GET /event3", 9) == 0) {
 800e2a2:	2209      	movs	r2, #9
 800e2a4:	4929      	ldr	r1, [pc, #164]	; (800e34c <http_server_serve+0x11c>)
 800e2a6:	9804      	ldr	r0, [sp, #16]
 800e2a8:	f000 fe3e 	bl	800ef28 <strncmp>
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	d030      	beq.n	800e312 <http_server_serve+0xe2>
          if (strncmp((char const *)buf,"GET /event4", 9) == 0) {
 800e2b0:	2209      	movs	r2, #9
 800e2b2:	4927      	ldr	r1, [pc, #156]	; (800e350 <http_server_serve+0x120>)
 800e2b4:	9804      	ldr	r0, [sp, #16]
 800e2b6:	f000 fe37 	bl	800ef28 <strncmp>
 800e2ba:	b370      	cbz	r0, 800e31a <http_server_serve+0xea>
    	  if (strncmp((char const *)buf,"GET /data1", 9) == 0) {
 800e2bc:	2209      	movs	r2, #9
 800e2be:	4925      	ldr	r1, [pc, #148]	; (800e354 <http_server_serve+0x124>)
 800e2c0:	9804      	ldr	r0, [sp, #16]
 800e2c2:	f000 fe31 	bl	800ef28 <strncmp>
 800e2c6:	b360      	cbz	r0, 800e322 <http_server_serve+0xf2>
          if (strncmp((char const *)buf,"GET /data2", 9) == 0) {
 800e2c8:	2209      	movs	r2, #9
 800e2ca:	4923      	ldr	r1, [pc, #140]	; (800e358 <http_server_serve+0x128>)
 800e2cc:	9804      	ldr	r0, [sp, #16]
 800e2ce:	f000 fe2b 	bl	800ef28 <strncmp>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d1b6      	bne.n	800e244 <http_server_serve+0x14>
    		  netconn_write(conn, (const unsigned char*)serverLine2, strlen(serverLine2), NETCONN_NOCOPY);
 800e2d6:	4b21      	ldr	r3, [pc, #132]	; (800e35c <http_server_serve+0x12c>)
 800e2d8:	681d      	ldr	r5, [r3, #0]
 800e2da:	4628      	mov	r0, r5
 800e2dc:	f7f1 ffba 	bl	8000254 <strlen>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f7f6 fcaf 	bl	8004c4c <netconn_write_partly>
 800e2ee:	e7a9      	b.n	800e244 <http_server_serve+0x14>
    		  netconn_write(conn, (const unsigned char*)index_html, index_html_len, NETCONN_NOCOPY);
 800e2f0:	4b1b      	ldr	r3, [pc, #108]	; (800e360 <http_server_serve+0x130>)
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	9300      	str	r3, [sp, #0]
 800e2f8:	491a      	ldr	r1, [pc, #104]	; (800e364 <http_server_serve+0x134>)
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f7f6 fca6 	bl	8004c4c <netconn_write_partly>
 800e300:	e7c1      	b.n	800e286 <http_server_serve+0x56>
    		  stprint("HTTP :: Event 1 triggered\n");
 800e302:	4819      	ldr	r0, [pc, #100]	; (800e368 <http_server_serve+0x138>)
 800e304:	f000 fbc8 	bl	800ea98 <stprint>
 800e308:	e7c4      	b.n	800e294 <http_server_serve+0x64>
    		  stprint("HTTP :: Event 2 triggered\n");
 800e30a:	4818      	ldr	r0, [pc, #96]	; (800e36c <http_server_serve+0x13c>)
 800e30c:	f000 fbc4 	bl	800ea98 <stprint>
 800e310:	e7c7      	b.n	800e2a2 <http_server_serve+0x72>
    		  stprint("HTTP :: Event 3 triggered\n");
 800e312:	4817      	ldr	r0, [pc, #92]	; (800e370 <http_server_serve+0x140>)
 800e314:	f000 fbc0 	bl	800ea98 <stprint>
 800e318:	e7ca      	b.n	800e2b0 <http_server_serve+0x80>
    		  stprint("HTTP :: Event 4 triggered\n");
 800e31a:	4816      	ldr	r0, [pc, #88]	; (800e374 <http_server_serve+0x144>)
 800e31c:	f000 fbbc 	bl	800ea98 <stprint>
 800e320:	e7cc      	b.n	800e2bc <http_server_serve+0x8c>
    		  netconn_write(conn, (const unsigned char*)serverLine1, strlen(serverLine1), NETCONN_NOCOPY);
 800e322:	4b15      	ldr	r3, [pc, #84]	; (800e378 <http_server_serve+0x148>)
 800e324:	681d      	ldr	r5, [r3, #0]
 800e326:	4628      	mov	r0, r5
 800e328:	f7f1 ff94 	bl	8000254 <strlen>
 800e32c:	2300      	movs	r3, #0
 800e32e:	9300      	str	r3, [sp, #0]
 800e330:	4602      	mov	r2, r0
 800e332:	4629      	mov	r1, r5
 800e334:	4620      	mov	r0, r4
 800e336:	f7f6 fc89 	bl	8004c4c <netconn_write_partly>
 800e33a:	e7c5      	b.n	800e2c8 <http_server_serve+0x98>
 800e33c:	080126a0 	.word	0x080126a0
 800e340:	080126a8 	.word	0x080126a8
 800e344:	080126b8 	.word	0x080126b8
 800e348:	080126e0 	.word	0x080126e0
 800e34c:	08012708 	.word	0x08012708
 800e350:	08012730 	.word	0x08012730
 800e354:	08012758 	.word	0x08012758
 800e358:	08012764 	.word	0x08012764
 800e35c:	20004a48 	.word	0x20004a48
 800e360:	20000aa8 	.word	0x20000aa8
 800e364:	20000010 	.word	0x20000010
 800e368:	080126c4 	.word	0x080126c4
 800e36c:	080126ec 	.word	0x080126ec
 800e370:	08012714 	.word	0x08012714
 800e374:	0801273c 	.word	0x0801273c
 800e378:	20004a28 	.word	0x20004a28

0800e37c <http_server_netconn_thread>:
/**
  * @brief  http server thread
  * @retval None
  */
static void http_server_netconn_thread()
{
 800e37c:	b510      	push	{r4, lr}
 800e37e:	b082      	sub	sp, #8
  struct netconn *conn, *newconn;
  err_t err, accept_err;

  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 800e380:	2200      	movs	r2, #0
 800e382:	4611      	mov	r1, r2
 800e384:	2010      	movs	r0, #16
 800e386:	f7f6 faf3 	bl	8004970 <netconn_new_with_proto_and_callback>

  if (conn!= NULL)
 800e38a:	b1b0      	cbz	r0, 800e3ba <http_server_netconn_thread+0x3e>
 800e38c:	4604      	mov	r4, r0
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 800e38e:	2250      	movs	r2, #80	; 0x50
 800e390:	2100      	movs	r1, #0
 800e392:	f7f6 fb61 	bl	8004a58 <netconn_bind>

    if (err == ERR_OK)
 800e396:	b980      	cbnz	r0, 800e3ba <http_server_netconn_thread+0x3e>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 800e398:	21ff      	movs	r1, #255	; 0xff
 800e39a:	4620      	mov	r0, r4
 800e39c:	f7f6 fb82 	bl	8004aa4 <netconn_listen_with_backlog>

      while(1)
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 800e3a0:	a901      	add	r1, sp, #4
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f7f6 fb9c 	bl	8004ae0 <netconn_accept>
        if(accept_err == ERR_OK)
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	d1f9      	bne.n	800e3a0 <http_server_netconn_thread+0x24>
        {
          /* serve connection */
          http_server_serve(newconn);
 800e3ac:	9801      	ldr	r0, [sp, #4]
 800e3ae:	f7ff ff3f 	bl	800e230 <http_server_serve>

          /* delete connection */
          netconn_delete(newconn);
 800e3b2:	9801      	ldr	r0, [sp, #4]
 800e3b4:	f7f6 fb38 	bl	8004a28 <netconn_delete>
 800e3b8:	e7f2      	b.n	800e3a0 <http_server_netconn_thread+0x24>
        }
      }
    }
  }
}
 800e3ba:	b002      	add	sp, #8
 800e3bc:	bd10      	pop	{r4, pc}
	...

0800e3c0 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread)
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 800e3c0:	b500      	push	{lr}
 800e3c2:	b083      	sub	sp, #12
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 800e3c4:	2304      	movs	r3, #4
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	4903      	ldr	r1, [pc, #12]	; (800e3dc <http_server_netconn_init+0x1c>)
 800e3d0:	4803      	ldr	r0, [pc, #12]	; (800e3e0 <http_server_netconn_init+0x20>)
 800e3d2:	f7ff fcf8 	bl	800ddc6 <sys_thread_new>
}
 800e3d6:	b003      	add	sp, #12
 800e3d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3dc:	0800e37d 	.word	0x0800e37d
 800e3e0:	08012698 	.word	0x08012698

0800e3e4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e3e4:	b530      	push	{r4, r5, lr}
 800e3e6:	b085      	sub	sp, #20
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	4608      	mov	r0, r1
 800e3ec:	f7f7 fe30 	bl	8006050 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800e3f0:	4911      	ldr	r1, [pc, #68]	; (800e438 <MX_LWIP_Init+0x54>)
 800e3f2:	2000      	movs	r0, #0
 800e3f4:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 800e3f6:	4a11      	ldr	r2, [pc, #68]	; (800e43c <MX_LWIP_Init+0x58>)
 800e3f8:	6010      	str	r0, [r2, #0]
  gw.addr = 0;
 800e3fa:	4b11      	ldr	r3, [pc, #68]	; (800e440 <MX_LWIP_Init+0x5c>)
 800e3fc:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800e3fe:	4c11      	ldr	r4, [pc, #68]	; (800e444 <MX_LWIP_Init+0x60>)
 800e400:	4d11      	ldr	r5, [pc, #68]	; (800e448 <MX_LWIP_Init+0x64>)
 800e402:	9502      	str	r5, [sp, #8]
 800e404:	4d11      	ldr	r5, [pc, #68]	; (800e44c <MX_LWIP_Init+0x68>)
 800e406:	9501      	str	r5, [sp, #4]
 800e408:	9000      	str	r0, [sp, #0]
 800e40a:	4620      	mov	r0, r4
 800e40c:	f7f8 f9ca 	bl	80067a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e410:	4620      	mov	r0, r4
 800e412:	f7f8 fa07 	bl	8006824 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e416:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800e41a:	f013 0f04 	tst.w	r3, #4
 800e41e:	d107      	bne.n	800e430 <MX_LWIP_Init+0x4c>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e420:	4808      	ldr	r0, [pc, #32]	; (800e444 <MX_LWIP_Init+0x60>)
 800e422:	f7f8 fa17 	bl	8006854 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800e426:	4807      	ldr	r0, [pc, #28]	; (800e444 <MX_LWIP_Init+0x60>)
 800e428:	f7fd fe88 	bl	800c13c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e42c:	b005      	add	sp, #20
 800e42e:	bd30      	pop	{r4, r5, pc}
    netif_set_up(&gnetif);
 800e430:	4620      	mov	r0, r4
 800e432:	f7f8 f9fd 	bl	8006830 <netif_set_up>
 800e436:	e7f6      	b.n	800e426 <MX_LWIP_Init+0x42>
 800e438:	2000b358 	.word	0x2000b358
 800e43c:	2000b35c 	.word	0x2000b35c
 800e440:	2000b360 	.word	0x2000b360
 800e444:	2000b324 	.word	0x2000b324
 800e448:	08005f99 	.word	0x08005f99
 800e44c:	0800e1e1 	.word	0x0800e1e1

0800e450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e454:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e456:	2400      	movs	r4, #0
 800e458:	9407      	str	r4, [sp, #28]
 800e45a:	9408      	str	r4, [sp, #32]
 800e45c:	9409      	str	r4, [sp, #36]	; 0x24
 800e45e:	940a      	str	r4, [sp, #40]	; 0x28
 800e460:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e462:	4b53      	ldr	r3, [pc, #332]	; (800e5b0 <MX_GPIO_Init+0x160>)
 800e464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e466:	f042 0204 	orr.w	r2, r2, #4
 800e46a:	631a      	str	r2, [r3, #48]	; 0x30
 800e46c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e46e:	f002 0204 	and.w	r2, r2, #4
 800e472:	9201      	str	r2, [sp, #4]
 800e474:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e478:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e47c:	631a      	str	r2, [r3, #48]	; 0x30
 800e47e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e480:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800e484:	9202      	str	r2, [sp, #8]
 800e486:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e48a:	f042 0201 	orr.w	r2, r2, #1
 800e48e:	631a      	str	r2, [r3, #48]	; 0x30
 800e490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e492:	f002 0201 	and.w	r2, r2, #1
 800e496:	9203      	str	r2, [sp, #12]
 800e498:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e49a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e49c:	f042 0202 	orr.w	r2, r2, #2
 800e4a0:	631a      	str	r2, [r3, #48]	; 0x30
 800e4a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4a4:	f002 0202 	and.w	r2, r2, #2
 800e4a8:	9204      	str	r2, [sp, #16]
 800e4aa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e4ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4ae:	f042 0208 	orr.w	r2, r2, #8
 800e4b2:	631a      	str	r2, [r3, #48]	; 0x30
 800e4b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4b6:	f002 0208 	and.w	r2, r2, #8
 800e4ba:	9205      	str	r2, [sp, #20]
 800e4bc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e4be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4c4:	631a      	str	r2, [r3, #48]	; 0x30
 800e4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4cc:	9306      	str	r3, [sp, #24]
 800e4ce:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LDOSR_Pin|LDERR_Pin|LDBTN_Pin, GPIO_PIN_RESET);
 800e4d0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800e5c4 <MX_GPIO_Init+0x174>
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	f244 0181 	movw	r1, #16513	; 0x4081
 800e4da:	4640      	mov	r0, r8
 800e4dc:	f7f2 fe6d 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDDBG_Pin|LDRED_Pin|LDYEL_Pin|LDGRE_Pin, GPIO_PIN_SET);
 800e4e0:	4f34      	ldr	r7, [pc, #208]	; (800e5b4 <MX_GPIO_Init+0x164>)
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	f44f 6107 	mov.w	r1, #2160	; 0x870
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f7f2 fe66 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDTX_Pin|LDRX_Pin|GND_Pin, GPIO_PIN_RESET);
 800e4ee:	4622      	mov	r2, r4
 800e4f0:	f44f 5142 	mov.w	r1, #12416	; 0x3080
 800e4f4:	4638      	mov	r0, r7
 800e4f6:	f7f2 fe60 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800e4fa:	4d2f      	ldr	r5, [pc, #188]	; (800e5b8 <MX_GPIO_Init+0x168>)
 800e4fc:	4622      	mov	r2, r4
 800e4fe:	2140      	movs	r1, #64	; 0x40
 800e500:	4628      	mov	r0, r5
 800e502:	f7f2 fe5a 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USRBTN_Pin */
  GPIO_InitStruct.Pin = USRBTN_Pin;
 800e506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e50a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e50c:	4b2b      	ldr	r3, [pc, #172]	; (800e5bc <MX_GPIO_Init+0x16c>)
 800e50e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e510:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USRBTN_GPIO_Port, &GPIO_InitStruct);
 800e512:	a907      	add	r1, sp, #28
 800e514:	482a      	ldr	r0, [pc, #168]	; (800e5c0 <MX_GPIO_Init+0x170>)
 800e516:	f7f2 fd5b 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDOSR_Pin LDERR_Pin LDBTN_Pin */
  GPIO_InitStruct.Pin = LDOSR_Pin|LDERR_Pin|LDBTN_Pin;
 800e51a:	f244 0381 	movw	r3, #16513	; 0x4081
 800e51e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e520:	2601      	movs	r6, #1
 800e522:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e524:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e526:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e528:	a907      	add	r1, sp, #28
 800e52a:	4640      	mov	r0, r8
 800e52c:	f7f2 fd50 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDDBG_Pin LDTX_Pin LDRX_Pin LDRED_Pin
                           LDYEL_Pin LDGRE_Pin GND_Pin */
  GPIO_InitStruct.Pin = LDDBG_Pin|LDTX_Pin|LDRX_Pin|LDRED_Pin
 800e530:	f643 03f0 	movw	r3, #14576	; 0x38f0
 800e534:	9307      	str	r3, [sp, #28]
                          |LDYEL_Pin|LDGRE_Pin|GND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e536:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e538:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e53a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e53c:	a907      	add	r1, sp, #28
 800e53e:	4638      	mov	r0, r7
 800e540:	f7f2 fd46 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800e544:	2340      	movs	r3, #64	; 0x40
 800e546:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e548:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e54a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e54c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800e54e:	a907      	add	r1, sp, #28
 800e550:	4628      	mov	r0, r5
 800e552:	f7f2 fd3d 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800e556:	2380      	movs	r3, #128	; 0x80
 800e558:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e55a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e55c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800e55e:	a907      	add	r1, sp, #28
 800e560:	4628      	mov	r0, r5
 800e562:	f7f2 fd35 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800e566:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800e56a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e56c:	2302      	movs	r3, #2
 800e56e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e570:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e572:	2303      	movs	r3, #3
 800e574:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e576:	230a      	movs	r3, #10
 800e578:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e57a:	f5a5 55c0 	sub.w	r5, r5, #6144	; 0x1800
 800e57e:	a907      	add	r1, sp, #28
 800e580:	4628      	mov	r0, r5
 800e582:	f7f2 fd25 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800e586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e58a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e58c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e58e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e590:	a907      	add	r1, sp, #28
 800e592:	4628      	mov	r0, r5
 800e594:	f7f2 fd1c 	bl	8000fd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800e598:	4622      	mov	r2, r4
 800e59a:	2105      	movs	r1, #5
 800e59c:	2028      	movs	r0, #40	; 0x28
 800e59e:	f7f2 f87b 	bl	8000698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e5a2:	2028      	movs	r0, #40	; 0x28
 800e5a4:	f7f2 f8a8 	bl	80006f8 <HAL_NVIC_EnableIRQ>

}
 800e5a8:	b00c      	add	sp, #48	; 0x30
 800e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ae:	bf00      	nop
 800e5b0:	40023800 	.word	0x40023800
 800e5b4:	40020c00 	.word	0x40020c00
 800e5b8:	40021800 	.word	0x40021800
 800e5bc:	10110000 	.word	0x10110000
 800e5c0:	40020800 	.word	0x40020800
 800e5c4:	40020400 	.word	0x40020400

0800e5c8 <MX_USART3_UART_Init>:
{
 800e5c8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 800e5ca:	4809      	ldr	r0, [pc, #36]	; (800e5f0 <MX_USART3_UART_Init+0x28>)
 800e5cc:	4b09      	ldr	r3, [pc, #36]	; (800e5f4 <MX_USART3_UART_Init+0x2c>)
 800e5ce:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800e5d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e5d4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e5da:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e5dc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e5de:	220c      	movs	r2, #12
 800e5e0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e5e2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5e4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e5e6:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e5e8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800e5ea:	f7f4 f9fa 	bl	80029e2 <HAL_UART_Init>
}
 800e5ee:	bd08      	pop	{r3, pc}
 800e5f0:	2000b3a8 	.word	0x2000b3a8
 800e5f4:	40004800 	.word	0x40004800

0800e5f8 <startupTask>:

/* USER CODE BEGIN 4 */

void startupTask() {
 800e5f8:	b530      	push	{r4, r5, lr}
 800e5fa:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(LDOSR_GPIO_Port, LDOSR_Pin, GPIO_PIN_SET);
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	4611      	mov	r1, r2
 800e600:	4819      	ldr	r0, [pc, #100]	; (800e668 <startupTask+0x70>)
 800e602:	f7f2 fdda 	bl	80011ba <HAL_GPIO_WritePin>
	xTaskCreate(uartTask, "rxtxST", 100, NULL, 10, NULL);
 800e606:	2400      	movs	r4, #0
 800e608:	9401      	str	r4, [sp, #4]
 800e60a:	250a      	movs	r5, #10
 800e60c:	9500      	str	r5, [sp, #0]
 800e60e:	4623      	mov	r3, r4
 800e610:	2264      	movs	r2, #100	; 0x64
 800e612:	4916      	ldr	r1, [pc, #88]	; (800e66c <startupTask+0x74>)
 800e614:	4816      	ldr	r0, [pc, #88]	; (800e670 <startupTask+0x78>)
 800e616:	f7f5 f9d5 	bl	80039c4 <xTaskCreate>
	xTaskCreate(buttonTask, "button", 10, NULL, 10, NULL);
 800e61a:	9401      	str	r4, [sp, #4]
 800e61c:	9500      	str	r5, [sp, #0]
 800e61e:	4623      	mov	r3, r4
 800e620:	462a      	mov	r2, r5
 800e622:	4914      	ldr	r1, [pc, #80]	; (800e674 <startupTask+0x7c>)
 800e624:	4814      	ldr	r0, [pc, #80]	; (800e678 <startupTask+0x80>)
 800e626:	f7f5 f9cd 	bl	80039c4 <xTaskCreate>
	xTaskCreate(commandParserTask, "commandParser", 100+ARG_SIZE*ARG_COUNT+CMD_SIZE, NULL, 10, NULL);
 800e62a:	9401      	str	r4, [sp, #4]
 800e62c:	9500      	str	r5, [sp, #0]
 800e62e:	4623      	mov	r3, r4
 800e630:	227d      	movs	r2, #125	; 0x7d
 800e632:	4912      	ldr	r1, [pc, #72]	; (800e67c <startupTask+0x84>)
 800e634:	4812      	ldr	r0, [pc, #72]	; (800e680 <startupTask+0x88>)
 800e636:	f7f5 f9c5 	bl	80039c4 <xTaskCreate>
	uartInit();
 800e63a:	f000 f9fd 	bl	800ea38 <uartInit>
	stprint("\r\033c");
 800e63e:	4811      	ldr	r0, [pc, #68]	; (800e684 <startupTask+0x8c>)
 800e640:	f000 fa2a 	bl	800ea98 <stprint>
	stprint("\n\rRTOS :: booted\n\n");
 800e644:	4810      	ldr	r0, [pc, #64]	; (800e688 <startupTask+0x90>)
 800e646:	f000 fa27 	bl	800ea98 <stprint>
	MX_LWIP_Init();
 800e64a:	f7ff fecb 	bl	800e3e4 <MX_LWIP_Init>
        stprint("LWIP :: initialized\n");
 800e64e:	480f      	ldr	r0, [pc, #60]	; (800e68c <startupTask+0x94>)
 800e650:	f000 fa22 	bl	800ea98 <stprint>
	http_server_netconn_init();
 800e654:	f7ff feb4 	bl	800e3c0 <http_server_netconn_init>
        stprint("HTTP :: initialized\n");
 800e658:	480d      	ldr	r0, [pc, #52]	; (800e690 <startupTask+0x98>)
 800e65a:	f000 fa1d 	bl	800ea98 <stprint>
	vTaskDelete(NULL);
 800e65e:	4620      	mov	r0, r4
 800e660:	f7f5 f9e2 	bl	8003a28 <vTaskDelete>
}
 800e664:	b003      	add	sp, #12
 800e666:	bd30      	pop	{r4, r5, pc}
 800e668:	40020400 	.word	0x40020400
 800e66c:	08012778 	.word	0x08012778
 800e670:	0800e9e1 	.word	0x0800e9e1
 800e674:	08012780 	.word	0x08012780
 800e678:	0800e695 	.word	0x0800e695
 800e67c:	08012788 	.word	0x08012788
 800e680:	0800eb11 	.word	0x0800eb11
 800e684:	08012798 	.word	0x08012798
 800e688:	0801279c 	.word	0x0801279c
 800e68c:	080127b0 	.word	0x080127b0
 800e690:	080127c8 	.word	0x080127c8

0800e694 <buttonTask>:

void buttonTask() {
 800e694:	b508      	push	{r3, lr}
	while(1) {
		HAL_GPIO_WritePin(LDBTN_GPIO_Port, LDBTN_Pin, HAL_GPIO_ReadPin(USRBTN_GPIO_Port, USRBTN_Pin));
 800e696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e69a:	4804      	ldr	r0, [pc, #16]	; (800e6ac <buttonTask+0x18>)
 800e69c:	f7f2 fd86 	bl	80011ac <HAL_GPIO_ReadPin>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	2180      	movs	r1, #128	; 0x80
 800e6a4:	4802      	ldr	r0, [pc, #8]	; (800e6b0 <buttonTask+0x1c>)
 800e6a6:	f7f2 fd88 	bl	80011ba <HAL_GPIO_WritePin>
 800e6aa:	e7f4      	b.n	800e696 <buttonTask+0x2>
 800e6ac:	40020800 	.word	0x40020800
 800e6b0:	40020400 	.word	0x40020400

0800e6b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800e6b4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800e6b6:	2001      	movs	r0, #1
 800e6b8:	f7f4 f9fc 	bl	8002ab4 <osDelay>
 800e6bc:	e7fb      	b.n	800e6b6 <StartDefaultTask+0x2>
	...

0800e6c0 <SystemClock_Config>:
{
 800e6c0:	b530      	push	{r4, r5, lr}
 800e6c2:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e6c4:	2234      	movs	r2, #52	; 0x34
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	a82b      	add	r0, sp, #172	; 0xac
 800e6ca:	f000 fbd1 	bl	800ee70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e6ce:	2400      	movs	r4, #0
 800e6d0:	9426      	str	r4, [sp, #152]	; 0x98
 800e6d2:	9427      	str	r4, [sp, #156]	; 0x9c
 800e6d4:	9428      	str	r4, [sp, #160]	; 0xa0
 800e6d6:	9429      	str	r4, [sp, #164]	; 0xa4
 800e6d8:	942a      	str	r4, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e6da:	2290      	movs	r2, #144	; 0x90
 800e6dc:	4621      	mov	r1, r4
 800e6de:	a802      	add	r0, sp, #8
 800e6e0:	f000 fbc6 	bl	800ee70 <memset>
  HAL_PWR_EnableBkUpAccess();
 800e6e4:	f7f2 fd82 	bl	80011ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6e8:	4b1f      	ldr	r3, [pc, #124]	; (800e768 <SystemClock_Config+0xa8>)
 800e6ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e6f0:	641a      	str	r2, [r3, #64]	; 0x40
 800e6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800e6fc:	4a1b      	ldr	r2, [pc, #108]	; (800e76c <SystemClock_Config+0xac>)
 800e6fe:	6813      	ldr	r3, [r2, #0]
 800e700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800e704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e708:	6013      	str	r3, [r2, #0]
 800e70a:	6813      	ldr	r3, [r2, #0]
 800e70c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e710:	9301      	str	r3, [sp, #4]
 800e712:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e714:	2301      	movs	r3, #1
 800e716:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800e718:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800e71c:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e71e:	2502      	movs	r5, #2
 800e720:	9531      	str	r5, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e726:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e728:	2304      	movs	r3, #4
 800e72a:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 800e72c:	2260      	movs	r2, #96	; 0x60
 800e72e:	9234      	str	r2, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e730:	9535      	str	r5, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e732:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e734:	a82b      	add	r0, sp, #172	; 0xac
 800e736:	f7f2 fd9f 	bl	8001278 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800e73a:	f7f2 fd5f 	bl	80011fc <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e73e:	230f      	movs	r3, #15
 800e740:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e742:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e744:	9428      	str	r4, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800e746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e74a:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e74c:	942a      	str	r4, [sp, #168]	; 0xa8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800e74e:	2103      	movs	r1, #3
 800e750:	a826      	add	r0, sp, #152	; 0x98
 800e752:	f7f2 ffe5 	bl	8001720 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800e756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e75a:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800e75c:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e75e:	a802      	add	r0, sp, #8
 800e760:	f7f3 f8d4 	bl	800190c <HAL_RCCEx_PeriphCLKConfig>
}
 800e764:	b039      	add	sp, #228	; 0xe4
 800e766:	bd30      	pop	{r4, r5, pc}
 800e768:	40023800 	.word	0x40023800
 800e76c:	40007000 	.word	0x40007000

0800e770 <main>:
{
 800e770:	b500      	push	{lr}
 800e772:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800e774:	f7f1 ff4c 	bl	8000610 <HAL_Init>
  SystemClock_Config();
 800e778:	f7ff ffa2 	bl	800e6c0 <SystemClock_Config>
  MX_GPIO_Init();
 800e77c:	f7ff fe68 	bl	800e450 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800e780:	f7ff ff22 	bl	800e5c8 <MX_USART3_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800e784:	ac03      	add	r4, sp, #12
 800e786:	4d0b      	ldr	r5, [pc, #44]	; (800e7b4 <main+0x44>)
 800e788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e78a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e78c:	682b      	ldr	r3, [r5, #0]
 800e78e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800e790:	2100      	movs	r1, #0
 800e792:	a803      	add	r0, sp, #12
 800e794:	f7f4 f974 	bl	8002a80 <osThreadCreate>
 800e798:	4b07      	ldr	r3, [pc, #28]	; (800e7b8 <main+0x48>)
 800e79a:	6018      	str	r0, [r3, #0]
  xTaskCreate(startupTask, "startup", 50, NULL, 25, NULL);
 800e79c:	2300      	movs	r3, #0
 800e79e:	9301      	str	r3, [sp, #4]
 800e7a0:	2219      	movs	r2, #25
 800e7a2:	9200      	str	r2, [sp, #0]
 800e7a4:	2232      	movs	r2, #50	; 0x32
 800e7a6:	4905      	ldr	r1, [pc, #20]	; (800e7bc <main+0x4c>)
 800e7a8:	4805      	ldr	r0, [pc, #20]	; (800e7c0 <main+0x50>)
 800e7aa:	f7f5 f90b 	bl	80039c4 <xTaskCreate>
  osKernelStart();
 800e7ae:	f7f4 f958 	bl	8002a62 <osKernelStart>
 800e7b2:	e7fe      	b.n	800e7b2 <main+0x42>
 800e7b4:	08010110 	.word	0x08010110
 800e7b8:	2000b364 	.word	0x2000b364
 800e7bc:	08012770 	.word	0x08012770
 800e7c0:	0800e5f9 	.word	0x0800e5f9

0800e7c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800e7c6:	6802      	ldr	r2, [r0, #0]
 800e7c8:	4b03      	ldr	r3, [pc, #12]	; (800e7d8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d000      	beq.n	800e7d0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800e7ce:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800e7d0:	f7f1 ff2a 	bl	8000628 <HAL_IncTick>
}
 800e7d4:	e7fb      	b.n	800e7ce <HAL_TIM_PeriodElapsedCallback+0xa>
 800e7d6:	bf00      	nop
 800e7d8:	40010000 	.word	0x40010000

0800e7dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e7dc:	b500      	push	{lr}
 800e7de:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e7e0:	4b0d      	ldr	r3, [pc, #52]	; (800e818 <HAL_MspInit+0x3c>)
 800e7e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e7e8:	641a      	str	r2, [r3, #64]	; 0x40
 800e7ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7ec:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800e7f0:	9200      	str	r2, [sp, #0]
 800e7f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e7f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e7fa:	645a      	str	r2, [r3, #68]	; 0x44
 800e7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e802:	9301      	str	r3, [sp, #4]
 800e804:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e806:	2200      	movs	r2, #0
 800e808:	210f      	movs	r1, #15
 800e80a:	f06f 0001 	mvn.w	r0, #1
 800e80e:	f7f1 ff43 	bl	8000698 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e812:	b003      	add	sp, #12
 800e814:	f85d fb04 	ldr.w	pc, [sp], #4
 800e818:	40023800 	.word	0x40023800

0800e81c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e81c:	b500      	push	{lr}
 800e81e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e820:	2300      	movs	r3, #0
 800e822:	9303      	str	r3, [sp, #12]
 800e824:	9304      	str	r3, [sp, #16]
 800e826:	9305      	str	r3, [sp, #20]
 800e828:	9306      	str	r3, [sp, #24]
 800e82a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 800e82c:	6802      	ldr	r2, [r0, #0]
 800e82e:	4b18      	ldr	r3, [pc, #96]	; (800e890 <HAL_UART_MspInit+0x74>)
 800e830:	429a      	cmp	r2, r3
 800e832:	d002      	beq.n	800e83a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800e834:	b009      	add	sp, #36	; 0x24
 800e836:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800e83a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800e83e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e840:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e844:	641a      	str	r2, [r3, #64]	; 0x40
 800e846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e848:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800e84c:	9201      	str	r2, [sp, #4]
 800e84e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e852:	f042 0208 	orr.w	r2, r2, #8
 800e856:	631a      	str	r2, [r3, #48]	; 0x30
 800e858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e85a:	f003 0308 	and.w	r3, r3, #8
 800e85e:	9302      	str	r3, [sp, #8]
 800e860:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800e862:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e866:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e868:	2302      	movs	r3, #2
 800e86a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e86c:	2303      	movs	r3, #3
 800e86e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e870:	2307      	movs	r3, #7
 800e872:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e874:	a903      	add	r1, sp, #12
 800e876:	4807      	ldr	r0, [pc, #28]	; (800e894 <HAL_UART_MspInit+0x78>)
 800e878:	f7f2 fbaa 	bl	8000fd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800e87c:	2200      	movs	r2, #0
 800e87e:	2105      	movs	r1, #5
 800e880:	2027      	movs	r0, #39	; 0x27
 800e882:	f7f1 ff09 	bl	8000698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800e886:	2027      	movs	r0, #39	; 0x27
 800e888:	f7f1 ff36 	bl	80006f8 <HAL_NVIC_EnableIRQ>
}
 800e88c:	e7d2      	b.n	800e834 <HAL_UART_MspInit+0x18>
 800e88e:	bf00      	nop
 800e890:	40004800 	.word	0x40004800
 800e894:	40020c00 	.word	0x40020c00

0800e898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e898:	b500      	push	{lr}
 800e89a:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800e89c:	2200      	movs	r2, #0
 800e89e:	4601      	mov	r1, r0
 800e8a0:	2019      	movs	r0, #25
 800e8a2:	f7f1 fef9 	bl	8000698 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800e8a6:	2019      	movs	r0, #25
 800e8a8:	f7f1 ff26 	bl	80006f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e8ac:	4b14      	ldr	r3, [pc, #80]	; (800e900 <HAL_InitTick+0x68>)
 800e8ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8b0:	f042 0201 	orr.w	r2, r2, #1
 800e8b4:	645a      	str	r2, [r3, #68]	; 0x44
 800e8b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8b8:	f003 0301 	and.w	r3, r3, #1
 800e8bc:	9301      	str	r3, [sp, #4]
 800e8be:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e8c0:	a902      	add	r1, sp, #8
 800e8c2:	a803      	add	r0, sp, #12
 800e8c4:	f7f3 f804 	bl	80018d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800e8c8:	f7f2 fff2 	bl	80018b0 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800e8cc:	4b0d      	ldr	r3, [pc, #52]	; (800e904 <HAL_InitTick+0x6c>)
 800e8ce:	fba3 2300 	umull	r2, r3, r3, r0
 800e8d2:	0c9b      	lsrs	r3, r3, #18
 800e8d4:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800e8d6:	480c      	ldr	r0, [pc, #48]	; (800e908 <HAL_InitTick+0x70>)
 800e8d8:	4a0c      	ldr	r2, [pc, #48]	; (800e90c <HAL_InitTick+0x74>)
 800e8da:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800e8dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e8e0:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800e8e2:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e8e8:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800e8ea:	f7f3 fc91 	bl	8002210 <HAL_TIM_Base_Init>
 800e8ee:	b118      	cbz	r0, 800e8f8 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800e8f0:	2001      	movs	r0, #1
}
 800e8f2:	b009      	add	sp, #36	; 0x24
 800e8f4:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 800e8f8:	4803      	ldr	r0, [pc, #12]	; (800e908 <HAL_InitTick+0x70>)
 800e8fa:	f7f3 fb0c 	bl	8001f16 <HAL_TIM_Base_Start_IT>
 800e8fe:	e7f8      	b.n	800e8f2 <HAL_InitTick+0x5a>
 800e900:	40023800 	.word	0x40023800
 800e904:	431bde83 	.word	0x431bde83
 800e908:	2000b368 	.word	0x2000b368
 800e90c:	40010000 	.word	0x40010000

0800e910 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e910:	4770      	bx	lr

0800e912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e912:	e7fe      	b.n	800e912 <HardFault_Handler>

0800e914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e914:	e7fe      	b.n	800e914 <MemManage_Handler>

0800e916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e916:	e7fe      	b.n	800e916 <BusFault_Handler>

0800e918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e918:	e7fe      	b.n	800e918 <UsageFault_Handler>

0800e91a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e91a:	4770      	bx	lr

0800e91c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e91c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e91e:	4802      	ldr	r0, [pc, #8]	; (800e928 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800e920:	f7f3 fb09 	bl	8001f36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e924:	bd08      	pop	{r3, pc}
 800e926:	bf00      	nop
 800e928:	2000b368 	.word	0x2000b368

0800e92c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800e92c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */
  HAL_GPIO_TogglePin(LDTX_GPIO_Port, LDTX_Pin);
 800e92e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e932:	480a      	ldr	r0, [pc, #40]	; (800e95c <USART3_IRQHandler+0x30>)
 800e934:	f7f2 fc47 	bl	80011c6 <HAL_GPIO_TogglePin>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 800e938:	4b09      	ldr	r3, [pc, #36]	; (800e960 <USART3_IRQHandler+0x34>)
 800e93a:	69db      	ldr	r3, [r3, #28]
  if(LL_USART_IsActiveFlag_RXNE(ST_USART_LL) && LL_USART_IsEnabledIT_RXNE(ST_USART_LL))
 800e93c:	f013 0f20 	tst.w	r3, #32
 800e940:	d004      	beq.n	800e94c <USART3_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 800e942:	4b07      	ldr	r3, [pc, #28]	; (800e960 <USART3_IRQHandler+0x34>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f013 0f20 	tst.w	r3, #32
 800e94a:	d103      	bne.n	800e954 <USART3_IRQHandler+0x28>
    /* RXNE flag will be cleared by reading of RDR register (done in call) */
    /* Call function in charge of handling Character reception */
    UART_CharReception_Callback();
  }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800e94c:	4805      	ldr	r0, [pc, #20]	; (800e964 <USART3_IRQHandler+0x38>)
 800e94e:	f7f3 fd69 	bl	8002424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  /* USER CODE END USART3_IRQn 1 */
}
 800e952:	bd08      	pop	{r3, pc}
    UART_CharReception_Callback();
 800e954:	f000 fa08 	bl	800ed68 <UART_CharReception_Callback>
 800e958:	e7f8      	b.n	800e94c <USART3_IRQHandler+0x20>
 800e95a:	bf00      	nop
 800e95c:	40020c00 	.word	0x40020c00
 800e960:	40004800 	.word	0x40004800
 800e964:	2000b3a8 	.word	0x2000b3a8

0800e968 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e968:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800e96a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e96e:	f7f2 fc2f 	bl	80011d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
#ifdef UART_H_
  isrprint("\n\r\033cSCREEN ClEARED\n\r");
 800e972:	4802      	ldr	r0, [pc, #8]	; (800e97c <EXTI15_10_IRQHandler+0x14>)
 800e974:	f000 f9b8 	bl	800ece8 <isrprint>
#endif
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e978:	bd08      	pop	{r3, pc}
 800e97a:	bf00      	nop
 800e97c:	080127ec 	.word	0x080127ec

0800e980 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800e980:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800e982:	4802      	ldr	r0, [pc, #8]	; (800e98c <ETH_IRQHandler+0xc>)
 800e984:	f7f2 f91c 	bl	8000bc0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800e988:	bd08      	pop	{r3, pc}
 800e98a:	bf00      	nop
 800e98c:	20009b0c 	.word	0x20009b0c

0800e990 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e990:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e992:	4a0f      	ldr	r2, [pc, #60]	; (800e9d0 <SystemInit+0x40>)
 800e994:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800e998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e99c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e9a0:	4b0c      	ldr	r3, [pc, #48]	; (800e9d4 <SystemInit+0x44>)
 800e9a2:	6819      	ldr	r1, [r3, #0]
 800e9a4:	f041 0101 	orr.w	r1, r1, #1
 800e9a8:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e9ae:	681c      	ldr	r4, [r3, #0]
 800e9b0:	4909      	ldr	r1, [pc, #36]	; (800e9d8 <SystemInit+0x48>)
 800e9b2:	4021      	ands	r1, r4
 800e9b4:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800e9b6:	4909      	ldr	r1, [pc, #36]	; (800e9dc <SystemInit+0x4c>)
 800e9b8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e9ba:	6819      	ldr	r1, [r3, #0]
 800e9bc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800e9c0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e9c2:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e9c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e9c8:	6093      	str	r3, [r2, #8]
#endif
}
 800e9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9ce:	4770      	bx	lr
 800e9d0:	e000ed00 	.word	0xe000ed00
 800e9d4:	40023800 	.word	0x40023800
 800e9d8:	fef6ffff 	.word	0xfef6ffff
 800e9dc:	24003010 	.word	0x24003010

0800e9e0 <uartTask>:
int flagUSART3RxCplt = 0;

char serverLine1[DBG_LINE_SIZE] = "";
char serverLine2[DBG_LINE_SIZE] = "";

void uartTask() {
 800e9e0:	b530      	push	{r4, r5, lr}
 800e9e2:	b089      	sub	sp, #36	; 0x24
 800e9e4:	e016      	b.n	800ea14 <uartTask+0x34>
	uint8_t byteToSend[DBG_LINE_SIZE];
	int waitingBytes = 0;
	while(1) {
		 	if(0 < (waitingBytes = uxQueueMessagesWaiting( queueTxST ))) {
				if(waitingBytes > DBG_LINE_SIZE)	waitingBytes = DBG_LINE_SIZE;
				for(int i = 0; i < waitingBytes; i++)	xQueueReceive(queueTxST, byteToSend + i, 0);
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	eb0d 0104 	add.w	r1, sp, r4
 800e9ee:	480f      	ldr	r0, [pc, #60]	; (800ea2c <uartTask+0x4c>)
 800e9f0:	6800      	ldr	r0, [r0, #0]
 800e9f2:	f7f4 fd1f 	bl	8003434 <xQueueGenericReceive>
 800e9f6:	3401      	adds	r4, #1
 800e9f8:	42a5      	cmp	r5, r4
 800e9fa:	dcf4      	bgt.n	800e9e6 <uartTask+0x6>
				while(!flagUSART3TxCplt);
 800e9fc:	4b0c      	ldr	r3, [pc, #48]	; (800ea30 <uartTask+0x50>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d0fb      	beq.n	800e9fc <uartTask+0x1c>
				flagUSART3TxCplt = 0;
 800ea04:	4b0a      	ldr	r3, [pc, #40]	; (800ea30 <uartTask+0x50>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit_IT(&ST_USART, byteToSend, waitingBytes);
 800ea0a:	b2aa      	uxth	r2, r5
 800ea0c:	4669      	mov	r1, sp
 800ea0e:	4809      	ldr	r0, [pc, #36]	; (800ea34 <uartTask+0x54>)
 800ea10:	f7f3 fc5e 	bl	80022d0 <HAL_UART_Transmit_IT>
		 	if(0 < (waitingBytes = uxQueueMessagesWaiting( queueTxST ))) {
 800ea14:	4b05      	ldr	r3, [pc, #20]	; (800ea2c <uartTask+0x4c>)
 800ea16:	6818      	ldr	r0, [r3, #0]
 800ea18:	f7f4 fe4b 	bl	80036b2 <uxQueueMessagesWaiting>
 800ea1c:	1e05      	subs	r5, r0, #0
 800ea1e:	ddf9      	ble.n	800ea14 <uartTask+0x34>
				if(waitingBytes > DBG_LINE_SIZE)	waitingBytes = DBG_LINE_SIZE;
 800ea20:	2d20      	cmp	r5, #32
 800ea22:	dd00      	ble.n	800ea26 <uartTask+0x46>
 800ea24:	2520      	movs	r5, #32
				for(int i = 0; i < waitingBytes; i++)	xQueueReceive(queueTxST, byteToSend + i, 0);
 800ea26:	2400      	movs	r4, #0
 800ea28:	e7e6      	b.n	800e9f8 <uartTask+0x18>
 800ea2a:	bf00      	nop
 800ea2c:	2000b424 	.word	0x2000b424
 800ea30:	20000ab0 	.word	0x20000ab0
 800ea34:	2000b3a8 	.word	0x2000b3a8

0800ea38 <uartInit>:
		 	}
	}
	vTaskDelete(NULL);
}

void uartInit() {
 800ea38:	b510      	push	{r4, lr}
	mutexSerialCom = xSemaphoreCreateMutex();
 800ea3a:	2001      	movs	r0, #1
 800ea3c:	f7f4 fc12 	bl	8003264 <xQueueCreateMutex>
 800ea40:	4c10      	ldr	r4, [pc, #64]	; (800ea84 <uartInit+0x4c>)
 800ea42:	6020      	str	r0, [r4, #0]
	mutexUART3 = xSemaphoreCreateMutex();
 800ea44:	2001      	movs	r0, #1
 800ea46:	f7f4 fc0d 	bl	8003264 <xQueueCreateMutex>
 800ea4a:	4b0f      	ldr	r3, [pc, #60]	; (800ea88 <uartInit+0x50>)
 800ea4c:	6018      	str	r0, [r3, #0]
	queueRxST = xQueueCreate( 100, 1);
 800ea4e:	2200      	movs	r2, #0
 800ea50:	2101      	movs	r1, #1
 800ea52:	2064      	movs	r0, #100	; 0x64
 800ea54:	f7f4 fb08 	bl	8003068 <xQueueGenericCreate>
 800ea58:	4b0c      	ldr	r3, [pc, #48]	; (800ea8c <uartInit+0x54>)
 800ea5a:	6018      	str	r0, [r3, #0]
	queueTxST = xQueueCreate( 100, 1);
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	2101      	movs	r1, #1
 800ea60:	2064      	movs	r0, #100	; 0x64
 800ea62:	f7f4 fb01 	bl	8003068 <xQueueGenericCreate>
 800ea66:	4b0a      	ldr	r3, [pc, #40]	; (800ea90 <uartInit+0x58>)
 800ea68:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(mutexSerialCom);
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	4619      	mov	r1, r3
 800ea70:	6820      	ldr	r0, [r4, #0]
 800ea72:	f7f4 fb1f 	bl	80030b4 <xQueueGenericSend>
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800ea76:	4a07      	ldr	r2, [pc, #28]	; (800ea94 <uartInit+0x5c>)
 800ea78:	6813      	ldr	r3, [r2, #0]
 800ea7a:	f043 0320 	orr.w	r3, r3, #32
 800ea7e:	6013      	str	r3, [r2, #0]
	LL_USART_EnableIT_RXNE(ST_USART_LL);
}
 800ea80:	bd10      	pop	{r4, pc}
 800ea82:	bf00      	nop
 800ea84:	2000b41c 	.word	0x2000b41c
 800ea88:	2000b420 	.word	0x2000b420
 800ea8c:	2000b418 	.word	0x2000b418
 800ea90:	2000b424 	.word	0x2000b424
 800ea94:	40004800 	.word	0x40004800

0800ea98 <stprint>:
		}
	}
	vTaskDelete(NULL);
}

void stprint(char* format, ...){
 800ea98:	b40f      	push	{r0, r1, r2, r3}
 800ea9a:	b510      	push	{r4, lr}
 800ea9c:	b08a      	sub	sp, #40	; 0x28
 800ea9e:	aa0c      	add	r2, sp, #48	; 0x30
 800eaa0:	f852 1b04 	ldr.w	r1, [r2], #4
	char buffer[DBG_LINE_SIZE];
	va_list args;
	va_start (args, format);
 800eaa4:	9201      	str	r2, [sp, #4]
	vsprintf (buffer,format, args);
 800eaa6:	a802      	add	r0, sp, #8
 800eaa8:	f000 fa66 	bl	800ef78 <vsiprintf>
	while(xSemaphoreTake(mutexSerialCom, 100/portTICK_PERIOD_MS) != pdTRUE);
 800eaac:	2300      	movs	r3, #0
 800eaae:	2264      	movs	r2, #100	; 0x64
 800eab0:	4619      	mov	r1, r3
 800eab2:	4811      	ldr	r0, [pc, #68]	; (800eaf8 <stprint+0x60>)
 800eab4:	6800      	ldr	r0, [r0, #0]
 800eab6:	f7f4 fcbd 	bl	8003434 <xQueueGenericReceive>
 800eaba:	2801      	cmp	r0, #1
 800eabc:	d1f6      	bne.n	800eaac <stprint+0x14>
	for(int i = 0; i < strlen(buffer); i++)
 800eabe:	2400      	movs	r4, #0
 800eac0:	e008      	b.n	800ead4 <stprint+0x3c>
		xQueueSendToBack(queueTxST, buffer + i, NULL);
 800eac2:	2300      	movs	r3, #0
 800eac4:	461a      	mov	r2, r3
 800eac6:	a902      	add	r1, sp, #8
 800eac8:	4421      	add	r1, r4
 800eaca:	480c      	ldr	r0, [pc, #48]	; (800eafc <stprint+0x64>)
 800eacc:	6800      	ldr	r0, [r0, #0]
 800eace:	f7f4 faf1 	bl	80030b4 <xQueueGenericSend>
	for(int i = 0; i < strlen(buffer); i++)
 800ead2:	3401      	adds	r4, #1
 800ead4:	a802      	add	r0, sp, #8
 800ead6:	f7f1 fbbd 	bl	8000254 <strlen>
 800eada:	42a0      	cmp	r0, r4
 800eadc:	d8f1      	bhi.n	800eac2 <stprint+0x2a>
	xSemaphoreGive(mutexSerialCom);
 800eade:	2300      	movs	r3, #0
 800eae0:	461a      	mov	r2, r3
 800eae2:	4619      	mov	r1, r3
 800eae4:	4804      	ldr	r0, [pc, #16]	; (800eaf8 <stprint+0x60>)
 800eae6:	6800      	ldr	r0, [r0, #0]
 800eae8:	f7f4 fae4 	bl	80030b4 <xQueueGenericSend>
	va_end (args);
}
 800eaec:	b00a      	add	sp, #40	; 0x28
 800eaee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaf2:	b004      	add	sp, #16
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	2000b41c 	.word	0x2000b41c
 800eafc:	2000b424 	.word	0x2000b424

0800eb00 <stclear>:

void stclear(){
 800eb00:	b508      	push	{r3, lr}
	stprint("\r\033c");
 800eb02:	4802      	ldr	r0, [pc, #8]	; (800eb0c <stclear+0xc>)
 800eb04:	f7ff ffc8 	bl	800ea98 <stprint>
}
 800eb08:	bd08      	pop	{r3, pc}
 800eb0a:	bf00      	nop
 800eb0c:	08012798 	.word	0x08012798

0800eb10 <commandParserTask>:
void commandParserTask(){
 800eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb14:	b089      	sub	sp, #36	; 0x24
	char newline = '\n';
 800eb16:	230a      	movs	r3, #10
 800eb18:	f88d 3003 	strb.w	r3, [sp, #3]
	int echoFlag = 1;
 800eb1c:	f04f 0a01 	mov.w	sl, #1
	int cmdCompleteFlag = 0;
 800eb20:	2400      	movs	r4, #0
	int argCollectFlag = 0;
 800eb22:	46a1      	mov	r9, r4
	int cmdCollectFlag = 0;
 800eb24:	4627      	mov	r7, r4
	int argCounter = 0;
 800eb26:	4626      	mov	r6, r4
	uint8_t* argPointer = argBuffer[0];
 800eb28:	ad01      	add	r5, sp, #4
	uint8_t* cmdPointer = cmdBuffer;
 800eb2a:	f10d 0818 	add.w	r8, sp, #24
 800eb2e:	e058      	b.n	800ebe2 <commandParserTask+0xd2>
				else if(0 == strcmp(cmdBuffer, "eoff")) echoFlag = 0;
 800eb30:	46a2      	mov	sl, r4
 800eb32:	e056      	b.n	800ebe2 <commandParserTask+0xd2>
					*cmdPointer = '\0';
 800eb34:	2600      	movs	r6, #0
 800eb36:	f888 6000 	strb.w	r6, [r8]
					argCollectFlag = 1;
 800eb3a:	46b9      	mov	r9, r7
					cmdCollectFlag = 0;
 800eb3c:	4637      	mov	r7, r6
					argPointer = argBuffer[0];
 800eb3e:	ad01      	add	r5, sp, #4
 800eb40:	e01d      	b.n	800eb7e <commandParserTask+0x6e>
					*cmdPointer = '\0';
 800eb42:	2300      	movs	r3, #0
 800eb44:	f888 3000 	strb.w	r3, [r8]
					**argBuffer = '\0';
 800eb48:	f88d 3004 	strb.w	r3, [sp, #4]
					cmdCompleteFlag = 1;
 800eb4c:	463c      	mov	r4, r7
					cmdCollectFlag = 0;
 800eb4e:	461f      	mov	r7, r3
 800eb50:	e015      	b.n	800eb7e <commandParserTask+0x6e>
			else if(argCollectFlag){
 800eb52:	f1b9 0f00 	cmp.w	r9, #0
 800eb56:	d012      	beq.n	800eb7e <commandParserTask+0x6e>
				if(byteToProcess == SEP_CHAR){
 800eb58:	2b20      	cmp	r3, #32
 800eb5a:	d004      	beq.n	800eb66 <commandParserTask+0x56>
				if(byteToProcess == RETURN_CHAR){
 800eb5c:	2b0d      	cmp	r3, #13
 800eb5e:	d006      	beq.n	800eb6e <commandParserTask+0x5e>
				else *(argPointer++) = byteToProcess;
 800eb60:	702b      	strb	r3, [r5, #0]
 800eb62:	3501      	adds	r5, #1
 800eb64:	e00b      	b.n	800eb7e <commandParserTask+0x6e>
					argPointer = argBuffer[++argCounter];
 800eb66:	3601      	adds	r6, #1
 800eb68:	aa01      	add	r2, sp, #4
 800eb6a:	1995      	adds	r5, r2, r6
 800eb6c:	e7f6      	b.n	800eb5c <commandParserTask+0x4c>
					*argPointer = '\0';
 800eb6e:	2300      	movs	r3, #0
 800eb70:	702b      	strb	r3, [r5, #0]
					cmdCompleteFlag = 1;
 800eb72:	464c      	mov	r4, r9
					argCollectFlag = 0;
 800eb74:	46b9      	mov	r9, r7
 800eb76:	e002      	b.n	800eb7e <commandParserTask+0x6e>
				cmdCollectFlag = 1;
 800eb78:	2701      	movs	r7, #1
				cmdPointer = cmdBuffer;
 800eb7a:	f10d 0818 	add.w	r8, sp, #24
			if(cmdCompleteFlag){
 800eb7e:	2c00      	cmp	r4, #0
 800eb80:	d02c      	beq.n	800ebdc <commandParserTask+0xcc>
				stprint("\nCOMMAND REC\n%s\nARGS\n%s\n", cmdBuffer, argBuffer);
 800eb82:	aa01      	add	r2, sp, #4
 800eb84:	a906      	add	r1, sp, #24
 800eb86:	4848      	ldr	r0, [pc, #288]	; (800eca8 <commandParserTask+0x198>)
 800eb88:	f7ff ff86 	bl	800ea98 <stprint>
				if(0 == strcmp(cmdBuffer, "cls")) stclear();
 800eb8c:	4947      	ldr	r1, [pc, #284]	; (800ecac <commandParserTask+0x19c>)
 800eb8e:	a806      	add	r0, sp, #24
 800eb90:	f7f1 fb56 	bl	8000240 <strcmp>
 800eb94:	4683      	mov	fp, r0
 800eb96:	b1f0      	cbz	r0, 800ebd6 <commandParserTask+0xc6>
				else if(0 == strcmp(cmdBuffer, "rbt")) { stprint("REBOOTING..."); NVIC_SystemReset(); }
 800eb98:	4945      	ldr	r1, [pc, #276]	; (800ecb0 <commandParserTask+0x1a0>)
 800eb9a:	a806      	add	r0, sp, #24
 800eb9c:	f7f1 fb50 	bl	8000240 <strcmp>
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d037      	beq.n	800ec14 <commandParserTask+0x104>
				else if(0 == strcmp(cmdBuffer, "eon")) echoFlag = 1;
 800eba4:	4943      	ldr	r1, [pc, #268]	; (800ecb4 <commandParserTask+0x1a4>)
 800eba6:	a806      	add	r0, sp, #24
 800eba8:	f7f1 fb4a 	bl	8000240 <strcmp>
 800ebac:	2800      	cmp	r0, #0
 800ebae:	d052      	beq.n	800ec56 <commandParserTask+0x146>
				else if(0 == strcmp(cmdBuffer, "eoff")) echoFlag = 0;
 800ebb0:	4941      	ldr	r1, [pc, #260]	; (800ecb8 <commandParserTask+0x1a8>)
 800ebb2:	a806      	add	r0, sp, #24
 800ebb4:	f7f1 fb44 	bl	8000240 <strcmp>
 800ebb8:	4604      	mov	r4, r0
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d0b8      	beq.n	800eb30 <commandParserTask+0x20>
				else if(0 == strcmp(cmdBuffer, "sd1")) strcpy(serverLine1, argBuffer);
 800ebbe:	493f      	ldr	r1, [pc, #252]	; (800ecbc <commandParserTask+0x1ac>)
 800ebc0:	a806      	add	r0, sp, #24
 800ebc2:	f7f1 fb3d 	bl	8000240 <strcmp>
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d133      	bne.n	800ec34 <commandParserTask+0x124>
 800ebcc:	a901      	add	r1, sp, #4
 800ebce:	483c      	ldr	r0, [pc, #240]	; (800ecc0 <commandParserTask+0x1b0>)
 800ebd0:	f000 f9a2 	bl	800ef18 <strcpy>
 800ebd4:	e002      	b.n	800ebdc <commandParserTask+0xcc>
				if(0 == strcmp(cmdBuffer, "cls")) stclear();
 800ebd6:	f7ff ff93 	bl	800eb00 <stclear>
				cmdCompleteFlag = 0;
 800ebda:	465c      	mov	r4, fp
			if(echoFlag){
 800ebdc:	f1ba 0f00 	cmp.w	sl, #0
 800ebe0:	d13b      	bne.n	800ec5a <commandParserTask+0x14a>
		if(xQueueReceive(queueRxST, &byteToProcess, 100/portTICK_PERIOD_MS) == pdTRUE){
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	2264      	movs	r2, #100	; 0x64
 800ebe6:	f10d 011f 	add.w	r1, sp, #31
 800ebea:	4836      	ldr	r0, [pc, #216]	; (800ecc4 <commandParserTask+0x1b4>)
 800ebec:	6800      	ldr	r0, [r0, #0]
 800ebee:	f7f4 fc21 	bl	8003434 <xQueueGenericReceive>
 800ebf2:	2801      	cmp	r0, #1
 800ebf4:	d1f5      	bne.n	800ebe2 <commandParserTask+0xd2>
			if(byteToProcess == CMD_CHAR){
 800ebf6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800ebfa:	2b23      	cmp	r3, #35	; 0x23
 800ebfc:	d0bc      	beq.n	800eb78 <commandParserTask+0x68>
			else if(cmdCollectFlag){
 800ebfe:	2f00      	cmp	r7, #0
 800ec00:	d0a7      	beq.n	800eb52 <commandParserTask+0x42>
				if(byteToProcess == SEP_CHAR){
 800ec02:	2b20      	cmp	r3, #32
 800ec04:	d096      	beq.n	800eb34 <commandParserTask+0x24>
				else if(byteToProcess == RETURN_CHAR){
 800ec06:	2b0d      	cmp	r3, #13
 800ec08:	d09b      	beq.n	800eb42 <commandParserTask+0x32>
				else *(cmdPointer++) = byteToProcess;
 800ec0a:	f888 3000 	strb.w	r3, [r8]
 800ec0e:	f108 0801 	add.w	r8, r8, #1
 800ec12:	e7b4      	b.n	800eb7e <commandParserTask+0x6e>
				else if(0 == strcmp(cmdBuffer, "rbt")) { stprint("REBOOTING..."); NVIC_SystemReset(); }
 800ec14:	482c      	ldr	r0, [pc, #176]	; (800ecc8 <commandParserTask+0x1b8>)
 800ec16:	f7ff ff3f 	bl	800ea98 <stprint>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ec1a:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ec1e:	492b      	ldr	r1, [pc, #172]	; (800eccc <commandParserTask+0x1bc>)
 800ec20:	68ca      	ldr	r2, [r1, #12]
 800ec22:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ec26:	4b2a      	ldr	r3, [pc, #168]	; (800ecd0 <commandParserTask+0x1c0>)
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	60cb      	str	r3, [r1, #12]
 800ec2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800ec30:	bf00      	nop
 800ec32:	e7fd      	b.n	800ec30 <commandParserTask+0x120>
				else if(0 == strcmp(cmdBuffer, "sd2")) strcpy(serverLine2, argBuffer);
 800ec34:	4927      	ldr	r1, [pc, #156]	; (800ecd4 <commandParserTask+0x1c4>)
 800ec36:	a806      	add	r0, sp, #24
 800ec38:	f7f1 fb02 	bl	8000240 <strcmp>
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	b920      	cbnz	r0, 800ec4a <commandParserTask+0x13a>
 800ec40:	a901      	add	r1, sp, #4
 800ec42:	4825      	ldr	r0, [pc, #148]	; (800ecd8 <commandParserTask+0x1c8>)
 800ec44:	f000 f968 	bl	800ef18 <strcpy>
 800ec48:	e7c8      	b.n	800ebdc <commandParserTask+0xcc>
				else stprint("\nUnknown command: %s", cmdBuffer);
 800ec4a:	a906      	add	r1, sp, #24
 800ec4c:	4823      	ldr	r0, [pc, #140]	; (800ecdc <commandParserTask+0x1cc>)
 800ec4e:	f7ff ff23 	bl	800ea98 <stprint>
				cmdCompleteFlag = 0;
 800ec52:	2400      	movs	r4, #0
 800ec54:	e7c2      	b.n	800ebdc <commandParserTask+0xcc>
				else if(0 == strcmp(cmdBuffer, "eon")) echoFlag = 1;
 800ec56:	46a2      	mov	sl, r4
				cmdCompleteFlag = 0;
 800ec58:	4604      	mov	r4, r0
				while(xSemaphoreTake(mutexSerialCom, 100/portTICK_PERIOD_MS) != pdTRUE);
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	2264      	movs	r2, #100	; 0x64
 800ec5e:	4619      	mov	r1, r3
 800ec60:	481f      	ldr	r0, [pc, #124]	; (800ece0 <commandParserTask+0x1d0>)
 800ec62:	6800      	ldr	r0, [r0, #0]
 800ec64:	f7f4 fbe6 	bl	8003434 <xQueueGenericReceive>
 800ec68:	2801      	cmp	r0, #1
 800ec6a:	d1f6      	bne.n	800ec5a <commandParserTask+0x14a>
				if(byteToProcess == RETURN_CHAR)	xQueueSendToBack(queueTxST, &newline, NULL);
 800ec6c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800ec70:	2b0d      	cmp	r3, #13
 800ec72:	d00f      	beq.n	800ec94 <commandParserTask+0x184>
				else	xQueueSendToBack(queueTxST, &byteToProcess, NULL);
 800ec74:	2300      	movs	r3, #0
 800ec76:	461a      	mov	r2, r3
 800ec78:	f10d 011f 	add.w	r1, sp, #31
 800ec7c:	4819      	ldr	r0, [pc, #100]	; (800ece4 <commandParserTask+0x1d4>)
 800ec7e:	6800      	ldr	r0, [r0, #0]
 800ec80:	f7f4 fa18 	bl	80030b4 <xQueueGenericSend>
				xSemaphoreGive(mutexSerialCom);
 800ec84:	2300      	movs	r3, #0
 800ec86:	461a      	mov	r2, r3
 800ec88:	4619      	mov	r1, r3
 800ec8a:	4815      	ldr	r0, [pc, #84]	; (800ece0 <commandParserTask+0x1d0>)
 800ec8c:	6800      	ldr	r0, [r0, #0]
 800ec8e:	f7f4 fa11 	bl	80030b4 <xQueueGenericSend>
 800ec92:	e7a6      	b.n	800ebe2 <commandParserTask+0xd2>
				if(byteToProcess == RETURN_CHAR)	xQueueSendToBack(queueTxST, &newline, NULL);
 800ec94:	2300      	movs	r3, #0
 800ec96:	461a      	mov	r2, r3
 800ec98:	f10d 0103 	add.w	r1, sp, #3
 800ec9c:	4811      	ldr	r0, [pc, #68]	; (800ece4 <commandParserTask+0x1d4>)
 800ec9e:	6800      	ldr	r0, [r0, #0]
 800eca0:	f7f4 fa08 	bl	80030b4 <xQueueGenericSend>
 800eca4:	e7ee      	b.n	800ec84 <commandParserTask+0x174>
 800eca6:	bf00      	nop
 800eca8:	0801281c 	.word	0x0801281c
 800ecac:	08012838 	.word	0x08012838
 800ecb0:	0801283c 	.word	0x0801283c
 800ecb4:	08012850 	.word	0x08012850
 800ecb8:	08012854 	.word	0x08012854
 800ecbc:	0801285c 	.word	0x0801285c
 800ecc0:	20004a28 	.word	0x20004a28
 800ecc4:	2000b418 	.word	0x2000b418
 800ecc8:	08012840 	.word	0x08012840
 800eccc:	e000ed00 	.word	0xe000ed00
 800ecd0:	05fa0004 	.word	0x05fa0004
 800ecd4:	08012860 	.word	0x08012860
 800ecd8:	20004a48 	.word	0x20004a48
 800ecdc:	08012864 	.word	0x08012864
 800ece0:	2000b41c 	.word	0x2000b41c
 800ece4:	2000b424 	.word	0x2000b424

0800ece8 <isrprint>:

void isrprint(char* format, ...){
 800ece8:	b40f      	push	{r0, r1, r2, r3}
 800ecea:	b510      	push	{r4, lr}
 800ecec:	b08a      	sub	sp, #40	; 0x28
 800ecee:	aa0c      	add	r2, sp, #48	; 0x30
 800ecf0:	f852 1b04 	ldr.w	r1, [r2], #4
	char buffer[DBG_LINE_SIZE];
	va_list args;
	va_start (args, format);
 800ecf4:	9201      	str	r2, [sp, #4]
	vsprintf (buffer,format, args);
 800ecf6:	a802      	add	r0, sp, #8
 800ecf8:	f000 f93e 	bl	800ef78 <vsiprintf>
	while(xSemaphoreTakeFromISR(mutexSerialCom, 100/portTICK_PERIOD_MS) != pdTRUE);
 800ecfc:	2264      	movs	r2, #100	; 0x64
 800ecfe:	2100      	movs	r1, #0
 800ed00:	4b0f      	ldr	r3, [pc, #60]	; (800ed40 <isrprint+0x58>)
 800ed02:	6818      	ldr	r0, [r3, #0]
 800ed04:	f7f4 fc74 	bl	80035f0 <xQueueReceiveFromISR>
 800ed08:	2801      	cmp	r0, #1
 800ed0a:	d1f7      	bne.n	800ecfc <isrprint+0x14>
	for(int i = 0; i < strlen(buffer); i++)
 800ed0c:	2400      	movs	r4, #0
 800ed0e:	e008      	b.n	800ed22 <isrprint+0x3a>
		xQueueSendToBackFromISR(queueTxST, buffer + i, NULL);
 800ed10:	2300      	movs	r3, #0
 800ed12:	461a      	mov	r2, r3
 800ed14:	a902      	add	r1, sp, #8
 800ed16:	4421      	add	r1, r4
 800ed18:	480a      	ldr	r0, [pc, #40]	; (800ed44 <isrprint+0x5c>)
 800ed1a:	6800      	ldr	r0, [r0, #0]
 800ed1c:	f7f4 faad 	bl	800327a <xQueueGenericSendFromISR>
	for(int i = 0; i < strlen(buffer); i++)
 800ed20:	3401      	adds	r4, #1
 800ed22:	a802      	add	r0, sp, #8
 800ed24:	f7f1 fa96 	bl	8000254 <strlen>
 800ed28:	42a0      	cmp	r0, r4
 800ed2a:	d8f1      	bhi.n	800ed10 <isrprint+0x28>
	xSemaphoreGiveFromISR(mutexSerialCom, NULL);
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	4b04      	ldr	r3, [pc, #16]	; (800ed40 <isrprint+0x58>)
 800ed30:	6818      	ldr	r0, [r3, #0]
 800ed32:	f7f4 fb19 	bl	8003368 <xQueueGiveFromISR>
	va_end (args);
}
 800ed36:	b00a      	add	sp, #40	; 0x28
 800ed38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed3c:	b004      	add	sp, #16
 800ed3e:	4770      	bx	lr
 800ed40:	2000b41c 	.word	0x2000b41c
 800ed44:	2000b424 	.word	0x2000b424

0800ed48 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800ed48:	b508      	push	{r3, lr}
	flagUSART3TxCplt = 1;
 800ed4a:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <HAL_UART_TxCpltCallback+0x18>)
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LDTX_GPIO_Port, LDTX_Pin, GPIO_PIN_RESET);
 800ed50:	2200      	movs	r2, #0
 800ed52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed56:	4803      	ldr	r0, [pc, #12]	; (800ed64 <HAL_UART_TxCpltCallback+0x1c>)
 800ed58:	f7f2 fa2f 	bl	80011ba <HAL_GPIO_WritePin>
}
 800ed5c:	bd08      	pop	{r3, pc}
 800ed5e:	bf00      	nop
 800ed60:	20000ab0 	.word	0x20000ab0
 800ed64:	40020c00 	.word	0x40020c00

0800ed68 <UART_CharReception_Callback>:

void UART_CharReception_Callback(){
 800ed68:	b500      	push	{lr}
 800ed6a:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(LDRX_GPIO_Port, LDRX_Pin, GPIO_PIN_SET);
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ed72:	4808      	ldr	r0, [pc, #32]	; (800ed94 <UART_CharReception_Callback+0x2c>)
 800ed74:	f7f2 fa21 	bl	80011ba <HAL_GPIO_WritePin>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 800ed78:	4b07      	ldr	r3, [pc, #28]	; (800ed98 <UART_CharReception_Callback+0x30>)
 800ed7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t byteToSave = LL_USART_ReceiveData8(ST_USART_LL);
 800ed7c:	a902      	add	r1, sp, #8
 800ed7e:	f801 3d01 	strb.w	r3, [r1, #-1]!
	xQueueSendToBackFromISR(queueRxST, &byteToSave, NULL);
 800ed82:	2300      	movs	r3, #0
 800ed84:	461a      	mov	r2, r3
 800ed86:	4805      	ldr	r0, [pc, #20]	; (800ed9c <UART_CharReception_Callback+0x34>)
 800ed88:	6800      	ldr	r0, [r0, #0]
 800ed8a:	f7f4 fa76 	bl	800327a <xQueueGenericSendFromISR>
	//xQueueSendToBackFromISR(queueTxST, &byteToSave, NULL); //hardcoded echo
}
 800ed8e:	b003      	add	sp, #12
 800ed90:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed94:	40020c00 	.word	0x40020c00
 800ed98:	40004800 	.word	0x40004800
 800ed9c:	2000b418 	.word	0x2000b418

0800eda0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800eda0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800edd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800eda4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800eda6:	e003      	b.n	800edb0 <LoopCopyDataInit>

0800eda8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800eda8:	4b0c      	ldr	r3, [pc, #48]	; (800eddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800edaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800edac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800edae:	3104      	adds	r1, #4

0800edb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800edb0:	480b      	ldr	r0, [pc, #44]	; (800ede0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800edb2:	4b0c      	ldr	r3, [pc, #48]	; (800ede4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800edb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800edb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800edb8:	d3f6      	bcc.n	800eda8 <CopyDataInit>
  ldr  r2, =_sbss
 800edba:	4a0b      	ldr	r2, [pc, #44]	; (800ede8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800edbc:	e002      	b.n	800edc4 <LoopFillZerobss>

0800edbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800edbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800edc0:	f842 3b04 	str.w	r3, [r2], #4

0800edc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800edc4:	4b09      	ldr	r3, [pc, #36]	; (800edec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800edc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800edc8:	d3f9      	bcc.n	800edbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800edca:	f7ff fde1 	bl	800e990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800edce:	f000 f811 	bl	800edf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800edd2:	f7ff fccd 	bl	800e770 <main>
  bx  lr    
 800edd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800edd8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800eddc:	08012924 	.word	0x08012924
  ldr  r0, =_sdata
 800ede0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ede4:	20000b18 	.word	0x20000b18
  ldr  r2, =_sbss
 800ede8:	20000b18 	.word	0x20000b18
  ldr  r3, = _ebss
 800edec:	2000b428 	.word	0x2000b428

0800edf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800edf0:	e7fe      	b.n	800edf0 <ADC_IRQHandler>
	...

0800edf4 <__libc_init_array>:
 800edf4:	b570      	push	{r4, r5, r6, lr}
 800edf6:	4e0d      	ldr	r6, [pc, #52]	; (800ee2c <__libc_init_array+0x38>)
 800edf8:	4c0d      	ldr	r4, [pc, #52]	; (800ee30 <__libc_init_array+0x3c>)
 800edfa:	1ba4      	subs	r4, r4, r6
 800edfc:	10a4      	asrs	r4, r4, #2
 800edfe:	2500      	movs	r5, #0
 800ee00:	42a5      	cmp	r5, r4
 800ee02:	d109      	bne.n	800ee18 <__libc_init_array+0x24>
 800ee04:	4e0b      	ldr	r6, [pc, #44]	; (800ee34 <__libc_init_array+0x40>)
 800ee06:	4c0c      	ldr	r4, [pc, #48]	; (800ee38 <__libc_init_array+0x44>)
 800ee08:	f001 f96c 	bl	80100e4 <_init>
 800ee0c:	1ba4      	subs	r4, r4, r6
 800ee0e:	10a4      	asrs	r4, r4, #2
 800ee10:	2500      	movs	r5, #0
 800ee12:	42a5      	cmp	r5, r4
 800ee14:	d105      	bne.n	800ee22 <__libc_init_array+0x2e>
 800ee16:	bd70      	pop	{r4, r5, r6, pc}
 800ee18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee1c:	4798      	blx	r3
 800ee1e:	3501      	adds	r5, #1
 800ee20:	e7ee      	b.n	800ee00 <__libc_init_array+0xc>
 800ee22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee26:	4798      	blx	r3
 800ee28:	3501      	adds	r5, #1
 800ee2a:	e7f2      	b.n	800ee12 <__libc_init_array+0x1e>
 800ee2c:	0801291c 	.word	0x0801291c
 800ee30:	0801291c 	.word	0x0801291c
 800ee34:	0801291c 	.word	0x0801291c
 800ee38:	08012920 	.word	0x08012920

0800ee3c <memcmp>:
 800ee3c:	b530      	push	{r4, r5, lr}
 800ee3e:	2400      	movs	r4, #0
 800ee40:	42a2      	cmp	r2, r4
 800ee42:	d101      	bne.n	800ee48 <memcmp+0xc>
 800ee44:	2000      	movs	r0, #0
 800ee46:	e007      	b.n	800ee58 <memcmp+0x1c>
 800ee48:	5d03      	ldrb	r3, [r0, r4]
 800ee4a:	3401      	adds	r4, #1
 800ee4c:	190d      	adds	r5, r1, r4
 800ee4e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ee52:	42ab      	cmp	r3, r5
 800ee54:	d0f4      	beq.n	800ee40 <memcmp+0x4>
 800ee56:	1b58      	subs	r0, r3, r5
 800ee58:	bd30      	pop	{r4, r5, pc}

0800ee5a <memcpy>:
 800ee5a:	b510      	push	{r4, lr}
 800ee5c:	1e43      	subs	r3, r0, #1
 800ee5e:	440a      	add	r2, r1
 800ee60:	4291      	cmp	r1, r2
 800ee62:	d100      	bne.n	800ee66 <memcpy+0xc>
 800ee64:	bd10      	pop	{r4, pc}
 800ee66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee6e:	e7f7      	b.n	800ee60 <memcpy+0x6>

0800ee70 <memset>:
 800ee70:	4402      	add	r2, r0
 800ee72:	4603      	mov	r3, r0
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d100      	bne.n	800ee7a <memset+0xa>
 800ee78:	4770      	bx	lr
 800ee7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ee7e:	e7f9      	b.n	800ee74 <memset+0x4>

0800ee80 <iprintf>:
 800ee80:	b40f      	push	{r0, r1, r2, r3}
 800ee82:	4b0a      	ldr	r3, [pc, #40]	; (800eeac <iprintf+0x2c>)
 800ee84:	b513      	push	{r0, r1, r4, lr}
 800ee86:	681c      	ldr	r4, [r3, #0]
 800ee88:	b124      	cbz	r4, 800ee94 <iprintf+0x14>
 800ee8a:	69a3      	ldr	r3, [r4, #24]
 800ee8c:	b913      	cbnz	r3, 800ee94 <iprintf+0x14>
 800ee8e:	4620      	mov	r0, r4
 800ee90:	f000 f8bc 	bl	800f00c <__sinit>
 800ee94:	ab05      	add	r3, sp, #20
 800ee96:	9a04      	ldr	r2, [sp, #16]
 800ee98:	68a1      	ldr	r1, [r4, #8]
 800ee9a:	9301      	str	r3, [sp, #4]
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f000 fb6b 	bl	800f578 <_vfiprintf_r>
 800eea2:	b002      	add	sp, #8
 800eea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eea8:	b004      	add	sp, #16
 800eeaa:	4770      	bx	lr
 800eeac:	20000ab4 	.word	0x20000ab4

0800eeb0 <rand>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	4b13      	ldr	r3, [pc, #76]	; (800ef00 <rand+0x50>)
 800eeb4:	681c      	ldr	r4, [r3, #0]
 800eeb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eeb8:	b97b      	cbnz	r3, 800eeda <rand+0x2a>
 800eeba:	2018      	movs	r0, #24
 800eebc:	f000 f930 	bl	800f120 <malloc>
 800eec0:	4a10      	ldr	r2, [pc, #64]	; (800ef04 <rand+0x54>)
 800eec2:	4b11      	ldr	r3, [pc, #68]	; (800ef08 <rand+0x58>)
 800eec4:	63a0      	str	r0, [r4, #56]	; 0x38
 800eec6:	e9c0 2300 	strd	r2, r3, [r0]
 800eeca:	4b10      	ldr	r3, [pc, #64]	; (800ef0c <rand+0x5c>)
 800eecc:	6083      	str	r3, [r0, #8]
 800eece:	230b      	movs	r3, #11
 800eed0:	8183      	strh	r3, [r0, #12]
 800eed2:	2201      	movs	r2, #1
 800eed4:	2300      	movs	r3, #0
 800eed6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800eeda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eedc:	480c      	ldr	r0, [pc, #48]	; (800ef10 <rand+0x60>)
 800eede:	690a      	ldr	r2, [r1, #16]
 800eee0:	694b      	ldr	r3, [r1, #20]
 800eee2:	4c0c      	ldr	r4, [pc, #48]	; (800ef14 <rand+0x64>)
 800eee4:	4350      	muls	r0, r2
 800eee6:	fb04 0003 	mla	r0, r4, r3, r0
 800eeea:	fba2 2304 	umull	r2, r3, r2, r4
 800eeee:	4403      	add	r3, r0
 800eef0:	1c54      	adds	r4, r2, #1
 800eef2:	f143 0500 	adc.w	r5, r3, #0
 800eef6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800eefa:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800eefe:	bd38      	pop	{r3, r4, r5, pc}
 800ef00:	20000ab4 	.word	0x20000ab4
 800ef04:	abcd330e 	.word	0xabcd330e
 800ef08:	e66d1234 	.word	0xe66d1234
 800ef0c:	0005deec 	.word	0x0005deec
 800ef10:	5851f42d 	.word	0x5851f42d
 800ef14:	4c957f2d 	.word	0x4c957f2d

0800ef18 <strcpy>:
 800ef18:	4603      	mov	r3, r0
 800ef1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef1e:	f803 2b01 	strb.w	r2, [r3], #1
 800ef22:	2a00      	cmp	r2, #0
 800ef24:	d1f9      	bne.n	800ef1a <strcpy+0x2>
 800ef26:	4770      	bx	lr

0800ef28 <strncmp>:
 800ef28:	b510      	push	{r4, lr}
 800ef2a:	b16a      	cbz	r2, 800ef48 <strncmp+0x20>
 800ef2c:	3901      	subs	r1, #1
 800ef2e:	1884      	adds	r4, r0, r2
 800ef30:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ef34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d103      	bne.n	800ef44 <strncmp+0x1c>
 800ef3c:	42a0      	cmp	r0, r4
 800ef3e:	d001      	beq.n	800ef44 <strncmp+0x1c>
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1f5      	bne.n	800ef30 <strncmp+0x8>
 800ef44:	1a98      	subs	r0, r3, r2
 800ef46:	bd10      	pop	{r4, pc}
 800ef48:	4610      	mov	r0, r2
 800ef4a:	e7fc      	b.n	800ef46 <strncmp+0x1e>

0800ef4c <_vsiprintf_r>:
 800ef4c:	b500      	push	{lr}
 800ef4e:	b09b      	sub	sp, #108	; 0x6c
 800ef50:	9100      	str	r1, [sp, #0]
 800ef52:	9104      	str	r1, [sp, #16]
 800ef54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef58:	9105      	str	r1, [sp, #20]
 800ef5a:	9102      	str	r1, [sp, #8]
 800ef5c:	4905      	ldr	r1, [pc, #20]	; (800ef74 <_vsiprintf_r+0x28>)
 800ef5e:	9103      	str	r1, [sp, #12]
 800ef60:	4669      	mov	r1, sp
 800ef62:	f000 f9e7 	bl	800f334 <_svfiprintf_r>
 800ef66:	9b00      	ldr	r3, [sp, #0]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	701a      	strb	r2, [r3, #0]
 800ef6c:	b01b      	add	sp, #108	; 0x6c
 800ef6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef72:	bf00      	nop
 800ef74:	ffff0208 	.word	0xffff0208

0800ef78 <vsiprintf>:
 800ef78:	4613      	mov	r3, r2
 800ef7a:	460a      	mov	r2, r1
 800ef7c:	4601      	mov	r1, r0
 800ef7e:	4802      	ldr	r0, [pc, #8]	; (800ef88 <vsiprintf+0x10>)
 800ef80:	6800      	ldr	r0, [r0, #0]
 800ef82:	f7ff bfe3 	b.w	800ef4c <_vsiprintf_r>
 800ef86:	bf00      	nop
 800ef88:	20000ab4 	.word	0x20000ab4

0800ef8c <std>:
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	b510      	push	{r4, lr}
 800ef90:	4604      	mov	r4, r0
 800ef92:	e9c0 3300 	strd	r3, r3, [r0]
 800ef96:	6083      	str	r3, [r0, #8]
 800ef98:	8181      	strh	r1, [r0, #12]
 800ef9a:	6643      	str	r3, [r0, #100]	; 0x64
 800ef9c:	81c2      	strh	r2, [r0, #14]
 800ef9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efa2:	6183      	str	r3, [r0, #24]
 800efa4:	4619      	mov	r1, r3
 800efa6:	2208      	movs	r2, #8
 800efa8:	305c      	adds	r0, #92	; 0x5c
 800efaa:	f7ff ff61 	bl	800ee70 <memset>
 800efae:	4b05      	ldr	r3, [pc, #20]	; (800efc4 <std+0x38>)
 800efb0:	6263      	str	r3, [r4, #36]	; 0x24
 800efb2:	4b05      	ldr	r3, [pc, #20]	; (800efc8 <std+0x3c>)
 800efb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800efb6:	4b05      	ldr	r3, [pc, #20]	; (800efcc <std+0x40>)
 800efb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800efba:	4b05      	ldr	r3, [pc, #20]	; (800efd0 <std+0x44>)
 800efbc:	6224      	str	r4, [r4, #32]
 800efbe:	6323      	str	r3, [r4, #48]	; 0x30
 800efc0:	bd10      	pop	{r4, pc}
 800efc2:	bf00      	nop
 800efc4:	0800fad5 	.word	0x0800fad5
 800efc8:	0800faf7 	.word	0x0800faf7
 800efcc:	0800fb2f 	.word	0x0800fb2f
 800efd0:	0800fb53 	.word	0x0800fb53

0800efd4 <_cleanup_r>:
 800efd4:	4901      	ldr	r1, [pc, #4]	; (800efdc <_cleanup_r+0x8>)
 800efd6:	f000 b885 	b.w	800f0e4 <_fwalk_reent>
 800efda:	bf00      	nop
 800efdc:	0800fe2d 	.word	0x0800fe2d

0800efe0 <__sfmoreglue>:
 800efe0:	b570      	push	{r4, r5, r6, lr}
 800efe2:	1e4a      	subs	r2, r1, #1
 800efe4:	2568      	movs	r5, #104	; 0x68
 800efe6:	4355      	muls	r5, r2
 800efe8:	460e      	mov	r6, r1
 800efea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800efee:	f000 f8ed 	bl	800f1cc <_malloc_r>
 800eff2:	4604      	mov	r4, r0
 800eff4:	b140      	cbz	r0, 800f008 <__sfmoreglue+0x28>
 800eff6:	2100      	movs	r1, #0
 800eff8:	e9c0 1600 	strd	r1, r6, [r0]
 800effc:	300c      	adds	r0, #12
 800effe:	60a0      	str	r0, [r4, #8]
 800f000:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f004:	f7ff ff34 	bl	800ee70 <memset>
 800f008:	4620      	mov	r0, r4
 800f00a:	bd70      	pop	{r4, r5, r6, pc}

0800f00c <__sinit>:
 800f00c:	6983      	ldr	r3, [r0, #24]
 800f00e:	b510      	push	{r4, lr}
 800f010:	4604      	mov	r4, r0
 800f012:	bb33      	cbnz	r3, 800f062 <__sinit+0x56>
 800f014:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f018:	6503      	str	r3, [r0, #80]	; 0x50
 800f01a:	4b12      	ldr	r3, [pc, #72]	; (800f064 <__sinit+0x58>)
 800f01c:	4a12      	ldr	r2, [pc, #72]	; (800f068 <__sinit+0x5c>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6282      	str	r2, [r0, #40]	; 0x28
 800f022:	4298      	cmp	r0, r3
 800f024:	bf04      	itt	eq
 800f026:	2301      	moveq	r3, #1
 800f028:	6183      	streq	r3, [r0, #24]
 800f02a:	f000 f81f 	bl	800f06c <__sfp>
 800f02e:	6060      	str	r0, [r4, #4]
 800f030:	4620      	mov	r0, r4
 800f032:	f000 f81b 	bl	800f06c <__sfp>
 800f036:	60a0      	str	r0, [r4, #8]
 800f038:	4620      	mov	r0, r4
 800f03a:	f000 f817 	bl	800f06c <__sfp>
 800f03e:	2200      	movs	r2, #0
 800f040:	60e0      	str	r0, [r4, #12]
 800f042:	2104      	movs	r1, #4
 800f044:	6860      	ldr	r0, [r4, #4]
 800f046:	f7ff ffa1 	bl	800ef8c <std>
 800f04a:	2201      	movs	r2, #1
 800f04c:	2109      	movs	r1, #9
 800f04e:	68a0      	ldr	r0, [r4, #8]
 800f050:	f7ff ff9c 	bl	800ef8c <std>
 800f054:	2202      	movs	r2, #2
 800f056:	2112      	movs	r1, #18
 800f058:	68e0      	ldr	r0, [r4, #12]
 800f05a:	f7ff ff97 	bl	800ef8c <std>
 800f05e:	2301      	movs	r3, #1
 800f060:	61a3      	str	r3, [r4, #24]
 800f062:	bd10      	pop	{r4, pc}
 800f064:	0801287c 	.word	0x0801287c
 800f068:	0800efd5 	.word	0x0800efd5

0800f06c <__sfp>:
 800f06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f06e:	4b1b      	ldr	r3, [pc, #108]	; (800f0dc <__sfp+0x70>)
 800f070:	681e      	ldr	r6, [r3, #0]
 800f072:	69b3      	ldr	r3, [r6, #24]
 800f074:	4607      	mov	r7, r0
 800f076:	b913      	cbnz	r3, 800f07e <__sfp+0x12>
 800f078:	4630      	mov	r0, r6
 800f07a:	f7ff ffc7 	bl	800f00c <__sinit>
 800f07e:	3648      	adds	r6, #72	; 0x48
 800f080:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f084:	3b01      	subs	r3, #1
 800f086:	d503      	bpl.n	800f090 <__sfp+0x24>
 800f088:	6833      	ldr	r3, [r6, #0]
 800f08a:	b133      	cbz	r3, 800f09a <__sfp+0x2e>
 800f08c:	6836      	ldr	r6, [r6, #0]
 800f08e:	e7f7      	b.n	800f080 <__sfp+0x14>
 800f090:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f094:	b16d      	cbz	r5, 800f0b2 <__sfp+0x46>
 800f096:	3468      	adds	r4, #104	; 0x68
 800f098:	e7f4      	b.n	800f084 <__sfp+0x18>
 800f09a:	2104      	movs	r1, #4
 800f09c:	4638      	mov	r0, r7
 800f09e:	f7ff ff9f 	bl	800efe0 <__sfmoreglue>
 800f0a2:	6030      	str	r0, [r6, #0]
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	d1f1      	bne.n	800f08c <__sfp+0x20>
 800f0a8:	230c      	movs	r3, #12
 800f0aa:	603b      	str	r3, [r7, #0]
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0b2:	4b0b      	ldr	r3, [pc, #44]	; (800f0e0 <__sfp+0x74>)
 800f0b4:	6665      	str	r5, [r4, #100]	; 0x64
 800f0b6:	e9c4 5500 	strd	r5, r5, [r4]
 800f0ba:	60a5      	str	r5, [r4, #8]
 800f0bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f0c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f0c4:	2208      	movs	r2, #8
 800f0c6:	4629      	mov	r1, r5
 800f0c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f0cc:	f7ff fed0 	bl	800ee70 <memset>
 800f0d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f0d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f0d8:	e7e9      	b.n	800f0ae <__sfp+0x42>
 800f0da:	bf00      	nop
 800f0dc:	0801287c 	.word	0x0801287c
 800f0e0:	ffff0001 	.word	0xffff0001

0800f0e4 <_fwalk_reent>:
 800f0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0e8:	4680      	mov	r8, r0
 800f0ea:	4689      	mov	r9, r1
 800f0ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f0f0:	2600      	movs	r6, #0
 800f0f2:	b914      	cbnz	r4, 800f0fa <_fwalk_reent+0x16>
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f0fe:	3f01      	subs	r7, #1
 800f100:	d501      	bpl.n	800f106 <_fwalk_reent+0x22>
 800f102:	6824      	ldr	r4, [r4, #0]
 800f104:	e7f5      	b.n	800f0f2 <_fwalk_reent+0xe>
 800f106:	89ab      	ldrh	r3, [r5, #12]
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d907      	bls.n	800f11c <_fwalk_reent+0x38>
 800f10c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f110:	3301      	adds	r3, #1
 800f112:	d003      	beq.n	800f11c <_fwalk_reent+0x38>
 800f114:	4629      	mov	r1, r5
 800f116:	4640      	mov	r0, r8
 800f118:	47c8      	blx	r9
 800f11a:	4306      	orrs	r6, r0
 800f11c:	3568      	adds	r5, #104	; 0x68
 800f11e:	e7ee      	b.n	800f0fe <_fwalk_reent+0x1a>

0800f120 <malloc>:
 800f120:	4b02      	ldr	r3, [pc, #8]	; (800f12c <malloc+0xc>)
 800f122:	4601      	mov	r1, r0
 800f124:	6818      	ldr	r0, [r3, #0]
 800f126:	f000 b851 	b.w	800f1cc <_malloc_r>
 800f12a:	bf00      	nop
 800f12c:	20000ab4 	.word	0x20000ab4

0800f130 <_free_r>:
 800f130:	b538      	push	{r3, r4, r5, lr}
 800f132:	4605      	mov	r5, r0
 800f134:	2900      	cmp	r1, #0
 800f136:	d045      	beq.n	800f1c4 <_free_r+0x94>
 800f138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f13c:	1f0c      	subs	r4, r1, #4
 800f13e:	2b00      	cmp	r3, #0
 800f140:	bfb8      	it	lt
 800f142:	18e4      	addlt	r4, r4, r3
 800f144:	f000 ff2b 	bl	800ff9e <__malloc_lock>
 800f148:	4a1f      	ldr	r2, [pc, #124]	; (800f1c8 <_free_r+0x98>)
 800f14a:	6813      	ldr	r3, [r2, #0]
 800f14c:	4610      	mov	r0, r2
 800f14e:	b933      	cbnz	r3, 800f15e <_free_r+0x2e>
 800f150:	6063      	str	r3, [r4, #4]
 800f152:	6014      	str	r4, [r2, #0]
 800f154:	4628      	mov	r0, r5
 800f156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f15a:	f000 bf21 	b.w	800ffa0 <__malloc_unlock>
 800f15e:	42a3      	cmp	r3, r4
 800f160:	d90c      	bls.n	800f17c <_free_r+0x4c>
 800f162:	6821      	ldr	r1, [r4, #0]
 800f164:	1862      	adds	r2, r4, r1
 800f166:	4293      	cmp	r3, r2
 800f168:	bf04      	itt	eq
 800f16a:	681a      	ldreq	r2, [r3, #0]
 800f16c:	685b      	ldreq	r3, [r3, #4]
 800f16e:	6063      	str	r3, [r4, #4]
 800f170:	bf04      	itt	eq
 800f172:	1852      	addeq	r2, r2, r1
 800f174:	6022      	streq	r2, [r4, #0]
 800f176:	6004      	str	r4, [r0, #0]
 800f178:	e7ec      	b.n	800f154 <_free_r+0x24>
 800f17a:	4613      	mov	r3, r2
 800f17c:	685a      	ldr	r2, [r3, #4]
 800f17e:	b10a      	cbz	r2, 800f184 <_free_r+0x54>
 800f180:	42a2      	cmp	r2, r4
 800f182:	d9fa      	bls.n	800f17a <_free_r+0x4a>
 800f184:	6819      	ldr	r1, [r3, #0]
 800f186:	1858      	adds	r0, r3, r1
 800f188:	42a0      	cmp	r0, r4
 800f18a:	d10b      	bne.n	800f1a4 <_free_r+0x74>
 800f18c:	6820      	ldr	r0, [r4, #0]
 800f18e:	4401      	add	r1, r0
 800f190:	1858      	adds	r0, r3, r1
 800f192:	4282      	cmp	r2, r0
 800f194:	6019      	str	r1, [r3, #0]
 800f196:	d1dd      	bne.n	800f154 <_free_r+0x24>
 800f198:	6810      	ldr	r0, [r2, #0]
 800f19a:	6852      	ldr	r2, [r2, #4]
 800f19c:	605a      	str	r2, [r3, #4]
 800f19e:	4401      	add	r1, r0
 800f1a0:	6019      	str	r1, [r3, #0]
 800f1a2:	e7d7      	b.n	800f154 <_free_r+0x24>
 800f1a4:	d902      	bls.n	800f1ac <_free_r+0x7c>
 800f1a6:	230c      	movs	r3, #12
 800f1a8:	602b      	str	r3, [r5, #0]
 800f1aa:	e7d3      	b.n	800f154 <_free_r+0x24>
 800f1ac:	6820      	ldr	r0, [r4, #0]
 800f1ae:	1821      	adds	r1, r4, r0
 800f1b0:	428a      	cmp	r2, r1
 800f1b2:	bf04      	itt	eq
 800f1b4:	6811      	ldreq	r1, [r2, #0]
 800f1b6:	6852      	ldreq	r2, [r2, #4]
 800f1b8:	6062      	str	r2, [r4, #4]
 800f1ba:	bf04      	itt	eq
 800f1bc:	1809      	addeq	r1, r1, r0
 800f1be:	6021      	streq	r1, [r4, #0]
 800f1c0:	605c      	str	r4, [r3, #4]
 800f1c2:	e7c7      	b.n	800f154 <_free_r+0x24>
 800f1c4:	bd38      	pop	{r3, r4, r5, pc}
 800f1c6:	bf00      	nop
 800f1c8:	20004a68 	.word	0x20004a68

0800f1cc <_malloc_r>:
 800f1cc:	b570      	push	{r4, r5, r6, lr}
 800f1ce:	1ccd      	adds	r5, r1, #3
 800f1d0:	f025 0503 	bic.w	r5, r5, #3
 800f1d4:	3508      	adds	r5, #8
 800f1d6:	2d0c      	cmp	r5, #12
 800f1d8:	bf38      	it	cc
 800f1da:	250c      	movcc	r5, #12
 800f1dc:	2d00      	cmp	r5, #0
 800f1de:	4606      	mov	r6, r0
 800f1e0:	db01      	blt.n	800f1e6 <_malloc_r+0x1a>
 800f1e2:	42a9      	cmp	r1, r5
 800f1e4:	d903      	bls.n	800f1ee <_malloc_r+0x22>
 800f1e6:	230c      	movs	r3, #12
 800f1e8:	6033      	str	r3, [r6, #0]
 800f1ea:	2000      	movs	r0, #0
 800f1ec:	bd70      	pop	{r4, r5, r6, pc}
 800f1ee:	f000 fed6 	bl	800ff9e <__malloc_lock>
 800f1f2:	4a21      	ldr	r2, [pc, #132]	; (800f278 <_malloc_r+0xac>)
 800f1f4:	6814      	ldr	r4, [r2, #0]
 800f1f6:	4621      	mov	r1, r4
 800f1f8:	b991      	cbnz	r1, 800f220 <_malloc_r+0x54>
 800f1fa:	4c20      	ldr	r4, [pc, #128]	; (800f27c <_malloc_r+0xb0>)
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	b91b      	cbnz	r3, 800f208 <_malloc_r+0x3c>
 800f200:	4630      	mov	r0, r6
 800f202:	f000 fc57 	bl	800fab4 <_sbrk_r>
 800f206:	6020      	str	r0, [r4, #0]
 800f208:	4629      	mov	r1, r5
 800f20a:	4630      	mov	r0, r6
 800f20c:	f000 fc52 	bl	800fab4 <_sbrk_r>
 800f210:	1c43      	adds	r3, r0, #1
 800f212:	d124      	bne.n	800f25e <_malloc_r+0x92>
 800f214:	230c      	movs	r3, #12
 800f216:	6033      	str	r3, [r6, #0]
 800f218:	4630      	mov	r0, r6
 800f21a:	f000 fec1 	bl	800ffa0 <__malloc_unlock>
 800f21e:	e7e4      	b.n	800f1ea <_malloc_r+0x1e>
 800f220:	680b      	ldr	r3, [r1, #0]
 800f222:	1b5b      	subs	r3, r3, r5
 800f224:	d418      	bmi.n	800f258 <_malloc_r+0x8c>
 800f226:	2b0b      	cmp	r3, #11
 800f228:	d90f      	bls.n	800f24a <_malloc_r+0x7e>
 800f22a:	600b      	str	r3, [r1, #0]
 800f22c:	50cd      	str	r5, [r1, r3]
 800f22e:	18cc      	adds	r4, r1, r3
 800f230:	4630      	mov	r0, r6
 800f232:	f000 feb5 	bl	800ffa0 <__malloc_unlock>
 800f236:	f104 000b 	add.w	r0, r4, #11
 800f23a:	1d23      	adds	r3, r4, #4
 800f23c:	f020 0007 	bic.w	r0, r0, #7
 800f240:	1ac3      	subs	r3, r0, r3
 800f242:	d0d3      	beq.n	800f1ec <_malloc_r+0x20>
 800f244:	425a      	negs	r2, r3
 800f246:	50e2      	str	r2, [r4, r3]
 800f248:	e7d0      	b.n	800f1ec <_malloc_r+0x20>
 800f24a:	428c      	cmp	r4, r1
 800f24c:	684b      	ldr	r3, [r1, #4]
 800f24e:	bf16      	itet	ne
 800f250:	6063      	strne	r3, [r4, #4]
 800f252:	6013      	streq	r3, [r2, #0]
 800f254:	460c      	movne	r4, r1
 800f256:	e7eb      	b.n	800f230 <_malloc_r+0x64>
 800f258:	460c      	mov	r4, r1
 800f25a:	6849      	ldr	r1, [r1, #4]
 800f25c:	e7cc      	b.n	800f1f8 <_malloc_r+0x2c>
 800f25e:	1cc4      	adds	r4, r0, #3
 800f260:	f024 0403 	bic.w	r4, r4, #3
 800f264:	42a0      	cmp	r0, r4
 800f266:	d005      	beq.n	800f274 <_malloc_r+0xa8>
 800f268:	1a21      	subs	r1, r4, r0
 800f26a:	4630      	mov	r0, r6
 800f26c:	f000 fc22 	bl	800fab4 <_sbrk_r>
 800f270:	3001      	adds	r0, #1
 800f272:	d0cf      	beq.n	800f214 <_malloc_r+0x48>
 800f274:	6025      	str	r5, [r4, #0]
 800f276:	e7db      	b.n	800f230 <_malloc_r+0x64>
 800f278:	20004a68 	.word	0x20004a68
 800f27c:	20004a6c 	.word	0x20004a6c

0800f280 <__ssputs_r>:
 800f280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f284:	688e      	ldr	r6, [r1, #8]
 800f286:	429e      	cmp	r6, r3
 800f288:	4682      	mov	sl, r0
 800f28a:	460c      	mov	r4, r1
 800f28c:	4690      	mov	r8, r2
 800f28e:	4699      	mov	r9, r3
 800f290:	d837      	bhi.n	800f302 <__ssputs_r+0x82>
 800f292:	898a      	ldrh	r2, [r1, #12]
 800f294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f298:	d031      	beq.n	800f2fe <__ssputs_r+0x7e>
 800f29a:	6825      	ldr	r5, [r4, #0]
 800f29c:	6909      	ldr	r1, [r1, #16]
 800f29e:	1a6f      	subs	r7, r5, r1
 800f2a0:	6965      	ldr	r5, [r4, #20]
 800f2a2:	2302      	movs	r3, #2
 800f2a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2a8:	fb95 f5f3 	sdiv	r5, r5, r3
 800f2ac:	f109 0301 	add.w	r3, r9, #1
 800f2b0:	443b      	add	r3, r7
 800f2b2:	429d      	cmp	r5, r3
 800f2b4:	bf38      	it	cc
 800f2b6:	461d      	movcc	r5, r3
 800f2b8:	0553      	lsls	r3, r2, #21
 800f2ba:	d530      	bpl.n	800f31e <__ssputs_r+0x9e>
 800f2bc:	4629      	mov	r1, r5
 800f2be:	f7ff ff85 	bl	800f1cc <_malloc_r>
 800f2c2:	4606      	mov	r6, r0
 800f2c4:	b950      	cbnz	r0, 800f2dc <__ssputs_r+0x5c>
 800f2c6:	230c      	movs	r3, #12
 800f2c8:	f8ca 3000 	str.w	r3, [sl]
 800f2cc:	89a3      	ldrh	r3, [r4, #12]
 800f2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2d2:	81a3      	strh	r3, [r4, #12]
 800f2d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2dc:	463a      	mov	r2, r7
 800f2de:	6921      	ldr	r1, [r4, #16]
 800f2e0:	f7ff fdbb 	bl	800ee5a <memcpy>
 800f2e4:	89a3      	ldrh	r3, [r4, #12]
 800f2e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2ee:	81a3      	strh	r3, [r4, #12]
 800f2f0:	6126      	str	r6, [r4, #16]
 800f2f2:	6165      	str	r5, [r4, #20]
 800f2f4:	443e      	add	r6, r7
 800f2f6:	1bed      	subs	r5, r5, r7
 800f2f8:	6026      	str	r6, [r4, #0]
 800f2fa:	60a5      	str	r5, [r4, #8]
 800f2fc:	464e      	mov	r6, r9
 800f2fe:	454e      	cmp	r6, r9
 800f300:	d900      	bls.n	800f304 <__ssputs_r+0x84>
 800f302:	464e      	mov	r6, r9
 800f304:	4632      	mov	r2, r6
 800f306:	4641      	mov	r1, r8
 800f308:	6820      	ldr	r0, [r4, #0]
 800f30a:	f000 fe2f 	bl	800ff6c <memmove>
 800f30e:	68a3      	ldr	r3, [r4, #8]
 800f310:	1b9b      	subs	r3, r3, r6
 800f312:	60a3      	str	r3, [r4, #8]
 800f314:	6823      	ldr	r3, [r4, #0]
 800f316:	441e      	add	r6, r3
 800f318:	6026      	str	r6, [r4, #0]
 800f31a:	2000      	movs	r0, #0
 800f31c:	e7dc      	b.n	800f2d8 <__ssputs_r+0x58>
 800f31e:	462a      	mov	r2, r5
 800f320:	f000 fe3f 	bl	800ffa2 <_realloc_r>
 800f324:	4606      	mov	r6, r0
 800f326:	2800      	cmp	r0, #0
 800f328:	d1e2      	bne.n	800f2f0 <__ssputs_r+0x70>
 800f32a:	6921      	ldr	r1, [r4, #16]
 800f32c:	4650      	mov	r0, sl
 800f32e:	f7ff feff 	bl	800f130 <_free_r>
 800f332:	e7c8      	b.n	800f2c6 <__ssputs_r+0x46>

0800f334 <_svfiprintf_r>:
 800f334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f338:	461d      	mov	r5, r3
 800f33a:	898b      	ldrh	r3, [r1, #12]
 800f33c:	061f      	lsls	r7, r3, #24
 800f33e:	b09d      	sub	sp, #116	; 0x74
 800f340:	4680      	mov	r8, r0
 800f342:	460c      	mov	r4, r1
 800f344:	4616      	mov	r6, r2
 800f346:	d50f      	bpl.n	800f368 <_svfiprintf_r+0x34>
 800f348:	690b      	ldr	r3, [r1, #16]
 800f34a:	b96b      	cbnz	r3, 800f368 <_svfiprintf_r+0x34>
 800f34c:	2140      	movs	r1, #64	; 0x40
 800f34e:	f7ff ff3d 	bl	800f1cc <_malloc_r>
 800f352:	6020      	str	r0, [r4, #0]
 800f354:	6120      	str	r0, [r4, #16]
 800f356:	b928      	cbnz	r0, 800f364 <_svfiprintf_r+0x30>
 800f358:	230c      	movs	r3, #12
 800f35a:	f8c8 3000 	str.w	r3, [r8]
 800f35e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f362:	e0c8      	b.n	800f4f6 <_svfiprintf_r+0x1c2>
 800f364:	2340      	movs	r3, #64	; 0x40
 800f366:	6163      	str	r3, [r4, #20]
 800f368:	2300      	movs	r3, #0
 800f36a:	9309      	str	r3, [sp, #36]	; 0x24
 800f36c:	2320      	movs	r3, #32
 800f36e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f372:	2330      	movs	r3, #48	; 0x30
 800f374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f378:	9503      	str	r5, [sp, #12]
 800f37a:	f04f 0b01 	mov.w	fp, #1
 800f37e:	4637      	mov	r7, r6
 800f380:	463d      	mov	r5, r7
 800f382:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f386:	b10b      	cbz	r3, 800f38c <_svfiprintf_r+0x58>
 800f388:	2b25      	cmp	r3, #37	; 0x25
 800f38a:	d13e      	bne.n	800f40a <_svfiprintf_r+0xd6>
 800f38c:	ebb7 0a06 	subs.w	sl, r7, r6
 800f390:	d00b      	beq.n	800f3aa <_svfiprintf_r+0x76>
 800f392:	4653      	mov	r3, sl
 800f394:	4632      	mov	r2, r6
 800f396:	4621      	mov	r1, r4
 800f398:	4640      	mov	r0, r8
 800f39a:	f7ff ff71 	bl	800f280 <__ssputs_r>
 800f39e:	3001      	adds	r0, #1
 800f3a0:	f000 80a4 	beq.w	800f4ec <_svfiprintf_r+0x1b8>
 800f3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a6:	4453      	add	r3, sl
 800f3a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3aa:	783b      	ldrb	r3, [r7, #0]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f000 809d 	beq.w	800f4ec <_svfiprintf_r+0x1b8>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3bc:	9304      	str	r3, [sp, #16]
 800f3be:	9307      	str	r3, [sp, #28]
 800f3c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3c4:	931a      	str	r3, [sp, #104]	; 0x68
 800f3c6:	462f      	mov	r7, r5
 800f3c8:	2205      	movs	r2, #5
 800f3ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f3ce:	4850      	ldr	r0, [pc, #320]	; (800f510 <_svfiprintf_r+0x1dc>)
 800f3d0:	f7f0 ff4e 	bl	8000270 <memchr>
 800f3d4:	9b04      	ldr	r3, [sp, #16]
 800f3d6:	b9d0      	cbnz	r0, 800f40e <_svfiprintf_r+0xda>
 800f3d8:	06d9      	lsls	r1, r3, #27
 800f3da:	bf44      	itt	mi
 800f3dc:	2220      	movmi	r2, #32
 800f3de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f3e2:	071a      	lsls	r2, r3, #28
 800f3e4:	bf44      	itt	mi
 800f3e6:	222b      	movmi	r2, #43	; 0x2b
 800f3e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f3ec:	782a      	ldrb	r2, [r5, #0]
 800f3ee:	2a2a      	cmp	r2, #42	; 0x2a
 800f3f0:	d015      	beq.n	800f41e <_svfiprintf_r+0xea>
 800f3f2:	9a07      	ldr	r2, [sp, #28]
 800f3f4:	462f      	mov	r7, r5
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	250a      	movs	r5, #10
 800f3fa:	4639      	mov	r1, r7
 800f3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f400:	3b30      	subs	r3, #48	; 0x30
 800f402:	2b09      	cmp	r3, #9
 800f404:	d94d      	bls.n	800f4a2 <_svfiprintf_r+0x16e>
 800f406:	b1b8      	cbz	r0, 800f438 <_svfiprintf_r+0x104>
 800f408:	e00f      	b.n	800f42a <_svfiprintf_r+0xf6>
 800f40a:	462f      	mov	r7, r5
 800f40c:	e7b8      	b.n	800f380 <_svfiprintf_r+0x4c>
 800f40e:	4a40      	ldr	r2, [pc, #256]	; (800f510 <_svfiprintf_r+0x1dc>)
 800f410:	1a80      	subs	r0, r0, r2
 800f412:	fa0b f000 	lsl.w	r0, fp, r0
 800f416:	4318      	orrs	r0, r3
 800f418:	9004      	str	r0, [sp, #16]
 800f41a:	463d      	mov	r5, r7
 800f41c:	e7d3      	b.n	800f3c6 <_svfiprintf_r+0x92>
 800f41e:	9a03      	ldr	r2, [sp, #12]
 800f420:	1d11      	adds	r1, r2, #4
 800f422:	6812      	ldr	r2, [r2, #0]
 800f424:	9103      	str	r1, [sp, #12]
 800f426:	2a00      	cmp	r2, #0
 800f428:	db01      	blt.n	800f42e <_svfiprintf_r+0xfa>
 800f42a:	9207      	str	r2, [sp, #28]
 800f42c:	e004      	b.n	800f438 <_svfiprintf_r+0x104>
 800f42e:	4252      	negs	r2, r2
 800f430:	f043 0302 	orr.w	r3, r3, #2
 800f434:	9207      	str	r2, [sp, #28]
 800f436:	9304      	str	r3, [sp, #16]
 800f438:	783b      	ldrb	r3, [r7, #0]
 800f43a:	2b2e      	cmp	r3, #46	; 0x2e
 800f43c:	d10c      	bne.n	800f458 <_svfiprintf_r+0x124>
 800f43e:	787b      	ldrb	r3, [r7, #1]
 800f440:	2b2a      	cmp	r3, #42	; 0x2a
 800f442:	d133      	bne.n	800f4ac <_svfiprintf_r+0x178>
 800f444:	9b03      	ldr	r3, [sp, #12]
 800f446:	1d1a      	adds	r2, r3, #4
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	9203      	str	r2, [sp, #12]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	bfb8      	it	lt
 800f450:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f454:	3702      	adds	r7, #2
 800f456:	9305      	str	r3, [sp, #20]
 800f458:	4d2e      	ldr	r5, [pc, #184]	; (800f514 <_svfiprintf_r+0x1e0>)
 800f45a:	7839      	ldrb	r1, [r7, #0]
 800f45c:	2203      	movs	r2, #3
 800f45e:	4628      	mov	r0, r5
 800f460:	f7f0 ff06 	bl	8000270 <memchr>
 800f464:	b138      	cbz	r0, 800f476 <_svfiprintf_r+0x142>
 800f466:	2340      	movs	r3, #64	; 0x40
 800f468:	1b40      	subs	r0, r0, r5
 800f46a:	fa03 f000 	lsl.w	r0, r3, r0
 800f46e:	9b04      	ldr	r3, [sp, #16]
 800f470:	4303      	orrs	r3, r0
 800f472:	3701      	adds	r7, #1
 800f474:	9304      	str	r3, [sp, #16]
 800f476:	7839      	ldrb	r1, [r7, #0]
 800f478:	4827      	ldr	r0, [pc, #156]	; (800f518 <_svfiprintf_r+0x1e4>)
 800f47a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f47e:	2206      	movs	r2, #6
 800f480:	1c7e      	adds	r6, r7, #1
 800f482:	f7f0 fef5 	bl	8000270 <memchr>
 800f486:	2800      	cmp	r0, #0
 800f488:	d038      	beq.n	800f4fc <_svfiprintf_r+0x1c8>
 800f48a:	4b24      	ldr	r3, [pc, #144]	; (800f51c <_svfiprintf_r+0x1e8>)
 800f48c:	bb13      	cbnz	r3, 800f4d4 <_svfiprintf_r+0x1a0>
 800f48e:	9b03      	ldr	r3, [sp, #12]
 800f490:	3307      	adds	r3, #7
 800f492:	f023 0307 	bic.w	r3, r3, #7
 800f496:	3308      	adds	r3, #8
 800f498:	9303      	str	r3, [sp, #12]
 800f49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f49c:	444b      	add	r3, r9
 800f49e:	9309      	str	r3, [sp, #36]	; 0x24
 800f4a0:	e76d      	b.n	800f37e <_svfiprintf_r+0x4a>
 800f4a2:	fb05 3202 	mla	r2, r5, r2, r3
 800f4a6:	2001      	movs	r0, #1
 800f4a8:	460f      	mov	r7, r1
 800f4aa:	e7a6      	b.n	800f3fa <_svfiprintf_r+0xc6>
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	3701      	adds	r7, #1
 800f4b0:	9305      	str	r3, [sp, #20]
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	250a      	movs	r5, #10
 800f4b6:	4638      	mov	r0, r7
 800f4b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4bc:	3a30      	subs	r2, #48	; 0x30
 800f4be:	2a09      	cmp	r2, #9
 800f4c0:	d903      	bls.n	800f4ca <_svfiprintf_r+0x196>
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d0c8      	beq.n	800f458 <_svfiprintf_r+0x124>
 800f4c6:	9105      	str	r1, [sp, #20]
 800f4c8:	e7c6      	b.n	800f458 <_svfiprintf_r+0x124>
 800f4ca:	fb05 2101 	mla	r1, r5, r1, r2
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	4607      	mov	r7, r0
 800f4d2:	e7f0      	b.n	800f4b6 <_svfiprintf_r+0x182>
 800f4d4:	ab03      	add	r3, sp, #12
 800f4d6:	9300      	str	r3, [sp, #0]
 800f4d8:	4622      	mov	r2, r4
 800f4da:	4b11      	ldr	r3, [pc, #68]	; (800f520 <_svfiprintf_r+0x1ec>)
 800f4dc:	a904      	add	r1, sp, #16
 800f4de:	4640      	mov	r0, r8
 800f4e0:	f3af 8000 	nop.w
 800f4e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f4e8:	4681      	mov	r9, r0
 800f4ea:	d1d6      	bne.n	800f49a <_svfiprintf_r+0x166>
 800f4ec:	89a3      	ldrh	r3, [r4, #12]
 800f4ee:	065b      	lsls	r3, r3, #25
 800f4f0:	f53f af35 	bmi.w	800f35e <_svfiprintf_r+0x2a>
 800f4f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4f6:	b01d      	add	sp, #116	; 0x74
 800f4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4fc:	ab03      	add	r3, sp, #12
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	4622      	mov	r2, r4
 800f502:	4b07      	ldr	r3, [pc, #28]	; (800f520 <_svfiprintf_r+0x1ec>)
 800f504:	a904      	add	r1, sp, #16
 800f506:	4640      	mov	r0, r8
 800f508:	f000 f9c2 	bl	800f890 <_printf_i>
 800f50c:	e7ea      	b.n	800f4e4 <_svfiprintf_r+0x1b0>
 800f50e:	bf00      	nop
 800f510:	080128e0 	.word	0x080128e0
 800f514:	080128e6 	.word	0x080128e6
 800f518:	080128ea 	.word	0x080128ea
 800f51c:	00000000 	.word	0x00000000
 800f520:	0800f281 	.word	0x0800f281

0800f524 <__sfputc_r>:
 800f524:	6893      	ldr	r3, [r2, #8]
 800f526:	3b01      	subs	r3, #1
 800f528:	2b00      	cmp	r3, #0
 800f52a:	b410      	push	{r4}
 800f52c:	6093      	str	r3, [r2, #8]
 800f52e:	da08      	bge.n	800f542 <__sfputc_r+0x1e>
 800f530:	6994      	ldr	r4, [r2, #24]
 800f532:	42a3      	cmp	r3, r4
 800f534:	db01      	blt.n	800f53a <__sfputc_r+0x16>
 800f536:	290a      	cmp	r1, #10
 800f538:	d103      	bne.n	800f542 <__sfputc_r+0x1e>
 800f53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f53e:	f000 bb0d 	b.w	800fb5c <__swbuf_r>
 800f542:	6813      	ldr	r3, [r2, #0]
 800f544:	1c58      	adds	r0, r3, #1
 800f546:	6010      	str	r0, [r2, #0]
 800f548:	7019      	strb	r1, [r3, #0]
 800f54a:	4608      	mov	r0, r1
 800f54c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f550:	4770      	bx	lr

0800f552 <__sfputs_r>:
 800f552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f554:	4606      	mov	r6, r0
 800f556:	460f      	mov	r7, r1
 800f558:	4614      	mov	r4, r2
 800f55a:	18d5      	adds	r5, r2, r3
 800f55c:	42ac      	cmp	r4, r5
 800f55e:	d101      	bne.n	800f564 <__sfputs_r+0x12>
 800f560:	2000      	movs	r0, #0
 800f562:	e007      	b.n	800f574 <__sfputs_r+0x22>
 800f564:	463a      	mov	r2, r7
 800f566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f56a:	4630      	mov	r0, r6
 800f56c:	f7ff ffda 	bl	800f524 <__sfputc_r>
 800f570:	1c43      	adds	r3, r0, #1
 800f572:	d1f3      	bne.n	800f55c <__sfputs_r+0xa>
 800f574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f578 <_vfiprintf_r>:
 800f578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f57c:	460c      	mov	r4, r1
 800f57e:	b09d      	sub	sp, #116	; 0x74
 800f580:	4617      	mov	r7, r2
 800f582:	461d      	mov	r5, r3
 800f584:	4606      	mov	r6, r0
 800f586:	b118      	cbz	r0, 800f590 <_vfiprintf_r+0x18>
 800f588:	6983      	ldr	r3, [r0, #24]
 800f58a:	b90b      	cbnz	r3, 800f590 <_vfiprintf_r+0x18>
 800f58c:	f7ff fd3e 	bl	800f00c <__sinit>
 800f590:	4b7c      	ldr	r3, [pc, #496]	; (800f784 <_vfiprintf_r+0x20c>)
 800f592:	429c      	cmp	r4, r3
 800f594:	d158      	bne.n	800f648 <_vfiprintf_r+0xd0>
 800f596:	6874      	ldr	r4, [r6, #4]
 800f598:	89a3      	ldrh	r3, [r4, #12]
 800f59a:	0718      	lsls	r0, r3, #28
 800f59c:	d55e      	bpl.n	800f65c <_vfiprintf_r+0xe4>
 800f59e:	6923      	ldr	r3, [r4, #16]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d05b      	beq.n	800f65c <_vfiprintf_r+0xe4>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f5a8:	2320      	movs	r3, #32
 800f5aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5ae:	2330      	movs	r3, #48	; 0x30
 800f5b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5b4:	9503      	str	r5, [sp, #12]
 800f5b6:	f04f 0b01 	mov.w	fp, #1
 800f5ba:	46b8      	mov	r8, r7
 800f5bc:	4645      	mov	r5, r8
 800f5be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f5c2:	b10b      	cbz	r3, 800f5c8 <_vfiprintf_r+0x50>
 800f5c4:	2b25      	cmp	r3, #37	; 0x25
 800f5c6:	d154      	bne.n	800f672 <_vfiprintf_r+0xfa>
 800f5c8:	ebb8 0a07 	subs.w	sl, r8, r7
 800f5cc:	d00b      	beq.n	800f5e6 <_vfiprintf_r+0x6e>
 800f5ce:	4653      	mov	r3, sl
 800f5d0:	463a      	mov	r2, r7
 800f5d2:	4621      	mov	r1, r4
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	f7ff ffbc 	bl	800f552 <__sfputs_r>
 800f5da:	3001      	adds	r0, #1
 800f5dc:	f000 80c2 	beq.w	800f764 <_vfiprintf_r+0x1ec>
 800f5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e2:	4453      	add	r3, sl
 800f5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5e6:	f898 3000 	ldrb.w	r3, [r8]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	f000 80ba 	beq.w	800f764 <_vfiprintf_r+0x1ec>
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5fa:	9304      	str	r3, [sp, #16]
 800f5fc:	9307      	str	r3, [sp, #28]
 800f5fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f602:	931a      	str	r3, [sp, #104]	; 0x68
 800f604:	46a8      	mov	r8, r5
 800f606:	2205      	movs	r2, #5
 800f608:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f60c:	485e      	ldr	r0, [pc, #376]	; (800f788 <_vfiprintf_r+0x210>)
 800f60e:	f7f0 fe2f 	bl	8000270 <memchr>
 800f612:	9b04      	ldr	r3, [sp, #16]
 800f614:	bb78      	cbnz	r0, 800f676 <_vfiprintf_r+0xfe>
 800f616:	06d9      	lsls	r1, r3, #27
 800f618:	bf44      	itt	mi
 800f61a:	2220      	movmi	r2, #32
 800f61c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f620:	071a      	lsls	r2, r3, #28
 800f622:	bf44      	itt	mi
 800f624:	222b      	movmi	r2, #43	; 0x2b
 800f626:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f62a:	782a      	ldrb	r2, [r5, #0]
 800f62c:	2a2a      	cmp	r2, #42	; 0x2a
 800f62e:	d02a      	beq.n	800f686 <_vfiprintf_r+0x10e>
 800f630:	9a07      	ldr	r2, [sp, #28]
 800f632:	46a8      	mov	r8, r5
 800f634:	2000      	movs	r0, #0
 800f636:	250a      	movs	r5, #10
 800f638:	4641      	mov	r1, r8
 800f63a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f63e:	3b30      	subs	r3, #48	; 0x30
 800f640:	2b09      	cmp	r3, #9
 800f642:	d969      	bls.n	800f718 <_vfiprintf_r+0x1a0>
 800f644:	b360      	cbz	r0, 800f6a0 <_vfiprintf_r+0x128>
 800f646:	e024      	b.n	800f692 <_vfiprintf_r+0x11a>
 800f648:	4b50      	ldr	r3, [pc, #320]	; (800f78c <_vfiprintf_r+0x214>)
 800f64a:	429c      	cmp	r4, r3
 800f64c:	d101      	bne.n	800f652 <_vfiprintf_r+0xda>
 800f64e:	68b4      	ldr	r4, [r6, #8]
 800f650:	e7a2      	b.n	800f598 <_vfiprintf_r+0x20>
 800f652:	4b4f      	ldr	r3, [pc, #316]	; (800f790 <_vfiprintf_r+0x218>)
 800f654:	429c      	cmp	r4, r3
 800f656:	bf08      	it	eq
 800f658:	68f4      	ldreq	r4, [r6, #12]
 800f65a:	e79d      	b.n	800f598 <_vfiprintf_r+0x20>
 800f65c:	4621      	mov	r1, r4
 800f65e:	4630      	mov	r0, r6
 800f660:	f000 fae0 	bl	800fc24 <__swsetup_r>
 800f664:	2800      	cmp	r0, #0
 800f666:	d09d      	beq.n	800f5a4 <_vfiprintf_r+0x2c>
 800f668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f66c:	b01d      	add	sp, #116	; 0x74
 800f66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f672:	46a8      	mov	r8, r5
 800f674:	e7a2      	b.n	800f5bc <_vfiprintf_r+0x44>
 800f676:	4a44      	ldr	r2, [pc, #272]	; (800f788 <_vfiprintf_r+0x210>)
 800f678:	1a80      	subs	r0, r0, r2
 800f67a:	fa0b f000 	lsl.w	r0, fp, r0
 800f67e:	4318      	orrs	r0, r3
 800f680:	9004      	str	r0, [sp, #16]
 800f682:	4645      	mov	r5, r8
 800f684:	e7be      	b.n	800f604 <_vfiprintf_r+0x8c>
 800f686:	9a03      	ldr	r2, [sp, #12]
 800f688:	1d11      	adds	r1, r2, #4
 800f68a:	6812      	ldr	r2, [r2, #0]
 800f68c:	9103      	str	r1, [sp, #12]
 800f68e:	2a00      	cmp	r2, #0
 800f690:	db01      	blt.n	800f696 <_vfiprintf_r+0x11e>
 800f692:	9207      	str	r2, [sp, #28]
 800f694:	e004      	b.n	800f6a0 <_vfiprintf_r+0x128>
 800f696:	4252      	negs	r2, r2
 800f698:	f043 0302 	orr.w	r3, r3, #2
 800f69c:	9207      	str	r2, [sp, #28]
 800f69e:	9304      	str	r3, [sp, #16]
 800f6a0:	f898 3000 	ldrb.w	r3, [r8]
 800f6a4:	2b2e      	cmp	r3, #46	; 0x2e
 800f6a6:	d10e      	bne.n	800f6c6 <_vfiprintf_r+0x14e>
 800f6a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f6ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f6ae:	d138      	bne.n	800f722 <_vfiprintf_r+0x1aa>
 800f6b0:	9b03      	ldr	r3, [sp, #12]
 800f6b2:	1d1a      	adds	r2, r3, #4
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	9203      	str	r2, [sp, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	bfb8      	it	lt
 800f6bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f6c0:	f108 0802 	add.w	r8, r8, #2
 800f6c4:	9305      	str	r3, [sp, #20]
 800f6c6:	4d33      	ldr	r5, [pc, #204]	; (800f794 <_vfiprintf_r+0x21c>)
 800f6c8:	f898 1000 	ldrb.w	r1, [r8]
 800f6cc:	2203      	movs	r2, #3
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	f7f0 fdce 	bl	8000270 <memchr>
 800f6d4:	b140      	cbz	r0, 800f6e8 <_vfiprintf_r+0x170>
 800f6d6:	2340      	movs	r3, #64	; 0x40
 800f6d8:	1b40      	subs	r0, r0, r5
 800f6da:	fa03 f000 	lsl.w	r0, r3, r0
 800f6de:	9b04      	ldr	r3, [sp, #16]
 800f6e0:	4303      	orrs	r3, r0
 800f6e2:	f108 0801 	add.w	r8, r8, #1
 800f6e6:	9304      	str	r3, [sp, #16]
 800f6e8:	f898 1000 	ldrb.w	r1, [r8]
 800f6ec:	482a      	ldr	r0, [pc, #168]	; (800f798 <_vfiprintf_r+0x220>)
 800f6ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6f2:	2206      	movs	r2, #6
 800f6f4:	f108 0701 	add.w	r7, r8, #1
 800f6f8:	f7f0 fdba 	bl	8000270 <memchr>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d037      	beq.n	800f770 <_vfiprintf_r+0x1f8>
 800f700:	4b26      	ldr	r3, [pc, #152]	; (800f79c <_vfiprintf_r+0x224>)
 800f702:	bb1b      	cbnz	r3, 800f74c <_vfiprintf_r+0x1d4>
 800f704:	9b03      	ldr	r3, [sp, #12]
 800f706:	3307      	adds	r3, #7
 800f708:	f023 0307 	bic.w	r3, r3, #7
 800f70c:	3308      	adds	r3, #8
 800f70e:	9303      	str	r3, [sp, #12]
 800f710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f712:	444b      	add	r3, r9
 800f714:	9309      	str	r3, [sp, #36]	; 0x24
 800f716:	e750      	b.n	800f5ba <_vfiprintf_r+0x42>
 800f718:	fb05 3202 	mla	r2, r5, r2, r3
 800f71c:	2001      	movs	r0, #1
 800f71e:	4688      	mov	r8, r1
 800f720:	e78a      	b.n	800f638 <_vfiprintf_r+0xc0>
 800f722:	2300      	movs	r3, #0
 800f724:	f108 0801 	add.w	r8, r8, #1
 800f728:	9305      	str	r3, [sp, #20]
 800f72a:	4619      	mov	r1, r3
 800f72c:	250a      	movs	r5, #10
 800f72e:	4640      	mov	r0, r8
 800f730:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f734:	3a30      	subs	r2, #48	; 0x30
 800f736:	2a09      	cmp	r2, #9
 800f738:	d903      	bls.n	800f742 <_vfiprintf_r+0x1ca>
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d0c3      	beq.n	800f6c6 <_vfiprintf_r+0x14e>
 800f73e:	9105      	str	r1, [sp, #20]
 800f740:	e7c1      	b.n	800f6c6 <_vfiprintf_r+0x14e>
 800f742:	fb05 2101 	mla	r1, r5, r1, r2
 800f746:	2301      	movs	r3, #1
 800f748:	4680      	mov	r8, r0
 800f74a:	e7f0      	b.n	800f72e <_vfiprintf_r+0x1b6>
 800f74c:	ab03      	add	r3, sp, #12
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	4622      	mov	r2, r4
 800f752:	4b13      	ldr	r3, [pc, #76]	; (800f7a0 <_vfiprintf_r+0x228>)
 800f754:	a904      	add	r1, sp, #16
 800f756:	4630      	mov	r0, r6
 800f758:	f3af 8000 	nop.w
 800f75c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f760:	4681      	mov	r9, r0
 800f762:	d1d5      	bne.n	800f710 <_vfiprintf_r+0x198>
 800f764:	89a3      	ldrh	r3, [r4, #12]
 800f766:	065b      	lsls	r3, r3, #25
 800f768:	f53f af7e 	bmi.w	800f668 <_vfiprintf_r+0xf0>
 800f76c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f76e:	e77d      	b.n	800f66c <_vfiprintf_r+0xf4>
 800f770:	ab03      	add	r3, sp, #12
 800f772:	9300      	str	r3, [sp, #0]
 800f774:	4622      	mov	r2, r4
 800f776:	4b0a      	ldr	r3, [pc, #40]	; (800f7a0 <_vfiprintf_r+0x228>)
 800f778:	a904      	add	r1, sp, #16
 800f77a:	4630      	mov	r0, r6
 800f77c:	f000 f888 	bl	800f890 <_printf_i>
 800f780:	e7ec      	b.n	800f75c <_vfiprintf_r+0x1e4>
 800f782:	bf00      	nop
 800f784:	080128a0 	.word	0x080128a0
 800f788:	080128e0 	.word	0x080128e0
 800f78c:	080128c0 	.word	0x080128c0
 800f790:	08012880 	.word	0x08012880
 800f794:	080128e6 	.word	0x080128e6
 800f798:	080128ea 	.word	0x080128ea
 800f79c:	00000000 	.word	0x00000000
 800f7a0:	0800f553 	.word	0x0800f553

0800f7a4 <_printf_common>:
 800f7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a8:	4691      	mov	r9, r2
 800f7aa:	461f      	mov	r7, r3
 800f7ac:	688a      	ldr	r2, [r1, #8]
 800f7ae:	690b      	ldr	r3, [r1, #16]
 800f7b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	bfb8      	it	lt
 800f7b8:	4613      	movlt	r3, r2
 800f7ba:	f8c9 3000 	str.w	r3, [r9]
 800f7be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7c2:	4606      	mov	r6, r0
 800f7c4:	460c      	mov	r4, r1
 800f7c6:	b112      	cbz	r2, 800f7ce <_printf_common+0x2a>
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	f8c9 3000 	str.w	r3, [r9]
 800f7ce:	6823      	ldr	r3, [r4, #0]
 800f7d0:	0699      	lsls	r1, r3, #26
 800f7d2:	bf42      	ittt	mi
 800f7d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f7d8:	3302      	addmi	r3, #2
 800f7da:	f8c9 3000 	strmi.w	r3, [r9]
 800f7de:	6825      	ldr	r5, [r4, #0]
 800f7e0:	f015 0506 	ands.w	r5, r5, #6
 800f7e4:	d107      	bne.n	800f7f6 <_printf_common+0x52>
 800f7e6:	f104 0a19 	add.w	sl, r4, #25
 800f7ea:	68e3      	ldr	r3, [r4, #12]
 800f7ec:	f8d9 2000 	ldr.w	r2, [r9]
 800f7f0:	1a9b      	subs	r3, r3, r2
 800f7f2:	42ab      	cmp	r3, r5
 800f7f4:	dc28      	bgt.n	800f848 <_printf_common+0xa4>
 800f7f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f7fa:	6822      	ldr	r2, [r4, #0]
 800f7fc:	3300      	adds	r3, #0
 800f7fe:	bf18      	it	ne
 800f800:	2301      	movne	r3, #1
 800f802:	0692      	lsls	r2, r2, #26
 800f804:	d42d      	bmi.n	800f862 <_printf_common+0xbe>
 800f806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f80a:	4639      	mov	r1, r7
 800f80c:	4630      	mov	r0, r6
 800f80e:	47c0      	blx	r8
 800f810:	3001      	adds	r0, #1
 800f812:	d020      	beq.n	800f856 <_printf_common+0xb2>
 800f814:	6823      	ldr	r3, [r4, #0]
 800f816:	68e5      	ldr	r5, [r4, #12]
 800f818:	f8d9 2000 	ldr.w	r2, [r9]
 800f81c:	f003 0306 	and.w	r3, r3, #6
 800f820:	2b04      	cmp	r3, #4
 800f822:	bf08      	it	eq
 800f824:	1aad      	subeq	r5, r5, r2
 800f826:	68a3      	ldr	r3, [r4, #8]
 800f828:	6922      	ldr	r2, [r4, #16]
 800f82a:	bf0c      	ite	eq
 800f82c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f830:	2500      	movne	r5, #0
 800f832:	4293      	cmp	r3, r2
 800f834:	bfc4      	itt	gt
 800f836:	1a9b      	subgt	r3, r3, r2
 800f838:	18ed      	addgt	r5, r5, r3
 800f83a:	f04f 0900 	mov.w	r9, #0
 800f83e:	341a      	adds	r4, #26
 800f840:	454d      	cmp	r5, r9
 800f842:	d11a      	bne.n	800f87a <_printf_common+0xd6>
 800f844:	2000      	movs	r0, #0
 800f846:	e008      	b.n	800f85a <_printf_common+0xb6>
 800f848:	2301      	movs	r3, #1
 800f84a:	4652      	mov	r2, sl
 800f84c:	4639      	mov	r1, r7
 800f84e:	4630      	mov	r0, r6
 800f850:	47c0      	blx	r8
 800f852:	3001      	adds	r0, #1
 800f854:	d103      	bne.n	800f85e <_printf_common+0xba>
 800f856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f85e:	3501      	adds	r5, #1
 800f860:	e7c3      	b.n	800f7ea <_printf_common+0x46>
 800f862:	18e1      	adds	r1, r4, r3
 800f864:	1c5a      	adds	r2, r3, #1
 800f866:	2030      	movs	r0, #48	; 0x30
 800f868:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f86c:	4422      	add	r2, r4
 800f86e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f876:	3302      	adds	r3, #2
 800f878:	e7c5      	b.n	800f806 <_printf_common+0x62>
 800f87a:	2301      	movs	r3, #1
 800f87c:	4622      	mov	r2, r4
 800f87e:	4639      	mov	r1, r7
 800f880:	4630      	mov	r0, r6
 800f882:	47c0      	blx	r8
 800f884:	3001      	adds	r0, #1
 800f886:	d0e6      	beq.n	800f856 <_printf_common+0xb2>
 800f888:	f109 0901 	add.w	r9, r9, #1
 800f88c:	e7d8      	b.n	800f840 <_printf_common+0x9c>
	...

0800f890 <_printf_i>:
 800f890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f894:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f898:	460c      	mov	r4, r1
 800f89a:	7e09      	ldrb	r1, [r1, #24]
 800f89c:	b085      	sub	sp, #20
 800f89e:	296e      	cmp	r1, #110	; 0x6e
 800f8a0:	4617      	mov	r7, r2
 800f8a2:	4606      	mov	r6, r0
 800f8a4:	4698      	mov	r8, r3
 800f8a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8a8:	f000 80b3 	beq.w	800fa12 <_printf_i+0x182>
 800f8ac:	d822      	bhi.n	800f8f4 <_printf_i+0x64>
 800f8ae:	2963      	cmp	r1, #99	; 0x63
 800f8b0:	d036      	beq.n	800f920 <_printf_i+0x90>
 800f8b2:	d80a      	bhi.n	800f8ca <_printf_i+0x3a>
 800f8b4:	2900      	cmp	r1, #0
 800f8b6:	f000 80b9 	beq.w	800fa2c <_printf_i+0x19c>
 800f8ba:	2958      	cmp	r1, #88	; 0x58
 800f8bc:	f000 8083 	beq.w	800f9c6 <_printf_i+0x136>
 800f8c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f8c8:	e032      	b.n	800f930 <_printf_i+0xa0>
 800f8ca:	2964      	cmp	r1, #100	; 0x64
 800f8cc:	d001      	beq.n	800f8d2 <_printf_i+0x42>
 800f8ce:	2969      	cmp	r1, #105	; 0x69
 800f8d0:	d1f6      	bne.n	800f8c0 <_printf_i+0x30>
 800f8d2:	6820      	ldr	r0, [r4, #0]
 800f8d4:	6813      	ldr	r3, [r2, #0]
 800f8d6:	0605      	lsls	r5, r0, #24
 800f8d8:	f103 0104 	add.w	r1, r3, #4
 800f8dc:	d52a      	bpl.n	800f934 <_printf_i+0xa4>
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	6011      	str	r1, [r2, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	da03      	bge.n	800f8ee <_printf_i+0x5e>
 800f8e6:	222d      	movs	r2, #45	; 0x2d
 800f8e8:	425b      	negs	r3, r3
 800f8ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f8ee:	486f      	ldr	r0, [pc, #444]	; (800faac <_printf_i+0x21c>)
 800f8f0:	220a      	movs	r2, #10
 800f8f2:	e039      	b.n	800f968 <_printf_i+0xd8>
 800f8f4:	2973      	cmp	r1, #115	; 0x73
 800f8f6:	f000 809d 	beq.w	800fa34 <_printf_i+0x1a4>
 800f8fa:	d808      	bhi.n	800f90e <_printf_i+0x7e>
 800f8fc:	296f      	cmp	r1, #111	; 0x6f
 800f8fe:	d020      	beq.n	800f942 <_printf_i+0xb2>
 800f900:	2970      	cmp	r1, #112	; 0x70
 800f902:	d1dd      	bne.n	800f8c0 <_printf_i+0x30>
 800f904:	6823      	ldr	r3, [r4, #0]
 800f906:	f043 0320 	orr.w	r3, r3, #32
 800f90a:	6023      	str	r3, [r4, #0]
 800f90c:	e003      	b.n	800f916 <_printf_i+0x86>
 800f90e:	2975      	cmp	r1, #117	; 0x75
 800f910:	d017      	beq.n	800f942 <_printf_i+0xb2>
 800f912:	2978      	cmp	r1, #120	; 0x78
 800f914:	d1d4      	bne.n	800f8c0 <_printf_i+0x30>
 800f916:	2378      	movs	r3, #120	; 0x78
 800f918:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f91c:	4864      	ldr	r0, [pc, #400]	; (800fab0 <_printf_i+0x220>)
 800f91e:	e055      	b.n	800f9cc <_printf_i+0x13c>
 800f920:	6813      	ldr	r3, [r2, #0]
 800f922:	1d19      	adds	r1, r3, #4
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	6011      	str	r1, [r2, #0]
 800f928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f92c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f930:	2301      	movs	r3, #1
 800f932:	e08c      	b.n	800fa4e <_printf_i+0x1be>
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6011      	str	r1, [r2, #0]
 800f938:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f93c:	bf18      	it	ne
 800f93e:	b21b      	sxthne	r3, r3
 800f940:	e7cf      	b.n	800f8e2 <_printf_i+0x52>
 800f942:	6813      	ldr	r3, [r2, #0]
 800f944:	6825      	ldr	r5, [r4, #0]
 800f946:	1d18      	adds	r0, r3, #4
 800f948:	6010      	str	r0, [r2, #0]
 800f94a:	0628      	lsls	r0, r5, #24
 800f94c:	d501      	bpl.n	800f952 <_printf_i+0xc2>
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	e002      	b.n	800f958 <_printf_i+0xc8>
 800f952:	0668      	lsls	r0, r5, #25
 800f954:	d5fb      	bpl.n	800f94e <_printf_i+0xbe>
 800f956:	881b      	ldrh	r3, [r3, #0]
 800f958:	4854      	ldr	r0, [pc, #336]	; (800faac <_printf_i+0x21c>)
 800f95a:	296f      	cmp	r1, #111	; 0x6f
 800f95c:	bf14      	ite	ne
 800f95e:	220a      	movne	r2, #10
 800f960:	2208      	moveq	r2, #8
 800f962:	2100      	movs	r1, #0
 800f964:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f968:	6865      	ldr	r5, [r4, #4]
 800f96a:	60a5      	str	r5, [r4, #8]
 800f96c:	2d00      	cmp	r5, #0
 800f96e:	f2c0 8095 	blt.w	800fa9c <_printf_i+0x20c>
 800f972:	6821      	ldr	r1, [r4, #0]
 800f974:	f021 0104 	bic.w	r1, r1, #4
 800f978:	6021      	str	r1, [r4, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d13d      	bne.n	800f9fa <_printf_i+0x16a>
 800f97e:	2d00      	cmp	r5, #0
 800f980:	f040 808e 	bne.w	800faa0 <_printf_i+0x210>
 800f984:	4665      	mov	r5, ip
 800f986:	2a08      	cmp	r2, #8
 800f988:	d10b      	bne.n	800f9a2 <_printf_i+0x112>
 800f98a:	6823      	ldr	r3, [r4, #0]
 800f98c:	07db      	lsls	r3, r3, #31
 800f98e:	d508      	bpl.n	800f9a2 <_printf_i+0x112>
 800f990:	6923      	ldr	r3, [r4, #16]
 800f992:	6862      	ldr	r2, [r4, #4]
 800f994:	429a      	cmp	r2, r3
 800f996:	bfde      	ittt	le
 800f998:	2330      	movle	r3, #48	; 0x30
 800f99a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f99e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f9a2:	ebac 0305 	sub.w	r3, ip, r5
 800f9a6:	6123      	str	r3, [r4, #16]
 800f9a8:	f8cd 8000 	str.w	r8, [sp]
 800f9ac:	463b      	mov	r3, r7
 800f9ae:	aa03      	add	r2, sp, #12
 800f9b0:	4621      	mov	r1, r4
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f7ff fef6 	bl	800f7a4 <_printf_common>
 800f9b8:	3001      	adds	r0, #1
 800f9ba:	d14d      	bne.n	800fa58 <_printf_i+0x1c8>
 800f9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9c0:	b005      	add	sp, #20
 800f9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9c6:	4839      	ldr	r0, [pc, #228]	; (800faac <_printf_i+0x21c>)
 800f9c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f9cc:	6813      	ldr	r3, [r2, #0]
 800f9ce:	6821      	ldr	r1, [r4, #0]
 800f9d0:	1d1d      	adds	r5, r3, #4
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	6015      	str	r5, [r2, #0]
 800f9d6:	060a      	lsls	r2, r1, #24
 800f9d8:	d50b      	bpl.n	800f9f2 <_printf_i+0x162>
 800f9da:	07ca      	lsls	r2, r1, #31
 800f9dc:	bf44      	itt	mi
 800f9de:	f041 0120 	orrmi.w	r1, r1, #32
 800f9e2:	6021      	strmi	r1, [r4, #0]
 800f9e4:	b91b      	cbnz	r3, 800f9ee <_printf_i+0x15e>
 800f9e6:	6822      	ldr	r2, [r4, #0]
 800f9e8:	f022 0220 	bic.w	r2, r2, #32
 800f9ec:	6022      	str	r2, [r4, #0]
 800f9ee:	2210      	movs	r2, #16
 800f9f0:	e7b7      	b.n	800f962 <_printf_i+0xd2>
 800f9f2:	064d      	lsls	r5, r1, #25
 800f9f4:	bf48      	it	mi
 800f9f6:	b29b      	uxthmi	r3, r3
 800f9f8:	e7ef      	b.n	800f9da <_printf_i+0x14a>
 800f9fa:	4665      	mov	r5, ip
 800f9fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa00:	fb02 3311 	mls	r3, r2, r1, r3
 800fa04:	5cc3      	ldrb	r3, [r0, r3]
 800fa06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	2900      	cmp	r1, #0
 800fa0e:	d1f5      	bne.n	800f9fc <_printf_i+0x16c>
 800fa10:	e7b9      	b.n	800f986 <_printf_i+0xf6>
 800fa12:	6813      	ldr	r3, [r2, #0]
 800fa14:	6825      	ldr	r5, [r4, #0]
 800fa16:	6961      	ldr	r1, [r4, #20]
 800fa18:	1d18      	adds	r0, r3, #4
 800fa1a:	6010      	str	r0, [r2, #0]
 800fa1c:	0628      	lsls	r0, r5, #24
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	d501      	bpl.n	800fa26 <_printf_i+0x196>
 800fa22:	6019      	str	r1, [r3, #0]
 800fa24:	e002      	b.n	800fa2c <_printf_i+0x19c>
 800fa26:	066a      	lsls	r2, r5, #25
 800fa28:	d5fb      	bpl.n	800fa22 <_printf_i+0x192>
 800fa2a:	8019      	strh	r1, [r3, #0]
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	6123      	str	r3, [r4, #16]
 800fa30:	4665      	mov	r5, ip
 800fa32:	e7b9      	b.n	800f9a8 <_printf_i+0x118>
 800fa34:	6813      	ldr	r3, [r2, #0]
 800fa36:	1d19      	adds	r1, r3, #4
 800fa38:	6011      	str	r1, [r2, #0]
 800fa3a:	681d      	ldr	r5, [r3, #0]
 800fa3c:	6862      	ldr	r2, [r4, #4]
 800fa3e:	2100      	movs	r1, #0
 800fa40:	4628      	mov	r0, r5
 800fa42:	f7f0 fc15 	bl	8000270 <memchr>
 800fa46:	b108      	cbz	r0, 800fa4c <_printf_i+0x1bc>
 800fa48:	1b40      	subs	r0, r0, r5
 800fa4a:	6060      	str	r0, [r4, #4]
 800fa4c:	6863      	ldr	r3, [r4, #4]
 800fa4e:	6123      	str	r3, [r4, #16]
 800fa50:	2300      	movs	r3, #0
 800fa52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa56:	e7a7      	b.n	800f9a8 <_printf_i+0x118>
 800fa58:	6923      	ldr	r3, [r4, #16]
 800fa5a:	462a      	mov	r2, r5
 800fa5c:	4639      	mov	r1, r7
 800fa5e:	4630      	mov	r0, r6
 800fa60:	47c0      	blx	r8
 800fa62:	3001      	adds	r0, #1
 800fa64:	d0aa      	beq.n	800f9bc <_printf_i+0x12c>
 800fa66:	6823      	ldr	r3, [r4, #0]
 800fa68:	079b      	lsls	r3, r3, #30
 800fa6a:	d413      	bmi.n	800fa94 <_printf_i+0x204>
 800fa6c:	68e0      	ldr	r0, [r4, #12]
 800fa6e:	9b03      	ldr	r3, [sp, #12]
 800fa70:	4298      	cmp	r0, r3
 800fa72:	bfb8      	it	lt
 800fa74:	4618      	movlt	r0, r3
 800fa76:	e7a3      	b.n	800f9c0 <_printf_i+0x130>
 800fa78:	2301      	movs	r3, #1
 800fa7a:	464a      	mov	r2, r9
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	4630      	mov	r0, r6
 800fa80:	47c0      	blx	r8
 800fa82:	3001      	adds	r0, #1
 800fa84:	d09a      	beq.n	800f9bc <_printf_i+0x12c>
 800fa86:	3501      	adds	r5, #1
 800fa88:	68e3      	ldr	r3, [r4, #12]
 800fa8a:	9a03      	ldr	r2, [sp, #12]
 800fa8c:	1a9b      	subs	r3, r3, r2
 800fa8e:	42ab      	cmp	r3, r5
 800fa90:	dcf2      	bgt.n	800fa78 <_printf_i+0x1e8>
 800fa92:	e7eb      	b.n	800fa6c <_printf_i+0x1dc>
 800fa94:	2500      	movs	r5, #0
 800fa96:	f104 0919 	add.w	r9, r4, #25
 800fa9a:	e7f5      	b.n	800fa88 <_printf_i+0x1f8>
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1ac      	bne.n	800f9fa <_printf_i+0x16a>
 800faa0:	7803      	ldrb	r3, [r0, #0]
 800faa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800faa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800faaa:	e76c      	b.n	800f986 <_printf_i+0xf6>
 800faac:	080128f1 	.word	0x080128f1
 800fab0:	08012902 	.word	0x08012902

0800fab4 <_sbrk_r>:
 800fab4:	b538      	push	{r3, r4, r5, lr}
 800fab6:	4c06      	ldr	r4, [pc, #24]	; (800fad0 <_sbrk_r+0x1c>)
 800fab8:	2300      	movs	r3, #0
 800faba:	4605      	mov	r5, r0
 800fabc:	4608      	mov	r0, r1
 800fabe:	6023      	str	r3, [r4, #0]
 800fac0:	f000 fafa 	bl	80100b8 <_sbrk>
 800fac4:	1c43      	adds	r3, r0, #1
 800fac6:	d102      	bne.n	800face <_sbrk_r+0x1a>
 800fac8:	6823      	ldr	r3, [r4, #0]
 800faca:	b103      	cbz	r3, 800face <_sbrk_r+0x1a>
 800facc:	602b      	str	r3, [r5, #0]
 800face:	bd38      	pop	{r3, r4, r5, pc}
 800fad0:	20008234 	.word	0x20008234

0800fad4 <__sread>:
 800fad4:	b510      	push	{r4, lr}
 800fad6:	460c      	mov	r4, r1
 800fad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fadc:	f000 fa88 	bl	800fff0 <_read_r>
 800fae0:	2800      	cmp	r0, #0
 800fae2:	bfab      	itete	ge
 800fae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fae6:	89a3      	ldrhlt	r3, [r4, #12]
 800fae8:	181b      	addge	r3, r3, r0
 800faea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800faee:	bfac      	ite	ge
 800faf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800faf2:	81a3      	strhlt	r3, [r4, #12]
 800faf4:	bd10      	pop	{r4, pc}

0800faf6 <__swrite>:
 800faf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fafa:	461f      	mov	r7, r3
 800fafc:	898b      	ldrh	r3, [r1, #12]
 800fafe:	05db      	lsls	r3, r3, #23
 800fb00:	4605      	mov	r5, r0
 800fb02:	460c      	mov	r4, r1
 800fb04:	4616      	mov	r6, r2
 800fb06:	d505      	bpl.n	800fb14 <__swrite+0x1e>
 800fb08:	2302      	movs	r3, #2
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb10:	f000 f9b6 	bl	800fe80 <_lseek_r>
 800fb14:	89a3      	ldrh	r3, [r4, #12]
 800fb16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb1e:	81a3      	strh	r3, [r4, #12]
 800fb20:	4632      	mov	r2, r6
 800fb22:	463b      	mov	r3, r7
 800fb24:	4628      	mov	r0, r5
 800fb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb2a:	f000 b869 	b.w	800fc00 <_write_r>

0800fb2e <__sseek>:
 800fb2e:	b510      	push	{r4, lr}
 800fb30:	460c      	mov	r4, r1
 800fb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb36:	f000 f9a3 	bl	800fe80 <_lseek_r>
 800fb3a:	1c43      	adds	r3, r0, #1
 800fb3c:	89a3      	ldrh	r3, [r4, #12]
 800fb3e:	bf15      	itete	ne
 800fb40:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb4a:	81a3      	strheq	r3, [r4, #12]
 800fb4c:	bf18      	it	ne
 800fb4e:	81a3      	strhne	r3, [r4, #12]
 800fb50:	bd10      	pop	{r4, pc}

0800fb52 <__sclose>:
 800fb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb56:	f000 b8d3 	b.w	800fd00 <_close_r>
	...

0800fb5c <__swbuf_r>:
 800fb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb5e:	460e      	mov	r6, r1
 800fb60:	4614      	mov	r4, r2
 800fb62:	4605      	mov	r5, r0
 800fb64:	b118      	cbz	r0, 800fb6e <__swbuf_r+0x12>
 800fb66:	6983      	ldr	r3, [r0, #24]
 800fb68:	b90b      	cbnz	r3, 800fb6e <__swbuf_r+0x12>
 800fb6a:	f7ff fa4f 	bl	800f00c <__sinit>
 800fb6e:	4b21      	ldr	r3, [pc, #132]	; (800fbf4 <__swbuf_r+0x98>)
 800fb70:	429c      	cmp	r4, r3
 800fb72:	d12a      	bne.n	800fbca <__swbuf_r+0x6e>
 800fb74:	686c      	ldr	r4, [r5, #4]
 800fb76:	69a3      	ldr	r3, [r4, #24]
 800fb78:	60a3      	str	r3, [r4, #8]
 800fb7a:	89a3      	ldrh	r3, [r4, #12]
 800fb7c:	071a      	lsls	r2, r3, #28
 800fb7e:	d52e      	bpl.n	800fbde <__swbuf_r+0x82>
 800fb80:	6923      	ldr	r3, [r4, #16]
 800fb82:	b363      	cbz	r3, 800fbde <__swbuf_r+0x82>
 800fb84:	6923      	ldr	r3, [r4, #16]
 800fb86:	6820      	ldr	r0, [r4, #0]
 800fb88:	1ac0      	subs	r0, r0, r3
 800fb8a:	6963      	ldr	r3, [r4, #20]
 800fb8c:	b2f6      	uxtb	r6, r6
 800fb8e:	4283      	cmp	r3, r0
 800fb90:	4637      	mov	r7, r6
 800fb92:	dc04      	bgt.n	800fb9e <__swbuf_r+0x42>
 800fb94:	4621      	mov	r1, r4
 800fb96:	4628      	mov	r0, r5
 800fb98:	f000 f948 	bl	800fe2c <_fflush_r>
 800fb9c:	bb28      	cbnz	r0, 800fbea <__swbuf_r+0x8e>
 800fb9e:	68a3      	ldr	r3, [r4, #8]
 800fba0:	3b01      	subs	r3, #1
 800fba2:	60a3      	str	r3, [r4, #8]
 800fba4:	6823      	ldr	r3, [r4, #0]
 800fba6:	1c5a      	adds	r2, r3, #1
 800fba8:	6022      	str	r2, [r4, #0]
 800fbaa:	701e      	strb	r6, [r3, #0]
 800fbac:	6963      	ldr	r3, [r4, #20]
 800fbae:	3001      	adds	r0, #1
 800fbb0:	4283      	cmp	r3, r0
 800fbb2:	d004      	beq.n	800fbbe <__swbuf_r+0x62>
 800fbb4:	89a3      	ldrh	r3, [r4, #12]
 800fbb6:	07db      	lsls	r3, r3, #31
 800fbb8:	d519      	bpl.n	800fbee <__swbuf_r+0x92>
 800fbba:	2e0a      	cmp	r6, #10
 800fbbc:	d117      	bne.n	800fbee <__swbuf_r+0x92>
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	f000 f933 	bl	800fe2c <_fflush_r>
 800fbc6:	b190      	cbz	r0, 800fbee <__swbuf_r+0x92>
 800fbc8:	e00f      	b.n	800fbea <__swbuf_r+0x8e>
 800fbca:	4b0b      	ldr	r3, [pc, #44]	; (800fbf8 <__swbuf_r+0x9c>)
 800fbcc:	429c      	cmp	r4, r3
 800fbce:	d101      	bne.n	800fbd4 <__swbuf_r+0x78>
 800fbd0:	68ac      	ldr	r4, [r5, #8]
 800fbd2:	e7d0      	b.n	800fb76 <__swbuf_r+0x1a>
 800fbd4:	4b09      	ldr	r3, [pc, #36]	; (800fbfc <__swbuf_r+0xa0>)
 800fbd6:	429c      	cmp	r4, r3
 800fbd8:	bf08      	it	eq
 800fbda:	68ec      	ldreq	r4, [r5, #12]
 800fbdc:	e7cb      	b.n	800fb76 <__swbuf_r+0x1a>
 800fbde:	4621      	mov	r1, r4
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	f000 f81f 	bl	800fc24 <__swsetup_r>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	d0cc      	beq.n	800fb84 <__swbuf_r+0x28>
 800fbea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fbee:	4638      	mov	r0, r7
 800fbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	080128a0 	.word	0x080128a0
 800fbf8:	080128c0 	.word	0x080128c0
 800fbfc:	08012880 	.word	0x08012880

0800fc00 <_write_r>:
 800fc00:	b538      	push	{r3, r4, r5, lr}
 800fc02:	4c07      	ldr	r4, [pc, #28]	; (800fc20 <_write_r+0x20>)
 800fc04:	4605      	mov	r5, r0
 800fc06:	4608      	mov	r0, r1
 800fc08:	4611      	mov	r1, r2
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	6022      	str	r2, [r4, #0]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	f000 fa60 	bl	80100d4 <_write>
 800fc14:	1c43      	adds	r3, r0, #1
 800fc16:	d102      	bne.n	800fc1e <_write_r+0x1e>
 800fc18:	6823      	ldr	r3, [r4, #0]
 800fc1a:	b103      	cbz	r3, 800fc1e <_write_r+0x1e>
 800fc1c:	602b      	str	r3, [r5, #0]
 800fc1e:	bd38      	pop	{r3, r4, r5, pc}
 800fc20:	20008234 	.word	0x20008234

0800fc24 <__swsetup_r>:
 800fc24:	4b32      	ldr	r3, [pc, #200]	; (800fcf0 <__swsetup_r+0xcc>)
 800fc26:	b570      	push	{r4, r5, r6, lr}
 800fc28:	681d      	ldr	r5, [r3, #0]
 800fc2a:	4606      	mov	r6, r0
 800fc2c:	460c      	mov	r4, r1
 800fc2e:	b125      	cbz	r5, 800fc3a <__swsetup_r+0x16>
 800fc30:	69ab      	ldr	r3, [r5, #24]
 800fc32:	b913      	cbnz	r3, 800fc3a <__swsetup_r+0x16>
 800fc34:	4628      	mov	r0, r5
 800fc36:	f7ff f9e9 	bl	800f00c <__sinit>
 800fc3a:	4b2e      	ldr	r3, [pc, #184]	; (800fcf4 <__swsetup_r+0xd0>)
 800fc3c:	429c      	cmp	r4, r3
 800fc3e:	d10f      	bne.n	800fc60 <__swsetup_r+0x3c>
 800fc40:	686c      	ldr	r4, [r5, #4]
 800fc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	0715      	lsls	r5, r2, #28
 800fc4a:	d42c      	bmi.n	800fca6 <__swsetup_r+0x82>
 800fc4c:	06d0      	lsls	r0, r2, #27
 800fc4e:	d411      	bmi.n	800fc74 <__swsetup_r+0x50>
 800fc50:	2209      	movs	r2, #9
 800fc52:	6032      	str	r2, [r6, #0]
 800fc54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc58:	81a3      	strh	r3, [r4, #12]
 800fc5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc5e:	e03e      	b.n	800fcde <__swsetup_r+0xba>
 800fc60:	4b25      	ldr	r3, [pc, #148]	; (800fcf8 <__swsetup_r+0xd4>)
 800fc62:	429c      	cmp	r4, r3
 800fc64:	d101      	bne.n	800fc6a <__swsetup_r+0x46>
 800fc66:	68ac      	ldr	r4, [r5, #8]
 800fc68:	e7eb      	b.n	800fc42 <__swsetup_r+0x1e>
 800fc6a:	4b24      	ldr	r3, [pc, #144]	; (800fcfc <__swsetup_r+0xd8>)
 800fc6c:	429c      	cmp	r4, r3
 800fc6e:	bf08      	it	eq
 800fc70:	68ec      	ldreq	r4, [r5, #12]
 800fc72:	e7e6      	b.n	800fc42 <__swsetup_r+0x1e>
 800fc74:	0751      	lsls	r1, r2, #29
 800fc76:	d512      	bpl.n	800fc9e <__swsetup_r+0x7a>
 800fc78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc7a:	b141      	cbz	r1, 800fc8e <__swsetup_r+0x6a>
 800fc7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc80:	4299      	cmp	r1, r3
 800fc82:	d002      	beq.n	800fc8a <__swsetup_r+0x66>
 800fc84:	4630      	mov	r0, r6
 800fc86:	f7ff fa53 	bl	800f130 <_free_r>
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	6363      	str	r3, [r4, #52]	; 0x34
 800fc8e:	89a3      	ldrh	r3, [r4, #12]
 800fc90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fc94:	81a3      	strh	r3, [r4, #12]
 800fc96:	2300      	movs	r3, #0
 800fc98:	6063      	str	r3, [r4, #4]
 800fc9a:	6923      	ldr	r3, [r4, #16]
 800fc9c:	6023      	str	r3, [r4, #0]
 800fc9e:	89a3      	ldrh	r3, [r4, #12]
 800fca0:	f043 0308 	orr.w	r3, r3, #8
 800fca4:	81a3      	strh	r3, [r4, #12]
 800fca6:	6923      	ldr	r3, [r4, #16]
 800fca8:	b94b      	cbnz	r3, 800fcbe <__swsetup_r+0x9a>
 800fcaa:	89a3      	ldrh	r3, [r4, #12]
 800fcac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fcb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcb4:	d003      	beq.n	800fcbe <__swsetup_r+0x9a>
 800fcb6:	4621      	mov	r1, r4
 800fcb8:	4630      	mov	r0, r6
 800fcba:	f000 f917 	bl	800feec <__smakebuf_r>
 800fcbe:	89a2      	ldrh	r2, [r4, #12]
 800fcc0:	f012 0301 	ands.w	r3, r2, #1
 800fcc4:	d00c      	beq.n	800fce0 <__swsetup_r+0xbc>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	60a3      	str	r3, [r4, #8]
 800fcca:	6963      	ldr	r3, [r4, #20]
 800fccc:	425b      	negs	r3, r3
 800fcce:	61a3      	str	r3, [r4, #24]
 800fcd0:	6923      	ldr	r3, [r4, #16]
 800fcd2:	b953      	cbnz	r3, 800fcea <__swsetup_r+0xc6>
 800fcd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fcdc:	d1ba      	bne.n	800fc54 <__swsetup_r+0x30>
 800fcde:	bd70      	pop	{r4, r5, r6, pc}
 800fce0:	0792      	lsls	r2, r2, #30
 800fce2:	bf58      	it	pl
 800fce4:	6963      	ldrpl	r3, [r4, #20]
 800fce6:	60a3      	str	r3, [r4, #8]
 800fce8:	e7f2      	b.n	800fcd0 <__swsetup_r+0xac>
 800fcea:	2000      	movs	r0, #0
 800fcec:	e7f7      	b.n	800fcde <__swsetup_r+0xba>
 800fcee:	bf00      	nop
 800fcf0:	20000ab4 	.word	0x20000ab4
 800fcf4:	080128a0 	.word	0x080128a0
 800fcf8:	080128c0 	.word	0x080128c0
 800fcfc:	08012880 	.word	0x08012880

0800fd00 <_close_r>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	4c06      	ldr	r4, [pc, #24]	; (800fd1c <_close_r+0x1c>)
 800fd04:	2300      	movs	r3, #0
 800fd06:	4605      	mov	r5, r0
 800fd08:	4608      	mov	r0, r1
 800fd0a:	6023      	str	r3, [r4, #0]
 800fd0c:	f000 f9ac 	bl	8010068 <_close>
 800fd10:	1c43      	adds	r3, r0, #1
 800fd12:	d102      	bne.n	800fd1a <_close_r+0x1a>
 800fd14:	6823      	ldr	r3, [r4, #0]
 800fd16:	b103      	cbz	r3, 800fd1a <_close_r+0x1a>
 800fd18:	602b      	str	r3, [r5, #0]
 800fd1a:	bd38      	pop	{r3, r4, r5, pc}
 800fd1c:	20008234 	.word	0x20008234

0800fd20 <__sflush_r>:
 800fd20:	898a      	ldrh	r2, [r1, #12]
 800fd22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd26:	4605      	mov	r5, r0
 800fd28:	0710      	lsls	r0, r2, #28
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	d458      	bmi.n	800fde0 <__sflush_r+0xc0>
 800fd2e:	684b      	ldr	r3, [r1, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	dc05      	bgt.n	800fd40 <__sflush_r+0x20>
 800fd34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	dc02      	bgt.n	800fd40 <__sflush_r+0x20>
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd42:	2e00      	cmp	r6, #0
 800fd44:	d0f9      	beq.n	800fd3a <__sflush_r+0x1a>
 800fd46:	2300      	movs	r3, #0
 800fd48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd4c:	682f      	ldr	r7, [r5, #0]
 800fd4e:	6a21      	ldr	r1, [r4, #32]
 800fd50:	602b      	str	r3, [r5, #0]
 800fd52:	d032      	beq.n	800fdba <__sflush_r+0x9a>
 800fd54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd56:	89a3      	ldrh	r3, [r4, #12]
 800fd58:	075a      	lsls	r2, r3, #29
 800fd5a:	d505      	bpl.n	800fd68 <__sflush_r+0x48>
 800fd5c:	6863      	ldr	r3, [r4, #4]
 800fd5e:	1ac0      	subs	r0, r0, r3
 800fd60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd62:	b10b      	cbz	r3, 800fd68 <__sflush_r+0x48>
 800fd64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd66:	1ac0      	subs	r0, r0, r3
 800fd68:	2300      	movs	r3, #0
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd6e:	6a21      	ldr	r1, [r4, #32]
 800fd70:	4628      	mov	r0, r5
 800fd72:	47b0      	blx	r6
 800fd74:	1c43      	adds	r3, r0, #1
 800fd76:	89a3      	ldrh	r3, [r4, #12]
 800fd78:	d106      	bne.n	800fd88 <__sflush_r+0x68>
 800fd7a:	6829      	ldr	r1, [r5, #0]
 800fd7c:	291d      	cmp	r1, #29
 800fd7e:	d848      	bhi.n	800fe12 <__sflush_r+0xf2>
 800fd80:	4a29      	ldr	r2, [pc, #164]	; (800fe28 <__sflush_r+0x108>)
 800fd82:	40ca      	lsrs	r2, r1
 800fd84:	07d6      	lsls	r6, r2, #31
 800fd86:	d544      	bpl.n	800fe12 <__sflush_r+0xf2>
 800fd88:	2200      	movs	r2, #0
 800fd8a:	6062      	str	r2, [r4, #4]
 800fd8c:	04d9      	lsls	r1, r3, #19
 800fd8e:	6922      	ldr	r2, [r4, #16]
 800fd90:	6022      	str	r2, [r4, #0]
 800fd92:	d504      	bpl.n	800fd9e <__sflush_r+0x7e>
 800fd94:	1c42      	adds	r2, r0, #1
 800fd96:	d101      	bne.n	800fd9c <__sflush_r+0x7c>
 800fd98:	682b      	ldr	r3, [r5, #0]
 800fd9a:	b903      	cbnz	r3, 800fd9e <__sflush_r+0x7e>
 800fd9c:	6560      	str	r0, [r4, #84]	; 0x54
 800fd9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fda0:	602f      	str	r7, [r5, #0]
 800fda2:	2900      	cmp	r1, #0
 800fda4:	d0c9      	beq.n	800fd3a <__sflush_r+0x1a>
 800fda6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdaa:	4299      	cmp	r1, r3
 800fdac:	d002      	beq.n	800fdb4 <__sflush_r+0x94>
 800fdae:	4628      	mov	r0, r5
 800fdb0:	f7ff f9be 	bl	800f130 <_free_r>
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	6360      	str	r0, [r4, #52]	; 0x34
 800fdb8:	e7c0      	b.n	800fd3c <__sflush_r+0x1c>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	47b0      	blx	r6
 800fdc0:	1c41      	adds	r1, r0, #1
 800fdc2:	d1c8      	bne.n	800fd56 <__sflush_r+0x36>
 800fdc4:	682b      	ldr	r3, [r5, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d0c5      	beq.n	800fd56 <__sflush_r+0x36>
 800fdca:	2b1d      	cmp	r3, #29
 800fdcc:	d001      	beq.n	800fdd2 <__sflush_r+0xb2>
 800fdce:	2b16      	cmp	r3, #22
 800fdd0:	d101      	bne.n	800fdd6 <__sflush_r+0xb6>
 800fdd2:	602f      	str	r7, [r5, #0]
 800fdd4:	e7b1      	b.n	800fd3a <__sflush_r+0x1a>
 800fdd6:	89a3      	ldrh	r3, [r4, #12]
 800fdd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fddc:	81a3      	strh	r3, [r4, #12]
 800fdde:	e7ad      	b.n	800fd3c <__sflush_r+0x1c>
 800fde0:	690f      	ldr	r7, [r1, #16]
 800fde2:	2f00      	cmp	r7, #0
 800fde4:	d0a9      	beq.n	800fd3a <__sflush_r+0x1a>
 800fde6:	0793      	lsls	r3, r2, #30
 800fde8:	680e      	ldr	r6, [r1, #0]
 800fdea:	bf08      	it	eq
 800fdec:	694b      	ldreq	r3, [r1, #20]
 800fdee:	600f      	str	r7, [r1, #0]
 800fdf0:	bf18      	it	ne
 800fdf2:	2300      	movne	r3, #0
 800fdf4:	eba6 0807 	sub.w	r8, r6, r7
 800fdf8:	608b      	str	r3, [r1, #8]
 800fdfa:	f1b8 0f00 	cmp.w	r8, #0
 800fdfe:	dd9c      	ble.n	800fd3a <__sflush_r+0x1a>
 800fe00:	4643      	mov	r3, r8
 800fe02:	463a      	mov	r2, r7
 800fe04:	6a21      	ldr	r1, [r4, #32]
 800fe06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe08:	4628      	mov	r0, r5
 800fe0a:	47b0      	blx	r6
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	dc06      	bgt.n	800fe1e <__sflush_r+0xfe>
 800fe10:	89a3      	ldrh	r3, [r4, #12]
 800fe12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe16:	81a3      	strh	r3, [r4, #12]
 800fe18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe1c:	e78e      	b.n	800fd3c <__sflush_r+0x1c>
 800fe1e:	4407      	add	r7, r0
 800fe20:	eba8 0800 	sub.w	r8, r8, r0
 800fe24:	e7e9      	b.n	800fdfa <__sflush_r+0xda>
 800fe26:	bf00      	nop
 800fe28:	20400001 	.word	0x20400001

0800fe2c <_fflush_r>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	690b      	ldr	r3, [r1, #16]
 800fe30:	4605      	mov	r5, r0
 800fe32:	460c      	mov	r4, r1
 800fe34:	b1db      	cbz	r3, 800fe6e <_fflush_r+0x42>
 800fe36:	b118      	cbz	r0, 800fe40 <_fflush_r+0x14>
 800fe38:	6983      	ldr	r3, [r0, #24]
 800fe3a:	b90b      	cbnz	r3, 800fe40 <_fflush_r+0x14>
 800fe3c:	f7ff f8e6 	bl	800f00c <__sinit>
 800fe40:	4b0c      	ldr	r3, [pc, #48]	; (800fe74 <_fflush_r+0x48>)
 800fe42:	429c      	cmp	r4, r3
 800fe44:	d109      	bne.n	800fe5a <_fflush_r+0x2e>
 800fe46:	686c      	ldr	r4, [r5, #4]
 800fe48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe4c:	b17b      	cbz	r3, 800fe6e <_fflush_r+0x42>
 800fe4e:	4621      	mov	r1, r4
 800fe50:	4628      	mov	r0, r5
 800fe52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe56:	f7ff bf63 	b.w	800fd20 <__sflush_r>
 800fe5a:	4b07      	ldr	r3, [pc, #28]	; (800fe78 <_fflush_r+0x4c>)
 800fe5c:	429c      	cmp	r4, r3
 800fe5e:	d101      	bne.n	800fe64 <_fflush_r+0x38>
 800fe60:	68ac      	ldr	r4, [r5, #8]
 800fe62:	e7f1      	b.n	800fe48 <_fflush_r+0x1c>
 800fe64:	4b05      	ldr	r3, [pc, #20]	; (800fe7c <_fflush_r+0x50>)
 800fe66:	429c      	cmp	r4, r3
 800fe68:	bf08      	it	eq
 800fe6a:	68ec      	ldreq	r4, [r5, #12]
 800fe6c:	e7ec      	b.n	800fe48 <_fflush_r+0x1c>
 800fe6e:	2000      	movs	r0, #0
 800fe70:	bd38      	pop	{r3, r4, r5, pc}
 800fe72:	bf00      	nop
 800fe74:	080128a0 	.word	0x080128a0
 800fe78:	080128c0 	.word	0x080128c0
 800fe7c:	08012880 	.word	0x08012880

0800fe80 <_lseek_r>:
 800fe80:	b538      	push	{r3, r4, r5, lr}
 800fe82:	4c07      	ldr	r4, [pc, #28]	; (800fea0 <_lseek_r+0x20>)
 800fe84:	4605      	mov	r5, r0
 800fe86:	4608      	mov	r0, r1
 800fe88:	4611      	mov	r1, r2
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	6022      	str	r2, [r4, #0]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	f000 f902 	bl	8010098 <_lseek>
 800fe94:	1c43      	adds	r3, r0, #1
 800fe96:	d102      	bne.n	800fe9e <_lseek_r+0x1e>
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	b103      	cbz	r3, 800fe9e <_lseek_r+0x1e>
 800fe9c:	602b      	str	r3, [r5, #0]
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
 800fea0:	20008234 	.word	0x20008234

0800fea4 <__swhatbuf_r>:
 800fea4:	b570      	push	{r4, r5, r6, lr}
 800fea6:	460e      	mov	r6, r1
 800fea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feac:	2900      	cmp	r1, #0
 800feae:	b096      	sub	sp, #88	; 0x58
 800feb0:	4614      	mov	r4, r2
 800feb2:	461d      	mov	r5, r3
 800feb4:	da07      	bge.n	800fec6 <__swhatbuf_r+0x22>
 800feb6:	2300      	movs	r3, #0
 800feb8:	602b      	str	r3, [r5, #0]
 800feba:	89b3      	ldrh	r3, [r6, #12]
 800febc:	061a      	lsls	r2, r3, #24
 800febe:	d410      	bmi.n	800fee2 <__swhatbuf_r+0x3e>
 800fec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fec4:	e00e      	b.n	800fee4 <__swhatbuf_r+0x40>
 800fec6:	466a      	mov	r2, sp
 800fec8:	f000 f8a4 	bl	8010014 <_fstat_r>
 800fecc:	2800      	cmp	r0, #0
 800fece:	dbf2      	blt.n	800feb6 <__swhatbuf_r+0x12>
 800fed0:	9a01      	ldr	r2, [sp, #4]
 800fed2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fed6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800feda:	425a      	negs	r2, r3
 800fedc:	415a      	adcs	r2, r3
 800fede:	602a      	str	r2, [r5, #0]
 800fee0:	e7ee      	b.n	800fec0 <__swhatbuf_r+0x1c>
 800fee2:	2340      	movs	r3, #64	; 0x40
 800fee4:	2000      	movs	r0, #0
 800fee6:	6023      	str	r3, [r4, #0]
 800fee8:	b016      	add	sp, #88	; 0x58
 800feea:	bd70      	pop	{r4, r5, r6, pc}

0800feec <__smakebuf_r>:
 800feec:	898b      	ldrh	r3, [r1, #12]
 800feee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fef0:	079d      	lsls	r5, r3, #30
 800fef2:	4606      	mov	r6, r0
 800fef4:	460c      	mov	r4, r1
 800fef6:	d507      	bpl.n	800ff08 <__smakebuf_r+0x1c>
 800fef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fefc:	6023      	str	r3, [r4, #0]
 800fefe:	6123      	str	r3, [r4, #16]
 800ff00:	2301      	movs	r3, #1
 800ff02:	6163      	str	r3, [r4, #20]
 800ff04:	b002      	add	sp, #8
 800ff06:	bd70      	pop	{r4, r5, r6, pc}
 800ff08:	ab01      	add	r3, sp, #4
 800ff0a:	466a      	mov	r2, sp
 800ff0c:	f7ff ffca 	bl	800fea4 <__swhatbuf_r>
 800ff10:	9900      	ldr	r1, [sp, #0]
 800ff12:	4605      	mov	r5, r0
 800ff14:	4630      	mov	r0, r6
 800ff16:	f7ff f959 	bl	800f1cc <_malloc_r>
 800ff1a:	b948      	cbnz	r0, 800ff30 <__smakebuf_r+0x44>
 800ff1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff20:	059a      	lsls	r2, r3, #22
 800ff22:	d4ef      	bmi.n	800ff04 <__smakebuf_r+0x18>
 800ff24:	f023 0303 	bic.w	r3, r3, #3
 800ff28:	f043 0302 	orr.w	r3, r3, #2
 800ff2c:	81a3      	strh	r3, [r4, #12]
 800ff2e:	e7e3      	b.n	800fef8 <__smakebuf_r+0xc>
 800ff30:	4b0d      	ldr	r3, [pc, #52]	; (800ff68 <__smakebuf_r+0x7c>)
 800ff32:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	6020      	str	r0, [r4, #0]
 800ff38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff3c:	81a3      	strh	r3, [r4, #12]
 800ff3e:	9b00      	ldr	r3, [sp, #0]
 800ff40:	6163      	str	r3, [r4, #20]
 800ff42:	9b01      	ldr	r3, [sp, #4]
 800ff44:	6120      	str	r0, [r4, #16]
 800ff46:	b15b      	cbz	r3, 800ff60 <__smakebuf_r+0x74>
 800ff48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff4c:	4630      	mov	r0, r6
 800ff4e:	f000 f873 	bl	8010038 <_isatty_r>
 800ff52:	b128      	cbz	r0, 800ff60 <__smakebuf_r+0x74>
 800ff54:	89a3      	ldrh	r3, [r4, #12]
 800ff56:	f023 0303 	bic.w	r3, r3, #3
 800ff5a:	f043 0301 	orr.w	r3, r3, #1
 800ff5e:	81a3      	strh	r3, [r4, #12]
 800ff60:	89a3      	ldrh	r3, [r4, #12]
 800ff62:	431d      	orrs	r5, r3
 800ff64:	81a5      	strh	r5, [r4, #12]
 800ff66:	e7cd      	b.n	800ff04 <__smakebuf_r+0x18>
 800ff68:	0800efd5 	.word	0x0800efd5

0800ff6c <memmove>:
 800ff6c:	4288      	cmp	r0, r1
 800ff6e:	b510      	push	{r4, lr}
 800ff70:	eb01 0302 	add.w	r3, r1, r2
 800ff74:	d807      	bhi.n	800ff86 <memmove+0x1a>
 800ff76:	1e42      	subs	r2, r0, #1
 800ff78:	4299      	cmp	r1, r3
 800ff7a:	d00a      	beq.n	800ff92 <memmove+0x26>
 800ff7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff80:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ff84:	e7f8      	b.n	800ff78 <memmove+0xc>
 800ff86:	4283      	cmp	r3, r0
 800ff88:	d9f5      	bls.n	800ff76 <memmove+0xa>
 800ff8a:	1881      	adds	r1, r0, r2
 800ff8c:	1ad2      	subs	r2, r2, r3
 800ff8e:	42d3      	cmn	r3, r2
 800ff90:	d100      	bne.n	800ff94 <memmove+0x28>
 800ff92:	bd10      	pop	{r4, pc}
 800ff94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff98:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ff9c:	e7f7      	b.n	800ff8e <memmove+0x22>

0800ff9e <__malloc_lock>:
 800ff9e:	4770      	bx	lr

0800ffa0 <__malloc_unlock>:
 800ffa0:	4770      	bx	lr

0800ffa2 <_realloc_r>:
 800ffa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffa4:	4607      	mov	r7, r0
 800ffa6:	4614      	mov	r4, r2
 800ffa8:	460e      	mov	r6, r1
 800ffaa:	b921      	cbnz	r1, 800ffb6 <_realloc_r+0x14>
 800ffac:	4611      	mov	r1, r2
 800ffae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ffb2:	f7ff b90b 	b.w	800f1cc <_malloc_r>
 800ffb6:	b922      	cbnz	r2, 800ffc2 <_realloc_r+0x20>
 800ffb8:	f7ff f8ba 	bl	800f130 <_free_r>
 800ffbc:	4625      	mov	r5, r4
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffc2:	f000 f849 	bl	8010058 <_malloc_usable_size_r>
 800ffc6:	42a0      	cmp	r0, r4
 800ffc8:	d20f      	bcs.n	800ffea <_realloc_r+0x48>
 800ffca:	4621      	mov	r1, r4
 800ffcc:	4638      	mov	r0, r7
 800ffce:	f7ff f8fd 	bl	800f1cc <_malloc_r>
 800ffd2:	4605      	mov	r5, r0
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	d0f2      	beq.n	800ffbe <_realloc_r+0x1c>
 800ffd8:	4631      	mov	r1, r6
 800ffda:	4622      	mov	r2, r4
 800ffdc:	f7fe ff3d 	bl	800ee5a <memcpy>
 800ffe0:	4631      	mov	r1, r6
 800ffe2:	4638      	mov	r0, r7
 800ffe4:	f7ff f8a4 	bl	800f130 <_free_r>
 800ffe8:	e7e9      	b.n	800ffbe <_realloc_r+0x1c>
 800ffea:	4635      	mov	r5, r6
 800ffec:	e7e7      	b.n	800ffbe <_realloc_r+0x1c>
	...

0800fff0 <_read_r>:
 800fff0:	b538      	push	{r3, r4, r5, lr}
 800fff2:	4c07      	ldr	r4, [pc, #28]	; (8010010 <_read_r+0x20>)
 800fff4:	4605      	mov	r5, r0
 800fff6:	4608      	mov	r0, r1
 800fff8:	4611      	mov	r1, r2
 800fffa:	2200      	movs	r2, #0
 800fffc:	6022      	str	r2, [r4, #0]
 800fffe:	461a      	mov	r2, r3
 8010000:	f000 f852 	bl	80100a8 <_read>
 8010004:	1c43      	adds	r3, r0, #1
 8010006:	d102      	bne.n	801000e <_read_r+0x1e>
 8010008:	6823      	ldr	r3, [r4, #0]
 801000a:	b103      	cbz	r3, 801000e <_read_r+0x1e>
 801000c:	602b      	str	r3, [r5, #0]
 801000e:	bd38      	pop	{r3, r4, r5, pc}
 8010010:	20008234 	.word	0x20008234

08010014 <_fstat_r>:
 8010014:	b538      	push	{r3, r4, r5, lr}
 8010016:	4c07      	ldr	r4, [pc, #28]	; (8010034 <_fstat_r+0x20>)
 8010018:	2300      	movs	r3, #0
 801001a:	4605      	mov	r5, r0
 801001c:	4608      	mov	r0, r1
 801001e:	4611      	mov	r1, r2
 8010020:	6023      	str	r3, [r4, #0]
 8010022:	f000 f829 	bl	8010078 <_fstat>
 8010026:	1c43      	adds	r3, r0, #1
 8010028:	d102      	bne.n	8010030 <_fstat_r+0x1c>
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	b103      	cbz	r3, 8010030 <_fstat_r+0x1c>
 801002e:	602b      	str	r3, [r5, #0]
 8010030:	bd38      	pop	{r3, r4, r5, pc}
 8010032:	bf00      	nop
 8010034:	20008234 	.word	0x20008234

08010038 <_isatty_r>:
 8010038:	b538      	push	{r3, r4, r5, lr}
 801003a:	4c06      	ldr	r4, [pc, #24]	; (8010054 <_isatty_r+0x1c>)
 801003c:	2300      	movs	r3, #0
 801003e:	4605      	mov	r5, r0
 8010040:	4608      	mov	r0, r1
 8010042:	6023      	str	r3, [r4, #0]
 8010044:	f000 f820 	bl	8010088 <_isatty>
 8010048:	1c43      	adds	r3, r0, #1
 801004a:	d102      	bne.n	8010052 <_isatty_r+0x1a>
 801004c:	6823      	ldr	r3, [r4, #0]
 801004e:	b103      	cbz	r3, 8010052 <_isatty_r+0x1a>
 8010050:	602b      	str	r3, [r5, #0]
 8010052:	bd38      	pop	{r3, r4, r5, pc}
 8010054:	20008234 	.word	0x20008234

08010058 <_malloc_usable_size_r>:
 8010058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801005c:	1f18      	subs	r0, r3, #4
 801005e:	2b00      	cmp	r3, #0
 8010060:	bfbc      	itt	lt
 8010062:	580b      	ldrlt	r3, [r1, r0]
 8010064:	18c0      	addlt	r0, r0, r3
 8010066:	4770      	bx	lr

08010068 <_close>:
 8010068:	4b02      	ldr	r3, [pc, #8]	; (8010074 <_close+0xc>)
 801006a:	2258      	movs	r2, #88	; 0x58
 801006c:	601a      	str	r2, [r3, #0]
 801006e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010072:	4770      	bx	lr
 8010074:	20008234 	.word	0x20008234

08010078 <_fstat>:
 8010078:	4b02      	ldr	r3, [pc, #8]	; (8010084 <_fstat+0xc>)
 801007a:	2258      	movs	r2, #88	; 0x58
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010082:	4770      	bx	lr
 8010084:	20008234 	.word	0x20008234

08010088 <_isatty>:
 8010088:	4b02      	ldr	r3, [pc, #8]	; (8010094 <_isatty+0xc>)
 801008a:	2258      	movs	r2, #88	; 0x58
 801008c:	601a      	str	r2, [r3, #0]
 801008e:	2000      	movs	r0, #0
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop
 8010094:	20008234 	.word	0x20008234

08010098 <_lseek>:
 8010098:	4b02      	ldr	r3, [pc, #8]	; (80100a4 <_lseek+0xc>)
 801009a:	2258      	movs	r2, #88	; 0x58
 801009c:	601a      	str	r2, [r3, #0]
 801009e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100a2:	4770      	bx	lr
 80100a4:	20008234 	.word	0x20008234

080100a8 <_read>:
 80100a8:	4b02      	ldr	r3, [pc, #8]	; (80100b4 <_read+0xc>)
 80100aa:	2258      	movs	r2, #88	; 0x58
 80100ac:	601a      	str	r2, [r3, #0]
 80100ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100b2:	4770      	bx	lr
 80100b4:	20008234 	.word	0x20008234

080100b8 <_sbrk>:
 80100b8:	4b04      	ldr	r3, [pc, #16]	; (80100cc <_sbrk+0x14>)
 80100ba:	6819      	ldr	r1, [r3, #0]
 80100bc:	4602      	mov	r2, r0
 80100be:	b909      	cbnz	r1, 80100c4 <_sbrk+0xc>
 80100c0:	4903      	ldr	r1, [pc, #12]	; (80100d0 <_sbrk+0x18>)
 80100c2:	6019      	str	r1, [r3, #0]
 80100c4:	6818      	ldr	r0, [r3, #0]
 80100c6:	4402      	add	r2, r0
 80100c8:	601a      	str	r2, [r3, #0]
 80100ca:	4770      	bx	lr
 80100cc:	20004a70 	.word	0x20004a70
 80100d0:	2000b428 	.word	0x2000b428

080100d4 <_write>:
 80100d4:	4b02      	ldr	r3, [pc, #8]	; (80100e0 <_write+0xc>)
 80100d6:	2258      	movs	r2, #88	; 0x58
 80100d8:	601a      	str	r2, [r3, #0]
 80100da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100de:	4770      	bx	lr
 80100e0:	20008234 	.word	0x20008234

080100e4 <_init>:
 80100e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e6:	bf00      	nop
 80100e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ea:	bc08      	pop	{r3}
 80100ec:	469e      	mov	lr, r3
 80100ee:	4770      	bx	lr

080100f0 <_fini>:
 80100f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100f2:	bf00      	nop
 80100f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100f6:	bc08      	pop	{r3}
 80100f8:	469e      	mov	lr, r3
 80100fa:	4770      	bx	lr
